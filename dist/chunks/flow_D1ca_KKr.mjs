import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n<h2 id=\"debounce\">Debounce</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.debounce.html\"><code>debounce</code></a> reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given <code>timeoutMs</code>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { debounce } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Signature:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// debounce(</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  timeoutMs:number</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// );</span></span>\n<span class=\"line\"></span></code></pre>\n<p>For example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> resizeDebounced</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> debounce</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">elapsedMs</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">...</span><span style=\"color:#FFAB70\">evtArgs</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">   // Handle event</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">   // Use original event args if we want</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">   const</span><span style=\"color:#79B8FF\"> resizeArgs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> evtArgs[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">window.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`resize`</span><span style=\"color:#E1E4E8\">, resizeDebounced);</span></span>\n<span class=\"line\"></span></code></pre>\n<demo-element title=\"Debounce pointermove event\" src=\"/flow/debounce/\">\n<p>Note in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider <a href=\"#throttle\">throttle</a>.</p>\n<h2 id=\"throttle\">Throttle</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.throttle.html\"><code>throttle</code></a> reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.</p>\n<p>This is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with <em>throttle</em> and an appropriate <code>intervalMs</code>, you might avoid this.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { throttle } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Signature:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// throttle(</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  timeoutMs:number</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// );</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In this scenario, the event handler will run at maximum rate of 500ms.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> resizeThrottled</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> throttle</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">elapsedMs</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">...</span><span style=\"color:#FFAB70\">evtArgs</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">   // Handle event</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">   // Use original event data if we need to</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">   const</span><span style=\"color:#79B8FF\"> resizeEvent</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> evtArgs[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">window.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`resize`</span><span style=\"color:#E1E4E8\">, resizeThrottled);</span></span>\n<span class=\"line\"></span></code></pre>\n<demo-element title=\"Throttle pointer move events\" src=\"/flow/throttle/\">\n<p><code>throttle</code> handles an initial event (when nothing has happened before), and <em>continue</em> to handle events, albeit at a reduced rate. <code>debounce</code>, in comparison, only handles the first event after <code>timeoutMs</code> has elapsed. And if a new event comes in the meantime, the timer is reset again. It’s only when there is a break in the events that <code>debounce</code> will run.</p>\n<p>It’s also possible to use <code>throttle</code> and <code>debounce</code> without events being involved.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Some function that we want slowed execution</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> reset</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#6A737D\">/* do something */</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set up the throttle one time</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> resetThrottled</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> throttle</span><span style=\"color:#E1E4E8\">(reset, </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...and now call `resetThrottled()` whenever you like, </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// as often as you like. `reset` will only be invoked every 200ms</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">resetThrottled</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"run-once\">Run once</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.runOnce.html\"><code>runOnce</code></a> wraps the provided function, allowing it to execute only once.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> init</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> runOnce</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">   // do something we only want to happen once</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">init</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// will run the code once</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">init</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// won't do anything</span></span>\n<span class=\"line\"></span></code></pre></demo-element></demo-element>";

				const frontmatter = {"title":"Flow control","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../components/DemoElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/flow/flow.md";
				const url = "/flow/flow";
				function rawContent() {
					return "\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\n\n## Debounce\n\n[`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given `timeoutMs`.\n\n```js\nimport { debounce } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Signature:\n// debounce(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nFor example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.\n\n```js\nconst resizeDebounced = debounce((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event args if we want\n   const resizeArgs = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeDebounced);\n```\n\n<demo-element title=\"Debounce pointermove event\" src=\"/flow/debounce/\" />\n\nNote in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider [throttle](#throttle).\n\n## Throttle\n\n[`throttle`](https://clinth.github.io/ixfx/functions/Flow.throttle.html) reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.\n\nThis is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with _throttle_ and an appropriate `intervalMs`, you might avoid this.\n\n```js\nimport { throttle } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Signature:\n// throttle(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nIn this scenario, the event handler will run at maximum rate of 500ms.\n\n```js\nconst resizeThrottled = throttle((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event data if we need to\n   const resizeEvent = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeThrottled);\n```\n\n<demo-element title=\"Throttle pointer move events\" src=\"/flow/throttle/\" />\n\n`throttle` handles an initial event (when nothing has happened before), and _continue_ to handle events, albeit at a reduced rate. `debounce`, in comparison, only handles the first event after `timeoutMs` has elapsed. And if a new event comes in the meantime, the timer is reset again. It's only when there is a break in the events that `debounce` will run.\n\nIt's also possible to use `throttle` and `debounce` without events being involved.\n\n```js\n// Some function that we want slowed execution\nconst reset = () => { /* do something */ }\n\n// Set up the throttle one time\nconst resetThrottled = throttle(reset, 200);\n\n// ...and now call `resetThrottled()` whenever you like, \n// as often as you like. `reset` will only be invoked every 200ms\nresetThrottled();\n```\n\n\n## Run once\n\n[`runOnce`](https://clinth.github.io/ixfx/functions/Flow.runOnce.html) wraps the provided function, allowing it to execute only once.\n\n```js\nconst init = runOnce(() => {\n   // do something we only want to happen once\n});\ninit(); // will run the code once\ninit(); // won't do anything\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"debounce","text":"Debounce"},{"depth":2,"slug":"throttle","text":"Throttle"},{"depth":2,"slug":"run-once","text":"Run once"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
