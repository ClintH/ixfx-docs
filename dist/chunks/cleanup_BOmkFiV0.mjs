import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n</script>\n<p>Data often needs to be refined at some point. This can also have the role of ‘sanity checking’, making sure data is within a range or ‘shape’ that later processes expect.</p>\n<p>This goes hand-in-hand with <a href=\"../../data/normalising/\">normalising</a>, which aims to convert data to a consistent scale.</p>\n<h2 id=\"numeric-data\">Numeric data</h2>\n<p>Useful in-built JS functions:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Math.abs makes numbers positive</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">abs</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// 100</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get the sign</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">sign</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// -1;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">sign</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Round up or down</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">ceil</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">2.5</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// 3</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">floor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">2.5</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Round to closest integer</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">round</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">2.5</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert a string to an integer</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">parseInt</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`10.2`</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// 10</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert a string to a float</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">parseFloat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`10.2`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 10.2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Largest of parameters</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">max</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 100</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Smallest of parameters</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Math.</span><span style=\"color:#B392F0\">min</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 10</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"clamping\">Clamping</h3>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.clamp.html\"><code>clamp</code></a> guarantees the return value is within the provided range.</p>\n<p>For example, maybe you’re computing a relative value based on some sensor input, assuming that 500 is the maximum. We want a percentage scale from 0..1:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> sensorValue </span><span style=\"color:#F97583\">/</span><span style=\"color:#79B8FF\"> 500</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But if <code>sensorValue</code> rises above 500 unexpectedly, <code>v</code> will be greater than 1 (ie. more than 100%). Other parts of our code might purposefully be able to handle this, but there are times where exceeding 100% cannot be permitted. Likewise, we might not want <code>v</code> to be less than 0% because of assumptions made in other parts of our code.</p>\n<p>To do this manually, we might write:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> v </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> sensorValue </span><span style=\"color:#F97583\">/</span><span style=\"color:#79B8FF\"> 500</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> (v </span><span style=\"color:#F97583\">></span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#E1E4E8\">) v </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">else</span><span style=\"color:#F97583\"> if</span><span style=\"color:#E1E4E8\"> (v </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">) v </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Now v is guaranteed to be between 0..1, inclusive</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That is all that <code>clamp</code> does. By default it uses a minimum of 0, a maximum of 1:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { clamp } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// 0.5</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">);     </span><span style=\"color:#6A737D\">// 1.0</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">0.2</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 0.0</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Revisiting the earlier example, we can scale a sensor value which we expect to be on the range of 0..500 and clamp it to be sure we’re always within 0..1:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { clamp, scale } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">250</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">)); </span><span style=\"color:#6A737D\">// 0.5</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">)); </span><span style=\"color:#6A737D\">// 1.0</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">505</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">)); </span><span style=\"color:#6A737D\">// 1.0 - although out of expected range</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">));  </span><span style=\"color:#6A737D\">// 0.0 - although out of expected range</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A custom output range can be used as well:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// clamp(value:number, min:number, max:number):number</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 50</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you are working with bipolar values (-1..1), you can use the <a href=\"https://clinth.github.io/ixfx/modules/Data.Bipolar.html\">Data.Bipolar</a> module.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1.1</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.9</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 0.9</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1.1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// -1</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"wrap\">Wrap</h3>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.wrapInteger.html\"><code>wrapInteger</code></a> wraps an integer (ie. whole) number around a range, by default 0-360 (ie. degrees). These kinds of ranges logically wrap around continuously. Stepping past 359 degrees takes us to back to 0. And stepping -10 from 0 shouldn’t yield -10, but 350.</p>\n<p><code>wrap</code> does this arithmetic for you.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { wrapInteger } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrapInteger</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 200 - fine, within range</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrapInteger</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">400</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 40 - wraps past 360 to 40</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Numbers below the range are likewise wrapped:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrapInteger</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">90</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 270</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A custom range can be provided for wrapping: <code>wrapInteger(value:number, min:number, max:number):number</code>. The minimum is inclusive, the maximum is exclusive.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrapInteger</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 25</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Max value is exlusive, so it wraps to min:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrapInteger</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 20</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.wrap.html\"><code>wrap</code></a> is the same, but doesn’t enforce any integer limitations.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { wrap } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrap</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10.5</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0.5;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">wrap</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 9.5</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"sampling\">Sampling</h2>\n<p>ixfx’s <a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html\"><code>Arrays.sample</code></a> makes sub-sampling of a data set. This is useful when you have a lot of data and it would be too costly in terms of execution speed to process each item. For example, perhaps a sensor is producing too much data to process in each frame of animation.</p>\n<p>Throwing away data can of course impact precision, but depending on the source of data and how you’re working with it, this may not be a problem.</p>\n<p>It’s possible to get a percentage of the input data if a parameter of 0..1 is passed in. In this case, 0.5:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#2</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { sample } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/arrays.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> list</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">6</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">7</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">8</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">9</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get 50% of input data</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> sub1</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> sample</span><span style=\"color:#E1E4E8\">(list, </span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: [2, 4, 6, 8, 10]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or if a whole number is provided, it will return data of every <em>x</em> steps:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#2</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get every third</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> sub2</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> sample</span><span style=\"color:#E1E4E8\">(list, </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: [3, 6, 9]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See also: <a href=\"https://clinth.github.io/ixfx/modules/Generators.Sync.html\">Generators.Sync module</a> contains various functions for processing a stream of data from a generator.</p>\n<h2 id=\"objects\">Objects</h2>\n<h3 id=\"does-it-contain-a-field\">Does it contain a field?</h3>\n<p>Check if an object has a field using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code></a>. In the example below, we print one message if the object has the field <code>humidity</code>, another one if it doesn’t.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { temp: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, humidity: </span><span style=\"color:#79B8FF\">0.8</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> b</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { temp: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> test</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">v</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#9ECBFF\">`humidity`</span><span style=\"color:#F97583\"> in</span><span style=\"color:#E1E4E8\"> v) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Temp: ${</span><span style=\"color:#E1E4E8\">v</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">temp</span><span style=\"color:#9ECBFF\">} humidity: ${</span><span style=\"color:#E1E4E8\">v</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">humidity</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  } </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Temp: ${</span><span style=\"color:#E1E4E8\">v</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">temp</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">test</span><span style=\"color:#E1E4E8\">(a);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">test</span><span style=\"color:#E1E4E8\">(b);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"type-checking\">Type checking</h2>\n<p>Check the type of a variable with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code></a>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">typeof</span><span style=\"color:#9ECBFF\"> \"hello\"</span><span style=\"color:#E1E4E8\">;   </span><span style=\"color:#6A737D\">// \"string\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">typeof</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">;         </span><span style=\"color:#6A737D\">// \"number\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">typeof</span><span style=\"color:#E1E4E8\"> {</span><span style=\"color:#B392F0\">temp</span><span style=\"color:#E1E4E8\">:</span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">}; </span><span style=\"color:#6A737D\">// \"object\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In action, compare the result of <code>typeof</code> with the name of a type:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">typeof</span><span style=\"color:#E1E4E8\"> v </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> `string`</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // variable is a string</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"more-functions\">More functions</h2>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.average.html\"><code>Numbers.average</code></a> - return the average of a set of numbers</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.filter.html\"><code>Numbers.filter</code></a> - for an input set of values, only yields those which are numbers</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.isApproximately.html\"><code>Numbers.isApproximately</code></a> - is this number roughly close to this other number?</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.isValid.html\"><code>Numbers.isValid</code></a> - is this number a proper number?</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.max.html\"><code>Numbers.max</code></a>/<a href=\"https://clinth.github.io/ixfx/functions/Numbers.min.html\"><code>Numbers.min</code></a> - returns max/min from a set, ignoring things that aren’t numbers</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.quantiseEvery.html\"><code>Numbers.quantiseEvery</code></a> - rounds a value by step size</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.round.html\"><code>Numbers.round</code></a> - round a number to specified decimal places</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Numbers.total.html\"><code>Numbers.total</code></a> - add up a set of values, ignoring those which aren’t numbers</li>\n</ul>\n<p>See also:</p>\n<ul>\n<li>Module: <a href=\"https://clinth.github.io/ixfx/modules/Data.Bipolar.html\">Data.Bipolar</a></li>\n</ul>";

				const frontmatter = {"title":"Clean up","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/cleanup.md";
				const url = "/data/cleanup";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n</script>\n\nData often needs to be refined at some point. This can also have the role of 'sanity checking', making sure data is within a range or 'shape' that later processes expect.\n\nThis goes hand-in-hand with [normalising](../../data/normalising/), which aims to convert data to a consistent scale.\n\n## Numeric data\n\nUseful in-built JS functions:\n\n```js\n// repl-pad\n// Math.abs makes numbers positive\nMath.abs(-100);   // 100\n\n// Get the sign\nMath.sign(-100);  // -1;\nMath.sign(100);   // 1\n\n// Round up or down\nMath.ceil(2.5);   // 3\nMath.floor(2.5);  // 2\n\n// Round to closest integer\nMath.round(2.5);  // 3\n\n// Convert a string to an integer\nparseInt(`10.2`);   // 10\n\n// Convert a string to a float\nparseFloat(`10.2`); // 10.2\n\n// Largest of parameters\nMath.max(10, 100); // 100\n\n// Smallest of parameters\nMath.min(10, 100); // 10\n```\n\n### Clamping\n\n[`clamp`](https://clinth.github.io/ixfx/functions/Data.clamp.html) guarantees the return value is within the provided range.\n\nFor example, maybe you're computing a relative value based on some sensor input, assuming that 500 is the maximum. We want a percentage scale from 0..1:\n\n```js\nconst v = sensorValue / 500;\n```\n\nBut if `sensorValue` rises above 500 unexpectedly, `v` will be greater than 1 (ie. more than 100%). Other parts of our code might purposefully be able to handle this, but there are times where exceeding 100% cannot be permitted. Likewise, we might not want `v` to be less than 0% because of assumptions made in other parts of our code.\n\nTo do this manually, we might write:\n\n```js\nlet v = sensorValue / 500;\nif (v > 1) v = 1;\nelse if (v < 0) v = 0;\n// Now v is guaranteed to be between 0..1, inclusive\n```\n\nThat is all that `clamp` does. By default it uses a minimum of 0, a maximum of 1:\n\n```js\n// repl-pad\nimport { clamp } from 'https://unpkg.com/ixfx/dist/data.js';\nclamp(0.5);   // 0.5\nclamp(2);     // 1.0\nclamp(-0.2);  // 0.0\n```\n\nRevisiting the earlier example, we can scale a sensor value which we expect to be on the range of 0..500 and clamp it to be sure we're always within 0..1:\n\n```js\n// repl-pad\nimport { clamp, scale } from 'https://unpkg.com/ixfx/dist/data.js';\nclamp(scale(250, 0, 500)); // 0.5\nclamp(scale(500, 0, 500)); // 1.0\nclamp(scale(505, 0, 500)); // 1.0 - although out of expected range\nclamp(scale(-1, 0, 500));  // 0.0 - although out of expected range\n```\n\nA custom output range can be used as well:\n\n```js\n// clamp(value:number, min:number, max:number):number\nclamp(30, 50, 100); // 50\n```\n\nIf you are working with bipolar values (-1..1), you can use the [Data.Bipolar](https://clinth.github.io/ixfx/modules/Data.Bipolar.html) module.\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\nBipolar.clamp(1.1);  // 1\nBipolar.clamp(0.9);  // 0.9\nBipolar.clamp(-1.1); // -1\n```\n\n### Wrap\n\n[`wrapInteger`](https://clinth.github.io/ixfx/functions/Data.wrapInteger.html) wraps an integer (ie. whole) number around a range, by default 0-360 (ie. degrees). These kinds of ranges logically wrap around continuously. Stepping past 359 degrees takes us to back to 0. And stepping -10 from 0 shouldn't yield -10, but 350.\n\n`wrap` does this arithmetic for you.\n\n```js\n// repl-pad#1\nimport { wrapInteger } from 'https://unpkg.com/ixfx/dist/data.js';\nwrapInteger(200); // 200 - fine, within range\nwrapInteger(400); // 40 - wraps past 360 to 40\n```\n\nNumbers below the range are likewise wrapped:\n\n```js\n// repl-pad#1\nwrapInteger(-90); // 270\n```\n\nA custom range can be provided for wrapping: `wrapInteger(value:number, min:number, max:number):number`. The minimum is inclusive, the maximum is exclusive.\n\n```js\n// repl-pad#1\nwrapInteger(5, 20, 30); // 25\n\n// Max value is exlusive, so it wraps to min:\nwrapInteger(30, 20, 30); // 20\n```\n\n\n[`wrap`](https://clinth.github.io/ixfx/functions/Data.wrap.html) is the same, but doesn't enforce any integer limitations.\n\n```js\n// repl-pad\nimport { wrap } from 'https://unpkg.com/ixfx/dist/data.js';\nwrap(10.5,0,10); // 0.5;\nwrap(-0.5,0,10); // 9.5\n```\n\n## Sampling\n\nixfx's [`Arrays.sample`](https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html) makes sub-sampling of a data set. This is useful when you have a lot of data and it would be too costly in terms of execution speed to process each item. For example, perhaps a sensor is producing too much data to process in each frame of animation.\n\nThrowing away data can of course impact precision, but depending on the source of data and how you're working with it, this may not be a problem.\n\nIt's possible to get a percentage of the input data if a parameter of 0..1 is passed in. In this case, 0.5:\n\n```js\n// repl-pad#2\nimport { sample } from 'https://unpkg.com/ixfx/dist/arrays.js';\n\nconst list = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\n\n// Get 50% of input data\nconst sub1 = sample(list, 0.5);\n// Yields: [2, 4, 6, 8, 10]\n```\n\nOr if a whole number is provided, it will return data of every _x_ steps:\n\n```js\n// repl-pad#2\n// Get every third\nconst sub2 = sample(list, 3);\n// Yields: [3, 6, 9]\n```\n\nSee also: [Generators.Sync module](https://clinth.github.io/ixfx/modules/Generators.Sync.html) contains various functions for processing a stream of data from a generator.\n\n## Objects\n\n### Does it contain a field?\nCheck if an object has a field using [`in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in). In the example below, we print one message if the object has the field `humidity`, another one if it doesn't.\n\n```js\n// repl-pad\nconst a = { temp: 10, humidity: 0.8 };\nconst b = { temp: 20 };\n\nconst test = (v) => {\n  if (`humidity` in v) {\n    console.log(`Temp: ${v.temp} humidity: ${v.humidity}`);\n  } else {\n    console.log(`Temp: ${v.temp}`);\n  }\n}\n\ntest(a);\ntest(b);\n```\n\n## Type checking\n\nCheck the type of a variable with [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):\n\n```js\n// repl-pad\ntypeof \"hello\";   // \"string\"\ntypeof 0;         // \"number\"\ntypeof {temp:20}; // \"object\"\n```\n\nIn action, compare the result of `typeof` with the name of a type:\n```js\nif (typeof v === `string`) {\n  // variable is a string\n}\n```\n\n## More functions\n\n* [`Numbers.average`](https://clinth.github.io/ixfx/functions/Numbers.average.html) - return the average of a set of numbers\n* [`Numbers.filter`](https://clinth.github.io/ixfx/functions/Numbers.filter.html) - for an input set of values, only yields those which are numbers\n* [`Numbers.isApproximately`](https://clinth.github.io/ixfx/functions/Numbers.isApproximately.html) - is this number roughly close to this other number?\n* [`Numbers.isValid`](https://clinth.github.io/ixfx/functions/Numbers.isValid.html) - is this number a proper number?\n* [`Numbers.max`](https://clinth.github.io/ixfx/functions/Numbers.max.html)/[`Numbers.min`](https://clinth.github.io/ixfx/functions/Numbers.min.html) - returns max/min from a set, ignoring things that aren't numbers\n* [`Numbers.quantiseEvery`](https://clinth.github.io/ixfx/functions/Numbers.quantiseEvery.html) - rounds a value by step size\n* [`Numbers.round`](https://clinth.github.io/ixfx/functions/Numbers.round.html) - round a number to specified decimal places\n* [`Numbers.total`](https://clinth.github.io/ixfx/functions/Numbers.total.html) - add up a set of values, ignoring those which aren't numbers\n\nSee also:\n* Module: [Data.Bipolar](https://clinth.github.io/ixfx/modules/Data.Bipolar.html)";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"numeric-data","text":"Numeric data"},{"depth":3,"slug":"clamping","text":"Clamping"},{"depth":3,"slug":"wrap","text":"Wrap"},{"depth":2,"slug":"sampling","text":"Sampling"},{"depth":2,"slug":"objects","text":"Objects"},{"depth":3,"slug":"does-it-contain-a-field","text":"Does it contain a field?"},{"depth":2,"slug":"type-checking","text":"Type checking"},{"depth":2,"slug":"more-functions","text":"More functions"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
