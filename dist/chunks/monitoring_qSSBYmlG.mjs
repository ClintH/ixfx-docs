import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\nimport '/src/components/ReplPad';\n</script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow</a>.<a href=\"https://clinth.github.io/ixfx/modules/Flow.Elapsed.html\">Elapsed</a> module</li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n<p>The <a href=\"https://clinth.github.io/ixfx/modules/Flow.Elapsed.html\"><code>Elapsed</code></a> module has a few functions for tracking passage of time.</p>\n<p>An overview:</p>\n<ul>\n<li>Elapsed.since(): time from a start point</li>\n<li>Elapsed.interval(): time from start point, and between each subsequent call</li>\n<li>Elapsed.once(): one-time measurement from a start point</li>\n</ul>\n<h2 id=\"elapsed\">Elapsed</h2>\n<h3 id=\"since\">Since</h3>\n<p><code>since</code> yields how much time (in milliseconds) has passed since first invoked. This is the fixed reference point all later invocations are compared to.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Elapsed } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// A. Start monitoring elapsed time</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> elapsed</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Elapsed.</span><span style=\"color:#B392F0\">since</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...some time later ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// B. Elapsed time since (A)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...some time later ...</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// C. Elapsed time since (A)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Each call to <code>elapsed()</code> reports the current time, it will continually change.</p>\n<h3 id=\"interval\">Interval</h3>\n<p><code>Elapsed.interval</code> reports the time from the first initialisation and each subsequent call. Unlike <code>since</code>, there is a not a fixed reference point. It is always comparing to either the initial time or when the callback was last run.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Elapsed } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// A. Start monitoring elapsed time</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> elapsed</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Elapsed.</span><span style=\"color:#B392F0\">interval</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...some time later ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// B. Elapsed time since (A)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...some time later ...</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// C. Elapsed time since (B)</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"once\">Once</h3>\n<p><code>Elapsed.once</code> fixes both the start point and a second reference time. After initialisation, it records the time at which the first call happens. This is then given as the value for all future calls.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Elapsed } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// A. Start monitoring elapsed time</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> elapsed</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Elapsed.</span><span style=\"color:#B392F0\">once</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...some time later...</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// B. Time since (A). Since it is the first call, we now fix the second reference.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...some time later...</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// C. Will be same value as earlier (B-A)</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">elapsed</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// D. As above, forever</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"human-friendly-elapsed-time\">Human-friendly elapsed time</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.Elapsed.toString.html\"><code>toString</code></a> prints elapsed time in a human-friendly way:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Elapsed } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// With .since()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> elapsed</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Elapsed.</span><span style=\"color:#B392F0\">since</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Elapsed.</span><span style=\"color:#B392F0\">toString</span><span style=\"color:#E1E4E8\">(elapsed); </span><span style=\"color:#6A737D\">// if it gets a function, it calls it</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// With regular millis</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> startTime</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Date.</span><span style=\"color:#B392F0\">now</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Elapsed.</span><span style=\"color:#B392F0\">toString</span><span style=\"color:#E1E4E8\">(Date.</span><span style=\"color:#B392F0\">now</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\"> startTime);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"completion\">Completion</h2>\n<p>If you have a known time period and you want to track reaching that elapsed time, use\n<a href=\"https://clinth.github.io/ixfx/functions/Flow.Elapsed.progress.html\"><code>Elapsed.progress</code></a>. It gives a clamped percentage (0..1) for completion.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Elapsed } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Start tracking 1 second time duration</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> timer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Elapsed.</span><span style=\"color:#B392F0\">progress</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...later, call timer() to get a 0..1 value for completion:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">timer</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// Yields 0..1</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Intervals can be used:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Track progress towards 4 minutes</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> timer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Elapsed.</span><span style=\"color:#B392F0\">progress</span><span style=\"color:#E1E4E8\">({ mins: </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>";

				const frontmatter = {"title":"Monitoring","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../components/DemoElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/flow/monitoring.md";
				const url = "/flow/monitoring";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n</script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow</a>.<a href=\"https://clinth.github.io/ixfx/modules/Flow.Elapsed.html\">Elapsed</a> module</li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\nThe [`Elapsed`](https://clinth.github.io/ixfx/modules/Flow.Elapsed.html) module has a few functions for tracking passage of time.\n\nAn overview:\n* Elapsed.since(): time from a start point\n* Elapsed.interval(): time from start point, and between each subsequent call\n* Elapsed.once(): one-time measurement from a start point\n  \n## Elapsed\n\n### Since\n`since` yields how much time (in milliseconds) has passed since first invoked. This is the fixed reference point all later invocations are compared to.\n\n```js\n// repl-pad\nimport { Elapsed } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// A. Start monitoring elapsed time\nconst elapsed = Elapsed.since();\n\n// ...some time later ...\n\nelapsed(); // B. Elapsed time since (A)\n// ...some time later ...\nelapsed(); // C. Elapsed time since (A)\n```\n\nEach call to `elapsed()` reports the current time, it will continually change. \n\n### Interval\n\n`Elapsed.interval` reports the time from the first initialisation and each subsequent call. Unlike `since`, there is a not a fixed reference point. It is always comparing to either the initial time or when the callback was last run.\n\n```js\n// repl-pad\nimport { Elapsed } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// A. Start monitoring elapsed time\nconst elapsed = Elapsed.interval();\n\n// ...some time later ...\n\nelapsed(); // B. Elapsed time since (A)\n// ...some time later ...\nelapsed(); // C. Elapsed time since (B)\n```\n\n### Once\n\n`Elapsed.once` fixes both the start point and a second reference time. After initialisation, it records the time at which the first call happens. This is then given as the value for all future calls.\n\n```js\n// repl-pad\nimport { Elapsed } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// A. Start monitoring elapsed time\nconst elapsed = Elapsed.once();\n// ...some time later...\nelapsed(); // B. Time since (A). Since it is the first call, we now fix the second reference.\n// ...some time later...\nelapsed(); // C. Will be same value as earlier (B-A)\nelapsed(); // D. As above, forever\n ```\n\n## Human-friendly elapsed time\n\n[`toString`](https://clinth.github.io/ixfx/functions/Flow.Elapsed.toString.html) prints elapsed time in a human-friendly way:\n\n```js\n// repl-pad\nimport { Elapsed } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// With .since()\nconst elapsed = Elapsed.since();\nElapsed.toString(elapsed); // if it gets a function, it calls it\n\n// With regular millis\nconst startTime = Date.now();\nElapsed.toString(Date.now() - startTime);\n```\n\n## Completion\n\nIf you have a known time period and you want to track reaching that elapsed time, use\n[`Elapsed.progress`](https://clinth.github.io/ixfx/functions/Flow.Elapsed.progress.html). It gives a clamped percentage (0..1) for completion.\n\n```js\n// repl-pad\nimport { Elapsed } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Start tracking 1 second time duration\nconst timer = Elapsed.progress(1000);\n\n// ...later, call timer() to get a 0..1 value for completion:\ntimer(); // Yields 0..1\n```\n\nIntervals can be used:\n```js\n// Track progress towards 4 minutes\nconst timer = Elapsed.progress({ mins: 4 });\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"elapsed","text":"Elapsed"},{"depth":3,"slug":"since","text":"Since"},{"depth":3,"slug":"interval","text":"Interval"},{"depth":3,"slug":"once","text":"Once"},{"depth":2,"slug":"human-friendly-elapsed-time","text":"Human-friendly elapsed time"},{"depth":2,"slug":"completion","text":"Completion"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
