import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n</script>\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Data.interpolate.html\">Interpolate function</a></li>\n<li>Demo: <a href=\"https://clinth.github.io/ixfx-demos/geometry/point-interpolate/\">Points.interpolate</a>, <a href=\"https://glitch.com/edit/#!/ixfx-interpolate-basics\">Glitch demo</a>\n</li></ul>\n</div>\n<p>Interpolation (also known as <em>lerping</em>) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.</p>\n<p>A simple implementation looks like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Interpolate from a->b by amount (0..1)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> interpolate</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">amount</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">a</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">b</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">amount) </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> a </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> amount </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> b;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In ixfx it’s found in the <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data</a> module as <a href=\"https://clinth.github.io/ixfx/functions/Data.interpolate.html\"><code>interpolate</code></a>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { interpolate } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/data.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns the value 50% between 200 and 400 (ie. 300)</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">interpolate</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">400</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>ixfx has custom interpolation for <a href=\"../../types/geometry/line/#interpolation\">Lines</a>, <a href=\"../../types/geometry/point/#interpolation\">Points</a> and <a href=\"../../types/colour/#interpolation\">Colour</a></p>\n<h2 id=\"interpolator\">Interpolator</h2>\n<p>As mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation ‘amount’ value to set how quickly the target should be reached.</p>\n<p>Using the <code>interpolate</code> function alone, we’d have to keep track of current value, target value and the amount to interpolate by.</p>\n<p>To simplify, there are two  <em>interpolators</em> - <a href=\"https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html\"><code>interpolatorStepped</code></a> and <a href=\"https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html\"><code>interpolatorInterval</code></a> - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Step from 0->1 in increments of 0.10</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interpolatorStepped</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">value</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// First time will be 0</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">value</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// Second time will be 0.1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">etc</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">value</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// Last time ought to be 1</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Like <code>interpolate</code> you can use custom start and points:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Step from 100->200 in increments of 0.10</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interpolateStepped</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>When interpolation has completed, the function will just keep returning the final value.</p>\n<p>The stepped version increments each time it is called. This means that the rate by which you call it determines how quickly\nthe range completes.</p>\n<p>Alternatively, use <a href=\"https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html\"><code>interpolatorInterval</code></a>. Rather than an amount to increment by, the first parameter is the time to progress through the range.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Step from 0->1 over one minute</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interpolatorInterval</span><span style=\"color:#E1E4E8\">({ mins: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Step from 125->678 over 1000 milliseconds.</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interpolatorInterval</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">125</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">678</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In practice, this is how an interpolator might be used:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> state</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Start saturation with an interval of 1ms,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // meaning the value will be 100%</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  saturation: </span><span style=\"color:#B392F0\">interpolatorInterval</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> useState</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Set background based on interpolated saturation value</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  document.body.backgroundColor </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> `hsl(200, ${</span><span style=\"color:#E1E4E8\">Math</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#B392F0\">floor</span><span style=\"color:#9ECBFF\">(</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#B392F0\">saturation</span><span style=\"color:#9ECBFF\">()</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#9ECBFF\">}, 50%)`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> loop</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  useState</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  window.</span><span style=\"color:#B392F0\">requestAnimationFrame</span><span style=\"color:#E1E4E8\">(loop);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> setup</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // When we click, restart interpolation from 0..1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`click`</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      ...</span><span style=\"color:#E1E4E8\">state,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      saturation: </span><span style=\"color:#B392F0\">interpolatorInterval</span><span style=\"color:#E1E4E8\">({ secs: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\"> })</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  loop</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setup</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://glitch.com/edit/#!/ixfx-interpolate-basics\">See this pattern on Glitch</a></p>";

				const frontmatter = {"title":"Interpolation","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '/src/components/DemoElement.ts';\nimport FuncPlotElement from '/src/components/FuncPlotElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/modulation/interpolate.md";
				const url = "/modulation/interpolate";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n</script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Data.interpolate.html\">Interpolate function</a></li>\n<li>Demo: <a href=\"https://clinth.github.io/ixfx-demos/geometry/point-interpolate/\">Points.interpolate</a>, <a href=\"https://glitch.com/edit/#!/ixfx-interpolate-basics\">Glitch demo</a>\n</ul>\n</div>\n\nInterpolation (also known as _lerping_) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.\n\nA simple implementation looks like this:\n\n```js\n// Interpolate from a->b by amount (0..1)\nconst interpolate = (amount, a, b) => (1-amount) * a + amount * b;\n```\n\nIn ixfx it's found in the [Data](https://clinth.github.io/ixfx/modules/Data.html) module as [`interpolate`](https://clinth.github.io/ixfx/functions/Data.interpolate.html).\n\n```js\n// repl-pad\nimport { interpolate } from \"https://unpkg.com/ixfx/dist/data.js\";\n// Returns the value 50% between 200 and 400 (ie. 300)\ninterpolate(0.5, 200, 400);\n```\n\nixfx has custom interpolation for [Lines](../../types/geometry/line/#interpolation), [Points](../../types/geometry/point/#interpolation) and [Colour](../../types/colour/#interpolation)\n\n## Interpolator\n\nAs mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation 'amount' value to set how quickly the target should be reached.\n\nUsing the `interpolate` function alone, we'd have to keep track of current value, target value and the amount to interpolate by. \n\nTo simplify, there are two  _interpolators_ - [`interpolatorStepped`](https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html) and [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html) - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.\n\n```js\n// Step from 0->1 in increments of 0.10\nconst value = interpolatorStepped(0.1);\n\nvalue(); // First time will be 0\nvalue(); // Second time will be 0.1\n...etc\nvalue(); // Last time ought to be 1\n```\n\nLike `interpolate` you can use custom start and points:\n```js\n// Step from 100->200 in increments of 0.10\nconst value = interpolateStepped(0.1, 100, 200);\n```\n\nWhen interpolation has completed, the function will just keep returning the final value.\n\nThe stepped version increments each time it is called. This means that the rate by which you call it determines how quickly\nthe range completes. \n\nAlternatively, use [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html). Rather than an amount to increment by, the first parameter is the time to progress through the range.\n\n```js\n// Step from 0->1 over one minute\nconst value = interpolatorInterval({ mins: 1});\n// Step from 125->678 over 1000 milliseconds.\nconst value = interpolatorInterval(1000, 125, 678);\n```\n\nIn practice, this is how an interpolator might be used:\n\n```js\nconst state = {\n  // Start saturation with an interval of 1ms,\n  // meaning the value will be 100%\n  saturation: interpolatorInterval(1)\n}\n\nconst useState = () => {\n  // Set background based on interpolated saturation value\n  document.body.backgroundColor = `hsl(200, ${Math.floor(state.saturation()*100)}, 50%)`\n}\n\nconst loop = () => {\n  useState();\n  window.requestAnimationFrame(loop);\n}\n\nconst setup = () => {\n  // When we click, restart interpolation from 0..1\n  document.addEventListener(`click`, () => {\n    state = {\n      ...state,\n      saturation: interpolatorInterval({ secs: 20 })\n    }\n  });\n  loop();\n}\nsetup();\n```\n\n[See this pattern on Glitch](https://glitch.com/edit/#!/ixfx-interpolate-basics)";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"interpolator","text":"Interpolator"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
