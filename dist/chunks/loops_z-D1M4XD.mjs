import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\nimport '/src/components/ReplPad';\n</script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n<p>Overview:</p>\n<ul>\n<li><a href=\"#continuously\">continuously</a>: Useful for a ‘main loop’, can be controlled</li>\n<li><a href=\"#delayed-loop\">delayLoop</a>: A ‘for’ loop with some delay between iterations</li>\n<li><a href=\"#interval\">interval</a>: Calls an async function or generator with some delay, returning results as they happen</li>\n</ul>\n<p>Without delays:</p>\n<ul>\n<li><a href=\"#repeat\">repeat</a>: Execute a function <em>x</em> times, collecting results</li>\n</ul>\n<h2 id=\"running-code-in-a-timed-loop\">Running code in a timed loop</h2>\n<p>Some basic loops in Javascript look like:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">while</span><span style=\"color:#E1E4E8\"> (hue </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\"> 100</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  hue</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> list</span><span style=\"color:#E1E4E8\"> [ 100, 231, 90 ];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> i</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> list) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Do something with each item of the list</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>They don’t have any in-built options for looping at a certain speed.</p>\n<p>Instead, we might use <code>setTimeout</code> or <code>setInterval</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#B392F0\">setInterval</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // do something</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Code every second</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// OR:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> f</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Reschedule itself to run again </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // in 1 second, creating a loop</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  setTimeout</span><span style=\"color:#E1E4E8\">(f, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initial schedule 'f' in one second</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(f, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or perhaps we want to run a loop really fast, <code>requestAnimationFrame</code> is meant for animation loops:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> draw</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // ... do some drawing</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  window.</span><span style=\"color:#B392F0\">requestAnimationFrame</span><span style=\"color:#E1E4E8\">(draw); </span><span style=\"color:#6A737D\">// Reschedule</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">window.</span><span style=\"color:#B392F0\">requestAnimationFrame</span><span style=\"color:#E1E4E8\">(draw); </span><span style=\"color:#6A737D\">// Schedule</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This might just be fine, however:</p>\n<ul>\n<li>If you want to start/stop you have to keep track of the id of the timer</li>\n<li>More plumbing required to adjust loop speed as it runs</li>\n<li>Not particularly readable</li>\n</ul>\n<p>ixfx has two functions to help with timed loops:</p>\n<ul>\n<li><a href=\"#continuously\">continuously</a>: Useful for a ‘main loop’, can be controlled</li>\n<li><a href=\"#delayed-loop\">delayLoop</a>: A ‘for’ loop with some delay between iterations</li>\n</ul>\n<h3 id=\"continuously\">Continuously</h3>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.continuously-1.html\"><code>continuously</code></a> is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.</p>\n<p>By default, it runs at animation speed, useful for updating a canvas:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { continuously } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">continuously</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Do something at animation loop speed</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}).</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you don’t want the loop to run as fast as possible, provide an <a href=\"https://clinth.github.io/ixfx/types/Flow.Interval.html\"><code>Interval</code></a> or a number denoting milliseconds:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> fetchData</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#6A737D\">// Do something };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Runs every minute</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">continuously</span><span style=\"color:#E1E4E8\">(fetchData, { mins: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> }).</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Examples of <code>continuously</code> in action:</p>\n<ul>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll\">Poll data from an API</a></li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate\">Animate a gradient</a></li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async\">Process a list of things</a></li>\n</ul>\n<h4 id=\"control\">Control</h4>\n<p>Note the use of <code>start</code> to start the loop. This allows you setup the loop once, and trigger it from different places. If <code>start</code> is called while already running, the timer is reset. <code>cancel</code> stops a loop that is scheduled to run.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> job</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> jobLoop</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> continuously</span><span style=\"color:#E1E4E8\">(job, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">jobLoop.</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();  </span><span style=\"color:#6A737D\">// Starts loop, or resets it if already pending</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">jobLoop.</span><span style=\"color:#B392F0\">cancel</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// Cancels a scheduled loop</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It’s possible to check the status of a loop:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">jobLoop.isDone;    </span><span style=\"color:#6A737D\">// True if loop has stopped</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">jobLoop.elapsedMs; </span><span style=\"color:#6A737D\">// How long since last start()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">jobLoop.ticks;     </span><span style=\"color:#6A737D\">// How many iterations of loop</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The function that runs is given the number of loops and elapsed time as parameters. If the callback returns <em>false</em>, this will cause the loop to end. If <em>true</em> or <em>undefined</em> is returned, loop will continue to run.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> job</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">ticks</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">elapsedMs</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // End loop after 100 iterations  </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (ticks </span><span style=\"color:#F97583\">></span><span style=\"color:#79B8FF\"> 100</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">return</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">; </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> jobLoop</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> continuously</span><span style=\"color:#E1E4E8\">(job, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A callback can be provided to handle when <code>start</code> is called. This allows you to intercept the call and decide whether the loop should continue, cancel, reset or dispose (meaning it can’t be used any longer). ‘reset’ is the default behaviour, if there’s no <code>onStartCalled</code> function.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> job</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> onStartCalled</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">ticks</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">elapsedMs</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // If we've been running for a minute, don't allow waiting period to be reset</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (elapsedMs </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\"> 60</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">return</span><span style=\"color:#9ECBFF\"> 'continue'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Could also return:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // 'cancel': stop loop, but allow it to potentially start again</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // 'dispose': stop loop and prevent it from starting again</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // 'reset': cancel existing scheduled run and start from full interval</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> jobLoop</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> continuously</span><span style=\"color:#E1E4E8\">(job, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">, { onStartCalled }).</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"delayed-loop\">Delayed loop</h3>\n<p>If you don’t need to adjust the loop or control it from other parts of your code, <a href=\"https://clinth.github.io/ixfx/functions/Flow.delayLoop.html\"><code>delayLoop</code></a> might be what you need. It is an async generator which runs indefinitely and has a simple syntax:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { delayLoop } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> o</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> delayLoop</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Do something every second</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Warning: loops forever</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Execution won't continue here until the loop is exited</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note the use of <em>for await</em> is important here. Use <code>break</code> when you want to exit the loop.</p>\n<p>Using <code>for await</code> means that code won’t continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { delayLoop } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">async</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> o</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> delayLoop</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`!`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Execution continues while looped code runs in parallel</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Hello`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>delayLoop</code> does not gather the results of the looped code. If that’s what you need, consider <a href=\"#repeat\"><code>repeat</code></a> or <a href=\"#interval\"><code>interval</code></a>.</p>\n<h2 id=\"repeat\">Repeat</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.repeat.html\"><code>repeat</code></a> runs a function a certain number of times, yielding the results one-by-one.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { repeat } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Five random numbers in an array</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> results</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#F97583\">...</span><span style=\"color:#B392F0\">repeat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, Math.random)];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Or in a for-of loop:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> result</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> repeat</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, Math.random)) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(result);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Exits after 5 numbers</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you don’t care about the return value of the function, consider using the <a href=\"../../gen/generator/#count\"><code>count</code></a> generator.</p>\n<p>If a function is provided instead of a number, <code>repeat</code> will continue until the function returns <em>false</em>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { repeat } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Keep repeating until 10 values have been generated</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> results</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> repeat</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  (</span><span style=\"color:#FFAB70\">repeats</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">valuesProduced</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> valuesProduced </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\"> 10</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> Math.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">());</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"interval\">Interval</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Flow.interval-1.html\"><code>interval</code></a> calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the <code>for await</code> rather than <code>for</code>.</p>\n<p>This example prints a new random number every second</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { interval } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Call Math.random at a fixed interval of 1000ms</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> randomGenerator</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(Math.random, { fixed: </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\"> } );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> r</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> randomGenerator) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Prints a new random number every second</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(r);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// This will not run unless there is a `break` in the for await loop</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Done.`</span><span style=\"color:#E1E4E8\">); </span></span>\n<span class=\"line\"></span></code></pre>\n<p>When calling <code>interval</code>, the first parameter is the code to run, or generator to use. In the above example it’s a simple function call.</p>\n<p>The second parameter are the options:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#B392F0\">IntervalOpts</span><span style=\"color:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  delay</span><span style=\"color:#F97583\">?:</span><span style=\"color:#9ECBFF\"> \"before\"</span><span style=\"color:#F97583\"> |</span><span style=\"color:#9ECBFF\"> \"after\"</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Should delay be before or after inner code is run?</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  fixed</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> Interval;     </span><span style=\"color:#6A737D\">// Use a fixed delay between iterations</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  minimum</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> Interval;   </span><span style=\"color:#6A737D\">// Enforce a minimum time between iterations</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  signal</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> AbortSignal; </span><span style=\"color:#6A737D\">// Signal to stop interval looping</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the earlier example, we used <code>fixed</code>, meaning there is a fixed delay. <code>minimum</code> is useful if the code being run can take varying time to run. This allows iterations to be spaced out more evenly.</p>\n<p>If want to use <code>interval</code> in a simple way, instead of passing in an object of options you can use a number, which is taken to be the fixed millisecond delay.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// These lines are the same</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">interval</span><span style=\"color:#E1E4E8\">(Math.random, { fixed: </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\"> } );</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">interval</span><span style=\"color:#E1E4E8\">(Math.random, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\"> );</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Example: Iterate through items in a list, with a delay of one minute before each item</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> opts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { fixed: { mins: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> }, delay: </span><span style=\"color:#9ECBFF\">'before'</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> list</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span><span style=\"color:#9ECBFF\">'thom'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'jonny'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'colin'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'ed'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'phil'</span><span style=\"color:#E1E4E8\"> ];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> i</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(list, opts)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // do something with i (code first runs after 1min wait)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Example: Using a generator</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { count } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/generators.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { interval } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// A generator that counts to 5</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> counter</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> count</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Loop over counter with 1000ms delay</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(counter, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Counts from 0...4, with a delay between each</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(v);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or alternatively, using the <code>.next().value</code> style of accessing a generator:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> counter</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> count</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> counterInterval</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(counter, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Pauses until interval is up</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> counterInterval.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">().value;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Execution continues after interval period...</span></span>\n<span class=\"line\"></span></code></pre>\n<!-- ## With generators\n\n[Generators](../../data/generator/) can looped over with [`forEach`](https://clinth.github.io/ixfx/modules/Flow.html#forEach)\n\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\"\nimport { forEach } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\nforEach(count(5), () => {\n  // This will run five times\n})\n```\n\nIf you know the generator is finite, an alternative is to convert to an array, and utilise JS's inbuilt `forEach`:\n\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\"\n[...count(5)].forEach( () => {\n  // This will run five times\n});\n```\n\nOr naturally, using a `for ... of`:\n\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\"\nfor (const i of count(5)) {\n  // This will run five times.\n}\n```\n\nWhich to use? the ixfx `forEach` is concise and readable. It has the advantage of not needing to declare a parameter, unlike `for ... of`. Converting to an array avoids having to declare a variable too, but it's not possible to use infinite generators (such as [pingPong](../../data/generator/#ping-pong)).\n\n[`forEachAsync`](https://clinth.github.io/ixfx/modules/Flow.html#forEachAsync) can be used if you want to iterate using an asynchronous callback. See the next section for an example. -->";

				const frontmatter = {"title":"Loops and Intervals","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../components/DemoElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/flow/loops.md";
				const url = "/flow/loops";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n</script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations\n* [interval](#interval): Calls an async function or generator with some delay, returning results as they happen\n\nWithout delays:\n* [repeat](#repeat): Execute a function _x_ times, collecting results\n\n\n## Running code in a timed loop\n\nSome basic loops in Javascript look like:\n\n```js\nwhile (hue < 100) {\n  hue++;\n}\n\nconst list [ 100, 231, 90 ];\nfor (const i of list) {\n  // Do something with each item of the list\n}\n```\n\nThey don't have any in-built options for looping at a certain speed.\n\nInstead, we might use `setTimeout` or `setInterval`:\n```js\nsetInterval(() => {\n  // do something\n}, 1000); // Code every second\n\n// OR:\nconst f = () => {\n  // Reschedule itself to run again \n  // in 1 second, creating a loop\n  setTimeout(f, 1000);\n}\n// Initial schedule 'f' in one second\nsetTimeout(f, 1000);\n```\n\nOr perhaps we want to run a loop really fast, `requestAnimationFrame` is meant for animation loops:\n\n```js\nconst draw = () => {\n  // ... do some drawing\n  window.requestAnimationFrame(draw); // Reschedule\n}\nwindow.requestAnimationFrame(draw); // Schedule\n```\n\nThis might just be fine, however:\n* If you want to start/stop you have to keep track of the id of the timer\n* More plumbing required to adjust loop speed as it runs\n* Not particularly readable\n\nixfx has two functions to help with timed loops:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations\n\n### Continuously\n\n[`continuously`](https://clinth.github.io/ixfx/functions/Flow.continuously-1.html) is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.\n\nBy default, it runs at animation speed, useful for updating a canvas:\n\n```js\nimport { continuously } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\ncontinuously(() => {\n  // Do something at animation loop speed\n}).start();\n```\n\nIf you don't want the loop to run as fast as possible, provide an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html) or a number denoting milliseconds:\n\n```js\nconst fetchData = () => { // Do something };\n\n// Runs every minute\ncontinuously(fetchData, { mins: 1 }).start();\n```\n\nExamples of `continuously` in action:\n* [Poll data from an API](https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll)\n* [Animate a gradient](https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate)\n* [Process a list of things](https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async)\n\n#### Control\n\nNote the use of `start` to start the loop. This allows you setup the loop once, and trigger it from different places. If `start` is called while already running, the timer is reset. `cancel` stops a loop that is scheduled to run.\n\n```js\nconst job = () => { ... }\nconst jobLoop = continuously(job, 1000);\n...\njobLoop.start();  // Starts loop, or resets it if already pending\njobLoop.cancel(); // Cancels a scheduled loop\n```\n\nIt's possible to check the status of a loop:\n```js\njobLoop.isDone;    // True if loop has stopped\njobLoop.elapsedMs; // How long since last start()\njobLoop.ticks;     // How many iterations of loop\n```\n\nThe function that runs is given the number of loops and elapsed time as parameters. If the callback returns _false_, this will cause the loop to end. If _true_ or _undefined_ is returned, loop will continue to run.\n\n```js\nconst job = (ticks, elapsedMs) => { \n  // End loop after 100 iterations  \n  if (ticks > 100) return false; \n}\nconst jobLoop = continuously(job, 1000).start();\n```\n\nA callback can be provided to handle when `start` is called. This allows you to intercept the call and decide whether the loop should continue, cancel, reset or dispose (meaning it can't be used any longer). 'reset' is the default behaviour, if there's no `onStartCalled` function.\n\n```js\nconst job = () => { ... }\nconst onStartCalled = (ticks, elapsedMs) => {\n  // If we've been running for a minute, don't allow waiting period to be reset\n  if (elapsedMs < 60*1000) return 'continue';\n  // Could also return:\n  // 'cancel': stop loop, but allow it to potentially start again\n  // 'dispose': stop loop and prevent it from starting again\n  // 'reset': cancel existing scheduled run and start from full interval\n}\nconst jobLoop = continuously(job, 1000, { onStartCalled }).start();\n```\n\n### Delayed loop\n\nIf you don't need to adjust the loop or control it from other parts of your code, [`delayLoop`](https://clinth.github.io/ixfx/functions/Flow.delayLoop.html) might be what you need. It is an async generator which runs indefinitely and has a simple syntax:\n\n```js\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nfor await (const o of delayLoop(1000)) {\n  // Do something every second\n  // Warning: loops forever\n}\n// Execution won't continue here until the loop is exited\n```\n\nNote the use of _for await_ is important here. Use `break` when you want to exit the loop.\n\nUsing `for await` means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:\n\n```js\n// repl-pad\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nsetTimeout(async () => {\n  for await (const o of delayLoop(1000)) {\n    console.log(`!`);\n  }\n});\n// Execution continues while looped code runs in parallel\nconsole.log(`Hello`);\n```\n\n`delayLoop` does not gather the results of the looped code. If that's what you need, consider [`repeat`](#repeat) or [`interval`](#interval).\n\n## Repeat\n\n[`repeat`](https://clinth.github.io/ixfx/functions/Flow.repeat.html) runs a function a certain number of times, yielding the results one-by-one.\n\n```js\n// repl-pad\nimport { repeat } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Five random numbers in an array\nconst results = [...repeat(5, Math.random)];\n\n// Or in a for-of loop:\nfor (const result of repeat(5, Math.random)) {\n  console.log(result);\n}\n// Exits after 5 numbers\n```\n\nIf you don't care about the return value of the function, consider using the [`count`](../../gen/generator/#count) generator.\n\nIf a function is provided instead of a number, `repeat` will continue until the function returns _false_.\n\n```js\n// repl-pad\nimport { repeat } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Keep repeating until 10 values have been generated\nconst results = repeat(\n  (repeats, valuesProduced) => valuesProduced < 10,\n  () => Math.random());\n```\n\n## Interval\n\n[`interval`](https://clinth.github.io/ixfx/functions/Flow.interval-1.html) calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the `for await` rather than `for`.\n\nThis example prints a new random number every second\n\n```js\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Call Math.random at a fixed interval of 1000ms\nconst randomGenerator = interval(Math.random, { fixed: 1000 } );\n\nfor await (const r of randomGenerator) {\n  // Prints a new random number every second\n  console.log(r);\n}\n// This will not run unless there is a `break` in the for await loop\nconsole.log(`Done.`); \n```\n\nWhen calling `interval`, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.\n\nThe second parameter are the options:\n\n```typescript\nIntervalOpts: {\n  delay?: \"before\" | \"after\"; // Should delay be before or after inner code is run?\n  fixed?: Interval;     // Use a fixed delay between iterations\n  minimum?: Interval;   // Enforce a minimum time between iterations\n  signal?: AbortSignal; // Signal to stop interval looping\n}\n```\n\nIn the earlier example, we used `fixed`, meaning there is a fixed delay. `minimum` is useful if the code being run can take varying time to run. This allows iterations to be spaced out more evenly.\n\nIf want to use `interval` in a simple way, instead of passing in an object of options you can use a number, which is taken to be the fixed millisecond delay.\n\n```js\n// These lines are the same\ninterval(Math.random, { fixed: 1000 } );\ninterval(Math.random, 1000 );\n```\n\nExample: Iterate through items in a list, with a delay of one minute before each item\n\n```js\nconst opts = { fixed: { mins: 1 }, delay: 'before' };\nconst list = [ 'thom', 'jonny', 'colin', 'ed', 'phil' ];\nfor await (const i of interval(list, opts)) {\n  // do something with i (code first runs after 1min wait)\n}\n```\n\nExample: Using a generator\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\";\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\";\n\n// A generator that counts to 5\nconst counter = count(5);\n\n// Loop over counter with 1000ms delay\nfor await (const v of interval(counter, 1000)) {\n  // Counts from 0...4, with a delay between each\n  console.log(v);\n}\n```\n\nOr alternatively, using the `.next().value` style of accessing a generator:\n\n```js\nconst counter = count(5);\nconst counterInterval = interval(counter, 1000);\n// Pauses until interval is up\nconst v = await counterInterval.next().value;\n// Execution continues after interval period...\n```\n\n<!-- ## With generators\n\n[Generators](../../data/generator/) can looped over with [`forEach`](https://clinth.github.io/ixfx/modules/Flow.html#forEach)\n\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\"\nimport { forEach } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\nforEach(count(5), () => {\n  // This will run five times\n})\n```\n\nIf you know the generator is finite, an alternative is to convert to an array, and utilise JS's inbuilt `forEach`:\n\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\"\n[...count(5)].forEach( () => {\n  // This will run five times\n});\n```\n\nOr naturally, using a `for ... of`:\n\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\"\nfor (const i of count(5)) {\n  // This will run five times.\n}\n```\n\nWhich to use? the ixfx `forEach` is concise and readable. It has the advantage of not needing to declare a parameter, unlike `for ... of`. Converting to an array avoids having to declare a variable too, but it's not possible to use infinite generators (such as [pingPong](../../data/generator/#ping-pong)).\n\n[`forEachAsync`](https://clinth.github.io/ixfx/modules/Flow.html#forEachAsync) can be used if you want to iterate using an asynchronous callback. See the next section for an example. -->\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"running-code-in-a-timed-loop","text":"Running code in a timed loop"},{"depth":3,"slug":"continuously","text":"Continuously"},{"depth":4,"slug":"control","text":"Control"},{"depth":3,"slug":"delayed-loop","text":"Delayed loop"},{"depth":2,"slug":"repeat","text":"Repeat"},{"depth":2,"slug":"interval","text":"Interval"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
