import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html\">Modulation.Oscillators module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/modulation/\">Demos</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=\">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n<script type=\"module\" hoist=\"\">\nimport '/src/loader';\nimport '/src/components/modulation/OscElement';\n</script>\n<p><em>Oscillators</em> are generators that produce value according to a wave shape. Common shapes include <em>sine</em>, <em>sawtooth</em> (or <em>ramp</em>), <em>square</em> and <em>triangle</em>.</p>\n<p>In the below example, each oscillator runs for one <em>cycle</em> over two seconds. That means the <em>frequency</em> is 0.5 - half a cycle every second.</p>\n<div id=\"waveIntro\"></div>\n<script type=\"module\">\nimportEl(\n  `waveIntro`, \n  `oscillator-element`, {\n  mode: `shape`,\n  cycles: 0.5,\n  width: 200,\n  sampleDurationMs: 1000,\n  height: 150\n});\n</script>\n<p>Oscillators are normalised to generate values in the range of <code>0</code> to <code>1</code>. Inverse waves can be calculated by taking the value from one.</p>\n<h2 id=\"sampling\">Sampling</h2>\n<p>How often to sample the oscillator depends on how you’re using the value, and the oscillator frequency. If the sample rate is proportionally much slower than the oscillator, you’ll miss the shape of the wave - sort of like seeing someone dance under a strobe light.</p>\n<div id=\"waveSampling\"></div>\n<script type=\"module\">\nimportEl(\n  `waveSampling`, \n  `oscillator-element`, {\n  mode: `editor`,\n  cycles: 0.5,\n  width: 300,\n  sampleDurationMs: 60*1000,\n  height: 250\n});\n</script>\n<h2 id=\"usage\">Usage</h2>\n<p>Initialisation</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { frequencyTimerSource } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/flow.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Oscillators } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/modulation.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Create a timer for 10Hz (10 cycles per second)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> freq</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> frequencyTimerSource</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Create a sine oscillator using `freq` time source</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> osc</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Oscillators.</span><span style=\"color:#B392F0\">sine</span><span style=\"color:#E1E4E8\">(freq);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Instead of .sine one could choose:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  sineBipolar, saw, triangle, square</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Oscillators are number <a href=\"../../gen/generator/\">generators</a>, which means we have to ‘pull’ values out of it. To <em>sample</em> the current value of the oscillator:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> osc.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">().value;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To get the inverse, eg converting the upwards ramp of the saw to a downwards ramp:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#F97583\"> -</span><span style=\"color:#E1E4E8\"> osc.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">().value;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Typically you want to sample the oscillator’s value over time. This might be every time your sketch updates its state, in a drawing loop, or based on a timer.</p>\n<p>Below, we update <code>state.oscValue</code> with the oscillator value every 500 milliseconds:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  oscValue: </span><span style=\"color:#79B8FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setInterval</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    ...</span><span style=\"color:#E1E4E8\">state,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    oscValue: osc.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">().value;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Elsewhere, use state.oscValue ...</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=\">See a similar snippet in the plotter</a></p>\n<p>Another pattern is to use ixfx’s <code>interval</code> function to pull values from the oscillator at a certain rate. In the example below, reading from an oscillator can be enabled or disabled with buttons.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// If true, we're reading values</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> running </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Rate to pull values from the oscillator</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> updateRateMs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#E1E4E8\">; </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">getElementById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`btnStart`</span><span style=\"color:#E1E4E8\">)?.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`click`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">async</span><span style=\"color:#FFAB70\"> evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Oscillator to read</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> osc</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Oscillators.</span><span style=\"color:#B392F0\">sine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  running </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(osc, updateRateMs)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // Do something with value from oscillator...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(v);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">running) </span><span style=\"color:#F97583\">break</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Stop button pressed, exit for loop</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">getElementById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`btnStop`</span><span style=\"color:#E1E4E8\">)?.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`click`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  running </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<!-- ## Frequency modulation\n\n_Frequency modulation_ is a common technique in sound synthesis in which the frequency of a running oscillator is changed over time by some other modulator. In this case, a sine wave runs at a set frequency, with its frequency modulated by the wave you can control below.\n\n<div id=\"waveFm\"></div>\n<script type=\"module\">\nimportEl(\n  `waveFm`, \n  `oscillator-element`, {\n  mode: `fm`,\n  cycles: 1,\n  width: 300,\n  sampleDurationMs: 60*1000,\n  height: 250,\n  sampleRateMs: 0\n});\n</script>\n\nExample expressions:\n* `source * mod`: Sine wave runs at its full speed when the modulator is at 1 -->\n<h2 id=\"amplitude-modulation\">Amplitude modulation</h2>\n<p><em>Amplitude modulation</em> modulates the output of one oscillator by some other modulator. As before, a sine wave runs, while you can control the shape and frequency of the modulator.</p>\n<p>The given expression is how the modulator effects the signal.</p>\n<div id=\"waveAm\"></div>\n<script type=\"module\">\nimportEl(\n  `waveAm`, \n  `oscillator-element`, {\n  mode: `am`,\n  cycles: 0.5,\n  width: 300,\n  sampleDurationMs: 60*1000,\n  height: 250\n});\n</script>\n<p>Example expressions:</p>\n<ul>\n<li><code>source * mod</code>: Dampens output. ie. if modulator is at 50%, signal is reduced by 50%. Try a triangle wave with frequency of 1.</li>\n<li><code>source * Math.sqrt(mod)</code>: Reduces the influence of modulator by squaring its value first. If you set a triangle wave and frequency around 41, note how modulation bites in more when sine is at its higher values</li>\n<li><code>source * Math.pow(mod, 2)</code>: Increases influence of modulator by raising to the second power. As a result, it seems the sine is the modulator, not the modulator.</li>\n</ul>\n<p>See the <a href=\"https://clinth.github.io/ixfx-demos/modulation/\">modulation demos</a> for an example of how to do frequency modulation.</p>\n<h2 id=\"starter\">Starter</h2>\n<p>Below is a skeleton for a sketch that defines settings, state and an update/apply loop. The oscillator is sampled on every loop.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { frequencyTimer } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/flow.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Oscillators } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/modulation.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Define settings</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> settings</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  osc: Oscillators.</span><span style=\"color:#B392F0\">sine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">frequencyTimer</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.01</span><span style=\"color:#E1E4E8\">))</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise state</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  oscValue: </span><span style=\"color:#79B8FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Update state</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> updateState</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> {</span><span style=\"color:#79B8FF\">osc</span><span style=\"color:#E1E4E8\">} </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> settings;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    ...</span><span style=\"color:#E1E4E8\">state,                  </span><span style=\"color:#6A737D\">// Copy any other values in state</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    oscValue: osc.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">().value </span><span style=\"color:#6A737D\">// Sample oscillator</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Apply state</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> applyState</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">oscValue</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Use oscValue somehow...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  document.</span><span style=\"color:#B392F0\">getElementById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`oscValue`</span><span style=\"color:#E1E4E8\">).innerText </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> oscValue.</span><span style=\"color:#B392F0\">toString</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> loop</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  updateState</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  applyState</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  window.</span><span style=\"color:#B392F0\">requestAnimationFrame</span><span style=\"color:#E1E4E8\">(loop);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">window.</span><span style=\"color:#B392F0\">requestAnimationFrame</span><span style=\"color:#E1E4E8\">(loop);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Starter skeleton on <a href=\"https://glitch.com/~ixfx-starter-oscillators\">Glitch</a>, <a href=\"https://github.com/ClintH/ixfx-demos/tree/main/modulation/oscillator-starter\">Github</a></p>";

				const frontmatter = {"title":"Oscillators","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/modulation/oscillator.md";
				const url = "/modulation/oscillator";
				function rawContent() {
					return "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html\">Modulation.Oscillators module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/modulation/\">Demos</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=\">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n\n<script type=\"module\" hoist>\nimport '/src/loader';\nimport '/src/components/modulation/OscElement';\n</script>\n\n\n_Oscillators_ are generators that produce value according to a wave shape. Common shapes include _sine_, _sawtooth_ (or _ramp_), _square_ and _triangle_.\n\nIn the below example, each oscillator runs for one _cycle_ over two seconds. That means the _frequency_ is 0.5 - half a cycle every second.\n\n<div id=\"waveIntro\"></div>\n<script type=\"module\">\nimportEl(\n  `waveIntro`, \n  `oscillator-element`, {\n  mode: `shape`,\n  cycles: 0.5,\n  width: 200,\n  sampleDurationMs: 1000,\n  height: 150\n});\n</script>\n\nOscillators are normalised to generate values in the range of `0` to `1`. Inverse waves can be calculated by taking the value from one.\n\n## Sampling\n\nHow often to sample the oscillator depends on how you're using the value, and the oscillator frequency. If the sample rate is proportionally much slower than the oscillator, you'll miss the shape of the wave - sort of like seeing someone dance under a strobe light.\n\n<div id=\"waveSampling\"></div>\n<script type=\"module\">\nimportEl(\n  `waveSampling`, \n  `oscillator-element`, {\n  mode: `editor`,\n  cycles: 0.5,\n  width: 300,\n  sampleDurationMs: 60*1000,\n  height: 250\n});\n</script>\n\n## Usage\n\nInitialisation\n\n```js\nimport { frequencyTimerSource } from 'https://unpkg.com/ixfx/dist/flow.js';\nimport { Oscillators } from 'https://unpkg.com/ixfx/dist/modulation.js';\n\n// Create a timer for 10Hz (10 cycles per second)\nconst freq = frequencyTimerSource(10);\n\n// Create a sine oscillator using `freq` time source\nconst osc = Oscillators.sine(freq);\n\n// Instead of .sine one could choose:\n//  sineBipolar, saw, triangle, square\n```\n\nOscillators are number [generators](../../gen/generator/), which means we have to 'pull' values out of it. To _sample_ the current value of the oscillator:\n\n```js\nconst v = osc.next().value;\n```\n\nTo get the inverse, eg converting the upwards ramp of the saw to a downwards ramp:\n\n```js\nconst v = 1 - osc.next().value;\n```\n\nTypically you want to sample the oscillator's value over time. This might be every time your sketch updates its state, in a drawing loop, or based on a timer.\n\nBelow, we update `state.oscValue` with the oscillator value every 500 milliseconds:\n```js\nlet state = {\n  oscValue: 0\n}\nsetInterval(() => {\n  state = {\n    ...state,\n    oscValue: osc.next().value;\n  }\n}, 500);\n\n// Elsewhere, use state.oscValue ...\n```\n\n[See a similar snippet in the plotter](https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=)\n\nAnother pattern is to use ixfx's `interval` function to pull values from the oscillator at a certain rate. In the example below, reading from an oscillator can be enabled or disabled with buttons.\n\n```js\n// If true, we're reading values\nlet running = false;\n// Rate to pull values from the oscillator\nconst updateRateMs = 2; \n\ndocument.getElementById(`btnStart`)?.addEventListener(`click`, async evt => {\n  // Oscillator to read\n  const osc = Oscillators.sine(0.1);\n  running = true;\n\n  for await (const v of interval(osc, updateRateMs)) {\n    // Do something with value from oscillator...\n    console.log(v);\n    if (!running) break; // Stop button pressed, exit for loop\n  }\n});\n\ndocument.getElementById(`btnStop`)?.addEventListener(`click`, evt => {\n  running = false;\n});\n```\n\n<!-- ## Frequency modulation\n\n_Frequency modulation_ is a common technique in sound synthesis in which the frequency of a running oscillator is changed over time by some other modulator. In this case, a sine wave runs at a set frequency, with its frequency modulated by the wave you can control below.\n\n<div id=\"waveFm\"></div>\n<script type=\"module\">\nimportEl(\n  `waveFm`, \n  `oscillator-element`, {\n  mode: `fm`,\n  cycles: 1,\n  width: 300,\n  sampleDurationMs: 60*1000,\n  height: 250,\n  sampleRateMs: 0\n});\n</script>\n\nExample expressions:\n* `source * mod`: Sine wave runs at its full speed when the modulator is at 1 -->\n\n## Amplitude modulation\n\n_Amplitude modulation_ modulates the output of one oscillator by some other modulator. As before, a sine wave runs, while you can control the shape and frequency of the modulator.\n\nThe given expression is how the modulator effects the signal.\n\n<div id=\"waveAm\"></div>\n<script type=\"module\">\nimportEl(\n  `waveAm`, \n  `oscillator-element`, {\n  mode: `am`,\n  cycles: 0.5,\n  width: 300,\n  sampleDurationMs: 60*1000,\n  height: 250\n});\n</script>\n\n\nExample expressions:\n* `source * mod`: Dampens output. ie. if modulator is at 50%, signal is reduced by 50%. Try a triangle wave with frequency of 1.\n* `source * Math.sqrt(mod)`: Reduces the influence of modulator by squaring its value first. If you set a triangle wave and frequency around 41, note how modulation bites in more when sine is at its higher values\n* `source * Math.pow(mod, 2)`: Increases influence of modulator by raising to the second power. As a result, it seems the sine is the modulator, not the modulator.\n\nSee the [modulation demos](https://clinth.github.io/ixfx-demos/modulation/) for an example of how to do frequency modulation.\n\n\n## Starter\n\nBelow is a skeleton for a sketch that defines settings, state and an update/apply loop. The oscillator is sampled on every loop.\n\n```js\nimport { frequencyTimer } from 'https://unpkg.com/ixfx/dist/flow.js';\nimport { Oscillators } from 'https://unpkg.com/ixfx/dist/modulation.js';\n\n// Define settings\nconst settings = {\n  osc: Oscillators.sine(frequencyTimer(0.01))\n}\n\n// Initialise state\nlet state = {\n  oscValue: 0\n}\n\n// Update state\nconst updateState = () => {\n  const {osc} = settings;\n  state = {\n    ...state,                  // Copy any other values in state\n    oscValue: osc.next().value // Sample oscillator\n  }\n}\n\n// Apply state\nconst applyState = () => {\n  const { oscValue } = state;\n  \n  // Use oscValue somehow...\n  document.getElementById(`oscValue`).innerText = oscValue.toString();\n}\n\nconst loop = () => {\n  updateState();\n  applyState();\n  window.requestAnimationFrame(loop);\n}\nwindow.requestAnimationFrame(loop);\n```\n\nStarter skeleton on [Glitch](https://glitch.com/~ixfx-starter-oscillators), [Github](https://github.com/ClintH/ixfx-demos/tree/main/modulation/oscillator-starter)\n\n\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"sampling","text":"Sampling"},{"depth":2,"slug":"usage","text":"Usage"},{"depth":2,"slug":"amplitude-modulation","text":"Amplitude modulation"},{"depth":2,"slug":"starter","text":"Starter"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
