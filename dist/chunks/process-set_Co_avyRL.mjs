import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<p>This pattern shows how to process a list of items with a timed delay.</p>\n<h1 id=\"known-list\">Known list</h1>\n<p>This pattern shows how to process a list of items known in advance.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> items</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span><span style=\"color:#9ECBFF\">'apple'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'orange'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">'pear'</span><span style=\"color:#E1E4E8\"> ];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> item</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(items, { fixed: </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\"> })) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Process an item every one second...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h1 id=\"ad-hoc-list\">Ad-hoc list</h1>\n<p>This pattern shows how to process items that are being added to a queue or stack on an ad-hoc basis. Eg, being added as a result of a user clicking something.</p>\n<p>Use a <a href=\"../collections/queue/\">Queue</a> or <a href=\"../collections/stack/\">Stack</a> data structure depending on how you want items to be prioritised. The example below uses a stack, meaning that most recent additions get processed first. We use â€¦</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { continuously } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Stacks } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Eg: limit stack to 10 items</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> toProcess </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Stacks.</span><span style=\"color:#B392F0\">stack</span><span style=\"color:#E1E4E8\">({ capacity: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set up continuously, and a function to handle items</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> processor</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> continuously</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Stack is empty, return false to end the continuously loop</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (toProcess.isEmpty) </span><span style=\"color:#F97583\">return</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">; </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Get the top-most item (ie most recently added)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> item</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> toProcess.peek;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Remove item, assigning changed stack to the toProcess variable</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  toProcess </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> toProcess.</span><span style=\"color:#B392F0\">pop</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Do something with item</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // If we return true, the loop will keep running, processing each item in stack</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#79B8FF\"> true</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Process an item every second.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Function to add to stack and start processor if necessary</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> process</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">item</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  toProcess </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> toProcess.</span><span style=\"color:#B392F0\">push</span><span style=\"color:#E1E4E8\">(item);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Start if it's not already running</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  processor.</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Somewhere else in our code, we can add and start running</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">process</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`some item`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demo</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async\">source</a>)</li>\n</ul>";

				const frontmatter = {"title":"Process a set of items","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/process-set.md";
				const url = "/data/process-set";
				function rawContent() {
					return "\nThis pattern shows how to process a list of items with a timed delay.\n\n# Known list\n\nThis pattern shows how to process a list of items known in advance.\n\n```js\nconst items = [ 'apple', 'orange', 'pear' ];\nfor await (const item of interval(items, { fixed: 1000 })) {\n  // Process an item every one second...\n}\n```\n\n# Ad-hoc list\n\nThis pattern shows how to process items that are being added to a queue or stack on an ad-hoc basis. Eg, being added as a result of a user clicking something.\n\nUse a [Queue](../collections/queue/) or [Stack](../collections/stack/) data structure depending on how you want items to be prioritised. The example below uses a stack, meaning that most recent additions get processed first. We use ...\n\n\n```js\nimport { continuously } from \"https://unpkg.com/ixfx/dist/flow.js\"\nimport { Stacks } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\n// Eg: limit stack to 10 items\nlet toProcess = Stacks.stack({ capacity: 10 });\n\n// Set up continuously, and a function to handle items\nconst processor = continuously(() => {\n  // Stack is empty, return false to end the continuously loop\n  if (toProcess.isEmpty) return false; \n\n  // Get the top-most item (ie most recently added)\n  const item = toProcess.peek;\n\n  // Remove item, assigning changed stack to the toProcess variable\n  toProcess = toProcess.pop();\n\n  // Do something with item\n  // ...\n  \n  // If we return true, the loop will keep running, processing each item in stack\n  return true;\n}, 1000); // Process an item every second.\n\n\n// Function to add to stack and start processor if necessary\nconst process = (item) => {\n  toProcess = toProcess.push(item);\n  \n  // Start if it's not already running\n  processor.start();\n}\n\n// Somewhere else in our code, we can add and start running\nprocess(`some item`);\n```\n\n* [Online demo](https://clinth.github.io/ixfx-demos/flow/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async))\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"known-list","text":"Known list"},{"depth":1,"slug":"ad-hoc-list","text":"Ad-hoc list"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
