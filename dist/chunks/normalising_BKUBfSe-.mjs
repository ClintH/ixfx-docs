import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n</script>\n<p>Data coming in from events, sensors etc. can have radically different scales or units. Rather than having to juggle these differences throughout your code, a strategy is to try to <em>normalise</em> it as soon as you can, getting it on a relative percentage scale of 0..1 (0% .. 100%).</p>\n<p>Normalisation allows values to be compared more readily: 0.5 (ie. 50%) can represent half volume level, or half of the screen width. That’s easier to manage than having to work with the equivalent absolute values of -12dB and 800, and much less of your code has to change if different scaling is needed later on.</p>\n<p>It’s easy to apply modulation factors and eventually to map the relative value to some absolute value in the output domain. For example:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Normalised value</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> 0.5</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get x coordinate at 50%</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> x</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> v </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> window.innerWidth;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get a hue at 50%</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> hue</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> v </span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\"> 360</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The basic steps then are:</p>\n<ol>\n<li>Receive data from an event, sensor, stream etc</li>\n<li>Normalise on 0..1 scale, discarding original value</li>\n<li>Do additional processing on normalised value as needed, applying to state</li>\n<li>Map relative state values to output domains, eg pixels, sound level, pulse-width modulation… (see also <a href=\"https://clinth.github.io/ixfx/functions/Data.scalePercent.html\"><code>scalePercent</code></a>)</li>\n</ol>\n<p>For simple normalisation, some sense of the <em>input</em> range of values is needed: a minimum and maximum. For example, although an analog input value might theoretically be in the range of 0..1023, perhaps we’ve empirically discovered that the usable range is actually 0..400. This would constitute the range of the value.</p>\n<p>See also</p>\n<ul>\n<li><a href=\"../../data/cleanup/\">Data clean up</a></li>\n</ul>\n<h2 id=\"arrays\">Arrays</h2>\n<p>If you have all the data in advance, it’s easy enough to ‘perfectly’ normalise, because the smallest and largest value can be determined. <a href=\"https://clinth.github.io/ixfx/functions/Data.Normalise.array.html\"><code>Normalise.array(source)</code></a> returns a normalised copy of <code>source</code>, such that the smallest value becomes 0 and the largest value 1. A range can be forced by passing in a min and max: <code>Normalise.array(source, min, max)</code>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Normalise } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Normalise with the largest value being 100%, the smallest 0%</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: [1, 0.2, 0, 0.5]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Normalise.</span><span style=\"color:#B392F0\">array</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Normalise with a forced min/max range</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Values outside of range will be clipped</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: [1, 0.4, 0, 1]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Normalise.</span><span style=\"color:#B392F0\">array</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">], </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Range 0-50</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.minMaxAvg.html\"><code>minMaxAvg</code></a> might also be a useful when working with arrays. It returns the minimum, maximum, average and total.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {Arrays} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/collections.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: {total:170, max:100, min:0, avg:42.5}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> mma</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Arrays.</span><span style=\"color:#B392F0\">minMaxAvg</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"individual-values\">Individual values</h2>\n<p>It’s not always feasible to normalise knowing in advance all the possible values, or even knowing the range. <code>Normalise.stream</code> remembers the range of values, producing an adaptive normalisation. <code>scale</code> can also be used for normalisation, but you must provide the expected min and max value.</p>\n<h3 id=\"stream\">Stream</h3>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.Normalise.stream.html\"><code>Normalise.stream</code></a> creates a normalise function which automatically adapts as values are processed.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Normalise } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise a streaming normaliser</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> n</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Normalise.</span><span style=\"color:#B392F0\">stream</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 1, because 5 is the highest seen</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 1, because now 10 is the highest seen</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 0, because it's so far the lowest seen</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 0.5, becaause it's in the middle of the range seen thus far</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">7.5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 1, because now it's the largest seen</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">11</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It should be clear from the examples that different input values may produce the same output value, depending on what has been seen before. For example, an input of 5 yields 1 if 5 is the highest value, but 5 yields 0.05 if 100 is the highest value. It’s good to remember then that normalised values aren’t necessarily comparable to each other.</p>\n<p>It’s possible to ‘prime’ the normalisation if you know in advance what range of values to expect. If a value exceeds the range, the range is updated to encompass the new minimum or maximum.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {Normalise} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise normaliser, assuming range of 0-10 </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> n</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Normalise.</span><span style=\"color:#B392F0\">stream</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 0.5, because it's in the middle of the primed range</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 1, with 11 now treated as the max</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">n</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">11</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"scale\">Scale</h3>\n<p>In contrast to <code>stream</code>, <a href=\"https://clinth.github.io/ixfx/functions/Data.scale.html\"><code>scale</code></a> keeps no record of the current minimum or maximum, but normalises based on the provided range. Use this when you know what the range will be.</p>\n<p>For example, say you have a value of 105, that lies on a scale of 0..1024. What is the proportional value of 105? We want to <em>scale</em> from an input range of 0…1024 to an output range of 0..1.</p>\n<p>A basic scale function (included in ixfx) looks like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> scale</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">v</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">inMin</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">inMax</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">outMin</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">outMax</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (v </span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\"> inMin) </span><span style=\"color:#F97583\">/</span><span style=\"color:#E1E4E8\"> (inMax </span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\"> inMin) </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> (outMax </span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\"> outMin) </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> outMin;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">105</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1024</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: 0.102</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The ixfx scale function optionally allows the scaling to be <em>eased</em> (for non-linear scaling), and if <code>outMin</code>/<code>outMax</code> are not specified, a 0..1 range is presumed.</p>\n<p>Its function signature looks like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(v:number, </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      inMin:number, inMax:number, </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      outMin</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\">number, outMax</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\">number, easing</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\">EasingFn):number</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is how it looks in action:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { scale } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Scales 10 on the range of 0-100, </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// with an output range of 0-1.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 0.10</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0.1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Scales 20 on a range of 20-40</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 0</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">40</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>scale</code> can also map to an output range other than the default of 0..1:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Maps the value 30 from an input range of 20-40 (thus 30 = 0.5 or 50%)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// to an output range of 100-200, yielding 150 (50% of the range 100-200)</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">40</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 150</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If the input value is outside of the specified input range, the output value will likewise be outside of the output range. Use <a href=\"../data/cleanup/#clamping\"><code>clamp</code></a> to ensure the output range is respected:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { scale, clamp, scaleClamped } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 11 is beyond input range of 0-10, so we get</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// an output beyond expected range of 0..1:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">11</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 1.1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Clamp solves that:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">11</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">)); </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Alternatively, use scaleClamped:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// scaleClamped(value, inMin, inMax, outMin, outMax, easing)</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scaleClamped</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">11</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To have a reusable scaling function with the settings ‘baked in’, use <code>scaler</code>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { scaler } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  Signature: scaler(inMin?, inMax?, outMin?, outMax?, easingFn?)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  ie: returns a function that scales a value with </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  the input range of 10..100 and default output range of 0..1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> s</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> scaler</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">s</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Reusable scale function with values baked-in</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If the input range is a percentage, <a href=\"https://clinth.github.io/ixfx/functions/Data.scalePercentages.html\"><code>scalePercentages</code></a> adapts to a new output percentage range. While <code>scale</code> can be used for this, <code>scalePercentage</code> will throw errors if values are outside of legit percentage ranges, helping you to catch errors.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { scalePercentages } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Scale 0.5 to be on a 0.0->0.10 range</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scalePercentages</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.10</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#6A737D\">// 0.05 (5%)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Very similarly named is <a href=\"https://clinth.github.io/ixfx/functions/Data.scalePercent.html\"><code>scalePercentage</code></a>. It also works with an input percentage range, but it has no restrictions on output range.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { scalePercent } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Scales 50% to the range of 10->20</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">scalePercent</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 15</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"geometry\">Geometry</h2>\n<p>Working with normalised geometric references can be useful for the same reason as normalised plain numbers. For example, perhaps you have a stream of <a href=\"../../types/geometry/point/\">points</a> from a computer vision library for the location of a detected nose. This position might be in <em>camera coordinates</em>, meaning that 0,0 represents the top-left corner of a frame from the camera. The max width and height will be determined by the resolution setting of the camera/library.</p>\n<p>You don’t want to have to think about the scale of camera coordinates throughout the code, and importantly, it may change if you opt for a different camera resolution. Normalising to 0,0 - 1,1 may be the answer:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cameraBounds</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {width: </span><span style=\"color:#79B8FF\">1024</span><span style=\"color:#E1E4E8\">, height: </span><span style=\"color:#79B8FF\">768</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x:</span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">300</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> normalised</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  x: pt.x </span><span style=\"color:#F97583\">/</span><span style=\"color:#E1E4E8\"> cameraBounds.width,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  y: pt.y </span><span style=\"color:#F97583\">/</span><span style=\"color:#E1E4E8\"> cameraBounds.height</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You might also want to verify the points don’t exceed 0..1.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { clamp } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> normalisedClamped</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  x: </span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(pt.x </span><span style=\"color:#F97583\">/</span><span style=\"color:#E1E4E8\"> cameraBounds.width),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  y: </span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(pt.y </span><span style=\"color:#F97583\">/</span><span style=\"color:#E1E4E8\"> cameraBounds.height</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>With ixfx, normalising points is possible using <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.normaliseByRect.html\"><code>Points.normaliseByRect</code></a></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/geometry.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cameraBounds</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { width: </span><span style=\"color:#79B8FF\">1024</span><span style=\"color:#E1E4E8\">, height: </span><span style=\"color:#79B8FF\">768</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x:</span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">300</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert point to 0..1 scale, based on camera frame</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> normalised</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">normaliseByRect</span><span style=\"color:#E1E4E8\">(pt, cameraBounds);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.clamp.html\"><code>Points.clamp</code></a> will clamp both <em>x</em> and <em>y</em>, so our earlier example could be simplified to:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> normalised</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(Points.</span><span style=\"color:#B392F0\">normaliseByRect</span><span style=\"color:#E1E4E8\">(pt, cameraBounds));</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you have a normalised point, you will likely need to map it to an absolute space at some point, for example to the dimensions of the viewport. <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.multiply.html\"><code>Points.multiply</code></a> can be used for this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Point } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/geometry.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 1,1 is normalised, meaning {x:100%, y:100%}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x:</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Now we have it in absolute viewport coordinates</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> screenPt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">multiply</span><span style=\"color:#E1E4E8\">(pt, window.innerWidth, window.innerHeight);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"bipolar-values\">Bipolar values</h2>\n<p>The scalar range of 0..1 works for most cases, but sometimes the bipolar scale of -1..1 makes more sense. In this range, 0 represents neutral. It’s still a percentage scaling, but now -100% to 100%, rather than 0 to 100%.</p>\n<p>An obvious use case is panning of audio in the stereo field:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">pan </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> -</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Far left</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">pan </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">  0</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Center</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">pan </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">  1</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Far right</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As with scalars, there are few things we’d like to be able to do with them - especially to help us avoid being out-of-range.</p>\n<p>ixfx has the <a href=\"https://clinth.github.io/ixfx/modules/Data.Bipolar.html\">Data.Bipolar</a> for this.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Clamp an input value to -1..1 range</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1.1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Scale an input value on a specified range to -1..1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// In this case, 50 is the value to scale, and 0..100 is the expected range</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">scale</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 0, because it's in the middle of the 0..100 range</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.Bipolar.toScalar.html\"><code>toScalar</code></a> and <a href=\"https://clinth.github.io/ixfx/functions/Data.Bipolar.fromScalar.html\"><code>fromScalar</code></a> are used for converting between bipolar -1..1 and scalar 0..1.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">fromScalar</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// -1;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">fromScalar</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">fromScalar</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);   </span><span style=\"color:#6A737D\">// 1;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert bipolar value into scalar 0..1 scale</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">toScalar</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">toScalar</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 0.5</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">toScalar</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A common need is to nudge a bipolar value toward its neutral value of zero. We may not care if it’s currently above or below zero, we just want to draw it down to zero. <a href=\"https://clinth.github.io/ixfx/functions/Data.Bipolar.towardZero.html\"><code>towardZero</code></a> helps.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Syntax:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// towardZero(bipolarValue, amountToNudgeBy);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Nudge -1 toward zero by 0.1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">towardZero</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// -0.9</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Nudge 1 toward zero by 0.1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Bipolar.</span><span style=\"color:#B392F0\">towardZero</span><span style=\"color:#E1E4E8\">( </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0.9</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you’re working with bipolar values a lot, there’s also <a href=\"https://clinth.github.io/ixfx/modules/Data.Bipolar.immutable.html\">Data.Bipolar.immutable</a>. It returns an immutable wrapper around a value, hanging the same functions off it.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// If you don't provide an initial value, 0 is used</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Bipolar.</span><span style=\"color:#B392F0\">immutable</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// { value: 0}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Add 0.1 to the bipolar value</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> b.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get the value as a number with value property</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b.value; </span><span style=\"color:#6A737D\">// 0.1</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise a bipolar value with a default of 1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Bipolar.</span><span style=\"color:#B392F0\">immutable</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> b.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">);        </span><span style=\"color:#6A737D\">// { value: 0.5 }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> b.</span><span style=\"color:#B392F0\">multiply</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">);    </span><span style=\"color:#6A737D\">// { value: 0.05 }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> b.</span><span style=\"color:#B392F0\">inverse</span><span style=\"color:#E1E4E8\">();        </span><span style=\"color:#6A737D\">// { value: -0.05 }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> b.</span><span style=\"color:#B392F0\">towardZero</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.01</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// { value: -0.04 }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Interpolate to a value of 1 by 0.1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> b.</span><span style=\"color:#B392F0\">interpolate</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The wrapper converts to a number when needed:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Bipolar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> b </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Bipolar.</span><span style=\"color:#B392F0\">immutable</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// { value: 1 }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> x</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> b </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> 10</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// x = 11</span></span>\n<span class=\"line\"></span></code></pre>";

				const frontmatter = {"title":"Normalising","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/normalising.md";
				const url = "/data/normalising";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n</script>\n\nData coming in from events, sensors etc. can have radically different scales or units. Rather than having to juggle these differences throughout your code, a strategy is to try to _normalise_ it as soon as you can, getting it on a relative percentage scale of 0..1 (0% .. 100%).\n\nNormalisation allows values to be compared more readily: 0.5 (ie. 50%) can represent half volume level, or half of the screen width. That's easier to manage than having to work with the equivalent absolute values of -12dB and 800, and much less of your code has to change if different scaling is needed later on.\n\nIt's easy to apply modulation factors and eventually to map the relative value to some absolute value in the output domain. For example:\n\n```js\n// Normalised value\nconst v = 0.5;\n\n// Get x coordinate at 50%\nconst x = v * window.innerWidth;\n\n// Get a hue at 50%\nconst hue = v * 360;\n```\n\nThe basic steps then are:\n1. Receive data from an event, sensor, stream etc\n2. Normalise on 0..1 scale, discarding original value\n3. Do additional processing on normalised value as needed, applying to state\n4. Map relative state values to output domains, eg pixels, sound level, pulse-width modulation... (see also [`scalePercent`](https://clinth.github.io/ixfx/functions/Data.scalePercent.html))\n\nFor simple normalisation, some sense of the _input_ range of values is needed: a minimum and maximum. For example, although an analog input value might theoretically be in the range of 0..1023, perhaps we've empirically discovered that the usable range is actually 0..400. This would constitute the range of the value.\n\nSee also\n* [Data clean up](../../data/cleanup/)\n\n## Arrays\n\nIf you have all the data in advance, it's easy enough to 'perfectly' normalise, because the smallest and largest value can be determined. [`Normalise.array(source)`](https://clinth.github.io/ixfx/functions/Data.Normalise.array.html) returns a normalised copy of `source`, such that the smallest value becomes 0 and the largest value 1. A range can be forced by passing in a min and max: `Normalise.array(source, min, max)`.\n\n```js\n// repl-pad\nimport { Normalise } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Normalise with the largest value being 100%, the smallest 0%\n// Yields: [1, 0.2, 0, 0.5]\nNormalise.array([100,20,0,50]);\n\n// Normalise with a forced min/max range\n// Values outside of range will be clipped\n// Yields: [1, 0.4, 0, 1]\nNormalise.array([100,20,0,50], 0, 50); // Range 0-50\n```\n\n[`minMaxAvg`](https://clinth.github.io/ixfx/functions/Collections.Arrays.minMaxAvg.html) might also be a useful when working with arrays. It returns the minimum, maximum, average and total.\n\n```js\n// repl-pad\nimport {Arrays} from 'https://unpkg.com/ixfx/dist/collections.js';\n\n// Yields: {total:170, max:100, min:0, avg:42.5}\nconst mma = Arrays.minMaxAvg([100,20,0,50]);\n```\n\n## Individual values\n\nIt's not always feasible to normalise knowing in advance all the possible values, or even knowing the range. `Normalise.stream` remembers the range of values, producing an adaptive normalisation. `scale` can also be used for normalisation, but you must provide the expected min and max value.\n\n### Stream\n\n[`Normalise.stream`](https://clinth.github.io/ixfx/functions/Data.Normalise.stream.html) creates a normalise function which automatically adapts as values are processed.\n\n```js\n// repl-pad\nimport { Normalise } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise a streaming normaliser\nconst n = Normalise.stream();\n\n// Yields 1, because 5 is the highest seen\nn(5);\n\n// Yields 1, because now 10 is the highest seen\nn(10);\n\n// Yields 0, because it's so far the lowest seen\nn(5);\n\n// Yields 0.5, becaause it's in the middle of the range seen thus far\nn(7.5);\n\n// Yields 1, because now it's the largest seen\nn(11);\n```\n\nIt should be clear from the examples that different input values may produce the same output value, depending on what has been seen before. For example, an input of 5 yields 1 if 5 is the highest value, but 5 yields 0.05 if 100 is the highest value. It's good to remember then that normalised values aren't necessarily comparable to each other.\n\nIt's possible to 'prime' the normalisation if you know in advance what range of values to expect. If a value exceeds the range, the range is updated to encompass the new minimum or maximum.\n\n```js\n// repl-pad\nimport {Normalise} from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise normaliser, assuming range of 0-10 \nconst n = Normalise.stream(0, 10);\n\n// Yields 0.5, because it's in the middle of the primed range\nn(5);\n\n// Yields 1, with 11 now treated as the max\nn(11);\n```\n\n### Scale\n\nIn contrast to `stream`, [`scale`](https://clinth.github.io/ixfx/functions/Data.scale.html) keeps no record of the current minimum or maximum, but normalises based on the provided range. Use this when you know what the range will be.\n\nFor example, say you have a value of 105, that lies on a scale of 0..1024. What is the proportional value of 105? We want to _scale_ from an input range of 0...1024 to an output range of 0..1.\n\nA basic scale function (included in ixfx) looks like this:\n\n```js\n// repl-pad\nconst scale = (v, inMin, inMax, outMin, outMax) => {\n  return (v - inMin) / (inMax - inMin) * (outMax - outMin) + outMin;\n};\n\nscale(105, 0, 1024, 0, 1);\n// Yields: 0.102\n```\n\nThe ixfx scale function optionally allows the scaling to be _eased_ (for non-linear scaling), and if `outMin`/`outMax` are not specified, a 0..1 range is presumed.\n\nIts function signature looks like this:\n\n```js\nscale(v:number, \n      inMin:number, inMax:number, \n      outMin?:number, outMax?:number, easing?:EasingFn):number\n```\n\nThis is how it looks in action:\n\n```js\n// repl-pad#1\nimport { scale } from 'https://unpkg.com/ixfx/dist/data.js'\n\n// Scales 10 on the range of 0-100, \n// with an output range of 0-1.\n// Yields 0.10\nscale(10, 0, 100); // 0.1\n\n// Scales 20 on a range of 20-40\n// Yields 0\nscale(20, 20, 40); // 0\n```\n\n`scale` can also map to an output range other than the default of 0..1:\n\n```js\n// repl-pad#1\n// Maps the value 30 from an input range of 20-40 (thus 30 = 0.5 or 50%)\n// to an output range of 100-200, yielding 150 (50% of the range 100-200)\nscale(30, 20, 40, 100, 200); // 150\n```\n\nIf the input value is outside of the specified input range, the output value will likewise be outside of the output range. Use [`clamp`](../data/cleanup/#clamping) to ensure the output range is respected:\n\n```js\n// repl-pad\nimport { scale, clamp, scaleClamped } from 'https://unpkg.com/ixfx/dist/data.js'\n// 11 is beyond input range of 0-10, so we get\n// an output beyond expected range of 0..1:\nscale(11, 0, 10); // 1.1\n\n// Clamp solves that:\nclamp(scale(11, 0, 10)); // 1\n\n// Alternatively, use scaleClamped:\n// scaleClamped(value, inMin, inMax, outMin, outMax, easing)\nscaleClamped(11, 0, 10, 0, 1);\n```\n\nTo have a reusable scaling function with the settings 'baked in', use `scaler`. \n\n```js\n// repl-pad\nimport { scaler } from 'https://unpkg.com/ixfx/dist/data.js'\n//  Signature: scaler(inMin?, inMax?, outMin?, outMax?, easingFn?)\n//  ie: returns a function that scales a value with \n//  the input range of 10..100 and default output range of 0..1\nconst s = scaler(10,100);\n\ns(20); // Reusable scale function with values baked-in\n```\n\nIf the input range is a percentage, [`scalePercentages`](https://clinth.github.io/ixfx/functions/Data.scalePercentages.html) adapts to a new output percentage range. While `scale` can be used for this, `scalePercentage` will throw errors if values are outside of legit percentage ranges, helping you to catch errors.\n\n```js\n// repl-pad\nimport { scalePercentages } from 'https://unpkg.com/ixfx/dist/data.js'\n// Scale 0.5 to be on a 0.0->0.10 range\nscalePercentages(0.5, 0, 0.10) // 0.05 (5%)\n```\n\nVery similarly named is [`scalePercentage`](https://clinth.github.io/ixfx/functions/Data.scalePercent.html). It also works with an input percentage range, but it has no restrictions on output range.\n\n```js\n// repl-pad\nimport { scalePercent } from 'https://unpkg.com/ixfx/dist/data.js'\n// Scales 50% to the range of 10->20\nscalePercent(0.5, 10, 20); // 15\n```\n\n## Geometry\n\nWorking with normalised geometric references can be useful for the same reason as normalised plain numbers. For example, perhaps you have a stream of [points](../../types/geometry/point/) from a computer vision library for the location of a detected nose. This position might be in _camera coordinates_, meaning that 0,0 represents the top-left corner of a frame from the camera. The max width and height will be determined by the resolution setting of the camera/library.\n\nYou don't want to have to think about the scale of camera coordinates throughout the code, and importantly, it may change if you opt for a different camera resolution. Normalising to 0,0 - 1,1 may be the answer:\n\n```js\nconst cameraBounds = {width: 1024, height: 768};\nconst pt = {x:500, 300};\n\nconst normalised = {\n  x: pt.x / cameraBounds.width,\n  y: pt.y / cameraBounds.height\n};\n```\n\nYou might also want to verify the points don't exceed 0..1. \n\n```js\nimport { clamp } from 'https://unpkg.com/ixfx/dist/data.js';\nconst normalisedClamped = {\n  x: clamp(pt.x / cameraBounds.width),\n  y: clamp(pt.y / cameraBounds.height\n};\n```\n\nWith ixfx, normalising points is possible using [`Points.normaliseByRect`](https://clinth.github.io/ixfx/functions/Geometry.Points.normaliseByRect.html)\n\n```js\nimport { Points } from 'https://unpkg.com/ixfx/dist/geometry.js';\nconst cameraBounds = { width: 1024, height: 768 };\nconst pt = { x:500, 300 };\n\n// Convert point to 0..1 scale, based on camera frame\nconst normalised = Points.normaliseByRect(pt, cameraBounds);\n```\n\n[`Points.clamp`](https://clinth.github.io/ixfx/functions/Geometry.Points.clamp.html) will clamp both _x_ and _y_, so our earlier example could be simplified to:\n\n```js\nconst normalised = Points.clamp(Points.normaliseByRect(pt, cameraBounds));\n```\n\nIf you have a normalised point, you will likely need to map it to an absolute space at some point, for example to the dimensions of the viewport. [`Points.multiply`](https://clinth.github.io/ixfx/functions/Geometry.Points.multiply.html) can be used for this:\n\n```js\nimport { Point } from 'https://unpkg.com/ixfx/dist/geometry.js';\n\n// 1,1 is normalised, meaning {x:100%, y:100%}\nconst pt = { x:1, y:1 };\n\n// Now we have it in absolute viewport coordinates\nconst screenPt = Points.multiply(pt, window.innerWidth, window.innerHeight);\n```\n\n## Bipolar values\n\nThe scalar range of 0..1 works for most cases, but sometimes the bipolar scale of -1..1 makes more sense. In this range, 0 represents neutral. It's still a percentage scaling, but now -100% to 100%, rather than 0 to 100%.\n\nAn obvious use case is panning of audio in the stereo field:\n\n```js\npan = -1; // Far left\npan =  0; // Center\npan =  1; // Far right\n```\n\nAs with scalars, there are few things we'd like to be able to do with them - especially to help us avoid being out-of-range.\n\nixfx has the [Data.Bipolar](https://clinth.github.io/ixfx/modules/Data.Bipolar.html) for this.\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Clamp an input value to -1..1 range\nBipolar.clamp(1.1); // 1\n\n// Scale an input value on a specified range to -1..1\n// In this case, 50 is the value to scale, and 0..100 is the expected range\nBipolar.scale(50, 0, 100);  // 0, because it's in the middle of the 0..100 range\n```\n\n[`toScalar`](https://clinth.github.io/ixfx/functions/Data.Bipolar.toScalar.html) and [`fromScalar`](https://clinth.github.io/ixfx/functions/Data.Bipolar.fromScalar.html) are used for converting between bipolar -1..1 and scalar 0..1.\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\n\nBipolar.fromScalar(0);   // -1;\nBipolar.fromScalar(0.5); // 0;\nBipolar.fromScalar(1);   // 1;\n\n// Convert bipolar value into scalar 0..1 scale\nBipolar.toScalar(-1); // 0\nBipolar.toScalar(0);  // 0.5\nBipolar.toScalar(1);  // 1\n```\n\nA common need is to nudge a bipolar value toward its neutral value of zero. We may not care if it's currently above or below zero, we just want to draw it down to zero. [`towardZero`](https://clinth.github.io/ixfx/functions/Data.Bipolar.towardZero.html) helps.\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Syntax:\n// towardZero(bipolarValue, amountToNudgeBy);\n\n// Nudge -1 toward zero by 0.1\nBipolar.towardZero(-1, 0.1); // -0.9\n\n// Nudge 1 toward zero by 0.1\nBipolar.towardZero( 1, 0.1); // 0.9\n```\n\nIf you're working with bipolar values a lot, there's also [Data.Bipolar.immutable](https://clinth.github.io/ixfx/modules/Data.Bipolar.immutable.html). It returns an immutable wrapper around a value, hanging the same functions off it.\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// If you don't provide an initial value, 0 is used\nlet b = Bipolar.immutable(); // { value: 0}\n\n// Add 0.1 to the bipolar value\nb = b.add(0.1);\n\n// Get the value as a number with value property\nb.value; // 0.1\n```\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise a bipolar value with a default of 1\nb = Bipolar.immutable(1);\n\nb = b.add(-0.5);        // { value: 0.5 }\nb = b.multiply(0.1);    // { value: 0.05 }\nb = b.inverse();        // { value: -0.05 }\nb = b.towardZero(0.01); // { value: -0.04 }\n\n// Interpolate to a value of 1 by 0.1\nb = b.interpolate(0.1, 1);\n```\n\nThe wrapper converts to a number when needed:\n\n```js\n// repl-pad\nimport { Bipolar } from 'https://unpkg.com/ixfx/dist/data.js';\nlet b = Bipolar.immutable(1); // { value: 1 }\nconst x = b + 10; // x = 11\n````";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"arrays","text":"Arrays"},{"depth":2,"slug":"individual-values","text":"Individual values"},{"depth":3,"slug":"stream","text":"Stream"},{"depth":3,"slug":"scale","text":"Scale"},{"depth":2,"slug":"geometry","text":"Geometry"},{"depth":2,"slug":"bipolar-values","text":"Bipolar values"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
