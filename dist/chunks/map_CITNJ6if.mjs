import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Maps.html\">Collections.Maps module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</ul></div>\n<p>Javascript has an in-built <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a> object which is used for tracking key-value pairs. In other words, it maps a given <em>key</em> to a given <em>value</em>. The basic operations of a map are <code>set()</code>,<code>get()</code>, <code>delete()</code> and <code>has()</code>.</p>\n<p>Maps can be useful when there is a meaningful and unique way of referring to values, where we want the possibilty to get <em>just that one thing</em> efficiently.</p>\n<p>You can think of a map like a dictionary. If you want to look up a definition (a <em>value</em>), you need the word (the <em>key</em>). We could say that the dictionary is <em>keyed</em> by words. If a new definition is to be added to the dictionary (ie a new value), we have to add it with its word (ie its key), we can’t just throw it in without.</p>\n<p><a href=\"../arrays/\">Arrays</a> can also let you efficiently get an item, but only by its numerical <em>index</em>. In some cases, using an index makes perfect sense - getting the <em>first</em> item in a sorted array, for example. But thinking again of the dictionary, it doesn’t seem useful to want to get the 300th word. We’d much rather store and get items by some kind of unique identifier.</p>\n<h2 id=\"basic-operations\">Basic operations</h2>\n<p>When storing objects in a map, keys are often a particular property that we expect to be unique. For example, maybe we have Fruit type, and we expect the <em>name</em> of the fruit to be unique, but not its colour, or flavour values.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a1</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { name: </span><span style=\"color:#9ECBFF\">`granny-smith`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`green`</span><span style=\"color:#E1E4E8\">, flavour: </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a2</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { name: </span><span style=\"color:#9ECBFF\">`golden-delicious`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`yellow`</span><span style=\"color:#E1E4E8\">, flavour: </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(a1.name, a1);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(a2.name, a2);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`granny-smith`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// True</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> apple</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> map.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`granny-smith`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">apple.flavour; </span><span style=\"color:#6A737D\">// 4</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the above example, you can see <code>set()</code> being used to add an object by its key (in this case its <em>name</em> property), and <code>get()</code> being used to retrieve an item by its key. If nothing is stored under a key, <em>undefined</em> is returned. <code>has()</code> returns true/false if a key exists too.</p>\n<p>Items are deleted by key:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">delete</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`golden-delicious`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The contents of a map can be iterated over. You can iterate over keys and values separately:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Iterate by key</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> key</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> map.</span><span style=\"color:#B392F0\">keys</span><span style=\"color:#E1E4E8\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> map.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(key); </span><span style=\"color:#6A737D\">// Get value for key</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Iterate over values</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> map.</span><span style=\"color:#B392F0\">values</span><span style=\"color:#E1E4E8\">()) {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or you can iterate over <em>entries</em>, which is an array of both key and value</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">key</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">value</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">of</span><span style=\"color:#E1E4E8\"> map.</span><span style=\"color:#B392F0\">entries</span><span style=\"color:#E1E4E8\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Use key and value as needed...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"alternatives-and-limitations\">Alternatives and limitations</h2>\n<p>One side effect of a map is that only unique keys are stored. If you <code>set()</code> a second item with an existing key, the earlier value is overriden. If the desired outcome is simply to have unique values, consider using the <a href=\"./set/\">Set</a>.</p>\n<p>Maps only store a single item per key. There are occasions where we’d rather group items by a key. For that, see <a href=\"./mapMultiple\">Map Multiple</a>.</p>\n<h2 id=\"helper-functions\">Helper functions</h2>\n<p>ixfx has a few helper functions for working with maps. To import these functions:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"has\">Has</h3>\n<p>JS has <code>Map.has()</code>, returning a boolean if a key is present. We can’t check if a value is present. <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.hasAnyValue.html\"><code>Maps.hasAnyValue()</code></a> takes the map to look over, a value, and a comparison function that returns true or false if two values match.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Compare fruits based on their colour property</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> colourComparer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">a</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">b</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> a.colour </span><span style=\"color:#F97583\">===</span><span style=\"color:#E1E4E8\"> b.colour;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns true if any fruit has the colour red</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Maps.</span><span style=\"color:#B392F0\">hasAnyValue</span><span style=\"color:#E1E4E8\">(map, { colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\"> }, colourComparer);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.hasKeyValue.html\"><code>hasKeyValue</code></a> returns true if a given key exists <em>and</em> the value matches as well.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Returns true if the stored apple is also red</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Maps.</span><span style=\"color:#B392F0\">hasKeyValue</span><span style=\"color:#E1E4E8\">(map, </span><span style=\"color:#9ECBFF\">`apple`</span><span style=\"color:#E1E4E8\">, { colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\"> }, colourComparer);</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"iterating\">Iterating</h3>\n<p>To get all the values of a map as an array, the syntax for that is:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> values</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">values</span><span style=\"color:#E1E4E8\">()];</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or alternatively using ixfx’s <code>Maps.toArray</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> values</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">toArray</span><span style=\"color:#E1E4E8\">(map);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>Maps.filter</code> iterates over all values of a map that match a given predicate:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#FFAB70\"> value</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> value.colour </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> `red`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">filter</span><span style=\"color:#E1E4E8\">(map, p)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Iterates all the values with .colour = `red`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To iterate over sorted values, use <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValue.html\"><code>Maps.sortByValue</code></a>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> m</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">m.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`1`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`zebra`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">m.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`2`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`ant`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> values</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">sortByValue</span><span style=\"color:#E1E4E8\">(map);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// [`ant`, `zebra`]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If the map contains objects, you will want to provide a custom comparer function. An alternative is to use <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValueProperty.html\"><code>Maps.sortByValue</code></a>, which sorts by the property of a value.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">cosnt m </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">m.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`4491`</span><span style=\"color:#E1E4E8\">, { name: </span><span style=\"color:#9ECBFF\">`Bob`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">m.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`2319`</span><span style=\"color:#E1E4E8\">, { name: </span><span style=\"color:#9ECBFF\">`Alice`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> sorted</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">sortByValue</span><span style=\"color:#E1E4E8\">(m, </span><span style=\"color:#9ECBFF\">`name`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// [ { name: `Alice` }, { name: `Bob` }]</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"deleting\">Deleting</h3>\n<p>Deleting from a map is usually by key (<code>map.delete(key)</code>), but if you want to delete a particular value, regardless of its key, consider ixfx’s <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.deleteByValue.html\"><code>Maps.deleteByValue</code></a>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Compare fruits based on their colour property</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> colourComparer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">a</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">b</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> a.colour </span><span style=\"color:#F97583\">===</span><span style=\"color:#E1E4E8\"> b.colour;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Deletes all values where .colour = `red`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Maps.</span><span style=\"color:#B392F0\">deleteByValue</span><span style=\"color:#E1E4E8\">(map, { colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\"> }, colourComparer);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"conversions\">Conversions</h2>\n<p>If you already have something iterable (eg an array or other collection), you can make a map from it with ixfx’s <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.fromIterable.html\"><code>Maps.fromIterable</code></a>. It needs a function that generates a key for a given value. An optional third parameter allows keys to be overwritten (false by default)</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  { fruit: </span><span style=\"color:#9ECBFF\">`granny-smith`</span><span style=\"color:#E1E4E8\">, family: </span><span style=\"color:#9ECBFF\">`apple`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`green`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  { fruit: </span><span style=\"color:#9ECBFF\">`mango`</span><span style=\"color:#E1E4E8\">, family: </span><span style=\"color:#9ECBFF\">`stone-fruit`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`orange`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">fromIterable</span><span style=\"color:#E1E4E8\">(data, </span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> v.fruit);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>[<code>Maps.fromObject</code>] converts a plain object into a map, using its top-level properties as keys.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> Sally: { name: </span><span style=\"color:#9ECBFF\">`Sally`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> Bob:   { name: </span><span style=\"color:#9ECBFF\">`Bob`</span><span style=\"color:#E1E4E8\">,   colour: </span><span style=\"color:#9ECBFF\">`pink`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">fromObject</span><span style=\"color:#E1E4E8\">(data);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Sally`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// { name: `Sally`, colour: `red` }</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"get-or-generate\">Get or generate</h2>\n<p>A common pattern working with maps to retrieve something by a given key, and if it doesn’t exist to create an object for that key.</p>\n<p>For example, if we are processing multi-touch input, each pointer event has a <code>pointerId</code>, and we may want to track that over time. Since it’s a unique identifier, a map makes perfect sense. We either want to get the existing tracker for <em>that</em> pointer, or create a new tracker if it’s an id that we haven’t encountered yet.</p>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.getOrGenerate-1.html\"><code>Maps.getOrGenerate</code></a> can assist.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set up</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> trackers</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">getOrGenerate</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">(), </span><span style=\"color:#FFAB70\">key</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // This runs whenever there is a new key stored,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // adding the returned value to the map</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> MagicalPointerTracker</span><span style=\"color:#E1E4E8\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointermove`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">async</span><span style=\"color:#FFAB70\"> evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Get a MagicalPointerTracker instance for this pointerId,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // creating it if it doesn't exist</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> tracker</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> trackers</span><span style=\"color:#E1E4E8\">(evt.pointerId);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note the use of <code>await</code>. This means that we can use asynchronous functions to generate new values on demand. Alternatively, use <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.getOrGenerateSync.html\"><code>getOrGenerateSync</code></a> which has the same signature, but doesn’t need <code>await</code> when accessing.</p>\n<h2 id=\"adding\">Adding</h2>\n<p>By default, adding a key-value pair to a map will overwrite an existing entry with same key. Sometimes this ‘last write wins’ logic is not wanted, and instead we want to throw away values if they would overwrite something older. <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.addKeepingExisting.html\"><code>Maps.addKeepingExisting</code></a> to the rescue.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Function that generates a key for a value</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> keyFn</span><span style=\"color:#F97583\"> =</span><span style=\"color:#FFAB70\"> v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> v.name;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Values to add</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> values</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  { name: </span><span style=\"color:#9ECBFF\">`Sally`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  { name: </span><span style=\"color:#9ECBFF\">`Bob`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`pink`</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  { name: </span><span style=\"color:#9ECBFF\">`Sally`</span><span style=\"color:#E1E4E8\">, colour: </span><span style=\"color:#9ECBFF\">`green`</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#6A737D\">/* this one will get ignored */</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Add values</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Maps.</span><span style=\"color:#B392F0\">addKeepingExisting</span><span style=\"color:#E1E4E8\">(map, keyFn, </span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">values);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Sally`</span><span style=\"color:#E1E4E8\">).colour; </span><span style=\"color:#6A737D\">// `red`</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the above example, we can see that the older value for ‘Sally’ is kept.</p>\n<h2 id=\"transformations\">Transformations</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.mapToArray.html\"><code>Maps.mapToArray</code></a> allows an array of values to be generated from a map. This can be useful if you want to pluck out a particular property from each value, or transform values.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Where map contains things like:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  Sally -> { name: `Sally`, colour: `red` }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  Bob   -> { name: `Bob`, colour: `pink` }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> altered</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">mapToArray</span><span style=\"color:#E1E4E8\">(map, (</span><span style=\"color:#FFAB70\">key</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">person</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  ...</span><span style=\"color:#E1E4E8\">person,</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  name</span><span style=\"color:#E1E4E8\">: person.name.</span><span style=\"color:#B392F0\">toUpperCase</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  rand</span><span style=\"color:#E1E4E8\">: Math.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields an array: [</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  { name: `SALLY`, colour: `red`, rand: 0.351 },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  { name: `BOB`, colour: `pink`, rand: 0.912 }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ]</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.toObject.html\"><code>Maps.toObject</code></a> converts a map to a plain object, this is useful for turning into a JSON string representation.</p>\n<p>Given the same example map from above:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> objects</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">toObject</span><span style=\"color:#E1E4E8\">(map);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  Sally: { name: `Sally`, colour: `red` },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  Bob: { name: `Bob`, colour: `pink` }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Use <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.fromObject.html\"><code>Maps.fromObject</code></a> to convert back from a plain object.</p>\n<p><em>Mapping</em> over a collection of values is common when dealing with arrays. It allows you to transform each element of an array, returning a new array with the transformed values. There is no in built <code>map()</code> for Maps, but you can use ixfx’s <a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.transformMap.html\"><code>Maps.transformMap</code></a> for a similar outcome.</p>\n<p>Like a regular map, it takes a map function which must return a transformed version of its input value.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`a`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`Ant`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`b`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`Bee`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`c`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`Cat`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> transformer</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">value</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">key</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> { animal: value };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> newMap</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">transformMap</span><span style=\"color:#E1E4E8\">(map, transformer);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`b`</span><span style=\"color:#E1E4E8\">);    </span><span style=\"color:#6A737D\">// Yields: `Bee`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">newMap.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`b`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Yields: { animal: `Bee` }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The above example could be expressed more succinctly:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> newMap</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">transformMap</span><span style=\"color:#E1E4E8\">(map, (</span><span style=\"color:#FFAB70\">value</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">key</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#B392F0\">animal</span><span style=\"color:#E1E4E8\">: value });</span></span>\n<span class=\"line\"></span></code></pre>\n<p><em>Zippering</em> is combining two aligned arrays together. In the case of a map, we might want to combine an array of keys with an array of values using\n<a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.zipKeyValue.html\"><code>Maps.zipKeyValue</code></a>. The length of both arrays must be the same.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Maps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> keys</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`a`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`b`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`c`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> values</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`ant`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`bee`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`cat`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Maps.</span><span style=\"color:#B392F0\">zipKeyValue</span><span style=\"color:#E1E4E8\">(keys, values);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`b`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Yields: `bee`</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"expiring-map\">Expiring Map</h2>\n<p>The <a href=\"https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html\"><code>ExpiringMap</code></a> is a class where values expire after some period. This is useful for caches or cases where there’s not a good logic for when to remove things.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> ExpiringMap</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`fruit`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`apple`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Delete all entries set more than 100ms ago</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">deleteWithElapsed</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`set`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Delete all entries that have not been accessed for more than 100ms</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">deleteWithElapsed</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`get`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get the time since the key 'fruit' was last accessed</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">elapsedGet</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`fruit`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get the time since the key `fruit` was last set</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">elapsedSet</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`fruit`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>When creating the map, you can opt to have it automatically delete items:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Delete any entry not accessed for over one second</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> ExpiringMap</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  autoDeleteElapsed: </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  autoDeletePolicy: </span><span style=\"color:#9ECBFF\">`get`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See the API docs for more on the options.</p>\n<p>There are also some events to listen for automatic expiry: ‘expired’, ‘removed’ and ‘newKey’.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">map.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`expired`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">event</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">key</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">value</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> event;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"more-functions-for-working-with-maps\">More functions for working with maps</h2>\n<p>Finding</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.find.html\"><code>find</code></a> - Finds first value that matches a predicate</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.firstEntryByIterableValue.html\"><code>firstEntryByIterableValue</code></a> - Finds first entry that matches value</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.firstEntryByIterableValue.html\"><code>firstEntryByIterablePredicate</code></a> - Finds first entry that matches predicate (same as <code>find</code>)</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.getClosestIntegerKey.html\"><code>getClosestIntegerKey</code></a> - assumes all keys are integers, gets the closest present key</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.getFromKeys.html\"><code>getFromKeys</code></a> - given a set of keys, returns the value for the first one that is present</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.hasAnyValue.html\"><code>hasAnyValue</code></a> - returns true if value is in the map</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.hasKeyValue.html\"><code>hasAnyKeyValue</code></a>- returns true if value is present under key</li>\n</ul>\n<p>Iterating</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.filter.html\"><code>filter</code></a> - iterate over values where predicate returns true</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValue.html\"><code>sortByValue</code></a> - returns values, sorted</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValueProperty.html\"><code>sortByValueProperty</code></a> - returns entries, sorted by a chosen property</li>\n</ul>\n<p>Adding values</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.addKeepingExisting.html\"><code>addKeepExisting</code></a></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.addObject.html\"><code>addObject</code></a></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.getOrGenerate-1.html\"><code>getOrGenerate</code></a> - get by key or create &#x26; add new item</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.mergeByKey.html\"><code>mergeByKey</code></a> - merge two maps, with a reconcile function to merge values that use same key</li>\n</ul>\n<p>Removing/changing values</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.deleteByValue.html\"><code>deleteByValue</code></a> - remove by value rather than key</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.transformMap.html\"><code>transformMap</code></a> - for each entry, runs it through a function and into a new map</li>\n</ul>\n<p>Creating maps</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.fromIterable.html\"><code>fromIterable</code></a></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.fromObject.html\"><code>fromObject</code></a></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.immutable.html\"><code>immutable</code></a> - creates an immutable map</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.mutable.html\"><code>mutable</code></a> - creates a mutable map</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.zipKeyValue.html\"><code>zipKeyValue</code></a> - combine an array of keys and an array of values into an object</li>\n</ul>\n<p>Multiple values per key maps</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.mapOfSimpleMutable-1.html\"><code>mapOfSimpleMutable</code></a> - map that can store many values per key, less functions than the others below</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.ofArrayMutable.html\"><code>ofArrayMutable</code></a> - Uses an array to store values</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.ofCircularMutable.html\"><code>ofCircularMutable</code></a> - Uses a circular array of limited capacity</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.ofSetMutable.html\"><code>ofSetMutable</code></a> - Uses a set to store unique values</li>\n</ul>\n<p>Converting maps</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.mapToArray.html\"><code>mapToArray</code></a></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.mapToObjectTransform.html\"><code>mapToObjectTransform</code></a></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Maps.toObject.html\"><code>toObject</code></a></li>\n</ul>";

				const frontmatter = {"title":"Map","setup":"import {Markdown} from 'astro/components';\nimport Layout from '../../../layouts/MainLayout.astro';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/collections/map.md";
				const url = "/data/collections/map";
				function rawContent() {
					return "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Maps.html\">Collections.Maps module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\nJavascript has an in-built [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) object which is used for tracking key-value pairs. In other words, it maps a given _key_ to a given _value_. The basic operations of a map are `set()`,`get()`, `delete()` and `has()`.\n\nMaps can be useful when there is a meaningful and unique way of referring to values, where we want the possibilty to get _just that one thing_ efficiently. \n\nYou can think of a map like a dictionary. If you want to look up a definition (a _value_), you need the word (the _key_). We could say that the dictionary is _keyed_ by words. If a new definition is to be added to the dictionary (ie a new value), we have to add it with its word (ie its key), we can't just throw it in without.\n\n[Arrays](../arrays/) can also let you efficiently get an item, but only by its numerical _index_. In some cases, using an index makes perfect sense - getting the _first_ item in a sorted array, for example. But thinking again of the dictionary, it doesn't seem useful to want to get the 300th word. We'd much rather store and get items by some kind of unique identifier.\n\n## Basic operations\n\nWhen storing objects in a map, keys are often a particular property that we expect to be unique. For example, maybe we have Fruit type, and we expect the _name_ of the fruit to be unique, but not its colour, or flavour values.\n\n```js\nconst a1 = { name: `granny-smith`, colour: `green`, flavour: 4 }\nconst a2 = { name: `golden-delicious`, colour: `yellow`, flavour: 2 }\nconst map = new Map();\nmap.set(a1.name, a1);\nmap.set(a2.name, a2);\n\nmap.has(`granny-smith`); // True\nconst apple = map.get(`granny-smith`);\napple.flavour; // 4\n```\n\nIn the above example, you can see `set()` being used to add an object by its key (in this case its _name_ property), and `get()` being used to retrieve an item by its key. If nothing is stored under a key, _undefined_ is returned. `has()` returns true/false if a key exists too.\n\nItems are deleted by key:\n\n```js\nmap.delete(`golden-delicious`);\n```\n\nThe contents of a map can be iterated over. You can iterate over keys and values separately:\n```js\n// Iterate by key\nfor (const key of map.keys()) {\n  const value = map.get(key); // Get value for key\n}\n\n// Iterate over values\nfor (const value of map.values()) {\n\n}\n```\n\nOr you can iterate over _entries_, which is an array of both key and value\n\n```js\nfor (const [key,value] of map.entries()) {\n  // Use key and value as needed...\n}\n```\n\n## Alternatives and limitations\n\nOne side effect of a map is that only unique keys are stored. If you `set()` a second item with an existing key, the earlier value is overriden. If the desired outcome is simply to have unique values, consider using the [Set](./set/).\n\nMaps only store a single item per key. There are occasions where we'd rather group items by a key. For that, see [Map Multiple](./mapMultiple).\n\n## Helper functions\n\nixfx has a few helper functions for working with maps. To import these functions:\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n```\n\n### Has\n\nJS has `Map.has()`, returning a boolean if a key is present. We can't check if a value is present. [`Maps.hasAnyValue()`](https://clinth.github.io/ixfx/functions/Collections.Maps.hasAnyValue.html) takes the map to look over, a value, and a comparison function that returns true or false if two values match.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\n// Compare fruits based on their colour property\nconst colourComparer = (a, b) => a.colour === b.colour;\n\n// Returns true if any fruit has the colour red\nMaps.hasAnyValue(map, { colour: `red` }, colourComparer);\n```\n\n[`hasKeyValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.hasKeyValue.html) returns true if a given key exists _and_ the value matches as well.\n\n```js\n// Returns true if the stored apple is also red\nMaps.hasKeyValue(map, `apple`, { colour: `red` }, colourComparer);\n```\n\n### Iterating\n\nTo get all the values of a map as an array, the syntax for that is:\n\n```js\nconst values = [...map.values()];\n```\n\nOr alternatively using ixfx's `Maps.toArray`:\n```js\nconst values = Maps.toArray(map);\n```\n\n`Maps.filter` iterates over all values of a map that match a given predicate:\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\nconst p = value => value.colour === `red`;\nfor (const value of Maps.filter(map, p)) {\n  // Iterates all the values with .colour = `red`\n}\n```\n\nTo iterate over sorted values, use [`Maps.sortByValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValue.html):\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\nconst m = new Map();\nm.set(`1`, `zebra`);\nm.set(`2`, `ant`);\n\nconst values = Maps.sortByValue(map);\n// Yields:\n// [`ant`, `zebra`]\n```\n\nIf the map contains objects, you will want to provide a custom comparer function. An alternative is to use [`Maps.sortByValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValueProperty.html), which sorts by the property of a value.\n\n```js\ncosnt m = new Map();\nm.set(`4491`, { name: `Bob` });\nm.set(`2319`, { name: `Alice` });\nconst sorted = Maps.sortByValue(m, `name`);\n// Yields:\n// [ { name: `Alice` }, { name: `Bob` }]\n```\n\n### Deleting\n\nDeleting from a map is usually by key (`map.delete(key)`), but if you want to delete a particular value, regardless of its key, consider ixfx's [`Maps.deleteByValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.deleteByValue.html):\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\n// Compare fruits based on their colour property\nconst colourComparer = (a, b) => a.colour === b.colour;\n\n// Deletes all values where .colour = `red`\nMaps.deleteByValue(map, { colour: `red` }, colourComparer);\n```\n\n## Conversions\n\nIf you already have something iterable (eg an array or other collection), you can make a map from it with ixfx's [`Maps.fromIterable`](https://clinth.github.io/ixfx/functions/Collections.Maps.fromIterable.html). It needs a function that generates a key for a given value. An optional third parameter allows keys to be overwritten (false by default)\n\n```js\nconst data = [ \n  { fruit: `granny-smith`, family: `apple`, colour: `green` }\n  { fruit: `mango`, family: `stone-fruit`, colour: `orange` }\n];\nconst map = Maps.fromIterable(data, v => v.fruit);\n```\n\n[`Maps.fromObject`] converts a plain object into a map, using its top-level properties as keys.\n\n```js\nconst data = {\n Sally: { name: `Sally`, colour: `red` },\n Bob:   { name: `Bob`,   colour: `pink` }\n};\nconst map = Maps.fromObject(data);\nmap.get(`Sally`); // { name: `Sally`, colour: `red` }\n```\n\n## Get or generate\n\nA common pattern working with maps to retrieve something by a given key, and if it doesn't exist to create an object for that key.\n\nFor example, if we are processing multi-touch input, each pointer event has a `pointerId`, and we may want to track that over time. Since it's a unique identifier, a map makes perfect sense. We either want to get the existing tracker for _that_ pointer, or create a new tracker if it's an id that we haven't encountered yet.\n\n[`Maps.getOrGenerate`](https://clinth.github.io/ixfx/functions/Collections.Maps.getOrGenerate-1.html) can assist.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n// Set up\nconst trackers = Maps.getOrGenerate(new Map(), key => {\n  // This runs whenever there is a new key stored,\n  // adding the returned value to the map\n  return new MagicalPointerTracker(key);\n})\n\ndocument.addEventListener(`pointermove`, async evt => {\n  // Get a MagicalPointerTracker instance for this pointerId,\n  // creating it if it doesn't exist\n  const tracker = await trackers(evt.pointerId);\n})\n```\n\nNote the use of `await`. This means that we can use asynchronous functions to generate new values on demand. Alternatively, use [`getOrGenerateSync`](https://clinth.github.io/ixfx/functions/Collections.Maps.getOrGenerateSync.html) which has the same signature, but doesn't need `await` when accessing.\n\n## Adding\n\nBy default, adding a key-value pair to a map will overwrite an existing entry with same key. Sometimes this 'last write wins' logic is not wanted, and instead we want to throw away values if they would overwrite something older. [`Maps.addKeepingExisting`](https://clinth.github.io/ixfx/functions/Collections.Maps.addKeepingExisting.html) to the rescue.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\";\n// Function that generates a key for a value\nconst keyFn = v => v.name;\n\n// Values to add\nconst values = [\n  { name: `Sally`, colour: `red` },\n  { name: `Bob`, colour: `pink` },\n  { name: `Sally`, colour: `green` } /* this one will get ignored */\n]\nconst map = new Map();\n\n// Add values\nMaps.addKeepingExisting(map, keyFn, ...values);\nmap.get(`Sally`).colour; // `red`\n```\n\nIn the above example, we can see that the older value for 'Sally' is kept.\n\n## Transformations\n\n[`Maps.mapToArray`](https://clinth.github.io/ixfx/functions/Collections.Maps.mapToArray.html) allows an array of values to be generated from a map. This can be useful if you want to pluck out a particular property from each value, or transform values.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\";\n// Where map contains things like:\n//  Sally -> { name: `Sally`, colour: `red` }\n//  Bob   -> { name: `Bob`, colour: `pink` }\nconst altered = Maps.mapToArray(map, (key, person) => {\n  ...person,\n  name: person.name.toUpperCase();\n  rand: Math.random();\n});\n// Yields an array: [\n//  { name: `SALLY`, colour: `red`, rand: 0.351 },\n//  { name: `BOB`, colour: `pink`, rand: 0.912 }\n// ]\n```\n\n[`Maps.toObject`](https://clinth.github.io/ixfx/functions/Collections.Maps.toObject.html) converts a map to a plain object, this is useful for turning into a JSON string representation.\n\nGiven the same example map from above:\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\";\nconst objects = Maps.toObject(map);\n// Yields: {\n//  Sally: { name: `Sally`, colour: `red` },\n//  Bob: { name: `Bob`, colour: `pink` }\n// }\n```\n\nUse [`Maps.fromObject`](https://clinth.github.io/ixfx/functions/Collections.Maps.fromObject.html) to convert back from a plain object.\n\n_Mapping_ over a collection of values is common when dealing with arrays. It allows you to transform each element of an array, returning a new array with the transformed values. There is no in built `map()` for Maps, but you can use ixfx's [`Maps.transformMap`](https://clinth.github.io/ixfx/functions/Collections.Maps.transformMap.html) for a similar outcome.\n\nLike a regular map, it takes a map function which must return a transformed version of its input value.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\";\nconst map = new Map();\nmap.set(`a`, `Ant`);\nmap.set(`b`, `Bee`);\nmap.set(`c`, `Cat`);\n\nconst transformer = (value, key) => {\n  return { animal: value };\n};\n\nconst newMap = Maps.transformMap(map, transformer);\n\nmap.get(`b`);    // Yields: `Bee`\nnewMap.get(`b`); // Yields: { animal: `Bee` }\n```\n\nThe above example could be expressed more succinctly:\n\n```js\nconst newMap = Maps.transformMap(map, (value, key) => { animal: value });\n```\n\n_Zippering_ is combining two aligned arrays together. In the case of a map, we might want to combine an array of keys with an array of values using \n[`Maps.zipKeyValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.zipKeyValue.html). The length of both arrays must be the same.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\";\nconst keys = [`a`, `b`, `c`];\nconst values = [`ant`, `bee`, `cat`];\nconst map = Maps.zipKeyValue(keys, values);\nmap.get(`b`); // Yields: `bee`\n```\n\n## Expiring Map\n\nThe [`ExpiringMap`](https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html) is a class where values expire after some period. This is useful for caches or cases where there's not a good logic for when to remove things.\n\n```js\nconst map = new ExpiringMap();\nmap.set(`fruit`, `apple`);\n\n// Delete all entries set more than 100ms ago\nmap.deleteWithElapsed(100, `set`);\n\n// Delete all entries that have not been accessed for more than 100ms\nmap.deleteWithElapsed(100, `get`);\n\n// Get the time since the key 'fruit' was last accessed\nmap.elapsedGet(`fruit`);\n\n// Get the time since the key `fruit` was last set\nmap.elapsedSet(`fruit`);\n```\n\nWhen creating the map, you can opt to have it automatically delete items:\n```js\n// Delete any entry not accessed for over one second\nconst map = new ExpiringMap({\n  autoDeleteElapsed: 1000,\n  autoDeletePolicy: `get`\n});\n```\n\nSee the API docs for more on the options.\n\nThere are also some events to listen for automatic expiry: 'expired', 'removed' and 'newKey'.\n```js\nmap.addEventListener(`expired`, event => {\n  const { key, value } = event;\n});\n```\n\n## More functions for working with maps\n\nFinding\n* [`find`](https://clinth.github.io/ixfx/functions/Collections.Maps.find.html) - Finds first value that matches a predicate\n* [`firstEntryByIterableValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.firstEntryByIterableValue.html) - Finds first entry that matches value\n* [`firstEntryByIterablePredicate`](https://clinth.github.io/ixfx/functions/Collections.Maps.firstEntryByIterableValue.html) - Finds first entry that matches predicate (same as `find`)\n* [`getClosestIntegerKey`](https://clinth.github.io/ixfx/functions/Collections.Maps.getClosestIntegerKey.html) - assumes all keys are integers, gets the closest present key\n* [`getFromKeys`](https://clinth.github.io/ixfx/functions/Collections.Maps.getFromKeys.html) - given a set of keys, returns the value for the first one that is present\n* [`hasAnyValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.hasAnyValue.html) - returns true if value is in the map\n* [`hasAnyKeyValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.hasKeyValue.html)- returns true if value is present under key\n\nIterating\n* [`filter`](https://clinth.github.io/ixfx/functions/Collections.Maps.filter.html) - iterate over values where predicate returns true\n* [`sortByValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValue.html) - returns values, sorted\n* [`sortByValueProperty`](https://clinth.github.io/ixfx/functions/Collections.Maps.sortByValueProperty.html) - returns entries, sorted by a chosen property\n\nAdding values\n* [`addKeepExisting`](https://clinth.github.io/ixfx/functions/Collections.Maps.addKeepingExisting.html)\n* [`addObject`](https://clinth.github.io/ixfx/functions/Collections.Maps.addObject.html)\n* [`getOrGenerate`](https://clinth.github.io/ixfx/functions/Collections.Maps.getOrGenerate-1.html) - get by key or create & add new item\n* [`mergeByKey`](https://clinth.github.io/ixfx/functions/Collections.Maps.mergeByKey.html) - merge two maps, with a reconcile function to merge values that use same key\n  \nRemoving/changing values\n* [`deleteByValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.deleteByValue.html) - remove by value rather than key\n* [`transformMap`](https://clinth.github.io/ixfx/functions/Collections.Maps.transformMap.html) - for each entry, runs it through a function and into a new map\n\nCreating maps\n* [`fromIterable`](https://clinth.github.io/ixfx/functions/Collections.Maps.fromIterable.html)\n* [`fromObject`](https://clinth.github.io/ixfx/functions/Collections.Maps.fromObject.html)\n* [`immutable`](https://clinth.github.io/ixfx/functions/Collections.Maps.immutable.html) - creates an immutable map\n* [`mutable`](https://clinth.github.io/ixfx/functions/Collections.Maps.mutable.html) - creates a mutable map\n* [`zipKeyValue`](https://clinth.github.io/ixfx/functions/Collections.Maps.zipKeyValue.html) - combine an array of keys and an array of values into an object\n\nMultiple values per key maps\n* [`mapOfSimpleMutable`](https://clinth.github.io/ixfx/functions/Collections.Maps.mapOfSimpleMutable-1.html) - map that can store many values per key, less functions than the others below\n* [`ofArrayMutable`](https://clinth.github.io/ixfx/functions/Collections.Maps.ofArrayMutable.html) - Uses an array to store values\n* [`ofCircularMutable`](https://clinth.github.io/ixfx/functions/Collections.Maps.ofCircularMutable.html) - Uses a circular array of limited capacity\n* [`ofSetMutable`](https://clinth.github.io/ixfx/functions/Collections.Maps.ofSetMutable.html) - Uses a set to store unique values\n  \nConverting maps\n* [`mapToArray`](https://clinth.github.io/ixfx/functions/Collections.Maps.mapToArray.html)\n* [`mapToObjectTransform`](https://clinth.github.io/ixfx/functions/Collections.Maps.mapToObjectTransform.html)\n* [`toObject`](https://clinth.github.io/ixfx/functions/Collections.Maps.toObject.html)\n\n\n\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"basic-operations","text":"Basic operations"},{"depth":2,"slug":"alternatives-and-limitations","text":"Alternatives and limitations"},{"depth":2,"slug":"helper-functions","text":"Helper functions"},{"depth":3,"slug":"has","text":"Has"},{"depth":3,"slug":"iterating","text":"Iterating"},{"depth":3,"slug":"deleting","text":"Deleting"},{"depth":2,"slug":"conversions","text":"Conversions"},{"depth":2,"slug":"get-or-generate","text":"Get or generate"},{"depth":2,"slug":"adding","text":"Adding"},{"depth":2,"slug":"transformations","text":"Transformations"},{"depth":2,"slug":"expiring-map","text":"Expiring Map"},{"depth":2,"slug":"more-functions-for-working-with-maps","text":"More functions for working with maps"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
