import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\nimport '/src/components/ReplPad';\n</script>\n<style>\nradians-editor {\n  --label-color: var(--theme-text-light);\n  --axis-color: var(--theme-bg-hover);\n}\n</style>\n<div class=\"tip\">\n<ul>\n<li>Demos <a href=\"https://clinth.github.io/ixfx-demos/geometry/\">Geometry</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/geometry\">source</a>)</li>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Geometry.html\">Geometry module</a></li>\n</ul></div>\n<h2 id=\"angles\">Angles</h2>\n<h3 id=\"radians--degrees\">Radians &#x26; Degrees</h3>\n<p>In math and computer science, <a href=\"https://en.wikipedia.org/wiki/Radian\">radian</a> is the usual unit for angles.</p>\n<p>Cheatsheet:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Arc</th><th>%</th><th>Degrees</th><th>Radian</th></tr></thead><tbody><tr><td>Quarter</td><td>25%</td><td>90</td><td>π/2</td></tr><tr><td>Half</td><td>50%</td><td>180</td><td>π</td></tr><tr><td>Three quarters</td><td>75%</td><td>270</td><td>3π/2</td></tr><tr><td>One rotation</td><td>100%</td><td>360</td><td>2π</td></tr></tbody></table>\n<angles-element client:visible=\"\" width=\"500\" height=\"300\">\n<p>Conversion functions:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> degreeToRadian</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">angleInDegrees</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (angleInDegrees </span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\"> 90</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> (Math.</span><span style=\"color:#79B8FF\">PI</span><span style=\"color:#F97583\"> /</span><span style=\"color:#79B8FF\"> 180.0</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> radianToDegree</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">angleInRadians</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> angleInRadians </span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\"> 180</span><span style=\"color:#F97583\"> /</span><span style=\"color:#E1E4E8\"> Math.</span><span style=\"color:#79B8FF\">PI</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Both of these functions are in the <a href=\"https://clinth.github.io/ixfx/modules/Geometry.html\">Geometry</a> module.</p>\n<p>Example usage:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {degreeToRadian, radianToDegree} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/geometry.js'</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> r </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> degreeToRadian</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">180</span><span style=\"color:#E1E4E8\">);        </span><span style=\"color:#6A737D\">// Pi</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> d </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> radianToDegree</span><span style=\"color:#E1E4E8\">(Math.</span><span style=\"color:#79B8FF\">PI</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 360</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"coordinates\">Coordinates</h2>\n<p><a name=\"cartesian\"></a></p>\n<h3 id=\"cartesian\">Cartesian</h3>\n<p>The most common coordinate system for screen-based interaction is the <em>Cartesian</em> system. It consists of <code>x</code> (horizontal) and <code>y</code> (vertical) expressed as a <a href=\"../point/\">point <code>(x, y)</code></a>. Mostly the <em>origin</em> or <code>(0,0)</code> is the top-left corner of a rectangle.</p>\n<p>This means that <code>x</code> increases from left-to-right, and <code>y</code> increases from top-to-bottom. In the grid below, coordinates are shown next to the cursor:</p>\n<cartesian-element client:visible=\"\" width=\"200\" height=\"200\">\n<p>A useful technique is to <em>translate</em> the coordinate space, shifting the origin. For example, if you translate by <code>(100,50)</code>, drawing a point at <code>(0,0)</code> actually draws it at <code>(100,50)</code>.</p>\n<p>Usually one would shift the point of origin to be relative to the object you are drawing/working with. For example, the middle, or the top-left. This can make it easier to define and work with coordinates, because it’s all relative to the object.</p>\n<p>In canvas:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">ctx.</span><span style=\"color:#B392F0\">save</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// Save existing translation, if any</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">ctx.</span><span style=\"color:#B392F0\">translate</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Do drawing, with 100,100 as 0,0</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">ctx.</span><span style=\"color:#B392F0\">restore</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// Undo translation</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Read more:</p>\n<ul>\n<li><a href=\"../point/\">Point</a></li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html\">API Docs: Points module</a></li>\n</ul>\n<p><a name=\"polar\"></a></p>\n<h3 id=\"polar\">Polar</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Polar_coordinate_system\">Polar coordinates</a> are particularly suited for positioning on a circle, arc or spiral. Given a point of reference, the <em>origin</em>, coordinate are defined by their <em>distance</em> from the origin, as well as <em>angle</em> from the <em>polar axis</em>.</p>\n<p>In the example below, the <em>origin</em> is marked with <em>O</em>, appearing in the center of the grid. The <em>polar axis</em> is marked <em>A</em>.</p>\n<p>As you move your pointer, the polar coordinates are shown. For understandability, angle is shown here in degrees, but radians are the usual unit.</p>\n<polar-coords-element client:visible=\"\" width=\"400\" height=\"400\">\n<p>In code, you can convert a polar coordinate (using radian unit) to <em>x, y</em> with:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> polarToCartesian</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">distance</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">angleRadians</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">originX</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">originY</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    x: originX </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> (distance </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> Math.</span><span style=\"color:#B392F0\">cos</span><span style=\"color:#E1E4E8\">(angleRadians)),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    y: originY </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> (distance </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\"> Math.</span><span style=\"color:#B392F0\">sin</span><span style=\"color:#E1E4E8\">(angleRadians)),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In ixfx, <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Polar.toCartesian.html\"><code>toCartesian</code></a> function is provided and can be used as:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Polar } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/geometry.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Origin (ie. center) of polar coordinates</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> origin</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// polarToCartesian(distance:number, angleRadians:number, origin:Point): Point;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> point</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Polar.</span><span style=\"color:#B392F0\">toCartesian</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, Math.</span><span style=\"color:#79B8FF\">PI</span><span style=\"color:#E1E4E8\">, origin);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Or if you have a Polar.Coord {distance:number, angleRadian:number}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> polar</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { distance: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, angleRadian: Math.</span><span style=\"color:#79B8FF\">PI</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> point</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Polar.</span><span style=\"color:#B392F0\">toCartesian</span><span style=\"color:#E1E4E8\">(polar, origin);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Convert <em>from</em> Cartesian to polar coordinate with <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Polar.fromCartesian.html\"><code>fromCartesian</code></a></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Polar.fromCartesian(point, origin): Coord;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> polar</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Polar.</span><span style=\"color:#B392F0\">fromCartesian</span><span style=\"color:#E1E4E8\">({x: </span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">}, origin);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Read more:</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Polar.html\">API Docs: Polar modular</a></li>\n</ul>\n<p>Demos:</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx-demos/geometry/polar-spiral/\">Polar spiral</a>: Uses the <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Polar.html\">spiral function</a> to generate a spiral, modulated by two ping-pongs.</li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/geometry/polar-orbit/\">Polar orbit</a>: Moves an element on a circular orbit using polar coordinates.</li>\n</ul></polar-coords-element></cartesian-element></angles-element>";

				const frontmatter = {"title":"Units and Coordinates","layout":"../../../layouts/MainLayout.astro","setup":"import {AnglesElement} from '/src/components/geometry/AnglesElement';\nimport {CartesianElement} from '/src/components/geometry/CartesianElement';\nimport {PolarCoordsElement} from '/src/components/geometry/PolarCoordsElement';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/types/geometry/units.md";
				const url = "/types/geometry/units";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n</script>\n<style>\nradians-editor {\n  --label-color: var(--theme-text-light);\n  --axis-color: var(--theme-bg-hover);\n}\n</style>\n\n<div class=\"tip\">\n<ul>\n<li>Demos <a href=\"https://clinth.github.io/ixfx-demos/geometry/\">Geometry</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/geometry\">source</a>)</li>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Geometry.html\">Geometry module</a></li>\n</div>\n\n\n## Angles\n\n### Radians & Degrees\n\nIn math and computer science, [radian](https://en.wikipedia.org/wiki/Radian) is the usual unit for angles. \n\nCheatsheet:\n\n| Arc            | %    | Degrees | Radian |\n| -------------- | ---- | ------- | ------ |\n| Quarter        | 25%  | 90      | π/2    |\n| Half           | 50%  | 180     | π      |\n| Three quarters | 75%  | 270     | 3π/2   |\n| One rotation   | 100% | 360     | 2π     |\n\n<angles-element client:visible width=\"500\" height=\"300\"  />\n\nConversion functions:\n\n```js\nconst degreeToRadian = (angleInDegrees) => (angleInDegrees - 90) * (Math.PI / 180.0);\nconst radianToDegree = (angleInRadians) => angleInRadians * 180 / Math.PI;\n```\n\nBoth of these functions are in the [Geometry](https://clinth.github.io/ixfx/modules/Geometry.html) module.\n\nExample usage:\n```js\n// repl-pad\nimport {degreeToRadian, radianToDegree} from 'https://unpkg.com/ixfx/dist/geometry.js'\nlet r = degreeToRadian(180);        // Pi\nlet d = radianToDegree(Math.PI*2);  // 360\n```\n\n## Coordinates\n\n<a name=\"cartesian\"></a>\n\n### Cartesian\n\nThe most common coordinate system for screen-based interaction is the _Cartesian_ system. It consists of `x` (horizontal) and `y` (vertical) expressed as a [point `(x, y)`](../point/). Mostly the _origin_ or `(0,0)` is the top-left corner of a rectangle. \n\nThis means that `x` increases from left-to-right, and `y` increases from top-to-bottom. In the grid below, coordinates are shown next to the cursor:\n\n<cartesian-element client:visible width=\"200\" height=\"200\"  />\n\nA useful technique is to _translate_ the coordinate space, shifting the origin. For example, if you translate by `(100,50)`, drawing a point at `(0,0)` actually draws it at `(100,50)`. \n\nUsually one would shift the point of origin to be relative to the object you are drawing/working with. For example, the middle, or the top-left. This can make it easier to define and work with coordinates, because it's all relative to the object.\n\nIn canvas:\n\n```js\nctx.save(); // Save existing translation, if any\nctx.translate(100,100);\n// Do drawing, with 100,100 as 0,0\nctx.restore(); // Undo translation\n```\n\nRead more:\n* [Point](../point/)\n* [API Docs: Points module](https://clinth.github.io/ixfx/modules/Geometry.Points.html)\n\n<a name=\"polar\"></a>\n\n### Polar\n\n[Polar coordinates](https://en.wikipedia.org/wiki/Polar_coordinate_system) are particularly suited for positioning on a circle, arc or spiral. Given a point of reference, the _origin_, coordinate are defined by their _distance_ from the origin, as well as _angle_ from the _polar axis_. \n\nIn the example below, the _origin_ is marked with _O_, appearing in the center of the grid. The _polar axis_ is marked _A_.\n\nAs you move your pointer, the polar coordinates are shown. For understandability, angle is shown here in degrees, but radians are the usual unit.\n\n<polar-coords-element client:visible width=\"400\" height=\"400\"  />\n\nIn code, you can convert a polar coordinate (using radian unit) to _x, y_ with:\n\n```js\nconst polarToCartesian = (distance, angleRadians, originX, originY) => ({\n    x: originX + (distance * Math.cos(angleRadians)),\n    y: originY + (distance * Math.sin(angleRadians)),\n  });\n```\n\nIn ixfx, [`toCartesian`](https://clinth.github.io/ixfx/functions/Geometry.Polar.toCartesian.html) function is provided and can be used as:\n\n```js\nimport { Polar } from 'https://unpkg.com/ixfx/dist/geometry.js';\n\n// Origin (ie. center) of polar coordinates\nconst origin = { x: 100, y: 100 };\n\n// polarToCartesian(distance:number, angleRadians:number, origin:Point): Point;\nconst point = Polar.toCartesian(100, Math.PI, origin);\n\n// Or if you have a Polar.Coord {distance:number, angleRadian:number}\nconst polar = { distance: 100, angleRadian: Math.PI };\nconst point = Polar.toCartesian(polar, origin);\n```\n\nConvert _from_ Cartesian to polar coordinate with [`fromCartesian`](https://clinth.github.io/ixfx/functions/Geometry.Polar.fromCartesian.html)\n\n```js\n// Polar.fromCartesian(point, origin): Coord;\nconst polar = Polar.fromCartesian({x: 50, y: 50}, origin);\n```\n\nRead more:\n* [API Docs: Polar modular](https://clinth.github.io/ixfx/modules/Geometry.Polar.html)\n\nDemos:\n* [Polar spiral](https://clinth.github.io/ixfx-demos/geometry/polar-spiral/): Uses the [spiral function](https://clinth.github.io/ixfx/modules/Geometry.Polar.html) to generate a spiral, modulated by two ping-pongs.\n* [Polar orbit](https://clinth.github.io/ixfx-demos/geometry/polar-orbit/): Moves an element on a circular orbit using polar coordinates.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"angles","text":"Angles"},{"depth":3,"slug":"radians--degrees","text":"Radians & Degrees"},{"depth":2,"slug":"coordinates","text":"Coordinates"},{"depth":3,"slug":"cartesian","text":"Cartesian"},{"depth":3,"slug":"polar","text":"Polar"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
