import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n</script>\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html\">Data.FrequencyMutable class</a></li>\n<li><a href=\"../trackers/\">Trackers</a> track data ranges</li>\n</ul></div>\n<p>The <code>FrequencyMutable</code> class keeps track of the number of times a certain value is ‘seen’.</p>\n<p>In some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that <em>mostly</em> occurs.</p>\n<p>In the demo below, a <a href=\"../../gen/random/#weighted-distribution\">weighted distribution</a> of random numbers is produced, with lower numbers occuring more often than higher numbers. A <code>FrequencyMutable</code> instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.</p>\n<script type=\"module\" hoist=\"\">\nimport '/src/components/data/freqWeighted';\n</script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class=\"toolbar centered\">\n  <button id=\"btnStart\">Start</button>\n  <button id=\"btnStop\">Stop</button>\n  <button id=\"btnClear\">Clear</button>\n</div>\n<div class=\"sxs\">\n  <div class=\"dataLog\" id=\"dataStream\" style=\"max-height: 5em\"></div>\n  <div>\n    <histogram-vis id=\"dataPlot\"></histogram-vis>\n  </div>\n</div>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html\"><code>frequencyMutable</code></a> creates a new instance. The provided frequency histogram is <em>mutable</em>, meaning that the object reference stays the same while the data inside is permitted to change.</p>\n<h3 id=\"adding-and-clearing\">Adding and clearing</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { frequencyMutable } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/data.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Create an instance</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> freq</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> frequencyMutable</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Add data, here several at once</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">freq.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get an array version</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// [ [\"apples\", 2], [\"oranges\",1],[\"pears\",2] ]</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">toArray</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Clear all data</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">freq.</span><span style=\"color:#B392F0\">clear</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"working-with-frequency\">Working with frequency</h3>\n<p>Get the count of a specific group. Returns <code>undefined</code> if group is not found.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> f</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">frequencyOf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 2</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It can be useful to work with the relative frequency rather than the absolute amount. For example, <code>apples</code> appears 40% of the time:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> rel</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">relativeFrequencyOf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 0.4</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {min, max, avg, total}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> mma</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">minMaxAvg</span><span style=\"color:#E1E4E8\">(); </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Average frequency is ${</span><span style=\"color:#E1E4E8\">mma</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">avg</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"iterating\">Iterating</h3>\n<p>You can get the data as an array and iterate:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">entries</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// freq.toArray() gives same result</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">group</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">count</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">of</span><span style=\"color:#E1E4E8\"> data) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`${</span><span style=\"color:#E1E4E8\">group</span><span style=\"color:#9ECBFF\">} has a count of ${</span><span style=\"color:#E1E4E8\">count</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// apples has a count of 2...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To get the entries sorted:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Sorting options are: value, valueReverse, key or keyReverse</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> sorted</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">entriesSorted</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`key`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Sort alphabetically by key</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"custom-objects\">Custom objects</h3>\n<p>To keep track of objects, provide a function that creates a string for the items you’re adding. This allows you to group by different fields, or some combination of fields.</p>\n<p>In the below example, cars are grouped by their make:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { frequencyMutable } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/data.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Two cars</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cars</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    make: </span><span style=\"color:#9ECBFF\">`Toyota`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    model: </span><span style=\"color:#9ECBFF\">`Corolla`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    year: </span><span style=\"color:#79B8FF\">1980</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    make: </span><span style=\"color:#9ECBFF\">`Honda`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    model: </span><span style=\"color:#9ECBFF\">`Civic`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    year: </span><span style=\"color:#79B8FF\">1985</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Count cars by make</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> freq</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> frequencyMutable</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">car</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> car.make);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Add array of cars</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">freq.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">cars);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Count a group</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">freq.</span><span style=\"color:#B392F0\">frequencyOf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Toyota`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Or by object, which uses the same stringify function</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">freq.</span><span style=\"color:#B392F0\">frequencyOf</span><span style=\"color:#E1E4E8\">(cars[</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">]); </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"letter-frequency\">Letter frequency</h3>\n<p>The below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the <code>Frequency</code>, sort by frequency and calculate a proportional amount.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { frequencyMutable } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/data.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> freq</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> frequencyMutable</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> text</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> 'This is a test'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Loop through all characters</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> i </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">; i </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\"> text.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">; i</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> letter</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> text.</span><span style=\"color:#B392F0\">toLocaleUpperCase</span><span style=\"color:#E1E4E8\">().</span><span style=\"color:#B392F0\">charAt</span><span style=\"color:#E1E4E8\">(i);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (letter </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> ` `</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">continue</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Skip spaces;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  freq.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(letter); </span><span style=\"color:#6A737D\">// Add letter</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Sort with most frequent at position 0 of the array</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> sorted</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">entriesSorted</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`valueReverse`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Grab just the top three</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> topThree</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> sorted.</span><span style=\"color:#B392F0\">slice</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, Math.</span><span style=\"color:#B392F0\">min</span><span style=\"color:#E1E4E8\">(sorted.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Calculate the min, max and avg over all frequencies</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> mma</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> freq.</span><span style=\"color:#B392F0\">minMaxAvg</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Calculate percentage for a given letter</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> percent</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">kv</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> Math.</span><span style=\"color:#B392F0\">round</span><span style=\"color:#E1E4E8\">(kv[</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">/</span><span style=\"color:#E1E4E8\"> mma.total </span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\"> 100</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> top</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> topThree[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Letter ${</span><span style=\"color:#E1E4E8\">top</span><span style=\"color:#9ECBFF\">[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#9ECBFF\">]</span><span style=\"color:#9ECBFF\">} appears ${</span><span style=\"color:#B392F0\">percent</span><span style=\"color:#9ECBFF\">(</span><span style=\"color:#E1E4E8\">top</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#9ECBFF\">}% of the time.`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<demo-element title=\"Frequency tracking\" src=\"/data/frequency/\"></demo-element>";

				const frontmatter = {"title":"Frequency","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../components/DemoElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/frequency.md";
				const url = "/data/frequency";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n</script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html\">Data.FrequencyMutable class</a></li>\n<li><a href=\"../trackers/\">Trackers</a> track data ranges</li>\n</div>\n\nThe `FrequencyMutable` class keeps track of the number of times a certain value is 'seen'.\n\nIn some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that _mostly_ occurs.\n\nIn the demo below, a [weighted distribution](../../gen/random/#weighted-distribution) of random numbers is produced, with lower numbers occuring more often than higher numbers. A `FrequencyMutable` instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.\n\n<script type=\"module\" hoist>\nimport '/src/components/data/freqWeighted';\n</script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class=\"toolbar centered\">\n  <button id=\"btnStart\">Start</button>\n  <button id=\"btnStop\">Stop</button>\n  <button id=\"btnClear\">Clear</button>\n</div>\n<div class=\"sxs\">\n  <div class=\"dataLog\" id=\"dataStream\" style=\"max-height: 5em\"></div>\n  <div>\n    <histogram-vis id=\"dataPlot\"></histogram-vis>\n  </div>\n</div>\n\n\n## Usage\n\n[`frequencyMutable`](https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html) creates a new instance. The provided frequency histogram is _mutable_, meaning that the object reference stays the same while the data inside is permitted to change.\n\n\n### Adding and clearing\n\n```js\n// repl-pad#1\nimport { frequencyMutable } from \"https://unpkg.com/ixfx/dist/data.js\"\n\n// Create an instance\nconst freq = frequencyMutable();\n\n// Add data, here several at once\nfreq.add(`apples`, `oranges`, `apples`, `pears`, `pears`);\n\n// Get an array version\n// [ [\"apples\", 2], [\"oranges\",1],[\"pears\",2] ]\nconst t = freq.toArray();\n```\n\nClear all data\n```js\nfreq.clear();\n```\n\n### Working with frequency\n\nGet the count of a specific group. Returns `undefined` if group is not found.\n\n```js\n// repl-pad#1\nconst f = freq.frequencyOf(`apples`); // 2\n```\n\nIt can be useful to work with the relative frequency rather than the absolute amount. For example, `apples` appears 40% of the time:\n\n```js\n// repl-pad#1\nconst rel = freq.relativeFrequencyOf(`apples`); // 0.4\n```\n\nTo find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):\n\n```js\n// repl-pad#1\n// Returns {min, max, avg, total}\nconst mma = freq.minMaxAvg(); \nconsole.log(`Average frequency is ${mma.avg}`);\n```\n\n### Iterating\n\nYou can get the data as an array and iterate:\n\n```js\n// repl-pad#1\nconst data = freq.entries(); // freq.toArray() gives same result\nfor (const [group, count] of data) {\n  console.log(`${group} has a count of ${count}`); // apples has a count of 2...\n}\n```\n\nTo get the entries sorted:\n\n```js\n// repl-pad#1\n// Sorting options are: value, valueReverse, key or keyReverse\nconst sorted = freq.entriesSorted(`key`); // Sort alphabetically by key\n```\n\n### Custom objects\n\nTo keep track of objects, provide a function that creates a string for the items you're adding. This allows you to group by different fields, or some combination of fields.\n\nIn the below example, cars are grouped by their make:\n\n```js\n// repl-pad\nimport { frequencyMutable } from \"https://unpkg.com/ixfx/dist/data.js\"\n\n// Two cars\nconst cars = [\n  {\n    make: `Toyota`,\n    model: `Corolla`,\n    year: 1980\n  },\n  {\n    make: `Honda`,\n    model: `Civic`,\n    year: 1985\n  }\n]\n\n// Count cars by make\nconst freq = frequencyMutable(car => car.make);\n\n// Add array of cars\nfreq.add(...cars);\n\n// Count a group\nfreq.frequencyOf(`Toyota`); // 1\n\n// Or by object, which uses the same stringify function\nfreq.frequencyOf(cars[1]); // 1\n```\n\n## Examples\n\n### Letter frequency\n\nThe below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the `Frequency`, sort by frequency and calculate a proportional amount.\n\n```js\n// repl-pad\nimport { frequencyMutable } from \"https://unpkg.com/ixfx/dist/data.js\"\n\nconst freq = frequencyMutable();\nconst text = 'This is a test';\n\n// Loop through all characters\nfor (let i = 0; i < text.length; i++) {\n  const letter = text.toLocaleUpperCase().charAt(i);\n  if (letter === ` `) continue; // Skip spaces;\n  freq.add(letter); // Add letter\n}\n\n// Sort with most frequent at position 0 of the array\nconst sorted = freq.entriesSorted(`valueReverse`);\n// Grab just the top three\nconst topThree = sorted.slice(0, Math.min(sorted.length, 3));\n\n// Calculate the min, max and avg over all frequencies\nconst mma = freq.minMaxAvg();\n\n// Calculate percentage for a given letter\nconst percent = (kv) => Math.round(kv[1] / mma.total * 100);\n\nconst top = topThree[0];\nconsole.log(`Letter ${top[0]} appears ${percent(top)}% of the time.`);\n```\n\n<demo-element title=\"Frequency tracking\" src=\"/data/frequency/\" />\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"usage","text":"Usage"},{"depth":3,"slug":"adding-and-clearing","text":"Adding and clearing"},{"depth":3,"slug":"working-with-frequency","text":"Working with frequency"},{"depth":3,"slug":"iterating","text":"Iterating"},{"depth":3,"slug":"custom-objects","text":"Custom objects"},{"depth":2,"slug":"examples","text":"Examples"},{"depth":3,"slug":"letter-frequency","text":"Letter frequency"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
