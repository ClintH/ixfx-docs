import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n<p>Overview:</p>\n<ul>\n<li><a href=\"#timeout\">timeout</a>: re-triggerable timeout, able to check up on completion. Not able to get a ‘result’</li>\n<li><a href=\"#delay\">delay</a>: call a function with delay and get its result</li>\n<li><a href=\"#sleep\">sleep</a>: pause execution for some period</li>\n</ul>\n<h2 id=\"timeout\">Timeout</h2>\n<p><code>setTimeout</code> is the usual way to call a function after some elapsed time:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { intervalToMs } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Call `doSomething` once after one minute</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> window.</span><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(doSomething, </span><span style=\"color:#79B8FF\">60</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// or:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> window.</span><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(doSomething, </span><span style=\"color:#B392F0\">intervalToMs</span><span style=\"color:#E1E4E8\">({ mins: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> }))</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.</p>\n<p>ixfx’s <a href=\"https://clinth.github.io/ixfx/functions/Flow.timeout-1.html\"><code>timeout</code></a> makes this a bit simpler. Once setup, calling <code>start()</code> resets the timeout if it’s already started. To cancel a started timeout, use <code>cancel()</code>, or <code>isDone</code> to check whether the timeout has been executed.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { timeout } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set up once</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> fadeOut</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> timeout</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // do something after 30secs</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, { secs: </span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Trigger if there's a button press.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Multiple calls to .start() simply reset timeout </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">getElementById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`btnStart`</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`click`</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> fadeOut.</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">());</span></span>\n<span class=\"line\"></span></code></pre>\n<p>When calling <code>start</code>, you can override its default delay:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">fadeOut.</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">({ secs: </span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\"> }); </span><span style=\"color:#6A737D\">// Run after 20s this time</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Your callback function can use the elapsed time, if needed:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#B392F0\">timeout</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">elapsedMs</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Timeout after ${</span><span style=\"color:#E1E4E8\">elapsedMs</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">), { secs: </span><span style=\"color:#79B8FF\">30</span><span style=\"color:#E1E4E8\"> }).</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"delay\">Delay</h2>\n<p>If you don’t need to manage a timeout, the asynchronous <a href=\"https://clinth.github.io/ixfx/functions/Flow.delay.html\"><code>delay</code></a> might be preferred. Unlike the in-built <code>setTimeout</code>, it optionally allows you to pause execution until the delay elapses</p>\n<p>Some examples:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> someFn</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#6A737D\">// do something }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Stop for 100ms, call 'someFn' and then continue</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">await</span><span style=\"color:#B392F0\"> delay</span><span style=\"color:#E1E4E8\">(someFn, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Execution continues here after 100ms + time for 'someFn' to run</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If the call is not <code>await</code>ed, execution continues:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Schedule 'someFn' after 100ms</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">delay</span><span style=\"color:#E1E4E8\">(someFn, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...but execution continues here immediately</span></span>\n<span class=\"line\"></span></code></pre>\n<p>By default the delay period is before running the supplied function, but it can also be after:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Runs 'someFn' immediately</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">await</span><span style=\"color:#B392F0\"> delay</span><span style=\"color:#E1E4E8\">(someFn, { delay: </span><span style=\"color:#9ECBFF\">\"after\"</span><span style=\"color:#E1E4E8\">, secs: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...but execution does not continue here until 10 seconds later</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or both:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Waits 10seconds, and then runs `someFn`</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">await</span><span style=\"color:#B392F0\"> delay</span><span style=\"color:#E1E4E8\">(someFn, { delay: </span><span style=\"color:#9ECBFF\">\"both\"</span><span style=\"color:#E1E4E8\">, secs: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...and waits a further 10secs before continuing here</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"sleep\">Sleep</h2>\n<p>Using JS’s <em>await</em> feature, you can essentially pause execution of your code using <a href=\"https://clinth.github.io/ixfx/functions/Flow.sleep.html\"><code>sleep</code></a>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { sleep } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Hello`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">await</span><span style=\"color:#B392F0\"> sleep</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`There`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Print one second after</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There are a few tricks to using the <em>await</em> keyword. You may need to declare your function as being asynchronous:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> something</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Hello`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  await</span><span style=\"color:#B392F0\"> sleep</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`There`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Print one second after</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Call the asynchronous function</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">something</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Execution will continue immediately, but execution within `something` will pause as expected.</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Compared to <a href=\"#delay\">delay</a>, <code>sleep</code> doesn’t run a function and provide a value. It just sleeps.</p>\n<h2 id=\"interval-type\">Interval type</h2>\n<p>Most of the ixfx functions that take millisecond arguments also allow you to provided an <a href=\"https://clinth.github.io/ixfx/types/Flow.Interval.html\"><code>Interval</code></a>. This can make for more readable code.</p>\n<p>The <code>Interval</code> type looks like:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\"><code><span class=\"line\"><span style=\"color:#B392F0\">Interval</span><span style=\"color:#E1E4E8\">: number </span><span style=\"color:#F97583\">|</span><span style=\"color:#E1E4E8\"> { </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    hours</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> number; </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    millis</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> number; </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    mins</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> number; </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    secs</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> number; </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Example usage with <a href=\"#delay\"><code>delay</code></a>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// instead of these options:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">delay</span><span style=\"color:#E1E4E8\">( () </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> ...</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">300000</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// How long is that!?</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">delay</span><span style=\"color:#E1E4E8\">( () </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> ...</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">60</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// A bit better</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Use:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">delay</span><span style=\"color:#E1E4E8\">( () </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> ...</span><span style=\"color:#E1E4E8\">, { mins: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you just want to give a millisecond value, a bare number can be used.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// These two lines are the same</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">delay</span><span style=\"color:#E1E4E8\">( () </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> ...</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">delay</span><span style=\"color:#E1E4E8\">( () </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> ...</span><span style=\"color:#E1E4E8\">, { millis: </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Any of the time units can be combined to define an interval, with a cumulative effect. <a href=\"https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html\"><code>intervalToMs</code></a> allows you to convert to milliseconds, useful for combining with vanilla JS functions.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { intervalToMs } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> period</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { secs: </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, millis: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields 2001 (2 seconds + 1 millisecond);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> ms</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> intervalToMs</span><span style=\"color:#E1E4E8\">(period);</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(someFn, ms);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Or:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(someFn, </span><span style=\"color:#B392F0\">intervalToMs</span><span style=\"color:#E1E4E8\">({ secs: </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, millis: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> }));</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"related-patterns\">Related patterns</h2>\n<ul>\n<li><a href=\"../../data/process-set/\">Process a set of items with a delay between each</a></li>\n<li><a href=\"./update-when-required/\">Fetch new data if it becomes outdated</a></li>\n</ul>";

				const frontmatter = {"title":"Delay","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../components/DemoElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/flow/delay.md";
				const url = "/flow/delay";
				function rawContent() {
					return "\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [timeout](#timeout): re-triggerable timeout, able to check up on completion. Not able to get a 'result'\n* [delay](#delay): call a function with delay and get its result \n* [sleep](#sleep): pause execution for some period\n\n\n## Timeout\n\n`setTimeout` is the usual way to call a function after some elapsed time:\n\n```js\nimport { intervalToMs } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Call `doSomething` once after one minute\nconst t = window.setTimeout(doSomething, 60*1000);\n// or:\nconst t = window.setTimeout(doSomething, intervalToMs({ mins: 1 }))\n```\n\nIf you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.\n\nixfx's [`timeout`](https://clinth.github.io/ixfx/functions/Flow.timeout-1.html) makes this a bit simpler. Once setup, calling `start()` resets the timeout if it's already started. To cancel a started timeout, use `cancel()`, or `isDone` to check whether the timeout has been executed.\n\n```js\nimport { timeout } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Set up once\nconst fadeOut = timeout(() => {\n  // do something after 30secs\n}, { secs: 30 });\n\n// Trigger if there's a button press.\n// Multiple calls to .start() simply reset timeout \ndocument.getElementById(`btnStart`).addEventListener(`click`, () => fadeOut.start());\n```\n\nWhen calling `start`, you can override its default delay:\n\n```js\nfadeOut.start({ secs: 30 }); // Run after 20s this time\n```\n\nYour callback function can use the elapsed time, if needed:\n\n```js\ntimeout(elapsedMs => console.log(`Timeout after ${elapsedMs}`), { secs: 30 }).start();\n```\n\n## Delay\n\nIf you don't need to manage a timeout, the asynchronous [`delay`](https://clinth.github.io/ixfx/functions/Flow.delay.html) might be preferred. Unlike the in-built `setTimeout`, it optionally allows you to pause execution until the delay elapses\n\nSome examples:\n```js\nconst someFn = () => { // do something }\n\n// Stop for 100ms, call 'someFn' and then continue\nawait delay(someFn, 100);\n// Execution continues here after 100ms + time for 'someFn' to run\n```\n\nIf the call is not `await`ed, execution continues:\n```js\n// Schedule 'someFn' after 100ms\ndelay(someFn, 100);\n// ...but execution continues here immediately\n```\n\nBy default the delay period is before running the supplied function, but it can also be after:\n```js\n// Runs 'someFn' immediately\nawait delay(someFn, { delay: \"after\", secs: 10 });\n// ...but execution does not continue here until 10 seconds later\n```\n\nOr both:\n\n```js\n// Waits 10seconds, and then runs `someFn`\nawait delay(someFn, { delay: \"both\", secs: 10 });\n// ...and waits a further 10secs before continuing here\n```\n\n## Sleep\n\nUsing JS's _await_ feature, you can essentially pause execution of your code using [`sleep`](https://clinth.github.io/ixfx/functions/Flow.sleep.html).\n\n```js\nimport { sleep } from \"https://unpkg.com/ixfx/dist/flow.js\"\nconsole.log(`Hello`);\nawait sleep(1000);\nconsole.log(`There`); // Print one second after\n```\n\nThere are a few tricks to using the _await_ keyword. You may need to declare your function as being asynchronous:\n\n```js\nconst something = async () => {\n  console.log(`Hello`);\n  await sleep(1000);\n  console.log(`There`); // Print one second after\n};\n\n// Call the asynchronous function\nsomething();\n// Execution will continue immediately, but execution within `something` will pause as expected.\n```\n\nCompared to [delay](#delay), `sleep` doesn't run a function and provide a value. It just sleeps.\n\n\n## Interval type\n\nMost of the ixfx functions that take millisecond arguments also allow you to provided an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html). This can make for more readable code.\n\nThe `Interval` type looks like:\n```ts\nInterval: number | { \n    hours?: number; \n    millis?: number; \n    mins?: number; \n    secs?: number; \n}\n```\n\nExample usage with [`delay`](#delay):\n\n```js\n// instead of these options:\ndelay( () => ..., 300000); // How long is that!?\ndelay( () => ..., 5*60*1000); // A bit better\n// Use:\ndelay( () => ..., { mins: 5 });\n```\n\nIf you just want to give a millisecond value, a bare number can be used.\n```js\n// These two lines are the same\ndelay( () => ..., 1000);\ndelay( () => ..., { millis: 1000 });\n```\n\nAny of the time units can be combined to define an interval, with a cumulative effect. [`intervalToMs`](https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html) allows you to convert to milliseconds, useful for combining with vanilla JS functions.\n\n```js\nimport { intervalToMs } from \"https://unpkg.com/ixfx/dist/flow.js\"\nconst period = { secs: 2, millis: 1 };\n\n// Yields 2001 (2 seconds + 1 millisecond);\nconst ms = intervalToMs(period);\nsetTimeout(someFn, ms);\n// Or:\nsetTimeout(someFn, intervalToMs({ secs: 2, millis: 1 }));\n```\n\n## Related patterns\n\n* [Process a set of items with a delay between each](../../data/process-set/)\n* [Fetch new data if it becomes outdated](./update-when-required/)\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"timeout","text":"Timeout"},{"depth":2,"slug":"delay","text":"Delay"},{"depth":2,"slug":"sleep","text":"Sleep"},{"depth":2,"slug":"interval-type","text":"Interval type"},{"depth":2,"slug":"related-patterns","text":"Related patterns"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
