import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\nimport '/src/components/ReplPad';\n</script>\n<div class=\"tip\">\n<ul>\n<li>Demos <a href=\"https://clinth.github.io/ixfx-demos/geometry/\">Geometry</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/geometry\">source</a>)</li>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html\">Geometry.Points module</a></li>\n</ul></div>\n<p>A point is an <code>x</code> and <code>y</code> <a href=\"../units/#cartesian\">Cartesian coordinate</a>; the basic building block for <a href=\"../line/\">lines</a>, <a href=\"../arc/\">arcs</a>, <a href=\"../rect/\">rectangles</a> and paths.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// A point at (100, 200)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There’s no defined unit for <code>x</code> and <code>y</code>, but pixel coordinates are typical.</p>\n<h2 id=\"distance-and-angles\">Distance and angles</h2>\n<p>Calculate distance between two points with <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance\"><code>distance</code></a>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points, radianToDegree} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> b</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Calculates distance between point a and b</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> distance</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">distance</span><span style=\"color:#E1E4E8\">(a, b); </span><span style=\"color:#6A737D\">// Returns a number</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Calculate angle in radians between points a and b</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> angleRad</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">angle</span><span style=\"color:#E1E4E8\">(a, b);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> angleDeg</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> radianToDegree</span><span style=\"color:#E1E4E8\">(angleRad);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the example below, <a href=\"#normalised-points\">normalised</a> points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.</p>\n<demo-element title=\"Point math\" src=\"/geometry/point-math/\">\n<h3 id=\"relation\">Relation</h3>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html\"><code>relation</code></a> helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a <code>pointermove</code> handler, perhaps we don’t care about the absolute pointer coordinate, what we really care about is the distance from where the <code>pointerdown</code> event first happened. i.e, the change.</p>\n<p>Call <code>relation</code> to initialise the tracker, giving the reference point:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> tracker</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">relation</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>After that, call the returned function (here assigned to <code>tracker</code>) to compute the relation of any other point to the reference point:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Compare 50,50 to 100,100</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> result</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> tracker</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The result contains the properties <em>angle</em> (in radians), <em>distance</em>, <em>centroid</em> (a Point), and <em>average</em> (a Point). <em>centroid</em> is the middle point between the reference and current point. <em>average</em> is an average of the <em>x</em> and <em>y</em> values of all points passed to the tracker function.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> tracker </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Start tracking on pointer down</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointerdown`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  tracker </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">relation</span><span style=\"color:#E1E4E8\">(evt);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Use tracker when a move happens</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointermove`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">t) </span><span style=\"color:#F97583\">return</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Didn't start tracking</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Compare to the point recorded in `pointerdown`</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> r</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> tracker</span><span style=\"color:#E1E4E8\">(evt);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Distance from start: ${</span><span style=\"color:#E1E4E8\">r</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">distance</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Forget about tracker when pointer is up</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointerup`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  tracker </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<demo-element title=\"Point relation\" src=\"/geometry/point-relation/\">\n<h3 id=\"see-also\">See also</h3>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html\"><code>distanceToExterior</code></a>: distance to the exterior of a basic shape</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html\"><code>distanceToCenter</code></a>: distance to the center of a basic shape</li>\n</ul>\n<h2 id=\"interpolation\">Interpolation</h2>\n<p>Calculate an in-between point with <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html\"><code>interpolate</code></a>. Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.</p>\n<demo-element title=\"Point interpolation\" src=\"/geometry/point-interpolate/\">\n<p>The signature of the <code>interpolate</code> is:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#B392F0\">interpolate</span><span style=\"color:#E1E4E8\">(amount: number, a: Point, b: Point, allowOverflow</span><span style=\"color:#F97583\">?:</span><span style=\"color:#E1E4E8\"> boolean): Point</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Interpolation is between two points, <em>a</em> and <em>b</em>. An interpolation amount of 0 means the value of point <em>a</em> and an amount of 1 means the value of <em>b</em>. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to <em>b</em>, 0.2 is mostly close to <em>a</em> and so on.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points, radianToDegree} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> b</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Calculate a Point between `a` and `b` using a relative </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// progress amount (0 -> 1). </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">interpolate</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">, a, b); </span><span style=\"color:#6A737D\">// Returns {x,y}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>By default, an interpolation amount outside of the 0..1 range throws an error. However, if <em>true</em> is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the <em>a->b</em> line. Or a value of 2 would be past <em>b</em> at a distance of the line.</p>\n<h2 id=\"areas\">Areas</h2>\n<p>Calculates a rectangle which encompasses all the provided points with <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox\"><code>bbox</code></a>. It returns a <a href=\"../rect/\">Rectangle</a>, with <em>x, y, width</em> and <em>height</em> properties.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> points</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [a, b];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> rect</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">bbox</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">points); </span></span>\n<span class=\"line\"></span></code></pre>\n<p>The [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.</p>\n<p>ixfx has a simple <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html\"><code>convexHull</code></a> implementation</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pointsToContain</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span><span style=\"color:#6A737D\">/* some array of points */</span><span style=\"color:#E1E4E8\"> ];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">convexHull</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">pointsToContain);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// pts is the outer set of points</span></span>\n<span class=\"line\"></span></code></pre>\n<demo-element title=\"Centroid and Convex Hull\" src=\"/geometry/point-centroid-hull/\">\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html\"><code>centroid</code></a> calculates a sort of center of a given set of points.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span><span style=\"color:#6A737D\">/* some array of points */</span><span style=\"color:#E1E4E8\"> ];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> c</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">centroid</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">pts);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// c is x,y centroid.</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html\"><code>leftmost</code></a>/<a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html\"><code>rightmost</code></a> returns the most left/right point of a set of points.</p>\n<h2 id=\"rotation--translation\">Rotation &#x26; Translation</h2>\n<p>Rotate a point around a given point with <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate\"><code>rotate</code></a></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points, degreeToRadian } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">rotate</span><span style=\"color:#E1E4E8\">({x:</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">,y:</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">}, Math.</span><span style=\"color:#79B8FF\">PI</span><span style=\"color:#F97583\">/</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, {x:</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Rotate 10,10 by 15 degrees around the origin of 0,0</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pp</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">rotate</span><span style=\"color:#E1E4E8\">({x:</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">,y:</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">}, </span><span style=\"color:#B392F0\">degreeToRadian</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">15</span><span style=\"color:#E1E4E8\">), {x:</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.project.html\"><code>project</code></a> yields a point at a specified distance and angle from an origin point.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points, degreeToRadian } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> origin</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 100 units away @ 10 degrees</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">project</span><span style=\"color:#E1E4E8\">(origin, </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">degreeToRadian</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">));</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"conversions\">Conversions</h2>\n<p>Converting a Point <em>to</em> some other shape of data</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// To an array [x, y]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">toArray</span><span style=\"color:#E1E4E8\">(p); </span><span style=\"color:#6A737D\">// [5, 10]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Human-readable representation:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">toString</span><span style=\"color:#E1E4E8\">(p); </span><span style=\"color:#6A737D\">// \"(5, 10)\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Round x and y</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">toIntegerValues</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">5.5</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10.5</span><span style=\"color:#E1E4E8\"> }); </span><span style=\"color:#6A737D\">// {x: 6, y: 11 }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Converting <em>from</em> some other shape of data to Point</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert from two numeric parameters</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">from</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">15</span><span style=\"color:#E1E4E8\">);    </span><span style=\"color:#6A737D\">// { x: 10, y: 15}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert from an array</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">from</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">15</span><span style=\"color:#E1E4E8\">]);  </span><span style=\"color:#6A737D\">// {x: 10, y: 15}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Convert an array of arrays</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">fromNumbers</span><span style=\"color:#E1E4E8\">([ [</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">15</span><span style=\"color:#E1E4E8\">], [</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">]]); </span><span style=\"color:#6A737D\">// [{x:10, y:15}, {x:5, y:5}]</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"normalise\">Normalise</h2>\n<p>It’s often useful to work with <a href=\"../../data/normalising/\">normalised</a> points. Thus a point of <code>{x:0.5, y:0.5}</code> would mean 50% x, and 50% y. See the discussion on <a href=\"../../data/normalising/#geometry\">normalising points</a> for more on this.</p>\n<p>In short, you can normalise point using <code>Points.divide</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#2</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Normalise `pt` by viewport size,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// yielding a point on 0..1 scale.</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">divide</span><span style=\"color:#E1E4E8\">(pt, window.innerWidth, window.innerHeight);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// In principle it might exceed 0..1 range, so it may need to be clamped, too:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">(Points.</span><span style=\"color:#B392F0\">divide</span><span style=\"color:#E1E4E8\">(pt, window.innerWidth, window.innerHeight));</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To apply a normalised point to some destination range, use <code>Points.multiply</code></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#2</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Maps a relative point to viewport size</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">multiply</span><span style=\"color:#E1E4E8\">(pt, window.innerWidth, window.innerHeight);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>clamp</code> locks x,y to a minimum and maximum, by default 0..1:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">({ x:</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,   y:</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\"> });      </span><span style=\"color:#6A737D\">// { x:1.0, y:1.0 }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">clamp</span><span style=\"color:#E1E4E8\">({ x:</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\"> });    </span><span style=\"color:#6A737D\">// { x:0.5, y:0.5 }</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"random\">Random</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.random.html\"><code>random</code></a> creates a random point, by default on a normalised 0..1 scale:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A custom random source can be provided to skew values:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { weightedSkewed } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/random.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pt</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">weightedSkewed</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`quadIn`</span><span style=\"color:#E1E4E8\">));</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"applying-functions\">Applying functions</h2>\n<p><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply\"><code>apply</code></a> returns a point with a given function applied to both <code>x</code> and <code>y</code> fields:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x:</span><span style=\"color:#79B8FF\">100.1234</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">100.1234</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Adds 10 to both x and y</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">apply</span><span style=\"color:#E1E4E8\">(p, </span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> v </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> 10</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Rounds the fields</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">apply</span><span style=\"color:#E1E4E8\">(p, Math.round);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html\"><code>pipeline</code></a> creates a reusable function which applies a series of transformations to a point.</p>\n<p>In the below example, a point will be normalised, and then inverted.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#3</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> somePoint</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">1.2</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">3.4</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Create pipeline</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> p</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">pipeline</span><span style=\"color:#E1E4E8\">(Points.normalise, Points.invert);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Run pipeline on `somePoint`</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> changedPoint</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> p</span><span style=\"color:#E1E4E8\">(somePoint); </span></span>\n<span class=\"line\"></span></code></pre>\n<p>If a reusable pipeline is not needed, use <a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html\"><code>pipelineApply</code></a> instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#3</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> changedPoint</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">pipelineApply</span><span style=\"color:#E1E4E8\">(somePoint, Points.normalise, Points.invert);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html\"><code>reduce</code></a> works like the usual Javascript <code>reduce</code> function:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Sum x and y values separately</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> total</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">reduce</span><span style=\"color:#E1E4E8\">(points, (</span><span style=\"color:#FFAB70\">p</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">acc</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({x: p.x </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> acc.x, y: p.y </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> acc.y})</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// total.x / total.y</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"math-operations\">Math operations</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> b</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {x,y} of a * b</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">multiply</span><span style=\"color:#E1E4E8\">(a, b);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {x,y} of a, with a.x * 2 and a.y * 0.5</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">multiply</span><span style=\"color:#E1E4E8\">(a, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {x,y} of a / b</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">divide</span><span style=\"color:#E1E4E8\">(a, b);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {x,y} of a, with a.x / 2 and a.y / 0.5</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">divide</span><span style=\"color:#E1E4E8\">(a, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {x,y} of a + b</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">sum</span><span style=\"color:#E1E4E8\">(a, b);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns {x,y} of a - b;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">subtract</span><span style=\"color:#E1E4E8\">(a, b);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html\"><code>invert</code></a> flips one or more axis of a point. By default, both.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns { x: -20, y: -10 } </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">invert</span><span style=\"color:#E1E4E8\">(a);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns { x: -20, y: 10</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">invert</span><span style=\"color:#E1E4E8\">(a, </span><span style=\"color:#9ECBFF\">`x`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"comparisons\">Comparisons</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html\"><code>compare</code></a> returns:</p>\n<ul>\n<li>-1 if either <em>x</em> or <em>y</em> of point <code>a</code> is <em>less</em> than what <code>b</code> has</li>\n<li>0 if <em>x</em> and <em>y</em> for <code>a</code> and <code>b</code> are identical</li>\n<li>1 if either <em>x</em> or <em>y</em> of point <code>a</code> is <em>greater</em> than what <code>b</code> has</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Returns 0, both points are equal</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">compare</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> }, { x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns -1, a.y is less than b.y</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">compare</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> }, { x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns 1, a.x is greater than b.x</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">compare</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> }, { x: </span><span style=\"color:#79B8FF\">9</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html\"><code>isEqual</code></a> returns <em>true</em> if points have the same value:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> b</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">a </span><span style=\"color:#F97583\">===</span><span style=\"color:#E1E4E8\"> b; </span><span style=\"color:#6A737D\">// false, because identity of objects is different</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">Points.</span><span style=\"color:#B392F0\">isEqual</span><span style=\"color:#E1E4E8\">(a, b); </span><span style=\"color:#6A737D\">// true, because values are the same</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note that additional properties of the the points are not compared, only the <em>x</em>, <em>y</em> (and optional <em>z</em>).</p>\n<p>More checks:</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html\"><code>isNull</code></a> returns true if <em>x</em> and <em>y</em> are <em>null</em></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html\"><code>isEmpty</code></a> returns true if <em>x</em> and <em>y</em> are 0. Use <code>Points.Empty</code> to create an empty point.</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html\"><code>isPlaceholder</code></a> returns <em>true</em> if both <em>x</em> and <em>y</em> are <em>NaN</em>. Use <code>Points.Placeholder</code> to create a placeholder point.</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html\"><code>isPoint</code></a> returns <em>true</em> if the passed object has at least <em>x</em> and <em>y</em> properties.</li>\n</ul>\n<p><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum\"><code>findMinimum</code></a> allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.</p>\n<p>Example:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Points } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Find the point closest to the {x:100, y:100}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> points</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#6A737D\">/* ... points ... */</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> center</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// closestToCenter will be a Point {x,y}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> closestToCenter</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">findMinimum</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">a</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">b</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> aDist</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> distance</span><span style=\"color:#E1E4E8\">(a, center);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> bDist</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> distance</span><span style=\"color:#E1E4E8\">(b, center);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Returns `a` if its distance is less than `b`</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  //  or otherwise returns `b`</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (aDistance </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\"> bDistance) </span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\"> a </span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, points);</span></span>\n<span class=\"line\"></span></code></pre></demo-element></demo-element></demo-element></demo-element>";

				const frontmatter = {"title":"Point","layout":"../../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../../components/DemoElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/types/geometry/point.md";
				const url = "/types/geometry/point";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n</script>\n\n<div class=\"tip\">\n<ul>\n<li>Demos <a href=\"https://clinth.github.io/ixfx-demos/geometry/\">Geometry</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/geometry\">source</a>)</li>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Points.html\">Geometry.Points module</a></li>\n</div>\n\nA point is an `x` and `y` [Cartesian coordinate](../units/#cartesian); the basic building block for [lines](../line/), [arcs](../arc/), [rectangles](../rect/) and paths.\n\n```js\n// A point at (100, 200)\nconst p = {x: 100, y: 200};\n```\n\nThere's no defined unit for `x` and `y`, but pixel coordinates are typical.\n\n## Distance and angles\n\nCalculate distance between two points with [`distance`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance).\n\n```js\n// repl-pad\nimport { Points, radianToDegree} from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculates distance between point a and b\nconst distance = Points.distance(a, b); // Returns a number\n\n// Calculate angle in radians between points a and b\nconst angleRad = Points.angle(a, b);\nconst angleDeg = radianToDegree(angleRad);\n```\n\nIn the example below, [normalised](#normalised-points) points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.\n\n<demo-element title=\"Point math\" src=\"/geometry/point-math/\" />\n\n### Relation\n\n[`relation`](https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html) helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a `pointermove` handler, perhaps we don't care about the absolute pointer coordinate, what we really care about is the distance from where the `pointerdown` event first happened. i.e, the change.\n\nCall `relation` to initialise the tracker, giving the reference point:\n\n```js\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\nconst tracker = Points.relation({ x: 100, y:100 });\n```\n\nAfter that, call the returned function (here assigned to `tracker`) to compute the relation of any other point to the reference point:\n\n```js\n// Compare 50,50 to 100,100\nconst result = tracker({ x: 50, y: 50 });\n```\n\nThe result contains the properties _angle_ (in radians), _distance_, _centroid_ (a Point), and _average_ (a Point). _centroid_ is the middle point between the reference and current point. _average_ is an average of the _x_ and _y_ values of all points passed to the tracker function.\n\n```js\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\n\nlet tracker = null;\n\n// Start tracking on pointer down\ndocument.addEventListener(`pointerdown`, evt => {\n  tracker = Points.relation(evt);\n});\n\n// Use tracker when a move happens\ndocument.addEventListener(`pointermove`, evt => {\n  if (!t) return; // Didn't start tracking\n\n  // Compare to the point recorded in `pointerdown`\n  const r = tracker(evt);\n  console.log(`Distance from start: ${r.distance}`);\n});\n\n// Forget about tracker when pointer is up\ndocument.addEventListener(`pointerup`, evt => {\n  tracker = null;\n});\n```\n\n<demo-element title=\"Point relation\" src=\"/geometry/point-relation/\" />\n\n### See also\n\n* [`distanceToExterior`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html): distance to the exterior of a basic shape\n* [`distanceToCenter`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html): distance to the center of a basic shape\n\n## Interpolation\n\nCalculate an in-between point with [`interpolate`](https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html). Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.\n\n<demo-element title=\"Point interpolation\" src=\"/geometry/point-interpolate/\" />\n\n\nThe signature of the `interpolate` is:\n\n```typescript\ninterpolate(amount: number, a: Point, b: Point, allowOverflow?: boolean): Point\n```\n\n\nInterpolation is between two points, _a_ and _b_. An interpolation amount of 0 means the value of point _a_ and an amount of 1 means the value of _b_. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to _b_, 0.2 is mostly close to _a_ and so on.\n\n```js\n// repl-pad#1\nimport { Points, radianToDegree} from \"https://unpkg.com/ixfx/dist/geometry.js\"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculate a Point between `a` and `b` using a relative \n// progress amount (0 -> 1). \nconst p = Points.interpolate(0.5, a, b); // Returns {x,y}\n```\n\nBy default, an interpolation amount outside of the 0..1 range throws an error. However, if _true_ is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the _a->b_ line. Or a value of 2 would be past _b_ at a distance of the line. \n\n## Areas\n\nCalculates a rectangle which encompasses all the provided points with [`bbox`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox). It returns a [Rectangle](../rect/), with _x, y, width_ and _height_ properties.\n\n```js\n// repl-pad#1\nconst points = [a, b];\nconst rect = Points.bbox(...points); \n```\n\nThe [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.\n\nixfx has a simple [`convexHull`](https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html) implementation\n\n```js\nconst pointsToContain = [ /* some array of points */ ];\nconst pts = Points.convexHull(...pointsToContain);\n// pts is the outer set of points\n``` \n\n<demo-element title=\"Centroid and Convex Hull\" src=\"/geometry/point-centroid-hull/\" />\n\n[`centroid`](https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html) calculates a sort of center of a given set of points.\n\n```js\nconst pts = [ /* some array of points */ ];\nconst c = Points.centroid(...pts);\n// c is x,y centroid.\n```\n\n[`leftmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html)/[`rightmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html) returns the most left/right point of a set of points.\n\n## Rotation & Translation\n\nRotate a point around a given point with [`rotate`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate)\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\n// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0\nconst p = Points.rotate({x:10,y:10}, Math.PI/2, {x:0, y:0});\n\n// Rotate 10,10 by 15 degrees around the origin of 0,0\nconst pp = Points.rotate({x:10,y:10}, degreeToRadian(15), {x:0, y:0});\n```\n\n[`project`](https://clinth.github.io/ixfx/functions/Geometry.Points.project.html) yields a point at a specified distance and angle from an origin point.\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nconst origin = { x: 100, y: 100 };\n\n// 100 units away @ 10 degrees\nPoints.project(origin, 100, degreeToRadian(10));\n```\n\n## Conversions\n\nConverting a Point _to_ some other shape of data\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nconst p = { x: 5, y: 10 };\n\n// To an array [x, y]\nPoints.toArray(p); // [5, 10]\n\n// Human-readable representation:\nPoints.toString(p); // \"(5, 10)\"\n\n// Round x and y\nPoints.toIntegerValues({ x: 5.5, y: 10.5 }); // {x: 6, y: 11 }\n```\n\nConverting _from_ some other shape of data to Point\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n// Convert from two numeric parameters\nPoints.from(10, 15);    // { x: 10, y: 15}\n\n// Convert from an array\nPoints.from([10, 15]);  // {x: 10, y: 15}\n\n// Convert an array of arrays\nPoints.fromNumbers([ [10, 15], [5, 5]]); // [{x:10, y:15}, {x:5, y:5}]\n```\n\n## Normalise\n\nIt's often useful to work with [normalised](../../data/normalising/) points. Thus a point of `{x:0.5, y:0.5}` would mean 50% x, and 50% y. See the discussion on [normalising points](../../data/normalising/#geometry) for more on this.\n\nIn short, you can normalise point using `Points.divide`:\n\n```js\n// repl-pad#2\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nconst pt = { x: 500, y: 500 };\n\n// Normalise `pt` by viewport size,\n// yielding a point on 0..1 scale.\nPoints.divide(pt, window.innerWidth, window.innerHeight);\n\n// In principle it might exceed 0..1 range, so it may need to be clamped, too:\nPoints.clamp(Points.divide(pt, window.innerWidth, window.innerHeight));\n```\n\nTo apply a normalised point to some destination range, use `Points.multiply`\n\n```js\n// repl-pad#2\n// Maps a relative point to viewport size\nPoints.multiply(pt, window.innerWidth, window.innerHeight);\n```\n\n`clamp` locks x,y to a minimum and maximum, by default 0..1:\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nPoints.clamp({ x:2,   y:2 });      // { x:1.0, y:1.0 }\nPoints.clamp({ x:0.5, y:0.5 });    // { x:0.5, y:0.5 }\n```\n\n## Random\n\n[`random`](https://clinth.github.io/ixfx/functions/Geometry.Points.random.html) creates a random point, by default on a normalised 0..1 scale:\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\nconst pt = Points.random();\n```\n\nA custom random source can be provided to skew values:\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\";\nimport { weightedSkewed } from \"https://unpkg.com/ixfx/dist/random.js\";\nconst pt = Points.random(weightedSkewed(`quadIn`));\n```\n\n## Applying functions\n\n[`apply`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply) returns a point with a given function applied to both `x` and `y` fields:\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nconst p = {x:100.1234, y:100.1234};\n\n// Adds 10 to both x and y\nPoints.apply(p, v => v + 10);\n\n// Rounds the fields\nPoints.apply(p, Math.round);\n```\n\n[`pipeline`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html) creates a reusable function which applies a series of transformations to a point.\n\nIn the below example, a point will be normalised, and then inverted.\n\n```js\n// repl-pad#3\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\nconst somePoint = { x: 1.2, y: 3.4 };\n\n// Create pipeline\nconst p = Points.pipeline(Points.normalise, Points.invert);\n\n// Run pipeline on `somePoint`\nconst changedPoint = p(somePoint); \n```\n\nIf a reusable pipeline is not needed, use [`pipelineApply`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html) instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:\n\n```js\n// repl-pad#3\nconst changedPoint = Points.pipelineApply(somePoint, Points.normalise, Points.invert);\n```\n\n[`reduce`](https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html) works like the usual Javascript `reduce` function:\n\n```js\n// Sum x and y values separately\nconst total = Points.reduce(points, (p, acc) => ({x: p.x + acc.x, y: p.y + acc.y})\n);\n// total.x / total.y\n```\n\n## Math operations\n\n```js\n// repl-pad\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Returns {x,y} of a * b\nPoints.multiply(a, b);\n\n// Returns {x,y} of a, with a.x * 2 and a.y * 0.5\nPoints.multiply(a, 2, 0.5);\n\n// Returns {x,y} of a / b\nPoints.divide(a, b);\n\n// Returns {x,y} of a, with a.x / 2 and a.y / 0.5\nPoints.divide(a, 2, 0.5);\n\n// Returns {x,y} of a + b\nPoints.sum(a, b);\n\n// Returns {x,y} of a - b;\nPoints.subtract(a, b);\n```\n\n[`invert`](https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html) flips one or more axis of a point. By default, both.\n\n```js\nconst a = { x: 20, y: 10 };\n\n// Returns { x: -20, y: -10 } \nPoints.invert(a);\n\n// Returns { x: -20, y: 10\nPoints.invert(a, `x`);\n```\n\n## Comparisons\n\n[`compare`](https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html) returns:\n* -1 if either _x_ or _y_ of point `a` is _less_ than what `b` has\n* 0 if _x_ and _y_ for `a` and `b` are identical\n* 1 if either _x_ or _y_ of point `a` is _greater_ than what `b` has\n\n```js\n// Returns 0, both points are equal\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 10 });\n\n// Returns -1, a.y is less than b.y\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 20 });\n\n// Returns 1, a.x is greater than b.x\nPoints.compare({ x: 10, y: 10 }, { x: 9, y: 10 });\n```\n\n[`isEqual`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html) returns _true_ if points have the same value:\n\n```js\nconst a = { x: 10, y: 10 };\nconst b = { x: 10, y: 10 };\na === b; // false, because identity of objects is different\nPoints.isEqual(a, b); // true, because values are the same\n```\n\nNote that additional properties of the the points are not compared, only the _x_, _y_ (and optional _z_).\n\nMore checks:\n* [`isNull`](https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html) returns true if _x_ and _y_ are _null_\n* [`isEmpty`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html) returns true if _x_ and _y_ are 0. Use `Points.Empty` to create an empty point.\n* [`isPlaceholder`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html) returns _true_ if both _x_ and _y_ are _NaN_. Use `Points.Placeholder` to create a placeholder point.\n* [`isPoint`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html) returns _true_ if the passed object has at least _x_ and _y_ properties.\n\n[`findMinimum`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum) allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.\n\nExample:\n\n```js\nimport { Points } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\n// Find the point closest to the {x:100, y:100}\nconst points = [/* ... points ... */];\nconst center = {x: 100, y: 100};\n\n// closestToCenter will be a Point {x,y}\nconst closestToCenter = Points.findMinimum((a, b) => {\n  const aDist = distance(a, center);\n  const bDist = distance(b, center);\n\n  // Returns `a` if its distance is less than `b`\n  //  or otherwise returns `b`\n  return (aDistance < bDistance) ? a : b;\n}, points);\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"distance-and-angles","text":"Distance and angles"},{"depth":3,"slug":"relation","text":"Relation"},{"depth":3,"slug":"see-also","text":"See also"},{"depth":2,"slug":"interpolation","text":"Interpolation"},{"depth":2,"slug":"areas","text":"Areas"},{"depth":2,"slug":"rotation--translation","text":"Rotation & Translation"},{"depth":2,"slug":"conversions","text":"Conversions"},{"depth":2,"slug":"normalise","text":"Normalise"},{"depth":2,"slug":"random","text":"Random"},{"depth":2,"slug":"applying-functions","text":"Applying functions"},{"depth":2,"slug":"math-operations","text":"Math operations"},{"depth":2,"slug":"comparisons","text":"Comparisons"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
