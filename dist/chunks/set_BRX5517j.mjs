import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Sets.html\">Collections.Sets module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html\">Immutable set</a></li>\n<li><a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html\">Mutable set</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</ul></div>\n<p>A set only keeps unique items, useful when you want to ignore duplicates. Adding <em>apples, oranges, grapes, pears, oranges</em> will result in the set: <em>apples, oranges, grapes, pears</em>.</p>\n<p>Javascript has a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a> object.</p>\n<p>With primitive data types, it works as expected:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> s</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Set</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set contains: `apples`, `oranges`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// True</span></span>\n<span class=\"line\"></span></code></pre>\n<p>However a problem with the in-built Set is that it compares objects based on <em>reference</em> rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> s</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Set</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">({ fruit:</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">({ fruit:</span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">({ fruit:</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set contains: { fruit:\"apples\" }, { fruit:\"oranges\" }, { fruit :\"apples\" }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">({ fruit:</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> }); </span><span style=\"color:#6A737D\">// False</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the above example, we get some surprises: the set seems to have duplicates, and <code>has</code> returns false for data it contains.</p>\n<p>As an alternative, ixfx has an <a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html\">immutable</a> and mutable set that can compare by value rather than reference.</p>\n<h2 id=\"immutable-set\">Immutable set</h2>\n<p>The key functions for a set are: <code>add()</code>, <code>has()</code>, <code>delete()</code> and iterating over values with <code>values()</code>.</p>\n<p>Create an <a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html\">immutable set</a>, and add three items. Any function that changes the set returns the changed copy, so when we call <code>add()</code>, we keep track of the returned changed set.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Sets } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> s1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Sets.</span><span style=\"color:#B392F0\">immutable</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s1 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> s1.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To compare objects by value, it uses <code>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Sets } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> s2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Sets.</span><span style=\"color:#B392F0\">immutable</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> v.fruit);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> s2.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">({ fruit: </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> }, { fruit: </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">}, { fruit: </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s2.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">({ fruit:</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> }); </span><span style=\"color:#6A737D\">// True</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To loop over all the values of the set, use the <code>values</code> iterator:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> s2.</span><span style=\"color:#B392F0\">values</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or make a copy as an array:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">s2.</span><span style=\"color:#B392F0\">toArray</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Items can be removed by value as well:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">s2 </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> s2.</span><span style=\"color:#B392F0\">delete</span><span style=\"color:#E1E4E8\">({ fruit: </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\"> })l</span></span>\n<span class=\"line\"></span></code></pre>\n<h1 id=\"mutable-set\">Mutable set</h1>\n<p>The <a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html\">mutable set</a> has the same basic operations as the immutable set: <code>add()</code>, <code>has()</code>, <code>delete()</code> and <code>values()</code>. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> s</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Sets.</span><span style=\"color:#B392F0\">mutable</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Contains: `apples`, `oranges`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// True</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">remove</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To compare objects by value, it uses <code>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Sets } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> s</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Sets.</span><span style=\"color:#B392F0\">mutable</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> v.fruit);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">add</span><span style=\"color:#E1E4E8\">({ fruit: </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> }, { fruit: </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">}, { fruit: </span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">({ fruit:</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\"> }); </span><span style=\"color:#6A737D\">// True</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To listen for events:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`add`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">value</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">updated</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> evt;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // value refers to the thing added</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // updated: true if item is brand new, false if it's replacing something with same value</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`delete`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // evt refers to the thing being deleted</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">s.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`clear`</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // when set has been cleared</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span></code></pre>";

				const frontmatter = {"title":"Set","layout":"../../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/collections/set.md";
				const url = "/data/collections/set";
				function rawContent() {
					return "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Sets.html\">Collections.Sets module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html\">Immutable set</a></li>\n<li><a href=\"https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html\">Mutable set</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\n\nA set only keeps unique items, useful when you want to ignore duplicates. Adding _apples, oranges, grapes, pears, oranges_ will result in the set: _apples, oranges, grapes, pears_.\n\nJavascript has a built-in [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object. \n\nWith primitive data types, it works as expected:\n```js\nconst s = new Set();\ns.add(`apples`);\ns.add(`oranges`);\ns.add(`apples`);\n// Set contains: `apples`, `oranges`\ns.has(`apples`); // True\n```\n\nHowever a problem with the in-built Set is that it compares objects based on _reference_ rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.\n\n```js\nconst s = new Set();\ns.add({ fruit:`apples` });\ns.add({ fruit:`oranges` });\ns.add({ fruit:`apples` });\n// Set contains: { fruit:\"apples\" }, { fruit:\"oranges\" }, { fruit :\"apples\" }\ns.has({ fruit:`apples` }); // False\n```\n\nIn the above example, we get some surprises: the set seems to have duplicates, and `has` returns false for data it contains.\n\nAs an alternative, ixfx has an [immutable](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html) and mutable set that can compare by value rather than reference.\n\n## Immutable set\n\nThe key functions for a set are: `add()`, `has()`, `delete()` and iterating over values with `values()`.\n\nCreate an [immutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html), and add three items. Any function that changes the set returns the changed copy, so when we call `add()`, we keep track of the returned changed set.\n\n```js\nimport { Sets } from \"https://unpkg.com/ixfx/dist/collections.js\"\nlet s1 = Sets.immutable();\ns1 = s1.add(`apples`, `oranges`, `apples`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from \"https://unpkg.com/ixfx/dist/collections.js\"\nlet s2 = Sets.immutable(v => v.fruit);\ns2 = s2.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns2.has({ fruit:`apples` }); // True\n```\n\nTo loop over all the values of the set, use the `values` iterator:\n```js\nfor (const v of s2.values() {\n\n})\n```\n\nOr make a copy as an array:\n```js\ns2.toArray();\n```\n\nItems can be removed by value as well:\n```js\ns2 = s2.delete({ fruit: `oranges` })l\n```\n\n# Mutable set\n\nThe [mutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html) has the same basic operations as the immutable set: `add()`, `has()`, `delete()` and `values()`. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.\n\n```js\nconst s = Sets.mutable();\ns.add(`apples`, `oranges`, `apples`);\n// Contains: `apples`, `oranges`\ns.has(`apples`); // True\ns.remove(`oranges`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from \"https://unpkg.com/ixfx/dist/collections.js\"\nconst s = Sets.mutable(v => v.fruit);\ns.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns.has({ fruit:`apples` }); // True\n```\n\nTo listen for events:\n```js\ns.addEventListener(`add`, evt => {\n  const { value, updated } = evt;\n  // value refers to the thing added\n  // updated: true if item is brand new, false if it's replacing something with same value\n});\n\ns.addEventListener(`delete`, evt => {\n  // evt refers to the thing being deleted\n});\n\ns.addEventListener(`clear`, () => {\n  // when set has been cleared\n})\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"immutable-set","text":"Immutable set"},{"depth":1,"slug":"mutable-set","text":"Mutable set"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
