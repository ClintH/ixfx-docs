import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n  import '/src/loader';\n  import '/src/components/DensityPlotElement';\n  import {weightedInteger, weighted, gaussian} from '/node_modules/ixfx/dist/random.js';\n  import {jitter, Easings} from '/node_modules/ixfx/dist/modulation.js';\n  window.weightedInteger = weightedInteger;\n  window.weighted = weighted;\n  window.jitter = jitter;\n  window.Easings = Easings;\n  window.gaussian = gaussian;\n  importEl(\n  `plot3`, \n  `density-plot-element`, {\n    fn: \"jitter({ relative: 0.2})(0.5)\",\n    scaleMin: 0,\n    scaleMax: 1,\n    editable: true\n  });\n  importEl(\n    `plot4`, \n    `density-plot-element`, {\n      fn: \"jitter({ absolute: 0.2, source: gaussian })(0.5)\",\n      scaleMin: 0,\n      scaleMax: 1,\n      editable: true\n  });\n</script>\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Modulation.jitter.html\">jitter function</a>, <a href=\"https://clinth.github.io/ixfx/modules/Modulation.html\">Modulation module</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIADVU3mQAA42RQW/CMAyF/4qVC2WEBq5F7DhpB6TdVw5RayCQJl1tKqSq/31OGUy77RAp+eL3/Cx/DqqJNapCtT6yGvWggm2eb61ccOysV8Uw6lRKqhBNjcRSs1TjXk+PhPdS4Zo2dgzD2TFjN8Khiw3MTswtFcZcQ3s55lVsjLsdbqZ2xEY8r96yiyE/02xThodF5W3TaqDKevyPUW3Z/liUwSMDu+pCsIWVkCoGYjHBrwTy9RPdg74FwfdrNpQBYGqOdQHcXVEn0mFK2WOR5GUY52JByO9BNL31WTaH7StMYmPgo5OxKiRYrvM81QOkSL202Vk+5eRCNuVbLF5SquQG0/c0b9ZrUWpY//JH0Ky/s3TaSLxDInsURcKjSFar+UbJHv/sdf8NJX3U8OkBAAA=\">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n<p><em>Jitter</em> is the random modulation of a value. It is usually <em>bipolar</em>, meaning that it might shift a value upwards or downwards.</p>\n<p>On a <a href=\"../../data/normalising/\">normalised</a> scale of 0..1 scale, let’s say we want to apply jitter of 10% to a value of 0.5. If the jitter was to be absolute, that yields a potential new value of 0.4 - 0.6. An algorithm for this is:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { clamp } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/bundle.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> jitter</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">value</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">jitter</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Double jitter in order to +- and apply random</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> j</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> jitter </span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#F97583\"> *</span><span style=\"color:#E1E4E8\"> Math.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Offset value, add j and clamp to 0-1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#B392F0\"> clamp</span><span style=\"color:#E1E4E8\">(value </span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\"> jitter </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> j);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Jitter a value of 50% by 10%</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields a range of 0.4-0.6</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">jitter</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Another option is to jitter by a relative amount, with respect to the input value. In that case, jittering 0.5 by 10% yields a range of 0.45 - 0.55, because 10% of 0.5 is 0.05. Thus for a given jitter amount, a larger input value will jitter more wildly than a smaller value, creating a sense of instability.</p>\n<p>ixfx provides both of these approaches with <a href=\"https://clinth.github.io/ixfx/functions/Modulation.jitter.html\"><code>jitter</code></a>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { jitter } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/modulation.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Absolute jitter 0.5 by 10%</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">jitter</span><span style=\"color:#E1E4E8\">({ absolute: </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\"> })(</span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// number 0.4-0.6</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Relative jitter 0.5 by 10%</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">jitter</span><span style=\"color:#E1E4E8\">({ relative: </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\"> })(</span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// number 0.45-0.55</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Remember that <code>jitter</code> returns a function (which is why there’s the double parenthesis in the example above). This is so the same jitter options can be reused without scattering them all over the place.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// One-time setup</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> jitterFn</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> jitter</span><span style=\"color:#E1E4E8\">({ absolute: </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Re-use the function when you like</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">jitterFn</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Jitter 100 by an absolute 10%;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">jitterFn</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// Jitter 50 by an absolute 10%</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Try adjusting the value-to-jitter and jitter amount:</p>\n<div id=\"plot3\"></div>\n<p>By default <code>jitter</code> uses <code>Math.random</code>, but you could just as well plug in a <a href=\"https://clinth.github.io/ixfx/functions/Random.weighted.html\"><code>weighted</code></a>, or <a href=\"https://clinth.github.io/ixfx/functions/Random.gaussian.html\"><code>gaussian</code></a> random number generator.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { jitter } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/modulation.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { gaussian } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/random.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Note we pass in as a function, so no () after gaussian</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> jitterFn</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> jitter</span><span style=\"color:#E1E4E8\">({ absolute:</span><span style=\"color:#79B8FF\">0.2</span><span style=\"color:#E1E4E8\">, source: gaussian });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the plot below, notice how jitter is more likely to be close to the original value, instead of being evenly distributed across the whole specified jitter range. A more organic outcome?</p>\n<div id=\"plot4\"></div>";

				const frontmatter = {"title":"Jitter","layout":"../../layouts/MainLayout.astro","setup":"import DensityPlotElement from '../../components/DensityPlotElement';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/modulation/jitter.md";
				const url = "/modulation/jitter";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n  import '/src/loader';\n  import '/src/components/DensityPlotElement';\n  import {weightedInteger, weighted, gaussian} from '/node_modules/ixfx/dist/random.js';\n  import {jitter, Easings} from '/node_modules/ixfx/dist/modulation.js';\n  window.weightedInteger = weightedInteger;\n  window.weighted = weighted;\n  window.jitter = jitter;\n  window.Easings = Easings;\n  window.gaussian = gaussian;\n  importEl(\n  `plot3`, \n  `density-plot-element`, {\n    fn: \"jitter({ relative: 0.2})(0.5)\",\n    scaleMin: 0,\n    scaleMax: 1,\n    editable: true\n  });\n  importEl(\n    `plot4`, \n    `density-plot-element`, {\n      fn: \"jitter({ absolute: 0.2, source: gaussian })(0.5)\",\n      scaleMin: 0,\n      scaleMax: 1,\n      editable: true\n  });\n</script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Modulation.jitter.html\">jitter function</a>, <a href=\"https://clinth.github.io/ixfx/modules/Modulation.html\">Modulation module</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIADVU3mQAA42RQW/CMAyF/4qVC2WEBq5F7DhpB6TdVw5RayCQJl1tKqSq/31OGUy77RAp+eL3/Cx/DqqJNapCtT6yGvWggm2eb61ccOysV8Uw6lRKqhBNjcRSs1TjXk+PhPdS4Zo2dgzD2TFjN8Khiw3MTswtFcZcQ3s55lVsjLsdbqZ2xEY8r96yiyE/02xThodF5W3TaqDKevyPUW3Z/liUwSMDu+pCsIWVkCoGYjHBrwTy9RPdg74FwfdrNpQBYGqOdQHcXVEn0mFK2WOR5GUY52JByO9BNL31WTaH7StMYmPgo5OxKiRYrvM81QOkSL202Vk+5eRCNuVbLF5SquQG0/c0b9ZrUWpY//JH0Ky/s3TaSLxDInsURcKjSFar+UbJHv/sdf8NJX3U8OkBAAA=\">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n\n_Jitter_ is the random modulation of a value. It is usually _bipolar_, meaning that it might shift a value upwards or downwards. \n\nOn a [normalised](../../data/normalising/) scale of 0..1 scale, let's say we want to apply jitter of 10% to a value of 0.5. If the jitter was to be absolute, that yields a potential new value of 0.4 - 0.6. An algorithm for this is:\n\n```js\n// repl-pad\nimport { clamp } from 'https://unpkg.com/ixfx/dist/bundle.js';\n\nconst jitter = (value, jitter) => {\n  // Double jitter in order to +- and apply random\n  const j = jitter * 2 * Math.random();\n  // Offset value, add j and clamp to 0-1\n  return clamp(value - jitter + j);\n}\n// Jitter a value of 50% by 10%\n// Yields a range of 0.4-0.6\njitter(0.5, 0.1);\n``` \n\nAnother option is to jitter by a relative amount, with respect to the input value. In that case, jittering 0.5 by 10% yields a range of 0.45 - 0.55, because 10% of 0.5 is 0.05. Thus for a given jitter amount, a larger input value will jitter more wildly than a smaller value, creating a sense of instability.\n\nixfx provides both of these approaches with [`jitter`](https://clinth.github.io/ixfx/functions/Modulation.jitter.html). \n\n```js\n// repl-pad\nimport { jitter } from 'https://unpkg.com/ixfx/dist/modulation.js';\n\n// Absolute jitter 0.5 by 10%\njitter({ absolute: 0.1 })(0.1); // number 0.4-0.6\n\n// Relative jitter 0.5 by 10%\njitter({ relative: 0.1 })(0.5); // number 0.45-0.55\n```\n\nRemember that `jitter` returns a function (which is why there's the double parenthesis in the example above). This is so the same jitter options can be reused without scattering them all over the place.\n\n```js\n// One-time setup\nconst jitterFn = jitter({ absolute: 0.1 });\n\n// Re-use the function when you like\njitterFn(100); // Jitter 100 by an absolute 10%;\njitterFn(50);  // Jitter 50 by an absolute 10%\n```\n\nTry adjusting the value-to-jitter and jitter amount:\n\n<div id=\"plot3\"></div>\n\nBy default `jitter` uses `Math.random`, but you could just as well plug in a [`weighted`](https://clinth.github.io/ixfx/functions/Random.weighted.html), or [`gaussian`](https://clinth.github.io/ixfx/functions/Random.gaussian.html) random number generator.\n\n```js\nimport { jitter } from 'https://unpkg.com/ixfx/dist/modulation.js';\nimport { gaussian } from 'https://unpkg.com/ixfx/dist/random.js';\n\n// Note we pass in as a function, so no () after gaussian\nconst jitterFn = jitter({ absolute:0.2, source: gaussian });\n```\n\nIn the plot below, notice how jitter is more likely to be close to the original value, instead of being evenly distributed across the whole specified jitter range. A more organic outcome?\n\n<div id=\"plot4\"></div>\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
