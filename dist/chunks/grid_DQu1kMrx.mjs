import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\nimport '/src/components/geometry/GridEditor';\n</script>\n<p><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html\">API Docs: Geometry.Grids module</a></p>\n<p>A <em>grid</em> is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an <em>x,y</em> location with <em>0,0</em> being the top-left corner.</p>\n<p>Example: This grid has four rows and three columns.</p>\n<div>\n  <table style=\"width:auto; border: 1px solid whitesmoke\">\n  <tbody><tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </tbody></table>\n</div>\n<p>A grid can be useful if your data has grid-like spatial qualities. It’s useful for being able to gather data that is ‘nearby’ based on cell location, traversing space following different rules and so on.</p>\n<p>Although there is a natural affinity between the grid and pixel coordinates, the grid isn’t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.</p>\n<h2 id=\"types\">Types</h2>\n<p>There are two main types for working with the grid functions:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> Grid</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  rows: number,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  cols: number</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> Cell</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  x: number,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  y: number</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In action, this looks like:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> shape</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {rows: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, cols: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cell</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {x: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If a grid is going to be mapped to pixels (more on that below) it also need a <em>size</em> field.</p>\n<h2 id=\"visiting\">Visiting</h2>\n<p>For a given starting cell, it’s possible to <em>visit</em> all cells once and only once with movement following a spatial logic.</p>\n<grid-visitor-element client:visible=\"\">\n<p>Provided <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor\">visitor</a> functions are: <code>visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,</code> and <code>visitorColumn</code>.</p>\n<p>The visitor can be used in a <code>for .. of</code> loop</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Grids } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Start visitor at 5,5</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> visitor</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">visitorDepth</span><span style=\"color:#E1E4E8\">(shape, {x: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> cell </span><span style=\"color:#F97583\">of</span><span style=\"color:#E1E4E8\"> visitor) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Visited cell..</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Grids } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Set up visitor once</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> visitor</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">visitorBreadth</span><span style=\"color:#E1E4E8\">(shape, {x: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> visitorDelayMs</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> 500</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Function to call via timeout</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> visit</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">cell</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">done</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> visitor.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (done) { </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// All cells visited</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  } </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">    // TODO: Do something with `cell`...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Run again after the delay</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  setTimeout</span><span style=\"color:#E1E4E8\">(visit, visitorDelayMs);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setTimeout</span><span style=\"color:#E1E4E8\">(visit, visitorDelayMs);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The visitor can have an instance of <a href=\"https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html\">SetMutable</a> passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor’s journey.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Grids } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { setMutable } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> visited</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> setMutable</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> visitor</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">visitorRandom</span><span style=\"color:#E1E4E8\">(shape, {x: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">}, visited);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> (visited.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">(cell)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Do something if cell has been visited...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the interactive demo above, this technique is used to colour cells differently depending on whether they’ve been visited.</p>\n<p>To get a cell <em>x</em> steps away from a position, use <a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor\">visitFor</a></p>\n<h2 id=\"iterating-cells\">Iterating cells</h2>\n<p>The <code>cells</code> iterator is a simple alternative to the <em>visitor</em> technique if you don’t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> cell </span><span style=\"color:#F97583\">of</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">cells</span><span style=\"color:#E1E4E8\">(shape)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // do something with cell (defined as {x,y})</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"offsets\">Offsets</h2>\n<grid-offset-element client:visible=\"\">\n<p>You can calculate the coordinates of each compass cardinal direction using <code>offsetCardinals</code>. It has the following signature:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#B392F0\">offsetCardinals</span><span style=\"color:#E1E4E8\">(shape:Grid, origin:Cell, distance:number, boundsLogic:</span><span style=\"color:#9ECBFF\">`unbounded`</span><span style=\"color:#F97583\"> |</span><span style=\"color:#9ECBFF\"> `undefined`</span><span style=\"color:#F97583\">|</span><span style=\"color:#9ECBFF\"> `stop`</span><span style=\"color:#F97583\"> |</span><span style=\"color:#9ECBFF\"> `wrap`</span><span style=\"color:#E1E4E8\">): Neighbours</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>distance</code> is how many cells away from origin you want to calculate.</p>\n<p><code>boundsLogic</code> determines how coordinates should wrap in the grid. Allowed values are:</p>\n<ul>\n<li><code>wrap</code>: coordinates wrap around the edges of grid to opposite edge</li>\n<li><code>stop</code>: coordinates clamp to edge</li>\n<li><code>undefined</code>: out-of-grid coordinates are returned as <code>undefined</code></li>\n<li><code>unbounded</code>: coordinates are returned without bounds checking</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Grids } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> shape</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { rows: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, cols: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> origin</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> distance</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> offsets</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">offsetCardinals</span><span style=\"color:#E1E4E8\">(shape, origin, distance, </span><span style=\"color:#9ECBFF\">`wrap`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  n: {x,y}, ne: {x, y}, nw: {x,y}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  s: {x,y}, se: {x,y}, sw: {x,y}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//  e: {x,y}, w: {x,y}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cellAbove</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> offsets.n </span><span style=\"color:#6A737D\">// eg. get cell `distance` to the north of `origin`</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"mapping-to-data\">Mapping to data</h2>\n<p>Grid and cells don’t store data. You can’t stuff things into it as you would a spreadsheet cell. It is a <em>virtualised</em> data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.</p>\n<p>To link a cell to your own data, use its coordinates as a key into a collection like a Map</p>\n<p>Lets say you want to associate colour with each cell:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 1. We want a function to create a key for a given cell</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Function takes a cell and returns its coordinates as a string</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// eg: {x:10, y:5} => \"10-5\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> key</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">cell</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#9ECBFF\"> `${</span><span style=\"color:#E1E4E8\">cell</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">x</span><span style=\"color:#9ECBFF\">}-${</span><span style=\"color:#E1E4E8\">cell</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">y</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 2. Create a map to store data</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> store</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 3. Some test data...</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> someData</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> someMoreData</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { color: </span><span style=\"color:#9ECBFF\">`pink`</span><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 4. Data can be associated using the map:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">data.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">key</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\"> }), someData);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// 4. And then retrieved from the basis of a cell</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">//    coordinate. Let's say we want the data for cell 0,0:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cellData</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> data.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">key</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// cellData.colour, etc</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As a complete example, we can associate a random colour and number to every cell.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Grids } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/geometry.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Arrays } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/collections.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> key</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">cell</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#9ECBFF\"> `${</span><span style=\"color:#E1E4E8\">cell</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">x</span><span style=\"color:#9ECBFF\">}-${</span><span style=\"color:#E1E4E8\">cell</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">y</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> store</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Map</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> shape</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { rows: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, cols: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> colours</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`bisque`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`cadetblue`</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#9ECBFF\">`cornflowerblue`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`coral`</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> cell </span><span style=\"color:#F97583\">of</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">cells</span><span style=\"color:#E1E4E8\">(shape)) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  store.</span><span style=\"color:#B392F0\">set</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">key</span><span style=\"color:#E1E4E8\">(cell), {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    colour: Arrays.</span><span style=\"color:#B392F0\">randomElement</span><span style=\"color:#E1E4E8\">(colours), </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    karma: Math.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">()});</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Fetch data associated with a given cell:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> val</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> store.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">key</span><span style=\"color:#E1E4E8\">({x:</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, y:</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">}));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// {colour: '...', karma: 0.235}</span></span>\n<span class=\"line\"></span></code></pre>\n<demo-element title=\"Associating data with cells\" src=\"/geometry/grid-data/\">\n<h2 id=\"mapping-to-pixels\">Mapping to pixels</h2>\n<p>Although the grid is not meant to be a literal visual grid, it can be used as such.</p>\n<p>To map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> shape</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { rows: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, cols: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, size: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Draw the grid by iterating over its cells:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> ctx</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> document.</span><span style=\"color:#B392F0\">getElementById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`myCanvas`</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">getContext</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`2d`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> shape</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { rows: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, cols: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, size: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cell</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">cells</span><span style=\"color:#E1E4E8\">(shape)) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  let</span><span style=\"color:#E1E4E8\"> rect </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">rectangleForCell</span><span style=\"color:#E1E4E8\">(shape, cell);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ctx.</span><span style=\"color:#B392F0\">strokeRect</span><span style=\"color:#E1E4E8\">(rect.x, rect.y, rect.width, rect.height);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To get the visual bounds for a given:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> shape</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { rows: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, cols: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">, size: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// rectangleForCell(grid:Grid, cell:Cell): Rect</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Returns { x, y, width, height } for cell at position 5,5</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> rect</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">rectangleForCell</span><span style=\"color:#E1E4E8\">(shape, { x: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\"> }); </span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or to go from coordinate (eg. mouse pointer) to cell:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Convert pointer position to cell coordinate</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// cellAtPoint(grid:Grid, point:Point): Cell</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> cell</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Grids.</span><span style=\"color:#B392F0\">cellAtPoint</span><span style=\"color:#E1E4E8\">(shape, {evt.offsetX, evt.offsetY}); </span><span style=\"color:#6A737D\">// Returns {x,y}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"demos\">Demos</h2>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx-demos/geometry/grid-dom/\">Grid DOM</a>: Generate DIVs based on grid cells (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom\">source</a>)</li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/geometry/grid-canvas/\">Grid Canvas</a>: Draw elements based on grid cells (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas\">source</a>)</li>\n</ul>\n<h2 id=\"functions-overview\">Functions overview</h2>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside\">inside</a>: Returns <em>true</em> if given cell is within grid dimensions</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine\">getLine</a>: Returns all cells on a straight line between two cell coordinates</li>\n</ul>\n<p>Enumerating cells</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells\">cells</a>: Iterate all cells</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows\">rows</a>: Iterate all rows</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor\">visitFor</a>: Return cell <em>x</em> steps away from a position using the provided visitor function</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor\">visitor</a>: Step through cells in some way</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset\">offset</a>: Returns cell some x,y offset away from start</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours\">neighbours</a>: Return neighbours for a cell</li>\n</ul>\n<p>Visual grids</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle\">cellMiddle</a>: Return pixel coordinate for the middle of a cell</li>\n<li><a href=\"https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell\">rectangleForCell</a>: Get visual rectangle for cell</li>\n</ul></demo-element></grid-offset-element></grid-visitor-element>";

				const frontmatter = {"title":"Grid","layout":"../../../layouts/MainLayout.astro","setup":"import { DemoElement } from '/src/components/DemoElement.ts';\nimport GridVisitorElement from '/src/components/geometry/GridVisitorElement';\nimport GridOffsetElement from '/src/components/geometry/GridOffsetElement';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/types/geometry/grid.md";
				const url = "/types/geometry/grid";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\nimport '/src/components/geometry/GridEditor';\n</script>\n\n[API Docs: Geometry.Grids module](https://clinth.github.io/ixfx/modules/Geometry.Grids.html)\n\nA _grid_ is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an _x,y_ location with _0,0_ being the top-left corner.\n\nExample: This grid has four rows and three columns.\n<div>\n  <table style=\"width:auto; border: 1px solid whitesmoke\">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n\nA grid can be useful if your data has grid-like spatial qualities. It's useful for being able to gather data that is 'nearby' based on cell location, traversing space following different rules and so on.\n\nAlthough there is a natural affinity between the grid and pixel coordinates, the grid isn't specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.\n\n## Types\n\nThere are two main types for working with the grid functions:\n\n```typescript\ntype Grid {\n  rows: number,\n  cols: number\n}\ntype Cell {\n  x: number,\n  y: number\n}\n```\n\nIn action, this looks like:\n```js\nconst shape = {rows: 10, cols: 10};\nconst cell = {x: 0, y: 0};\n```\n\nIf a grid is going to be mapped to pixels (more on that below) it also need a _size_ field.\n\n\n## Visiting\n\nFor a given starting cell, it's possible to _visit_ all cells once and only once with movement following a spatial logic.\n\n<grid-visitor-element client:visible />\n\nProvided [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor) functions are: `visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,` and `visitorColumn`.\n\nThe visitor can be used in a `for .. of` loop\n\n```js\nimport { Grids } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\n// Start visitor at 5,5\nconst visitor = Grids.visitorDepth(shape, {x: 5, y: 5});\nfor (let cell of visitor) {\n  // Visited cell..\n}\n```\n\nOr for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.\n\n```js\nimport { Grids } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\n// Set up visitor once\nconst visitor = Grids.visitorBreadth(shape, {x: 5, y: 5});\nconst visitorDelayMs = 500;\n\n// Function to call via timeout\nconst visit = () => {\n  const [cell,done] = visitor.next();\n  if (done) { \n    return; // All cells visited\n  } else {\n    // TODO: Do something with `cell`...\n  }\n\n  // Run again after the delay\n  setTimeout(visit, visitorDelayMs);\n}\nsetTimeout(visit, visitorDelayMs);\n```\n\nThe visitor can have an instance of [SetMutable](https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html) passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor's journey.\n\n```js\nimport { Grids } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nimport { setMutable } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\nconst visited = setMutable();\nconst visitor = Grids.visitorRandom(shape, {x: 5, y: 5}, visited);\n\n...\nif (visited.has(cell)) {\n  // Do something if cell has been visited...\n}\n```\n\nIn the interactive demo above, this technique is used to colour cells differently depending on whether they've been visited.\n\nTo get a cell _x_ steps away from a position, use [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor)\n\n## Iterating cells\n\nThe `cells` iterator is a simple alternative to the _visitor_ technique if you don't care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.\n\n```js\nfor (let cell of Grids.cells(shape)) {\n  // do something with cell (defined as {x,y})\n}\n```\n\n## Offsets\n\n<grid-offset-element client:visible />\n\nYou can calculate the coordinates of each compass cardinal direction using `offsetCardinals`. It has the following signature:\n\n```js\noffsetCardinals(shape:Grid, origin:Cell, distance:number, boundsLogic:`unbounded` | `undefined`| `stop` | `wrap`): Neighbours\n```\n\n`distance` is how many cells away from origin you want to calculate.\n\n`boundsLogic` determines how coordinates should wrap in the grid. Allowed values are: \n*  `wrap`: coordinates wrap around the edges of grid to opposite edge\n*  `stop`: coordinates clamp to edge\n*  `undefined`: out-of-grid coordinates are returned as `undefined`\n*  `unbounded`: coordinates are returned without bounds checking\n\n```js\nimport { Grids } from \"https://unpkg.com/ixfx/dist/geometry.js\"\n\nconst shape = { rows: 10, cols: 10 };\nconst origin = { x: 4, y: 4 };\nconst distance = 2;\nconst offsets = Grids.offsetCardinals(shape, origin, distance, `wrap`);\n\n// Returns: {\n//  n: {x,y}, ne: {x, y}, nw: {x,y}\n//  s: {x,y}, se: {x,y}, sw: {x,y}\n//  e: {x,y}, w: {x,y}\n//}\n\nconst cellAbove = offsets.n // eg. get cell `distance` to the north of `origin`\n```\n\n## Mapping to data\n\nGrid and cells don't store data. You can't stuff things into it as you would a spreadsheet cell. It is a _virtualised_ data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.\n\nTo link a cell to your own data, use its coordinates as a key into a collection like a Map\n\nLets say you want to associate colour with each cell:\n\n```js\n\n// 1. We want a function to create a key for a given cell\n// Function takes a cell and returns its coordinates as a string\n// eg: {x:10, y:5} => \"10-5\"\nconst key = (cell) => `${cell.x}-${cell.y}`;\n\n// 2. Create a map to store data\nconst store = new Map();\n\n// 3. Some test data...\nconst someData = { colour: `red` }\nconst someMoreData = { color: `pink`};\n\n// 4. Data can be associated using the map:\ndata.set(key({ x: 0, y: 0 }), someData);\n\n// 4. And then retrieved from the basis of a cell\n//    coordinate. Let's say we want the data for cell 0,0:\nconst cellData = data.get(key({ x: 0, y: 0 }));\n// cellData.colour, etc\n```\n\nAs a complete example, we can associate a random colour and number to every cell.\n\n```js\nimport { Grids } from \"https://unpkg.com/ixfx/dist/geometry.js\"\nimport { Arrays } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\nconst key = (cell) => `${cell.x}-${cell.y}`;\nconst store = new Map();\nconst shape = { rows: 10, cols: 10 };\nconst colours = [`bisque`, `cadetblue`,`cornflowerblue`, `coral`]\n\nfor (let cell of Grids.cells(shape)) {\n  store.set(key(cell), {\n    colour: Arrays.randomElement(colours), \n    karma: Math.random()});\n}\n\n// Fetch data associated with a given cell:\nconst val = store.get(key({x:5, y:5}));\n// {colour: '...', karma: 0.235}\n```\n\n<demo-element title=\"Associating data with cells\" src=\"/geometry/grid-data/\" />\n\n## Mapping to pixels\n\nAlthough the grid is not meant to be a literal visual grid, it can be used as such.\n\nTo map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n```\n\nDraw the grid by iterating over its cells:\n\n```js\nconst ctx = document.getElementById(`myCanvas`).getContext(`2d`);\nconst shape = { rows: 100, cols: 100, size: 5 };\n\nfor (const cell of Grids.cells(shape)) {\n  let rect = Grids.rectangleForCell(shape, cell);\n  ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n}\n```\n\nTo get the visual bounds for a given:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n\n// rectangleForCell(grid:Grid, cell:Cell): Rect\n// Returns { x, y, width, height } for cell at position 5,5\nconst rect = Grids.rectangleForCell(shape, { x: 5, y: 5 }); \n```\n\nOr to go from coordinate (eg. mouse pointer) to cell:\n\n```js\n// Convert pointer position to cell coordinate\n// cellAtPoint(grid:Grid, point:Point): Cell\nconst cell = Grids.cellAtPoint(shape, {evt.offsetX, evt.offsetY}); // Returns {x,y}\n```\n\n## Demos\n\n* [Grid DOM](https://clinth.github.io/ixfx-demos/geometry/grid-dom/): Generate DIVs based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom))\n* [Grid Canvas](https://clinth.github.io/ixfx-demos/geometry/grid-canvas/): Draw elements based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas))\n\n\n## Functions overview\n\n\n* [inside](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside): Returns _true_ if given cell is within grid dimensions\n* [getLine](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine): Returns all cells on a straight line between two cell coordinates\n\nEnumerating cells\n* [cells](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells): Iterate all cells\n* [rows](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows): Iterate all rows\n* [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor): Return cell _x_ steps away from a position using the provided visitor function\n* [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor): Step through cells in some way\n* [offset](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset): Returns cell some x,y offset away from start\n* [neighbours](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours): Return neighbours for a cell\n  \nVisual grids\n* [cellMiddle](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle): Return pixel coordinate for the middle of a cell\n* [rectangleForCell](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell): Get visual rectangle for cell";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"types","text":"Types"},{"depth":2,"slug":"visiting","text":"Visiting"},{"depth":2,"slug":"iterating-cells","text":"Iterating cells"},{"depth":2,"slug":"offsets","text":"Offsets"},{"depth":2,"slug":"mapping-to-data","text":"Mapping to data"},{"depth":2,"slug":"mapping-to-pixels","text":"Mapping to pixels"},{"depth":2,"slug":"demos","text":"Demos"},{"depth":2,"slug":"functions-overview","text":"Functions overview"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
