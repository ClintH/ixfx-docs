import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<p><a href=\"http://www.espruino.com/Puck.js\">Espruino Puck.js</a> is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.</p>\n<p>It has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n<a href=\"../espruino-pico/\">Pico</a> is in a more friendly format.</p>\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Io.Espruino.html\">Io.Espruino module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Io.html\">Io module</a></li>\n<li>Official Espruino <a href=\"http://www.espruino.com/Reference#software\">API Reference</a>, <a href=\"http://www.espruino.com/Tutorials\">Tutorials</a>\n</li></ul></div>\n<h3 id=\"first-steps\">First steps</h3>\n<ul>\n<li><a href=\"http://www.espruino.com/Quick+Start+BLE\">Preparing</a> - Powering the Puck and\ngetting the <a href=\"http://www.espruino.com/Web+IDE\">Espruino IDE</a> connected</li>\n<li><a href=\"http://www.espruino.com/Quick+Start+Code\">Quick start - code</a> - First steps\nprogramming the Puck</li>\n</ul>\n<h3 id=\"playgrounds\">Playgrounds</h3>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx-play/io/espruino-repl/\">repl</a> -\nExecute code on the Puck.js. Useful for quick ‘one-liners’ to test syntax.</li>\n<li><a href=\"https://clinth.github.io/ixfx-play/io/espruino-plot/\">plot</a> -\nPlots numerical data. Useful for seeing patterns and ranges of sensors.</li>\n</ul>\n<h2 id=\"demos\">Demos</h2>\n<p>The prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.</p>\n<ul>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button\">button</a> -\nSends button press/release events to the browser\n(<a href=\"https://clinth.github.io/ixfx-demos/io/espruino/button/\">try online</a>)</li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led\">led</a> -\nControl the in-built LEDs from the browser\n(<a href=\"https://clinth.github.io/ixfx-demos/io/espruino/led/\">try online</a>)</li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature\">temperature</a> -\nRead temperature values in the browser\n(<a href=\"https://clinth.github.io/ixfx-demos/io/espruino/temperature/\">try online</a>)</li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro\">accel-gyro</a> -\nSends back a stream of acceleration &#x26; gyro data to the browser\n(<a href=\"https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/\">try online</a>)</li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<p>To prompt to connect to any available Puck.js via BLE, use the\n<a href=\"https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html\"><code>puck</code></a>\nfunction, which returns an instance of\n<a href=\"https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html\">EspruinoBleDevice</a>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Espruino } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/io.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> e</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> Espruino.</span><span style=\"color:#B392F0\">puck</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or to filter the list by name:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Espruino } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/io.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> e</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> Espruino.</span><span style=\"color:#B392F0\">puck</span><span style=\"color:#E1E4E8\">({ name: </span><span style=\"color:#9ECBFF\">`Puck.js a123`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">await</span><span style=\"color:#E1E4E8\"> e.</span><span style=\"color:#B392F0\">connect</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>An exception will be thrown if the user cancelled the scan, or something went\nwrong.</p>\n<p>Once connected, you can listen for <em>data</em> and <em>change</em> events. <em>data</em> fires when\nthe Puck sends something, while <em>change</em> fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Received data</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">e.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`data`</span><span style=\"color:#E1E4E8\">, (</span><span style=\"color:#FFAB70\">d</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(d.data));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Monitor connection state</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">e.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  `change`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  (</span><span style=\"color:#FFAB70\">c</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`${</span><span style=\"color:#E1E4E8\">d</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">priorState</span><span style=\"color:#9ECBFF\">} -> ${</span><span style=\"color:#E1E4E8\">d</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">newState</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript\"><code>writeScript</code></a>\nsends code for execution on the board. Note how the script is enclosed as a\nstring.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">e.</span><span style=\"color:#B392F0\">writeScript</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\"> setInterval(() => Bluetooth.println(E.getTemperature()), 1000);</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\"> NRF.on('disconnect',()=>reset());</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You probably want to test what code to send using the\n<a href=\"https://clinth.github.io/ixfx-play/io/espruino-repl/\">ixfx Espruino REPL</a>\nor the official <a href=\"https://www.espruino.com/ide/\">IDE</a>.</p>\n<p><code>writeScript</code> does not support importing modules or other files via <code>require</code>.\nRather, upload your code using the official IDE, and then invoke a function\nyou’ve declared using ixfx’s <code>writeScript</code> or <code>eval</code>.</p>\n<p>To execute some code and await the result, use\n<a href=\"https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval\"><code>eval</code></a>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> result</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> e.</span><span style=\"color:#B392F0\">eval</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`2+2</span><span style=\"color:#79B8FF\">\\n</span><span style=\"color:#9ECBFF\">`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// result will be the number 4</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>eval</code> is useful for querying sensor values.</p>\n<p>To check the state of the connection:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">e.isConnected;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And to disconnect:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">e.</span><span style=\"color:#B392F0\">disconnect</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"official-resources\">Official resources</h2>\n<p>Below are some selected resources from Espruino.com.</p>\n<p>Tutorials</p>\n<ul>\n<li><a href=\"http://www.espruino.com/BLE+Keyboard\">Keyboard</a> - Send virtual keyboard\nevents. Useful for leveraging an existing app for rapid prototyping</li>\n<li><a href=\"http://www.espruino.com/BLE+Music+Control\">Music controller</a> - Use the BLE\nkeyboard functionality to control media playback on a phone</li>\n<li><a href=\"http://www.espruino.com/BLE+MIDI\">MIDI</a> - Send MIDI data</li>\n<li><a href=\"http://www.espruino.com/Puck.js+FET\">FET</a> - Controlling a higher voltage\ndevice</li>\n<li><a href=\"http://www.espruino.com/Puck.js+Door+Light\">Door controlled light</a> - Using\nthe magnetometer to detect movement of an object (in this case, a door)</li>\n<li><a href=\"http://www.espruino.com/Puck.js+Night+Light\">Temperature controlled night light</a> -\nUses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\nbased on the temperature sensor.</li>\n<li><a href=\"http://www.espruino.com/BLE+Lightbulbs\">Controlling Bluetooth devices</a> - An\nexample of a Puck directly interfacing with another Bluetooth device - in this\ncase some smart lighting</li>\n</ul>\n<p>Guides</p>\n<ul>\n<li><a href=\"http://www.espruino.com/PWM\">Pulse Width Modulation</a> - Controlled LED\nbrightness</li>\n</ul>";

				const frontmatter = {"title":"Espruino Puck.js","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/io/espruino-puck.md";
				const url = "/io/espruino-puck";
				function rawContent() {
					return "\n[Espruino Puck.js](http://www.espruino.com/Puck.js) is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.\n\nIt has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n[Pico](../espruino-pico/) is in a more friendly format.\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Io.Espruino.html\">Io.Espruino module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Io.html\">Io module</a></li>\n<li>Official Espruino <a href=\"http://www.espruino.com/Reference#software\">API Reference</a>, <a href=\"http://www.espruino.com/Tutorials\">Tutorials</a></l>\n</div>\n\n### First steps\n\n- [Preparing](http://www.espruino.com/Quick+Start+BLE) - Powering the Puck and\n  getting the [Espruino IDE](http://www.espruino.com/Web+IDE) connected\n- [Quick start - code](http://www.espruino.com/Quick+Start+Code) - First steps\n  programming the Puck\n\n### Playgrounds\n\n- [repl](https://clinth.github.io/ixfx-play/io/espruino-repl/) -\n  Execute code on the Puck.js. Useful for quick 'one-liners' to test syntax.\n- [plot](https://clinth.github.io/ixfx-play/io/espruino-plot/) -\n  Plots numerical data. Useful for seeing patterns and ranges of sensors.\n\n## Demos\n\nThe prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.\n\n- [button](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button) -\n  Sends button press/release events to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/button/))\n- [led](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led) -\n  Control the in-built LEDs from the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/led/))\n- [temperature](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature) -\n  Read temperature values in the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/temperature/))\n- [accel-gyro](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro) -\n  Sends back a stream of acceleration & gyro data to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/))\n\n## Usage\n\nTo prompt to connect to any available Puck.js via BLE, use the\n[`puck`](https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html)\nfunction, which returns an instance of\n[EspruinoBleDevice](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html).\n\n```js\nimport { Espruino } from \"https://unpkg.com/ixfx/dist/io.js\";\nconst e = await Espruino.puck();\n```\n\nOr to filter the list by name:\n\n```js\nimport { Espruino } from \"https://unpkg.com/ixfx/dist/io.js\";\nconst e = await Espruino.puck({ name: `Puck.js a123` });\nawait e.connect();\n```\n\nAn exception will be thrown if the user cancelled the scan, or something went\nwrong.\n\nOnce connected, you can listen for _data_ and _change_ events. _data_ fires when\nthe Puck sends something, while _change_ fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.\n\n```js\n// Received data\ne.addEventListener(`data`, (d) => console.log(d.data));\n\n// Monitor connection state\ne.addEventListener(\n  `change`,\n  (c) => console.log(`${d.priorState} -> ${d.newState}`),\n);\n```\n\n[`writeScript`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript)\nsends code for execution on the board. Note how the script is enclosed as a\nstring.\n\n```js\ne.writeScript(`\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on('disconnect',()=>reset());\n`);\n```\n\nYou probably want to test what code to send using the\n[ixfx Espruino REPL](https://clinth.github.io/ixfx-play/io/espruino-repl/)\nor the official [IDE](https://www.espruino.com/ide/).\n\n`writeScript` does not support importing modules or other files via `require`.\nRather, upload your code using the official IDE, and then invoke a function\nyou've declared using ixfx's `writeScript` or `eval`.\n\nTo execute some code and await the result, use\n[`eval`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval):\n\n```js\nconst result = await e.eval(`2+2\\n`);\n// result will be the number 4\n```\n\n`eval` is useful for querying sensor values.\n\nTo check the state of the connection:\n\n```js\ne.isConnected;\n```\n\nAnd to disconnect:\n\n```js\ne.disconnect();\n```\n\n## Official resources\n\nBelow are some selected resources from Espruino.com.\n\nTutorials\n\n- [Keyboard](http://www.espruino.com/BLE+Keyboard) - Send virtual keyboard\n  events. Useful for leveraging an existing app for rapid prototyping\n- [Music controller](http://www.espruino.com/BLE+Music+Control) - Use the BLE\n  keyboard functionality to control media playback on a phone\n- [MIDI](http://www.espruino.com/BLE+MIDI) - Send MIDI data\n- [FET](http://www.espruino.com/Puck.js+FET) - Controlling a higher voltage\n  device\n- [Door controlled light](http://www.espruino.com/Puck.js+Door+Light) - Using\n  the magnetometer to detect movement of an object (in this case, a door)\n- [Temperature controlled night light](http://www.espruino.com/Puck.js+Night+Light) -\n  Uses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\n  based on the temperature sensor.\n- [Controlling Bluetooth devices](http://www.espruino.com/BLE+Lightbulbs) - An\n  example of a Puck directly interfacing with another Bluetooth device - in this\n  case some smart lighting\n\nGuides\n\n- [Pulse Width Modulation](http://www.espruino.com/PWM) - Controlled LED\n  brightness\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"first-steps","text":"First steps"},{"depth":3,"slug":"playgrounds","text":"Playgrounds"},{"depth":2,"slug":"demos","text":"Demos"},{"depth":2,"slug":"usage","text":"Usage"},{"depth":2,"slug":"official-resources","text":"Official resources"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
