import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html\">Modulation.Oscillators module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/modulation/\">Demos</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=\">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n<h2 id=\"springs\">Springs</h2>\n<p>Somewhere between the ixfx <a href=\"../forces/\">forces</a> and <a href=\"../oscillator/\">oscillators</a> are springs.</p>\n<demo-element style=\"height:40vh\" title=\"Spring oscillator\" src=\"/modulation/oscillator-spring/\">\n<p>For a typical use of a spring, use <a href=\"https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html\"><code>Oscillators.spring</code></a>.</p>\n<p>Like the other oscillators, it returns a <a href=\"../../gen/generator/\">generator</a>. It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Oscillators } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/modulation.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Init spring</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> spring</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Oscillators.</span><span style=\"color:#B392F0\">spring</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Animation loop</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> loop</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Yields relative values ~0...~1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  //  or undefined when spring has stopped</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> spring.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">().value;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  setTimeout</span><span style=\"color:#E1E4E8\">(loop, </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">loop</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Each time the loop function runs, <code>v</code> will have the value of the spring, or return <em>undefined</em> if the spring has finished.</p>\n<p>The value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Point where spring was sprung</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> fromPoint</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Destination</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> toPoint</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { x: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Interpolate to get an in-between point.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Since spring can overshoot 0..1, we pass in _true_ at</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// for interpolate to allow this.</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> pos</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Points.</span><span style=\"color:#B392F0\">interpolate</span><span style=\"color:#E1E4E8\">(v, fromPoint, toPoint, </span><span style=\"color:#79B8FF\">true</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There are some options for <code>Oscillators.spring</code> for tweaking its behaviour.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> spring</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Oscillators.</span><span style=\"color:#B392F0\">spring</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> mass: </span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">,        </span><span style=\"color:#6A737D\">// Weight of thing at end of spring</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> damping: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">,    </span><span style=\"color:#6A737D\">// Energy loss as we move</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> stiffness: </span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> velocity: </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#6A737D\">   // Multiplier for velocity</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre></demo-element>";

				const frontmatter = {"title":"Springs","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/modulation/spring.md";
				const url = "/modulation/spring";
				function rawContent() {
					return "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html\">Modulation.Oscillators module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/modulation/\">Demos</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=\">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n\n## Springs\n\nSomewhere between the ixfx [forces](../forces/) and [oscillators](../oscillator/) are springs.\n\n<demo-element style=\"height:40vh\" title=\"Spring oscillator\" src=\"/modulation/oscillator-spring/\" />\n\nFor a typical use of a spring, use [`Oscillators.spring`](https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html).\n\nLike the other oscillators, it returns a [generator](../../gen/generator/). It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.\n\n```js\nimport { Oscillators } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n\n// Init spring\nconst spring = Oscillators.spring();\n\n// Animation loop\nconst loop = () => {\n  // Yields relative values ~0...~1\n  //  or undefined when spring has stopped\n  const v = spring.next().value;\n\n  setTimeout(loop, 1);\n}\nloop();\n```\n\nEach time the loop function runs, `v` will have the value of the spring, or return _undefined_ if the spring has finished.\n\nThe value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.\n\n```js\n// Point where spring was sprung\nconst fromPoint = { x: 0, y: 0 };\n// Destination\nconst toPoint = { x: 1, y: 1 };\n\n// Interpolate to get an in-between point.\n// Since spring can overshoot 0..1, we pass in _true_ at\n// for interpolate to allow this.\nconst pos = Points.interpolate(v, fromPoint, toPoint, true);\n```\n\nThere are some options for `Oscillators.spring` for tweaking its behaviour.\n\n```js\nconst spring = Oscillators.spring({\n mass: 5,        // Weight of thing at end of spring\n damping: 10,    // Energy loss as we move\n stiffness: 100,\n velocity: 0.1   // Multiplier for velocity\n});\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"springs","text":"Springs"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
