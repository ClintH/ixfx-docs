import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html\">Adsr type</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/modulation/\">Demos</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=\">fn-vis</a>: envelope example</li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter\">Starter skeleton</a> (<a href=\"https://clinth.github.io/ixfx-demos/modulation/env-starter/\">view online</a>)\n</li></ul>\n</div>\n<p>The notion of an <em>envelope</em> is borrowed from <a href=\"https://en.wikipedia.org/wiki/Envelope_(music)\">sound synthesis</a>. They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.</p>\n<p>Envelopes have some similarity with <a href=\"../easing/\">easing functions</a>, as they describe a shape over time.</p>\n<h2 id=\"anatomy-of-an-envelope\">Anatomy of an envelope</h2>\n<p>The envelope consists of a series of stages, typically <em>attack, decay, sustain</em> and <em>release</em>.</p>\n<ul>\n<li>All stages have an associated <em>level</em> or <em>amplitude</em>. Attack’s level is also known as the <em>initial level</em>, and decay’s level is also known as the <em>peak level</em>.</li>\n<li>All stages except <em>sustain</em> have a <em>duration</em>, how long they run for in milliseconds.</li>\n</ul>\n<p>When a trigger happens (eg. a synth key is pressed), the <em>attack</em> stage runs for its specified duration, after which the <em>decay</em> stage runs. The <em>sustain</em> stage runs for as long as the trigger is held. At any point when the key is released, the <em>release</em> stage runs.</p>\n<p>As a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define.</p>\n<p>Envelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.</p>\n<p>In ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the <em>bend</em> parameter.</p>\n<envelope-editor id=\"envEditor\">\n<h2 id=\"playground\">Playground</h2>\n<p>The playground uses the settings from the envelope editor above. You can <em>trigger</em> the envelope, which will then run through its stages. Use <em>Trigger &#x26; Hold</em> if you want to have the envelope hold at the sustain stage. <em>Release</em> allows a held envelope to continue on to the release stage.</p>\n<envelopeplay>\n<h2 id=\"usage\">Usage</h2>\n<p>Docs: <a href=\"https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html\">Adsr Type</a></p>\n<p>Initialise an envelope with a few timing settings:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Envelopes } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/modulation.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// It's a good idea to use the defaultAdsrOpts(),</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// and then override what you want.</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> opts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  ...</span><span style=\"color:#E1E4E8\">Envelopes.</span><span style=\"color:#B392F0\">defaultAdsrOpts</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  attackDuration: </span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  decayDuration: </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  sustainDuration: </span><span style=\"color:#79B8FF\">100</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> env</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Envelopes.</span><span style=\"color:#B392F0\">adsr</span><span style=\"color:#E1E4E8\">(opts);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In basic usage, you first <em>trigger</em> the envelope, and then read its value over time, probably from some kind of loop.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">env.</span><span style=\"color:#B392F0\">trigger</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">setInterval</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(env.value); </span><span style=\"color:#6A737D\">// 0..1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can ‘trigger-and-hold’, making the envelope stay at the sustain stage until ‘release’ is called:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Trigger and hold at 'sustain' stage</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">env.</span><span style=\"color:#B392F0\">trigger</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">true</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// ...at some point later, allow it to continue to 'release' stage.</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">env.</span><span style=\"color:#B392F0\">release</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Fetching the <code>value</code> property gives you the value of the envelope at that point in time. You can get additional data with <code>compute</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Gets:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// name of current stage (as a string), </span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// scaled value (same as calling .value)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// and raw value (0 -> 1 progress *within* a stage)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">stage</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">scaled</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">raw</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> env.</span><span style=\"color:#B392F0\">compute</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can <a href=\"https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=\">see an envelope in action on fn-vis</a>.</p>\n<p>Other functions:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Reset envelope</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">env.</span><span style=\"color:#B392F0\">reset</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// True if envelope is finished</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">env.isDone;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Envelopes have events:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Envelope has changed stage</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">env.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`change`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">ev</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Old: ${</span><span style=\"color:#E1E4E8\">evt</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">oldState</span><span style=\"color:#9ECBFF\">} new: ${</span><span style=\"color:#E1E4E8\">ev</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">newState</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Envelope has finished</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">env.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`complete`</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Done.`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"envelope-options\">Envelope options</h3>\n<p>Envelope options are documented <a href=\"https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html\">here</a> and the <a href=\"https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html\">timing options here</a>.</p>\n<p>There are three ‘bend’ options for setting a stage curve, <code>attackBend, decayBend</code> and <code>releaseBend</code>. Bend values run from -1 to 1. A value of <code>0</code> means there is no bend (ie. straight line), <code>-1</code> pulls curve down, and <code>1</code> pushes it outward.</p>\n<p>eg:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> opts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  ...</span><span style=\"color:#B392F0\">defaultAdsrOpts</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  attackBend: </span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  decayBend: </span><span style=\"color:#79B8FF\">0.5</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  releaseBend: </span><span style=\"color:#79B8FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Levels can be set via <code>initialLevel</code>, <code>peakLevel</code>, <code>releaseLevel</code> and <code>sustainLevel</code>. These are presumed to be 0 to 1, inclusive. Typically the initial level is <code>0</code>, the peak <code>1</code> and release <code>0</code> (these are the defaults).</p>\n<p>eg:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> opts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  ...</span><span style=\"color:#B392F0\">defaultAdsrOpts</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  initialLevel: </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  peakLevel: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  releaseLevel: </span><span style=\"color:#79B8FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>retrigger</code> means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is <em>false</em>, envelope always start <code>0</code> (or whatever <code>initialLevel</code> is set to).</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> opts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  ...</span><span style=\"color:#B392F0\">defaultAdrsOpts</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  retrigger: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"envelopes-in-action\">Envelopes in action</h2>\n<p>Here is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Envelopes } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/modulation.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { continuously } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/flow.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> settings</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Object.</span><span style=\"color:#B392F0\">freeze</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  env: Envelopes.</span><span style=\"color:#B392F0\">adsr</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    ...</span><span style=\"color:#E1E4E8\">Envelopes.</span><span style=\"color:#B392F0\">defaultAdsrOpts</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  sampleRateMs: </span><span style=\"color:#79B8FF\">100</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">let state </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  envSampler</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Run a loop, reading from envelope until done</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">state.envSampler </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> continuously</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">env</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> settings;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // If envelope is done, stop looping</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (env.isDone) </span><span style=\"color:#F97583\">return</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">; </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Read value from envelope, do something with it...</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> env.value;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}, settings.sampleRateMs);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Trigger envelope and start reading</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">settings.env.</span><span style=\"color:#B392F0\">trigger</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">state.envSampler.</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a <code>retrigger()</code> function that cancels the sampler, triggers the envelope and starts the sampler again</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> retrigger</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">env</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> settings;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">envSampler</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  envSampler.</span><span style=\"color:#B392F0\">cancel</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  env.</span><span style=\"color:#B392F0\">trigger</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  envSampler.</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">getElementById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`someButton`</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`click`</span><span style=\"color:#E1E4E8\">, retrigger);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the demo below, <code>pointerdown</code> or <code>keydown</code> events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.</p>\n<p>Releasing the pointer or key calls the envelope’s <code>release</code> function.</p>\n<p>This envelope has <code>retrigger</code> disabled, so pressing again while it’s decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).</p>\n<frame-element title=\"Retrigger disabled\" src=\"https://clinth.github.io/ixfx-play/modulation/envelopes/decay/\"></frame-element></envelopeplay></envelope-editor>";

				const frontmatter = {"title":"Envelope","layout":"../../layouts/MainLayout.astro","setup":"import EnvelopePlay from './EnvelopePlay.astro';\nimport { DemoElement } from '../../components/DemoElement.ts';\nimport { FrameElement } from '../../components/FrameElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/modulation/envelope.md";
				const url = "/modulation/envelope";
				function rawContent() {
					return "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html\">Adsr type</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/modulation/\">Demos</a></li>\n<li><a href=\"https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=\">fn-vis</a>: envelope example</li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter\">Starter skeleton</a> (<a href=\"https://clinth.github.io/ixfx-demos/modulation/env-starter/\">view online</a>)\n</ul>\n</div>\n\nThe notion of an _envelope_ is borrowed from [sound synthesis](https://en.wikipedia.org/wiki/Envelope_(music)). They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.\n\nEnvelopes have some similarity with [easing functions](../easing/), as they describe a shape over time.\n\n## Anatomy of an envelope\n\nThe envelope consists of a series of stages, typically _attack, decay, sustain_ and _release_. \n* All stages have an associated _level_ or _amplitude_. Attack's level is also known as the _initial level_, and decay's level is also known as the _peak level_.\n* All stages except _sustain_ have a _duration_, how long they run for in milliseconds.\n\nWhen a trigger happens (eg. a synth key is pressed), the _attack_ stage runs for its specified duration, after which the _decay_ stage runs. The _sustain_ stage runs for as long as the trigger is held. At any point when the key is released, the _release_ stage runs.\n\nAs a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define. \n\nEnvelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.\n\nIn ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the _bend_ parameter.\n\n<envelope-editor id=\"envEditor\" />\n\n## Playground\n\nThe playground uses the settings from the envelope editor above. You can _trigger_ the envelope, which will then run through its stages. Use _Trigger & Hold_ if you want to have the envelope hold at the sustain stage. _Release_ allows a held envelope to continue on to the release stage. \n\n<EnvelopePlay />\n\n## Usage\n\nDocs: [Adsr Type](https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html)\n\nInitialise an envelope with a few timing settings:\n\n```js\nimport { Envelopes } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n\n// It's a good idea to use the defaultAdsrOpts(),\n// and then override what you want.\nconst opts = {\n  ...Envelopes.defaultAdsrOpts(),\n  attackDuration: 1000,\n  decayDuration: 200,\n  sustainDuration: 100\n};\nconst env = Envelopes.adsr(opts);\n```\n\nIn basic usage, you first _trigger_ the envelope, and then read its value over time, probably from some kind of loop.\n\n```js\nenv.trigger();\nsetInterval(() => {\n  console.log(env.value); // 0..1\n});\n```\n\nYou can 'trigger-and-hold', making the envelope stay at the sustain stage until 'release' is called:\n\n```js\n// Trigger and hold at 'sustain' stage\nenv.trigger(true);\n// ...at some point later, allow it to continue to 'release' stage.\nenv.release();\n```\n\nFetching the `value` property gives you the value of the envelope at that point in time. You can get additional data with `compute`:\n\n```js\n// Gets:\n// name of current stage (as a string), \n// scaled value (same as calling .value)\n// and raw value (0 -> 1 progress *within* a stage)\nconst [stage, scaled, raw] = env.compute();\n```\n\nYou can [see an envelope in action on fn-vis](https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=).\n\nOther functions:\n```js\n// Reset envelope\nenv.reset();\n\n// True if envelope is finished\nenv.isDone;\n```\n\nEnvelopes have events:\n\n```js\n// Envelope has changed stage\nenv.addEventListener(`change`, ev => {\n  console.log(`Old: ${evt.oldState} new: ${ev.newState}`);\n})\n\n// Envelope has finished\nenv.addEventListener(`complete`, () => {\n  console.log(`Done.`);\n})\n```\n\n### Envelope options\n\nEnvelope options are documented [here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html) and the [timing options here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html).\n\nThere are three 'bend' options for setting a stage curve, `attackBend, decayBend` and `releaseBend`. Bend values run from -1 to 1. A value of `0` means there is no bend (ie. straight line), `-1` pulls curve down, and `1` pushes it outward. \n\neg: \n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  attackBend: -1,\n  decayBend: 0.5,\n  releaseBend: 0\n}\n```\n\nLevels can be set via `initialLevel`, `peakLevel`, `releaseLevel` and `sustainLevel`. These are presumed to be 0 to 1, inclusive. Typically the initial level is `0`, the peak `1` and release `0` (these are the defaults).\n\neg:\n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  initialLevel: 0,\n  peakLevel: 1,\n  releaseLevel: 0\n}\n```\n\n`retrigger` means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is _false_, envelope always start `0` (or whatever `initialLevel` is set to).\n\n```js\nconst opts = {\n  ...defaultAdrsOpts(),\n  retrigger: true\n}\n```\n\n## Envelopes in action\n\nHere is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.\n\n```js\nimport { Envelopes } from \"https://unpkg.com/ixfx/dist/modulation.js\"\nimport { continuously } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Initialise\nconst settings = Object.freeze({\n  env: Envelopes.adsr({\n    ...Envelopes.defaultAdsrOpts()\n  },\n  sampleRateMs: 100\n});\n\nlet state = {\n  envSampler\n};\n\n// Run a loop, reading from envelope until done\nstate.envSampler = continuously(() => {\n  const { env } = settings;\n  // If envelope is done, stop looping\n  if (env.isDone) return false; \n\n  // Read value from envelope, do something with it...\n  const v = env.value;\n}, settings.sampleRateMs);\n\n// Trigger envelope and start reading\nsettings.env.trigger();\nstate.envSampler.start();\n```\n\nOr perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a `retrigger()` function that cancels the sampler, triggers the envelope and starts the sampler again\n\n```js\nconst retrigger = () => {\n  const { env } = settings;\n  const { envSampler } = state;\n\n  envSampler.cancel();\n  env.trigger();\n  envSampler.start();\n};\n\ndocument.getElementById(`someButton`).addEventListener(`click`, retrigger);\n```\n\n\nIn the demo below, `pointerdown` or `keydown` events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.\n\nReleasing the pointer or key calls the envelope's `release` function.\n\nThis envelope has `retrigger` disabled, so pressing again while it's decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).\n\n<frame-element title=\"Retrigger disabled\" src=\"https://clinth.github.io/ixfx-play/modulation/envelopes/decay/\" />";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"anatomy-of-an-envelope","text":"Anatomy of an envelope"},{"depth":2,"slug":"playground","text":"Playground"},{"depth":2,"slug":"usage","text":"Usage"},{"depth":3,"slug":"envelope-options","text":"Envelope options"},{"depth":2,"slug":"envelopes-in-action","text":"Envelopes in action"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
