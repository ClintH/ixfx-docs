import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html\">Collections.Arrays module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</ul></div>\n<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n</script>\n<h2 id=\"enumerating\">Enumerating</h2>\n<p>JS’s <code>for of</code> can be used to enumerate over items in an array:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> of</span><span style=\"color:#E1E4E8\"> someArray) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Do something with value </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Another classic approach you’ll see is a <code>for</code> loop. This is only useful if you’re concerned with the indexes of the items. Most of the time we aren’t, which is why the style above is preferred.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Classic 'for' loop</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> i</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">;i</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">someArray.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">;i</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> item</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray[i]; </span><span style=\"color:#6A737D\">// access by index</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`${</span><span style=\"color:#E1E4E8\">i</span><span style=\"color:#9ECBFF\">}. ${</span><span style=\"color:#E1E4E8\">someArray</span><span style=\"color:#9ECBFF\">[</span><span style=\"color:#E1E4E8\">i</span><span style=\"color:#9ECBFF\">]</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Another benefit of the <code>for of</code> loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: <a href=\"../../gen/generator/\">Generators</a></p>\n<h2 id=\"accessing-items\">Accessing items</h2>\n<p>Array items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a <code>length</code> property which returns how many items it contains.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> someArray</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`bananas`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get the second item, which has an index of 1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> second</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray[</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">]; </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get the last item (length is three, but indexes start at zero, so we have to -1)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> last</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray[someArray.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> first</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It also works to use <code>at</code>, which has the benefit of being able to work backwards:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> someArray</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`bananas`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> second</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray.</span><span style=\"color:#B392F0\">at</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get one item back from start, ie the last item:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> last</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray.</span><span style=\"color:#B392F0\">at</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">-</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> first</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> someArray.</span><span style=\"color:#B392F0\">at</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>ixfx has some functions for randomly choosing items or indexes from an array: <a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html\"><code>randomElement</code></a> returns a random element from an array, <a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html\"><code>randomIndex</code></a> returns a random index.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {randomElement, randomIndex} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/arrays.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Return a random string: apples, oranges or pears</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">randomElement</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Return a random index: 0, 1 or 2</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">randomIndex</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Random.weightedInteger.html\"><code>weightedInteger</code></a> can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {weightedInteger} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/random.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`melons`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`bananas`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Define a function to produce the random numbers we want</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> rand</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#B392F0\"> weightedInteger</span><span style=\"color:#E1E4E8\">({ max: a.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">, easing: </span><span style=\"color:#9ECBFF\">`quadIn`</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Use function to access an item in array</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">a[</span><span style=\"color:#B392F0\">rand</span><span style=\"color:#E1E4E8\">()];</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"cycle\">Cycle</h3>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html\"><code>cycle</code></a> allows traversing an array with function calls. It’s useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { cycle } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/arrays.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> c</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> cycle</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">c.current; </span><span style=\"color:#6A737D\">// 'apples'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">c.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// `oranges`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">c.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// `pears`</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">c.</span><span style=\"color:#B392F0\">next</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// `apples'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">c.</span><span style=\"color:#B392F0\">select</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 'oranges'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">c.</span><span style=\"color:#B392F0\">select</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// 'pears'</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"finding\">Finding</h2>\n<p>JS’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>some</code></a> yields <em>true</em> if at least one item in the array matches the provided function.</p>\n<p>For example, if you want to check if there is a green fruit in a list of fruits:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> fruits</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  {colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\">, name: </span><span style=\"color:#9ECBFF\">`grape`</span><span style=\"color:#E1E4E8\">},</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  {colour: </span><span style=\"color:#9ECBFF\">`green`</span><span style=\"color:#E1E4E8\">, name: </span><span style=\"color:#9ECBFF\">`granny-smith`</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// isFound will be true or false</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> isFound</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> fruits.</span><span style=\"color:#B392F0\">some</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (v.colour </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> `green`</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>JS’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>includes</code></a> returns true if the specified value is found in an array.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> favColours</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [ </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`green`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`yellow`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> (favColours.</span><span style=\"color:#B392F0\">includes</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Red is in the favourite colours...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Note that favColours.includes(`RED`) would return false</span></span>\n<span class=\"line\"></span></code></pre>\n<p>When using <code>includes</code> to check for objects, be mindful that it compares them by <em>reference</em> not <em>value</em>.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Returns false, because although object value exists in array,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// this *particular* object does not:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> isFound</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> fruits.</span><span style=\"color:#B392F0\">includes</span><span style=\"color:#E1E4E8\">({colour: </span><span style=\"color:#9ECBFF\">`red`</span><span style=\"color:#E1E4E8\">, name: </span><span style=\"color:#9ECBFF\">`grape`</span><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>JS’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find</code></a> function is similar, but it returns the first matching item instead of just true/false.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> firstGreenFruit</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> fruits.</span><span style=\"color:#B392F0\">find</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (v.colour </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> `green`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If no matching items were found, <code>undefined</code> is returned.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> firstPurpleFruit</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> fruits.</span><span style=\"color:#B392F0\">find</span><span style=\"color:#E1E4E8\">(v </span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> v.colour </span><span style=\"color:#F97583\">===</span><span style=\"color:#9ECBFF\"> `purple`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// note simplified arrow function syntax</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> (firstPurpleFruit </span><span style=\"color:#F97583\">===</span><span style=\"color:#79B8FF\"> undefined</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Not found`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">} </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Found: ${</span><span style=\"color:#E1E4E8\">firstPurpleFruit</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">name</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Print name of found fruit</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"ordering\">Ordering</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Ordering and enumerating:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">someArray.</span><span style=\"color:#B392F0\">sort</span><span style=\"color:#E1E4E8\">();     </span><span style=\"color:#6A737D\">// Simple sort</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">someArray.</span><span style=\"color:#B392F0\">reverse</span><span style=\"color:#E1E4E8\">();  </span><span style=\"color:#6A737D\">// Reverse order</span></span>\n<span class=\"line\"></span></code></pre>\n<p>ixfx’s <a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle\"><code>shuffle</code></a> randomises the ordering of an array.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { shuffle } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/arrays.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> a</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`melons`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`bananas`</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> b</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> shuffle</span><span style=\"color:#E1E4E8\">(a);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Once shuffled, you can then iterate over the array as normal:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad#1</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> c</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">6</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">7</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">8</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">9</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Prints items from array in random order</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> value</span><span style=\"color:#F97583\"> of</span><span style=\"color:#B392F0\"> shuffle</span><span style=\"color:#E1E4E8\">(c)) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(value);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"filtering\">Filtering</h2>\n<p><a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without\"><code>without</code></a> returns a copy of an array without values equal to <code>v</code>. In the case of objects, references are compared.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { without } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: [1,3,1,3]</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">without</span><span style=\"color:#E1E4E8\">(data, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>JS’s in built <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>filter</code></a> function all items which pass the provided function:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> filtered</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> data.</span><span style=\"color:#B392F0\">filter</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">d</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> d </span><span style=\"color:#F97583\">></span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// Return true if value is greater than 2</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// [3, 3]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>ixfx has <a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html\"><code>filterAB</code></a> which captures items on either side of the filter function.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { filterAB } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">matching</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">nonMatching</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> filterAB</span><span style=\"color:#E1E4E8\">(data, </span><span style=\"color:#FFAB70\">d</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> d </span><span style=\"color:#F97583\">></span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// matching: [ 3, 3]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// nonMatching: [ 1, 2, 1, 2]</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html\"><code>until</code></a> returns all items in an array until the provided predicate returns false.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { until } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Callback gets current value, and needs to return:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// [true/false, accumulated value]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// In this case, we return [true,0] if v === 3</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Arrays.</span><span style=\"color:#B392F0\">until</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">], </span><span style=\"color:#FFAB70\">v</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> [v </span><span style=\"color:#F97583\">===</span><span style=\"color:#79B8FF\"> 3</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<p>Remove a random element from an array with <a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html\"><code>randomPluck</code></a>. It doesn’t modify the array, but returns the randomly selected item and a new array without it.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {randomPluck} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/arrays.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Remove a random element</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> r</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> randomPluck</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#9ECBFF\">`apples`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`oranges`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">`pears`</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">r.value; </span><span style=\"color:#6A737D\">// A random value</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">r.array; </span><span style=\"color:#6A737D\">// A copy of the array with the random value removed</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"grouping\">Grouping</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html\"><code>groupBy</code></a> allows you to group an array by some generated key.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { groupBy } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> { age: </span><span style=\"color:#79B8FF\">39</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`London`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> { age: </span><span style=\"color:#79B8FF\">14</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`Copenhagen`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> { age: </span><span style=\"color:#79B8FF\">23</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`Stockholm`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\"> { age: </span><span style=\"color:#79B8FF\">56</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`London`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> map</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> groupBy</span><span style=\"color:#E1E4E8\">(data, </span><span style=\"color:#FFAB70\">item</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> data.city); </span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will yield:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  London</span><span style=\"color:#E1E4E8\">: [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { age: </span><span style=\"color:#79B8FF\">39</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`London`</span><span style=\"color:#E1E4E8\"> }, </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { age: </span><span style=\"color:#79B8FF\">56</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`London`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  Stockhom</span><span style=\"color:#E1E4E8\">: [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { age: </span><span style=\"color:#79B8FF\">23</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`Stockholm`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  Copenhagen</span><span style=\"color:#E1E4E8\">: [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    { age: </span><span style=\"color:#79B8FF\">14</span><span style=\"color:#E1E4E8\">, city: </span><span style=\"color:#9ECBFF\">`Copenhagen`</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"numeric-arrays\">Numeric arrays</h2>\n<p>If you have an array of numbers, ixfx has some functions for common needs.</p>\n<p>Overview:</p>\n<ul>\n<li>average, min, max, total or minMaxAvg to calculate all</li>\n<li>averageWeighted</li>\n<li>dotProduct</li>\n<li>weight</li>\n</ul>\n<h3 id=\"ranges\">Ranges</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { max,min,average, minMaxAvg } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Compute max, min, avg:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">max</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">data); </span><span style=\"color:#6A737D\">// 3</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">min</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">data); </span><span style=\"color:#6A737D\">// 1</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">average</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">data); </span><span style=\"color:#6A737D\">//</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Or compute them all at once:</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">minMaxAvg</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">data);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: {min: 1, max: 3, avg:, total: 6}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"averages\">Averages</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { average } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Compute an average of all provided values</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">average</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">1.4</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.9</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0.1</span><span style=\"color:#E1E4E8\">);  </span><span style=\"color:#6A737D\">// 0.85</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Compute average of an array</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">average</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">data);           </span><span style=\"color:#6A737D\">// 3</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted\"><code>averageWeighted</code></a> applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Easings } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/modulation.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { averageWeighted } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Using an ixfx easing function to weight elements.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Gaussian function weights middle elements highest, skewing the average</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> v</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> averageWeighted</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">4</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">], Easings.</span><span style=\"color:#B392F0\">gaussian</span><span style=\"color:#E1E4E8\">());</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields: 3.6, while regular `average` yields 5.8</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"weighting\">Weighting</h3>\n<p><code>weight</code> applies a function (probably an <a href=\"../../modulation/easing/\">easing function</a>) to some data.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { weight } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/arrays.js\"</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Easings } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"https://unpkg.com/ixfx/dist/modulation.js\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Weighs an input array of 1s</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">weight</span><span style=\"color:#E1E4E8\">([</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">], Easings.</span><span style=\"color:#B392F0\">gaussian</span><span style=\"color:#E1E4E8\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Yields:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"more-functions\">More functions</h2>\n<p>Comparing arrays</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html\"><code>compareValues</code></a> - for array <em>x</em> and <em>y</em>, identify items common in both, or exclusively in <em>x</em> or <em>y</em></li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html\"><code>compareValuesEqual</code></a> - returns <em>true</em> if both arrays contain the same set of items, regardless of position.</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html\"><code>additionalValues</code></a> - yield all values not contained in a base array</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html\"><code>intersection</code></a> - return values contained in both <em>x</em> and <em>y</em> arrays</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html\"><code>unique</code></a> - combines values of arrays, only keeping unique values</li>\n</ul>\n<p>Randomisation</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html\"><code>randomIndex</code></a> - random index</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html\"><code>randomElement</code></a> - random value</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html\"><code>randomPluck</code></a> - remove random value</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html\"><code>shuffle</code></a> - randomise order</li>\n</ul>\n<p>Finding/accessing</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html\"><code>contains</code></a> - returns <em>true</em> if array contains all provided items</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html\"><code>containsDuplicateValues</code></a> - returns <em>true</em> if any duplicate <em>values</em> are found in source array.</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html\"><code>containsDuplicateInstances</code></a> - returns <em>true</em> if any duplicate <em>instances</em> are found in source array.</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html\"><code>cycle</code></a> - cycle through contents</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html\"><code>filterBetween</code></a> - return elements of array that match predicate <em>and</em> are within a given start and end index</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html\"><code>sample</code></a> - sub-sample an array</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html\"><code>valuesEqual</code></a> - returns <em>true</em> if all values in array are identical</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html\"><code>filterAB</code></a> - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.</li>\n</ul>\n<p>Changing the shape of an array</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html\"><code>ensureLength</code></a> - Pad out or truncate an array so it matches a target length</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html\"><code>chunks</code></a> - break up an array into chunks of a given size</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html\"><code>groupBy</code></a> - Groups data by a function</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html\"><code>interleave</code></a> - combines the values of several arrays by interleaving values</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html\"><code>remove</code></a> - remove an element by index</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html\"><code>without</code></a> - return an array without a given value</li>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html\"><code>zip</code></a> - combine elements of arrays based on their index</li>\n</ul>";

				const frontmatter = {"title":"Arrays","layout":"../../layouts/MainLayout.astro"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/arrays.md";
				const url = "/data/arrays";
				function rawContent() {
					return "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html\">Collections.Arrays module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n</script>\n\n## Enumerating\n\nJS's `for of` can be used to enumerate over items in an array:\n\n```js\nfor (const value of someArray) {\n  // Do something with value \n}\n```\n\nAnother classic approach you'll see is a `for` loop. This is only useful if you're concerned with the indexes of the items. Most of the time we aren't, which is why the style above is preferred. \n\n```js\n// Classic 'for' loop\nfor (let i=0;i<someArray.length;i++) {\n  const item = someArray[i]; // access by index\n  console.log(`${i}. ${someArray[i]}`);\n}\n```\n\nAnother benefit of the `for of` loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: [Generators](../../gen/generator/)\n\n## Accessing items\n\nArray items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a `length` property which returns how many items it contains.\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\n\n// Get the second item, which has an index of 1\nconst second = someArray[1]; \n\n// Get the last item (length is three, but indexes start at zero, so we have to -1)\nconst last = someArray[someArray.length-1];\n\nconst first = someArray[0];\n```\n\nIt also works to use `at`, which has the benefit of being able to work backwards:\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\nconst second = someArray.at(1);\n\n// Get one item back from start, ie the last item:\nconst last = someArray.at(-1);\nconst first = someArray.at(0);\n```\n\nixfx has some functions for randomly choosing items or indexes from an array: [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) returns a random element from an array, [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) returns a random index.\n\n```js\n// repl-pad\nimport {randomElement, randomIndex} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Return a random string: apples, oranges or pears\nrandomElement([`apples`, `oranges`, `pears`]);\n\n// Return a random index: 0, 1 or 2\nrandomIndex([`apples`, `oranges`, `pears`]);\n```\n\n[`weightedInteger`](https://clinth.github.io/ixfx/functions/Random.weightedInteger.html) can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.\n\n```js\nimport {weightedInteger} from 'https://unpkg.com/ixfx/dist/random.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n// Define a function to produce the random numbers we want\nconst rand = () => weightedInteger({ max: a.length, easing: `quadIn` });\n// Use function to access an item in array\na[rand()];\n```\n\n### Cycle\n\n[`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) allows traversing an array with function calls. It's useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.\n\n```js\nimport { cycle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst c = cycle([`apples`,`oranges`,`pears`]);\nc.current; // 'apples'\nc.next(); // `oranges`\nc.next(); // `pears`\nc.next(); // `apples'\nc.select(1); // 'oranges'\nc.select(`pears`); // 'pears'\n```\n\n## Finding\n\nJS's [`some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) yields _true_ if at least one item in the array matches the provided function.\n\nFor example, if you want to check if there is a green fruit in a list of fruits:\n\n```js\nconst fruits = [\n  {colour: `red`, name: `grape`},\n  {colour: `green`, name: `granny-smith`}\n];\n\n// isFound will be true or false\nconst isFound = fruits.some(v => {\n  return (v.colour === `green`)\n});\n```\n\nJS's [`includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) returns true if the specified value is found in an array.\n\n```js\nconst favColours = [ `red`, `green`, `yellow`];\nif (favColours.includes(`red`)) {\n  // Red is in the favourite colours...\n}\n\n// Note that favColours.includes(`RED`) would return false\n```\n\nWhen using `includes` to check for objects, be mindful that it compares them by _reference_ not _value_. \n\n```js\n// Returns false, because although object value exists in array,\n// this *particular* object does not:\nconst isFound = fruits.includes({colour: `red`, name: `grape`});\n```\n\nJS's [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) function is similar, but it returns the first matching item instead of just true/false. \n\n```js\nconst firstGreenFruit = fruits.find(v => {\n  return (v.colour === `green`);\n});\n\n// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}\n```\n\nIf no matching items were found, `undefined` is returned.\n\n```js\nconst firstPurpleFruit = fruits.find(v v=> v.colour === `purple`); // note simplified arrow function syntax\nif (firstPurpleFruit === undefined) {\n  console.log(`Not found`);\n} else {\n  console.log(`Found: ${firstPurpleFruit.name}`); // Print name of found fruit\n}\n```\n\n\n## Ordering\n\n```js\n// Ordering and enumerating:\nsomeArray.sort();     // Simple sort\nsomeArray.reverse();  // Reverse order\n```\n\nixfx's [`shuffle`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle) randomises the ordering of an array.\n\n```js\n// repl-pad#1\nimport { shuffle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n\n// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];\nconst b = shuffle(a);\n```\n\nOnce shuffled, you can then iterate over the array as normal:\n\n```js\n// repl-pad#1\nconst c = [1,2,3,4,5,6,7,8,9,10];\n\n// Prints items from array in random order\nfor (const value of shuffle(c)) {\n  console.log(value);\n}\n```\n\n## Filtering\n\n[`without`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without) returns a copy of an array without values equal to `v`. In the case of objects, references are compared.\n\n```js\n// repl-pad\nimport { without } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [1,2,3,1,2,3];\n// Yields: [1,3,1,3]\nwithout(data, 2);\n```\n\nJS's in built [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) function all items which pass the provided function:\n\n```js\nconst data = [1,2,3,1,2,3];\nconst filtered = data.filter(d => d > 2); // Return true if value is greater than 2\n// [3, 3]\n```\n\nixfx has [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) which captures items on either side of the filter function.\n```js\nimport { filterAB } from \"https://unpkg.com/ixfx/dist/arrays.js\";\nconst data = [1,2,3,1,2,3]\nconst [matching,nonMatching] = filterAB(data, d => d > 2);\n// matching: [ 3, 3]\n// nonMatching: [ 1, 2, 1, 2]\n```\n\n[`until`](https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html) returns all items in an array until the provided predicate returns false.\n\n```js\n// repl-pad\nimport { until } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Callback gets current value, and needs to return:\n// [true/false, accumulated value]\n// In this case, we return [true,0] if v === 3\nconst v = Arrays.until([1,2,3,4,5], v => [v === 3, 0]);\n\n```\n\nRemove a random element from an array with [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html). It doesn't modify the array, but returns the randomly selected item and a new array without it.\n\n\n```js\n// repl-pad\nimport {randomPluck} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Remove a random element\nconst r = randomPluck([`apples`, `oranges`, `pears`]);\nr.value; // A random value\nr.array; // A copy of the array with the random value removed\n```\n\n## Grouping\n\n[`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) allows you to group an array by some generated key.\n\n```js\n// repl-pad\nimport { groupBy } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [\n { age: 39, city: `London` }\n { age: 14, city: `Copenhagen` }\n { age: 23, city: `Stockholm` }\n { age: 56, city: `London` }\n];\nconst map = groupBy(data, item => data.city); \n```\n\nThis will yield:\n\n```js\n{\n  London: [\n    { age: 39, city: `London` }, \n    { age: 56, city: `London` }\n  ],\n  Stockhom: [\n    { age: 23, city: `Stockholm` }\n  ],\n  Copenhagen: [\n    { age: 14, city: `Copenhagen` }\n  ]\n}\n```\n\n## Numeric arrays\n\nIf you have an array of numbers, ixfx has some functions for common needs.\n\nOverview: \n* average, min, max, total or minMaxAvg to calculate all\n* averageWeighted\n* dotProduct\n* weight\n  \n### Ranges\n\n```js\n// repl-pad\nimport { max,min,average, minMaxAvg } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\nconst data = [1,2,3];\n// Compute max, min, avg:\nmax(...data); // 3\nmin(...data); // 1\naverage(...data); //\n\n// Or compute them all at once:\nminMaxAvg(...data);\n// Yields: {min: 1, max: 3, avg:, total: 6}\n```\n\n### Averages\n\n```js\n// repl-pad\nimport { average } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Compute an average of all provided values\naverage(1, 1.4, 0.9, 0.1);  // 0.85\n\n// Compute average of an array\nconst data = [1,2,3,4,5];\naverage(...data);           // 3\n```\n\n[`averageWeighted`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted) applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).\n\n```js\n// repl-pad\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\nimport { averageWeighted } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Using an ixfx easing function to weight elements.\n// Gaussian function weights middle elements highest, skewing the average\nconst v = averageWeighted([10,2,3,4,10], Easings.gaussian());\n// Yields: 3.6, while regular `average` yields 5.8\n```\n\n### Weighting\n\n`weight` applies a function (probably an [easing function](../../modulation/easing/)) to some data.\n\n```js\n// repl-pad\n\nimport { weight } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n\n// Weighs an input array of 1s\nweight([1,1,1,1,1,1], Easings.gaussian());\n\n// Yields:\n// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n```\n\n## More functions\n\nComparing arrays\n* [`compareValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html) - for array _x_ and _y_, identify items common in both, or exclusively in _x_ or _y_\n* [`compareValuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html) - returns _true_ if both arrays contain the same set of items, regardless of position.\n* [`additionalValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html) - yield all values not contained in a base array\n* [`intersection`](https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html) - return values contained in both _x_ and _y_ arrays\n* [`unique`](https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html) - combines values of arrays, only keeping unique values\n  \nRandomisation\n* [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) - random index\n* [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) - random value\n* [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html) - remove random value\n* [`shuffle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html) - randomise order\n\nFinding/accessing\n* [`contains`](https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html) - returns _true_ if array contains all provided items\n* [`containsDuplicateValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html) - returns _true_ if any duplicate _values_ are found in source array.\n* [`containsDuplicateInstances`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html) - returns _true_ if any duplicate _instances_ are found in source array.\n* [`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) - cycle through contents\n* [`filterBetween`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html) - return elements of array that match predicate _and_ are within a given start and end index\n* [`sample`](https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html) - sub-sample an array\n* [`valuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html) - returns _true_ if all values in array are identical\n* [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.\n\n\nChanging the shape of an array\n* [`ensureLength`](https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html) - Pad out or truncate an array so it matches a target length\n* [`chunks`](https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html) - break up an array into chunks of a given size\n* [`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) - Groups data by a function\n* [`interleave`](https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html) - combines the values of several arrays by interleaving values\n* [`remove`](https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html) - remove an element by index\n* [`without`](https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html) - return an array without a given value\n* [`zip`](https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html) - combine elements of arrays based on their index";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"enumerating","text":"Enumerating"},{"depth":2,"slug":"accessing-items","text":"Accessing items"},{"depth":3,"slug":"cycle","text":"Cycle"},{"depth":2,"slug":"finding","text":"Finding"},{"depth":2,"slug":"ordering","text":"Ordering"},{"depth":2,"slug":"filtering","text":"Filtering"},{"depth":2,"slug":"grouping","text":"Grouping"},{"depth":2,"slug":"numeric-arrays","text":"Numeric arrays"},{"depth":3,"slug":"ranges","text":"Ranges"},{"depth":3,"slug":"averages","text":"Averages"},{"depth":3,"slug":"weighting","text":"Weighting"},{"depth":2,"slug":"more-functions","text":"More functions"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
