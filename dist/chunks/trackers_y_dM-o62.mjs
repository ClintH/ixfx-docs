import { c as createComponent, r as renderTemplate, a as renderComponent, u as unescapeHTML } from './astro/server__cawITtY.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from './MainLayout_BFrOPY-O.mjs';

const html = "<script type=\"module\" hoist=\"\">\n  import '/src/components/ReplPad';\n</script>\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>Related: <a href=\"../frequency/\">FrequencyMutable</a>: tracks 'seen' values</li>\n</ul></div>\n<p>The ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.</p>\n<h2 id=\"numbers\">Numbers</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html\"><code>numberTracker</code></a> keeps track of the minimum, maximum and average of a stream of numbers, without storing them.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// repl-pad</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { numberTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> numberTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Add some random values</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> i</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">;i</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">;i</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\">) t.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">(Math.</span><span style=\"color:#B392F0\">floor</span><span style=\"color:#E1E4E8\">(Math.</span><span style=\"color:#B392F0\">random</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\">100</span><span style=\"color:#E1E4E8\">)));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get computed values</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.avg</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.min</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.total</span></span>\n<span class=\"line\"></span></code></pre>\n<p>An example usage might be to track the range of a sensor over time.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html\"><code>numberTracker</code> API docs</a> for more</li>\n<li>The <a href=\"https://clinth.github.io/ixfx-demos/pointer/scale/\">pointer scale demo</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale\">source</a>) uses <code>numberTracker</code> and <code>pointsTracker</code>.</li>\n</ul>\n<h2 id=\"intervals\">Intervals</h2>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html\"><code>intervalTracker</code></a> tracks time intervals.</p>\n<p>This is useful when youâ€™re interested in the period or frequency of events rather than event data itself.</p>\n<p>Once initialised, call <code>mark</code> on the returned object to capture the elapsed time.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { intervalTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Initialise</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> intervalTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Call `mark` to record the interval since last `mark` (or init)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.</span><span style=\"color:#B392F0\">mark</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.</span><span style=\"color:#B392F0\">mark</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Get average time (in millis) between calls</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.avg;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>For example, to figure how quickly the pointer is being clicked:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { intervalTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> clickInterval</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> intervalTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`click`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  clickInterval.</span><span style=\"color:#B392F0\">mark</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Average interval: ${</span><span style=\"color:#E1E4E8\">clickInterval</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">avg</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html\"><code>intervalTracker</code> API docs</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/io/keyboard/typer/\">typer demo</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer\">source</a>) uses <code>intervalTracker</code> to work with typing speed</li>\n</ul>\n<h2 id=\"point\">Point</h2>\n<p>Tracking an <em>x, y</em> <a href=\"../../types/geometry/point/\">Point</a> over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.</p>\n<frame-element title=\"Point tracking playground\" src=\"https://clinth.github.io/ixfx-play/data/point-tracker/index.html\">\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html\"><code>pointTracker</code></a> keeps track of a single point, returning an instance of <a href=\"https://clinth.github.io/ixfx/classes/Data.PointTracker.html\">PointTracker</a>.</p>\n<p>First initialise:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { pointTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> pointTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Or alternatively, keep track of only the last 10 samples:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> pointTracker</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  sampleLimit: </span><span style=\"color:#79B8FF\">10</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then call <code>seen()</code> whenever there is a point to track, for example, based on a pointer move event.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> info</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> t.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">({ x: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">, y: </span><span style=\"color:#79B8FF\">20</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>seen()</code> returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">fromInitial</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">fromLast</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">values</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> info;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>values</code> is a set of all the recorded points. <code>fromInitial</code> and <code>fromLast</code> yield the relation between the very first seen point and the last point. For both of these, you get:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  speed</span><span style=\"color:#E1E4E8\">: number     </span><span style=\"color:#6A737D\">// units/ms</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  angle</span><span style=\"color:#E1E4E8\">: number     </span><span style=\"color:#6A737D\">// in radians</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  distance</span><span style=\"color:#E1E4E8\">: number</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  average</span><span style=\"color:#E1E4E8\">: Point    </span><span style=\"color:#6A737D\">// average of all points</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  centroid</span><span style=\"color:#E1E4E8\">: Point</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  distance</span><span style=\"color:#E1E4E8\">: number</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>For example:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">fromInitial</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">fromLast</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> t.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">(pointerEvent); </span><span style=\"color:#6A737D\">// Add pointer event</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Distance from start: ${</span><span style=\"color:#E1E4E8\">fromInitial</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">distance</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the example below, we start tracking when the pointer is down and add points when there is a pointer move event.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { pointTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> tracker </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointerdown`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Init new tracker</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  tracker </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> pointTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  tracker.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">({ x: evt.x, y: evt.y });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointermove`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">evt</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">tracker) </span><span style=\"color:#F97583\">return</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> info</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> tracker.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">({x: evt.x, y: evt.y });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`Angle from start: ${</span><span style=\"color:#E1E4E8\">info</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">fromInitial</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">angle</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To get the last result without adding anything:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> nfo</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> tracker.lastResult;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There are a few helper functions on the tracker:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Distance &#x26; angle from initial point</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">tracker.</span><span style=\"color:#B392F0\">distanceFromStart</span><span style=\"color:#E1E4E8\">();  </span><span style=\"color:#6A737D\">// number</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">tracker.</span><span style=\"color:#B392F0\">angleFromStart</span><span style=\"color:#E1E4E8\">();     </span><span style=\"color:#6A737D\">// number (radians)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Latest point subtracted from initial point</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">tracker.</span><span style=\"color:#B392F0\">difference</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#6A737D\">// { x, y }</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"points\">Points</h2>\n<p>If you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several <code>pointTracker</code> instances.</p>\n<p><a href=\"https://clinth.github.io/ixfx/functions/Data.pointsTracker.html\"><code>pointsTracker</code></a> to the rescue! It does all this housekeeping for you.</p>\n<p>Initalise like so:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { pointsTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> pointsTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then whenever there is new data for a point, call <code>seen()</code>, giving the id of the point, and then the point (<code>{x: .., y: ...}</code>). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">t.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`nose`</span><span style=\"color:#E1E4E8\">, pose[</span><span style=\"color:#9ECBFF\">`nose`</span><span style=\"color:#E1E4E8\">]);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the example below, we track each named pointer id.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { pointsTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> pointsTracker</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Track a point by its id</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`pointermove`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">e</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\"> const</span><span style=\"color:#79B8FF\"> info</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> pt.</span><span style=\"color:#B392F0\">seen</span><span style=\"color:#E1E4E8\">(e.pointerId, { x: e.x, y: e.y });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note that <code>seen</code> is an async function, so <code>await</code> needs to be used if you want the result.</p>\n<p>To get data:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">t.</span><span style=\"color:#B392F0\">last</span><span style=\"color:#E1E4E8\">();      </span><span style=\"color:#6A737D\">// Iterate last seen {x,y} for each named point</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.</span><span style=\"color:#B392F0\">ids</span><span style=\"color:#E1E4E8\">();       </span><span style=\"color:#6A737D\">// Iterate over point names</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">t.</span><span style=\"color:#B392F0\">has</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`nose`</span><span style=\"color:#E1E4E8\">); </span><span style=\"color:#6A737D\">// true if point has been seen</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Under-the-hood, it automatically creates a <code>pointTracker</code> for each named point. This can be retrieved using <code>t.get(id)</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Get the point tracker for this named point</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> noseValue</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> t.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`nose`</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">noseValue.last;     </span><span style=\"color:#6A737D\">// Last seen { x, y }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">noseValue.initial;  </span><span style=\"color:#6A737D\">// Initial { x, y }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">noseValue.elapsed;  </span><span style=\"color:#6A737D\">// milliseconds since first seen</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">noseValue.</span><span style=\"color:#B392F0\">reset</span><span style=\"color:#E1E4E8\">();  </span><span style=\"color:#6A737D\">// reset this named point    </span></span>\n<span class=\"line\"></span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://clinth.github.io/ixfx/functions/Data.pointsTracker.html\"><code>pointsTracker</code> API docs</a> for more on the tracker, including sorting points by when they were recently updated.</li>\n<li>The <a href=\"https://clinth.github.io/ixfx-demos/pointer/scale/\">pointer scale demo</a> (<a href=\"https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale\">source</a>) uses <code>numberTracker</code> and <code>pointsTracker</code>.</li>\n</ul>\n<h2 id=\"trackers-in-general\">Trackers in general</h2>\n<p>All the trackers can take some options. Eg, creating a <code>numberTracker</code> with a string id of <code>someTracker</code>, have it automatically reset every 10 samples, and to store these values:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { numberTracker } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'https://unpkg.com/ixfx/dist/data.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> t</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> numberTracker</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`someTracker`</span><span style=\"color:#E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  resetAfterSamples: </span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  storeIntermediate: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre></frame-element>";

				const frontmatter = {"title":"Trackers","layout":"../../layouts/MainLayout.astro","setup":"import { DemoElement } from '../../components/DemoElement.ts';\nimport { FrameElement } from '../../components/FrameElement.ts';\n"};
				const file = "/Users/af4766/repos/ixfx-docs/src/pages/data/trackers.md";
				const url = "/data/trackers";
				function rawContent() {
					return "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n</script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>Related: <a href=\"../frequency/\">FrequencyMutable</a>: tracks 'seen' values</li>\n</div>\n\nThe ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.\n\n## Numbers\n\n[`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) keeps track of the minimum, maximum and average of a stream of numbers, without storing them.\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get computed values\nt.avg\nt.min\nt.total\n```\n\nAn example usage might be to track the range of a sensor over time.\n\nSee also:\n* [`numberTracker` API docs](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) for more\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Intervals\n\n[`intervalTracker`](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html) tracks time intervals.\n\nThis is useful when you're interested in the period or frequency of events rather than event data itself.\n\nOnce initialised, call `mark` on the returned object to capture the elapsed time.\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = intervalTracker();\n\n// Call `mark` to record the interval since last `mark` (or init)\nt.mark();\n...\nt.mark();\n\n// Get average time (in millis) between calls\nt.avg;\n```\n\nFor example, to figure how quickly the pointer is being clicked:\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst clickInterval = intervalTracker();\n\ndocument.addEventListener(`click`, evt => {\n  clickInterval.mark();\n  console.log(`Average interval: ${clickInterval.avg}`);\n});\n```\n\nSee also:\n* [`intervalTracker` API docs](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html)\n* [typer demo](https://clinth.github.io/ixfx-demos/io/keyboard/typer/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer)) uses `intervalTracker` to work with typing speed\n\n## Point\n\nTracking an _x, y_ [Point](../../types/geometry/point/) over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.\n\n<frame-element title=\"Point tracking playground\" src=\"https://clinth.github.io/ixfx-play/data/point-tracker/index.html\" />\n\n[`pointTracker`](https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html) keeps track of a single point, returning an instance of [PointTracker](https://clinth.github.io/ixfx/classes/Data.PointTracker.html).\n\nFirst initialise:\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointTracker();\n\n// Or alternatively, keep track of only the last 10 samples:\nconst t = pointTracker({\n  sampleLimit: 10\n})\n```\n\nAnd then call `seen()` whenever there is a point to track, for example, based on a pointer move event.\n\n```js\nconst info = t.seen({ x: 10, y: 20 });\n```\n\n`seen()` returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.\n\n```js\nconst { fromInitial, fromLast, values } = info;\n```\n\n`values` is a set of all the recorded points. `fromInitial` and `fromLast` yield the relation between the very first seen point and the last point. For both of these, you get:\n\n```typescript\n{\n  speed: number     // units/ms\n  angle: number     // in radians\n  distance: number\n  average: Point    // average of all points\n  centroid: Point\n  distance: number\n}\n```\n\nFor example:\n\n```js\nconst { fromInitial, fromLast } = t.seen(pointerEvent); // Add pointer event\nconsole.log(`Distance from start: ${fromInitial.distance}`);\n```\n\nIn the example below, we start tracking when the pointer is down and add points when there is a pointer move event.\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nlet tracker = null;\n\ndocument.addEventListener(`pointerdown`, evt => {\n  // Init new tracker\n  tracker = pointTracker();\n  tracker.seen({ x: evt.x, y: evt.y });\n});\n\ndocument.addEventListener(`pointermove`, evt => {\n  if (!tracker) return;\n  const info = tracker.seen({x: evt.x, y: evt.y });\n  \n  console.log(`Angle from start: ${info.fromInitial.angle}`);\n});\n```\n\nTo get the last result without adding anything:\n\n```js\nconst nfo = tracker.lastResult;\n```\n\nThere are a few helper functions on the tracker:\n\n```js\n// Distance & angle from initial point\ntracker.distanceFromStart();  // number\ntracker.angleFromStart();     // number (radians)\n\n// Latest point subtracted from initial point\ntracker.difference(); // { x, y }\n```\n\n## Points\n\nIf you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several `pointTracker` instances.\n\n[`pointsTracker`](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) to the rescue! It does all this housekeeping for you.\n\nInitalise like so:\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointsTracker();\n```\n\nAnd then whenever there is new data for a point, call `seen()`, giving the id of the point, and then the point (`{x: .., y: ...}`). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.\n\n```js\nt.seen(`nose`, pose[`nose`]);\n```\n\nIn the example below, we track each named pointer id.\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = pointsTracker();\n\n// Track a point by its id\ndocument.addEventListener(`pointermove`, e => {\n const info = await pt.seen(e.pointerId, { x: e.x, y: e.y });\n});\n```\n\nNote that `seen` is an async function, so `await` needs to be used if you want the result.\n\nTo get data:\n\n```js\nt.last();      // Iterate last seen {x,y} for each named point\nt.ids();       // Iterate over point names\nt.has(`nose`); // true if point has been seen\n```\n\nUnder-the-hood, it automatically creates a `pointTracker` for each named point. This can be retrieved using `t.get(id)`:\n\n```js\n// Get the point tracker for this named point\nconst noseValue = t.get(`nose`);\nnoseValue.last;     // Last seen { x, y }\nnoseValue.initial;  // Initial { x, y }\nnoseValue.elapsed;  // milliseconds since first seen\nnoseValue.reset();  // reset this named point    \n```\n\nSee also:\n* [`pointsTracker` API docs](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) for more on the tracker, including sorting points by when they were recently updated.\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Trackers in general\n\nAll the trackers can take some options. Eg, creating a `numberTracker` with a string id of `someTracker`, have it automatically reset every 10 samples, and to store these values:\n\n```js\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = numberTracker(`someTracker`, {\n  resetAfterSamples: 10,\n  storeIntermediate: true\n});\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"numbers","text":"Numbers"},{"depth":2,"slug":"intervals","text":"Intervals"},{"depth":2,"slug":"point","text":"Point"},{"depth":2,"slug":"points","text":"Points"},{"depth":2,"slug":"trackers-in-general","text":"Trackers in general"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MainLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html)}`
							})}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
