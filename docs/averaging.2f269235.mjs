import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "noise", "text": "Noise" }, { "depth": 2, "slug": "averaging-a-data-set", "text": "Averaging a data set" }, { "depth": 3, "slug": "simple", "text": "Simple" }, { "depth": 3, "slug": "weighted-averaging", "text": "Weighted averaging" }, { "depth": 2, "slug": "averaging-streams", "text": "Averaging streams" }, { "depth": 3, "slug": "tracker", "text": "Tracker" }, { "depth": 3, "slug": "moving-average", "text": "Moving average" }, { "depth": 3, "slug": "exponential-weighted-moving-average", "text": "Exponential weighted moving average" }, { "depth": 3, "slug": "moving-average-timed", "text": "Moving average timed" }, { "depth": 2, "slug": "case-averaging-complex-data", "text": "Case: Averaging complex data" }], "source": "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>See also: <a href=\"../trackers/#numbers\">Number trackers</a>\n</div>\n\n## Noise\n\nData can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.\n\nWhile we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.\n\nExamples sources with noise and jitter:\n* Pointer move events on a touch screen: _x_ and _y_ will move slightly, even though we might feel like we're not moving a finger\n* Audio level input: a very jittery input\n* Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value\n* Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence\n\n<demo-element style=\"height:40vh\" title=\"Moving average\" src=\"/data/moving-average-audio/\" />\n\nEven the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a [`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.\n\n## Averaging a data set\n\nIf you have all the values you want to average in advance, it's straightforward calculate using\n* Simple averaging: [`Arrays.average`](https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html), or\n* Weighted averaging: [`Arrays.averageWeighted`](https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html)\n\n\n### Simple\n\nThe basic way to average is to add up all the values and divide by the number of values.\n\nThis is easy to do from 'first principles':\n\n```js\nconst average = (numbers) => {\n  const total = numbers.reduce((acc, v) => acc + v, 0);\n  return total / numbers.length;\n};\naverage([10, 20, 30]);\n// Yields: 20\n```\n\nOr otherwise, using ixfx's [`Arrays.average`](https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html). It silently ignores non-numbers (_undefined_, _null_, _NaN_ etc), which can be useful.\n\n```js\n// repl-pad\nimport { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n\n// Pass in an array:\nArrays.average([10, 20, 30]);\n```\n\nIf you have a set of numbers to average not already in an array, [`Numbers.average`](https://clinth.github.io/ixfx/functions/Numbers.average.html) is effectively the same as `Arrays.average`, but takes in a spread set of parameters:\n\n```js\n// repl-pad\nimport * as Numbers from 'https://unpkg.com/ixfx/dist/numbers.js';\n\nNumbers.average(10, 20, 30);\n\nconst a = 10;\nconst b = 20;\nconst c = 30;\nNumbers.average(a, b, c);\n```\n\n### Weighted averaging\n\nRather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.\n\nixfx's [`Arrays.averageWeighted`](https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html) can help with this. \n\nA simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the [easing functions](../../modulation/easing/).\n\n```js\n// repl-pad\nimport { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\nimport { Easings } from 'https://unpkg.com/ixfx/dist/modulation.js';\n\nconst data = [ 1, 10, 100 ];\n\n// Gaussian will weigh middle elements most heavily\n// Yields: 25\nArrays.averageWeighted(data, Easings.gaussian());\n\n// quadIn will weigh most recent (end-of-array) elements most heavily\n// Yields: 97\nArrays.averageWeighted(data, Easings.get(`quadIn`));\n```\n\n## Averaging streams\n\nWhen averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when [normalising streams](../normalising/#stream).\n\n### Tracker\n\nIxfx has several ['trackers'](../trackers/), intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.\n\nHere's the [`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker.html) illustrated:\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get average\nt.avg\n```\n\nThese trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of _recent_ data, which is where [moving averages](#moving-average) are better.\n\nIt is, however, possible to set some options on the tracker to automatically reset itself after _n_ samples, or to reset it yourself.\n\n### Moving average\n\nThe moving averaging technique (AKA _moving_ or _sliding window_) keeps track of the last _n_ values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.\n\nWhen using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.\n\nThis tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.\n\n[`movingAverage`](https://clinth.github.io/ixfx/functions/Data.movingAverage.html) takes a parameter for how many items to track. `movingAverage` returns an object to add or clear the moving average.\n\n```js\n// repl-pad\nimport {movingAverage} from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Keep track of the last 10 items\nconst ma = movingAverage(10);\n\n// Each call to `add` returns the current average\nma.add(10); // 10\nma.add(5);  // 7.5\n```\n\nUse `clear` to clear data, or `compute` to calculate the average without adding new data\n\n```js\nma.compute(); // Yields current average\nma.clear();\n```\n\n\n### Exponential weighted moving average\n\nAn alternative approach is an _exponential weighted moving average_, which can calculate an average without storing data samples. This is a common technique on microcontrollers. \n\nIt's implemented as [`movingAverageLight`](https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html). Instead of passing the number of samples to record, a _scale_ parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.\n\n```js\n// repl-pad\nimport { movingAverageLight } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Init with a scaling of 3\nconst ma = movingAverageLight(3);\nma.add(10); // 10\nma.add(5); // 7.5\n```\n\n### Moving average timed\n\nConsider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via `movingAverageLight()`. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.\n\nOne solution to this is using [`Data.movingAverageTimed`](https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html). This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on `movingAverageLight`, so the same _scale_ parameter is there too.\n\nIf the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add `0`, since the speed must be zero if there are no events.\n\n```js\nimport { movingAverageTimed } from 'https://unpkg.com/ixfx/dist/data.js';\n// movingAverageTimed(updateRateMs, value, scaling): MovingAverage\n\n// Init averager\nconst avgSpeed = movingAverageTimed(500, 0);\n\n// Based on pointermove, calculate a speed and add to averager\ndocument.addEventListener(`pointermove`, evt => {\n  const speed = calcSpeed(evt);\n  avgSpeed.add(speed);\n});\n```\n\n## Case: Averaging complex data\n\nLet us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has _x_, _y_, _width_ and _height_ properties, and each of these we want to average seperately.\n\nTo do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.\n\nixfx's `mapObject` is used to map each property of an empty rectangle (x, y, width & height) to a new moving averager. In this way, `movingAverageRect` becomes a set of automatically-generated moving averagers.\n\n```js\n// repl-pad\nimport { movingAverage } from 'https://unpkg.com/ixfx/dist/data.js';\nimport { Rects } from 'https://unpkg.com/ixfx/dist/geometry.js';\nimport { mapObject } from 'https://unpkg.com/ixfx/dist/util.js';\n\n// How many samples to average over for each property\nconst samples = 10;\n\n// Create an average for each of the rect's properties (x, y, width, height)\nconst movingAverageRect = mapObject(Rects.empty, v => movingAverage(samples));\n\n// Continually-updated average rectangle\nlet averageRect = { x: 0, y: 0, width: 0, height: 0};\n\n// Add a new rectangle to be averaged\nconst add = (r) => {\n  const { x, y, width, height } = movingAverageRect;\n\n  // Add each of the properties of the input rectangle 'r'\n  // to separate averagers. We then collect all the averages\n  // in 'averageRect'\n  averageRect = { \n    x: x.add(r.x),\n    y: y.add(r.y),\n    width: width.add(r.width),\n    height: height.add(r.height)};\n}\n\n// Add 20 random rectangles\nfor (let i=0;i<20;i++) add(Rects.random());\n\n// This is the average after 20 random rects...\naverageRect;\n```\n\n<demo-element title=\"Moving average pointer\" src=\"/data/moving-average-pointer/\" />\n", "html": `<script type="module" hoist>
  import '/src/components/ReplPad';
<\/script>
<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>
<li>See also: <a href="../trackers/#numbers">Number trackers</a>
</div>
<h2 id="noise">Noise</h2>
<p>Data can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.</p>
<p>While we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.</p>
<p>Examples sources with noise and jitter:</p>
<ul>
<li>Pointer move events on a touch screen: <em>x</em> and <em>y</em> will move slightly, even though we might feel like we're not moving a finger</li>
<li>Audio level input: a very jittery input</li>
<li>Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value</li>
<li>Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence</li>
</ul>
<demo-element style="height:40vh" title="Moving average" src="/data/moving-average-audio/" />
<p>Even the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a <a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code is:raw>debounce</code></a> function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.</p>
<h2 id="averaging-a-data-set">Averaging a data set</h2>
<p>If you have all the values you want to average in advance, it's straightforward calculate using</p>
<ul>
<li>Simple averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code is:raw>Arrays.average</code></a>, or</li>
<li>Weighted averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code is:raw>Arrays.averageWeighted</code></a></li>
</ul>
<h3 id="simple">Simple</h3>
<p>The basic way to average is to add up all the values and divide by the number of values.</p>
<p>This is easy to do from 'first principles':</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> total <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: 20</span></code></pre>
<p>Or otherwise, using ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code is:raw>Arrays.average</code></a>. It silently ignores non-numbers (<em>undefined</em>, <em>null</em>, <em>NaN</em> etc), which can be useful.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Pass in an array:</span>
Arrays<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you have a set of numbers to average not already in an array, <a href="https://clinth.github.io/ixfx/functions/Numbers.average.html"><code is:raw>Numbers.average</code></a> is effectively the same as <code is:raw>Arrays.average</code>, but takes in a spread set of parameters:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Numbers <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/numbers.js'</span><span class="token punctuation">;</span>

Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="weighted-averaging">Weighted averaging</h3>
<p>Rather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.</p>
<p>ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code is:raw>Arrays.averageWeighted</code></a> can help with this.</p>
<p>A simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the <a href="../../modulation/easing/">easing functions</a>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/modulation.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Gaussian will weigh middle elements most heavily</span>
<span class="token comment">// Yields: 25</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// quadIn will weigh most recent (end-of-array) elements most heavily</span>
<span class="token comment">// Yields: 97</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">quadIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="averaging-streams">Averaging streams</h2>
<p>When averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when <a href="../normalising/#stream">normalising streams</a>.</p>
<h3 id="tracker">Tracker</h3>
<p>Ixfx has several <a href="../trackers/">'trackers'</a>, intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.</p>
<p>Here's the <a href="https://clinth.github.io/ixfx/functions/Data.numberTracker.html"><code is:raw>numberTracker</code></a> illustrated:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add some random values</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get average</span>
t<span class="token punctuation">.</span>avg</code></pre>
<p>These trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of <em>recent</em> data, which is where <a href="#moving-average">moving averages</a> are better.</p>
<p>It is, however, possible to set some options on the tracker to automatically reset itself after <em>n</em> samples, or to reset it yourself.</p>
<h3 id="moving-average">Moving average</h3>
<p>The moving averaging technique (AKA <em>moving</em> or <em>sliding window</em>) keeps track of the last <em>n</em> values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.</p>
<p>When using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.</p>
<p>This tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.</p>
<p><a href="https://clinth.github.io/ixfx/functions/Data.movingAverage.html"><code is:raw>movingAverage</code></a> takes a parameter for how many items to track. <code is:raw>movingAverage</code> returns an object to add or clear the moving average.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>movingAverage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Keep track of the last 10 items</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverage</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Each call to \`add\` returns the current average</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7.5</span></code></pre>
<p>Use <code is:raw>clear</code> to clear data, or <code is:raw>compute</code> to calculate the average without adding new data</p>
<pre class="language-js"><code is:raw class="language-js">ma<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields current average</span>
ma<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="exponential-weighted-moving-average">Exponential weighted moving average</h3>
<p>An alternative approach is an <em>exponential weighted moving average</em>, which can calculate an average without storing data samples. This is a common technique on microcontrollers.</p>
<p>It's implemented as <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html"><code is:raw>movingAverageLight</code></a>. Instead of passing the number of samples to record, a <em>scale</em> parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageLight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Init with a scaling of 3</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverageLight</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.5</span></code></pre>
<h3 id="moving-average-timed">Moving average timed</h3>
<p>Consider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via <code is:raw>movingAverageLight()</code>. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.</p>
<p>One solution to this is using <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html"><code is:raw>Data.movingAverageTimed</code></a>. This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on <code is:raw>movingAverageLight</code>, so the same <em>scale</em> parameter is there too.</p>
<p>If the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add <code is:raw>0</code>, since the speed must be zero if there are no events.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageTimed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token comment">// movingAverageTimed(updateRateMs, value, scaling): MovingAverage</span>

<span class="token comment">// Init averager</span>
<span class="token keyword">const</span> avgSpeed <span class="token operator">=</span> <span class="token function">movingAverageTimed</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Based on pointermove, calculate a speed and add to averager</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token function">calcSpeed</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  avgSpeed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="case-averaging-complex-data">Case: Averaging complex data</h2>
<p>Let us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has <em>x</em>, <em>y</em>, <em>width</em> and <em>height</em> properties, and each of these we want to average seperately.</p>
<p>To do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.</p>
<p>ixfx's <code is:raw>mapObject</code> is used to map each property of an empty rectangle (x, y, width &#x26; height) to a new moving averager. In this way, <code is:raw>movingAverageRect</code> becomes a set of automatically-generated moving averagers.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Rects <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/geometry.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/util.js'</span><span class="token punctuation">;</span>

<span class="token comment">// How many samples to average over for each property</span>
<span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// Create an average for each of the rect's properties (x, y, width, height)</span>
<span class="token keyword">const</span> movingAverageRect <span class="token operator">=</span> <span class="token function">mapObject</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token function">movingAverage</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Continually-updated average rectangle</span>
<span class="token keyword">let</span> averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Add a new rectangle to be averaged</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> movingAverageRect<span class="token punctuation">;</span>

  <span class="token comment">// Add each of the properties of the input rectangle 'r'</span>
  <span class="token comment">// to separate averagers. We then collect all the averages</span>
  <span class="token comment">// in 'averageRect'</span>
  averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> width<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> height<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Add 20 random rectangles</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This is the average after 20 random rects...</span>
averageRect<span class="token punctuation">;</span></code></pre>
<demo-element title="Moving average pointer" src="/data/moving-average-pointer/" />` };
const frontmatter = { "title": "Averaging", "astro": { "headers": [{ "depth": 2, "slug": "noise", "text": "Noise" }, { "depth": 2, "slug": "averaging-a-data-set", "text": "Averaging a data set" }, { "depth": 3, "slug": "simple", "text": "Simple" }, { "depth": 3, "slug": "weighted-averaging", "text": "Weighted averaging" }, { "depth": 2, "slug": "averaging-streams", "text": "Averaging streams" }, { "depth": 3, "slug": "tracker", "text": "Tracker" }, { "depth": 3, "slug": "moving-average", "text": "Moving average" }, { "depth": 3, "slug": "exponential-weighted-moving-average", "text": "Exponential weighted moving average" }, { "depth": 3, "slug": "moving-average-timed", "text": "Moving average timed" }, { "depth": 2, "slug": "case-averaging-complex-data", "text": "Case: Averaging complex data" }], "source": "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>See also: <a href=\"../trackers/#numbers\">Number trackers</a>\n</div>\n\n## Noise\n\nData can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.\n\nWhile we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.\n\nExamples sources with noise and jitter:\n* Pointer move events on a touch screen: _x_ and _y_ will move slightly, even though we might feel like we're not moving a finger\n* Audio level input: a very jittery input\n* Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value\n* Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence\n\n<demo-element style=\"height:40vh\" title=\"Moving average\" src=\"/data/moving-average-audio/\" />\n\nEven the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a [`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.\n\n## Averaging a data set\n\nIf you have all the values you want to average in advance, it's straightforward calculate using\n* Simple averaging: [`Arrays.average`](https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html), or\n* Weighted averaging: [`Arrays.averageWeighted`](https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html)\n\n\n### Simple\n\nThe basic way to average is to add up all the values and divide by the number of values.\n\nThis is easy to do from 'first principles':\n\n```js\nconst average = (numbers) => {\n  const total = numbers.reduce((acc, v) => acc + v, 0);\n  return total / numbers.length;\n};\naverage([10, 20, 30]);\n// Yields: 20\n```\n\nOr otherwise, using ixfx's [`Arrays.average`](https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html). It silently ignores non-numbers (_undefined_, _null_, _NaN_ etc), which can be useful.\n\n```js\n// repl-pad\nimport { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n\n// Pass in an array:\nArrays.average([10, 20, 30]);\n```\n\nIf you have a set of numbers to average not already in an array, [`Numbers.average`](https://clinth.github.io/ixfx/functions/Numbers.average.html) is effectively the same as `Arrays.average`, but takes in a spread set of parameters:\n\n```js\n// repl-pad\nimport * as Numbers from 'https://unpkg.com/ixfx/dist/numbers.js';\n\nNumbers.average(10, 20, 30);\n\nconst a = 10;\nconst b = 20;\nconst c = 30;\nNumbers.average(a, b, c);\n```\n\n### Weighted averaging\n\nRather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.\n\nixfx's [`Arrays.averageWeighted`](https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html) can help with this. \n\nA simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the [easing functions](../../modulation/easing/).\n\n```js\n// repl-pad\nimport { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\nimport { Easings } from 'https://unpkg.com/ixfx/dist/modulation.js';\n\nconst data = [ 1, 10, 100 ];\n\n// Gaussian will weigh middle elements most heavily\n// Yields: 25\nArrays.averageWeighted(data, Easings.gaussian());\n\n// quadIn will weigh most recent (end-of-array) elements most heavily\n// Yields: 97\nArrays.averageWeighted(data, Easings.get(`quadIn`));\n```\n\n## Averaging streams\n\nWhen averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when [normalising streams](../normalising/#stream).\n\n### Tracker\n\nIxfx has several ['trackers'](../trackers/), intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.\n\nHere's the [`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker.html) illustrated:\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get average\nt.avg\n```\n\nThese trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of _recent_ data, which is where [moving averages](#moving-average) are better.\n\nIt is, however, possible to set some options on the tracker to automatically reset itself after _n_ samples, or to reset it yourself.\n\n### Moving average\n\nThe moving averaging technique (AKA _moving_ or _sliding window_) keeps track of the last _n_ values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.\n\nWhen using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.\n\nThis tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.\n\n[`movingAverage`](https://clinth.github.io/ixfx/functions/Data.movingAverage.html) takes a parameter for how many items to track. `movingAverage` returns an object to add or clear the moving average.\n\n```js\n// repl-pad\nimport {movingAverage} from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Keep track of the last 10 items\nconst ma = movingAverage(10);\n\n// Each call to `add` returns the current average\nma.add(10); // 10\nma.add(5);  // 7.5\n```\n\nUse `clear` to clear data, or `compute` to calculate the average without adding new data\n\n```js\nma.compute(); // Yields current average\nma.clear();\n```\n\n\n### Exponential weighted moving average\n\nAn alternative approach is an _exponential weighted moving average_, which can calculate an average without storing data samples. This is a common technique on microcontrollers. \n\nIt's implemented as [`movingAverageLight`](https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html). Instead of passing the number of samples to record, a _scale_ parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.\n\n```js\n// repl-pad\nimport { movingAverageLight } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Init with a scaling of 3\nconst ma = movingAverageLight(3);\nma.add(10); // 10\nma.add(5); // 7.5\n```\n\n### Moving average timed\n\nConsider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via `movingAverageLight()`. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.\n\nOne solution to this is using [`Data.movingAverageTimed`](https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html). This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on `movingAverageLight`, so the same _scale_ parameter is there too.\n\nIf the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add `0`, since the speed must be zero if there are no events.\n\n```js\nimport { movingAverageTimed } from 'https://unpkg.com/ixfx/dist/data.js';\n// movingAverageTimed(updateRateMs, value, scaling): MovingAverage\n\n// Init averager\nconst avgSpeed = movingAverageTimed(500, 0);\n\n// Based on pointermove, calculate a speed and add to averager\ndocument.addEventListener(`pointermove`, evt => {\n  const speed = calcSpeed(evt);\n  avgSpeed.add(speed);\n});\n```\n\n## Case: Averaging complex data\n\nLet us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has _x_, _y_, _width_ and _height_ properties, and each of these we want to average seperately.\n\nTo do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.\n\nixfx's `mapObject` is used to map each property of an empty rectangle (x, y, width & height) to a new moving averager. In this way, `movingAverageRect` becomes a set of automatically-generated moving averagers.\n\n```js\n// repl-pad\nimport { movingAverage } from 'https://unpkg.com/ixfx/dist/data.js';\nimport { Rects } from 'https://unpkg.com/ixfx/dist/geometry.js';\nimport { mapObject } from 'https://unpkg.com/ixfx/dist/util.js';\n\n// How many samples to average over for each property\nconst samples = 10;\n\n// Create an average for each of the rect's properties (x, y, width, height)\nconst movingAverageRect = mapObject(Rects.empty, v => movingAverage(samples));\n\n// Continually-updated average rectangle\nlet averageRect = { x: 0, y: 0, width: 0, height: 0};\n\n// Add a new rectangle to be averaged\nconst add = (r) => {\n  const { x, y, width, height } = movingAverageRect;\n\n  // Add each of the properties of the input rectangle 'r'\n  // to separate averagers. We then collect all the averages\n  // in 'averageRect'\n  averageRect = { \n    x: x.add(r.x),\n    y: y.add(r.y),\n    width: width.add(r.width),\n    height: height.add(r.height)};\n}\n\n// Add 20 random rectangles\nfor (let i=0;i<20;i++) add(Rects.random());\n\n// This is the average after 20 random rects...\naverageRect;\n```\n\n<demo-element title=\"Moving average pointer\" src=\"/data/moving-average-pointer/\" />\n", "html": `<script type="module" hoist>
  import '/src/components/ReplPad';
<\/script>
<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>
<li>See also: <a href="../trackers/#numbers">Number trackers</a>
</div>
<h2 id="noise">Noise</h2>
<p>Data can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.</p>
<p>While we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.</p>
<p>Examples sources with noise and jitter:</p>
<ul>
<li>Pointer move events on a touch screen: <em>x</em> and <em>y</em> will move slightly, even though we might feel like we're not moving a finger</li>
<li>Audio level input: a very jittery input</li>
<li>Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value</li>
<li>Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence</li>
</ul>
<demo-element style="height:40vh" title="Moving average" src="/data/moving-average-audio/" />
<p>Even the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a <a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code is:raw>debounce</code></a> function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.</p>
<h2 id="averaging-a-data-set">Averaging a data set</h2>
<p>If you have all the values you want to average in advance, it's straightforward calculate using</p>
<ul>
<li>Simple averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code is:raw>Arrays.average</code></a>, or</li>
<li>Weighted averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code is:raw>Arrays.averageWeighted</code></a></li>
</ul>
<h3 id="simple">Simple</h3>
<p>The basic way to average is to add up all the values and divide by the number of values.</p>
<p>This is easy to do from 'first principles':</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> total <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: 20</span></code></pre>
<p>Or otherwise, using ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code is:raw>Arrays.average</code></a>. It silently ignores non-numbers (<em>undefined</em>, <em>null</em>, <em>NaN</em> etc), which can be useful.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Pass in an array:</span>
Arrays<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you have a set of numbers to average not already in an array, <a href="https://clinth.github.io/ixfx/functions/Numbers.average.html"><code is:raw>Numbers.average</code></a> is effectively the same as <code is:raw>Arrays.average</code>, but takes in a spread set of parameters:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Numbers <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/numbers.js'</span><span class="token punctuation">;</span>

Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="weighted-averaging">Weighted averaging</h3>
<p>Rather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.</p>
<p>ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code is:raw>Arrays.averageWeighted</code></a> can help with this.</p>
<p>A simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the <a href="../../modulation/easing/">easing functions</a>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/modulation.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Gaussian will weigh middle elements most heavily</span>
<span class="token comment">// Yields: 25</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// quadIn will weigh most recent (end-of-array) elements most heavily</span>
<span class="token comment">// Yields: 97</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">quadIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="averaging-streams">Averaging streams</h2>
<p>When averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when <a href="../normalising/#stream">normalising streams</a>.</p>
<h3 id="tracker">Tracker</h3>
<p>Ixfx has several <a href="../trackers/">'trackers'</a>, intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.</p>
<p>Here's the <a href="https://clinth.github.io/ixfx/functions/Data.numberTracker.html"><code is:raw>numberTracker</code></a> illustrated:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add some random values</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get average</span>
t<span class="token punctuation">.</span>avg</code></pre>
<p>These trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of <em>recent</em> data, which is where <a href="#moving-average">moving averages</a> are better.</p>
<p>It is, however, possible to set some options on the tracker to automatically reset itself after <em>n</em> samples, or to reset it yourself.</p>
<h3 id="moving-average">Moving average</h3>
<p>The moving averaging technique (AKA <em>moving</em> or <em>sliding window</em>) keeps track of the last <em>n</em> values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.</p>
<p>When using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.</p>
<p>This tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.</p>
<p><a href="https://clinth.github.io/ixfx/functions/Data.movingAverage.html"><code is:raw>movingAverage</code></a> takes a parameter for how many items to track. <code is:raw>movingAverage</code> returns an object to add or clear the moving average.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>movingAverage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Keep track of the last 10 items</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverage</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Each call to \`add\` returns the current average</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7.5</span></code></pre>
<p>Use <code is:raw>clear</code> to clear data, or <code is:raw>compute</code> to calculate the average without adding new data</p>
<pre class="language-js"><code is:raw class="language-js">ma<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields current average</span>
ma<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="exponential-weighted-moving-average">Exponential weighted moving average</h3>
<p>An alternative approach is an <em>exponential weighted moving average</em>, which can calculate an average without storing data samples. This is a common technique on microcontrollers.</p>
<p>It's implemented as <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html"><code is:raw>movingAverageLight</code></a>. Instead of passing the number of samples to record, a <em>scale</em> parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageLight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Init with a scaling of 3</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverageLight</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.5</span></code></pre>
<h3 id="moving-average-timed">Moving average timed</h3>
<p>Consider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via <code is:raw>movingAverageLight()</code>. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.</p>
<p>One solution to this is using <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html"><code is:raw>Data.movingAverageTimed</code></a>. This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on <code is:raw>movingAverageLight</code>, so the same <em>scale</em> parameter is there too.</p>
<p>If the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add <code is:raw>0</code>, since the speed must be zero if there are no events.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageTimed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token comment">// movingAverageTimed(updateRateMs, value, scaling): MovingAverage</span>

<span class="token comment">// Init averager</span>
<span class="token keyword">const</span> avgSpeed <span class="token operator">=</span> <span class="token function">movingAverageTimed</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Based on pointermove, calculate a speed and add to averager</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token function">calcSpeed</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  avgSpeed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="case-averaging-complex-data">Case: Averaging complex data</h2>
<p>Let us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has <em>x</em>, <em>y</em>, <em>width</em> and <em>height</em> properties, and each of these we want to average seperately.</p>
<p>To do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.</p>
<p>ixfx's <code is:raw>mapObject</code> is used to map each property of an empty rectangle (x, y, width &#x26; height) to a new moving averager. In this way, <code is:raw>movingAverageRect</code> becomes a set of automatically-generated moving averagers.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Rects <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/geometry.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/util.js'</span><span class="token punctuation">;</span>

<span class="token comment">// How many samples to average over for each property</span>
<span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// Create an average for each of the rect's properties (x, y, width, height)</span>
<span class="token keyword">const</span> movingAverageRect <span class="token operator">=</span> <span class="token function">mapObject</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token function">movingAverage</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Continually-updated average rectangle</span>
<span class="token keyword">let</span> averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Add a new rectangle to be averaged</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> movingAverageRect<span class="token punctuation">;</span>

  <span class="token comment">// Add each of the properties of the input rectangle 'r'</span>
  <span class="token comment">// to separate averagers. We then collect all the averages</span>
  <span class="token comment">// in 'averageRect'</span>
  averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> width<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> height<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Add 20 random rectangles</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This is the average after 20 random rects...</span>
averageRect<span class="token punctuation">;</span></code></pre>
<demo-element title="Moving average pointer" src="/data/moving-average-pointer/" />` } };
const $$metadata = createMetadata("/src/pages/data/averaging.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
  import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/data/averaging.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Averaging = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Averaging;
  const $$content = { "title": "Averaging", "astro": { "headers": [{ "depth": 2, "slug": "noise", "text": "Noise" }, { "depth": 2, "slug": "averaging-a-data-set", "text": "Averaging a data set" }, { "depth": 3, "slug": "simple", "text": "Simple" }, { "depth": 3, "slug": "weighted-averaging", "text": "Weighted averaging" }, { "depth": 2, "slug": "averaging-streams", "text": "Averaging streams" }, { "depth": 3, "slug": "tracker", "text": "Tracker" }, { "depth": 3, "slug": "moving-average", "text": "Moving average" }, { "depth": 3, "slug": "exponential-weighted-moving-average", "text": "Exponential weighted moving average" }, { "depth": 3, "slug": "moving-average-timed", "text": "Moving average timed" }, { "depth": 2, "slug": "case-averaging-complex-data", "text": "Case: Averaging complex data" }], "source": "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>See also: <a href=\"../trackers/#numbers\">Number trackers</a>\n</div>\n\n## Noise\n\nData can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.\n\nWhile we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.\n\nExamples sources with noise and jitter:\n* Pointer move events on a touch screen: _x_ and _y_ will move slightly, even though we might feel like we're not moving a finger\n* Audio level input: a very jittery input\n* Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value\n* Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence\n\n<demo-element style=\"height:40vh\" title=\"Moving average\" src=\"/data/moving-average-audio/\" />\n\nEven the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a [`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.\n\n## Averaging a data set\n\nIf you have all the values you want to average in advance, it's straightforward calculate using\n* Simple averaging: [`Arrays.average`](https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html), or\n* Weighted averaging: [`Arrays.averageWeighted`](https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html)\n\n\n### Simple\n\nThe basic way to average is to add up all the values and divide by the number of values.\n\nThis is easy to do from 'first principles':\n\n```js\nconst average = (numbers) => {\n  const total = numbers.reduce((acc, v) => acc + v, 0);\n  return total / numbers.length;\n};\naverage([10, 20, 30]);\n// Yields: 20\n```\n\nOr otherwise, using ixfx's [`Arrays.average`](https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html). It silently ignores non-numbers (_undefined_, _null_, _NaN_ etc), which can be useful.\n\n```js\n// repl-pad\nimport { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n\n// Pass in an array:\nArrays.average([10, 20, 30]);\n```\n\nIf you have a set of numbers to average not already in an array, [`Numbers.average`](https://clinth.github.io/ixfx/functions/Numbers.average.html) is effectively the same as `Arrays.average`, but takes in a spread set of parameters:\n\n```js\n// repl-pad\nimport * as Numbers from 'https://unpkg.com/ixfx/dist/numbers.js';\n\nNumbers.average(10, 20, 30);\n\nconst a = 10;\nconst b = 20;\nconst c = 30;\nNumbers.average(a, b, c);\n```\n\n### Weighted averaging\n\nRather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.\n\nixfx's [`Arrays.averageWeighted`](https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html) can help with this. \n\nA simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the [easing functions](../../modulation/easing/).\n\n```js\n// repl-pad\nimport { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\nimport { Easings } from 'https://unpkg.com/ixfx/dist/modulation.js';\n\nconst data = [ 1, 10, 100 ];\n\n// Gaussian will weigh middle elements most heavily\n// Yields: 25\nArrays.averageWeighted(data, Easings.gaussian());\n\n// quadIn will weigh most recent (end-of-array) elements most heavily\n// Yields: 97\nArrays.averageWeighted(data, Easings.get(`quadIn`));\n```\n\n## Averaging streams\n\nWhen averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when [normalising streams](../normalising/#stream).\n\n### Tracker\n\nIxfx has several ['trackers'](../trackers/), intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.\n\nHere's the [`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker.html) illustrated:\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get average\nt.avg\n```\n\nThese trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of _recent_ data, which is where [moving averages](#moving-average) are better.\n\nIt is, however, possible to set some options on the tracker to automatically reset itself after _n_ samples, or to reset it yourself.\n\n### Moving average\n\nThe moving averaging technique (AKA _moving_ or _sliding window_) keeps track of the last _n_ values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.\n\nWhen using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.\n\nThis tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.\n\n[`movingAverage`](https://clinth.github.io/ixfx/functions/Data.movingAverage.html) takes a parameter for how many items to track. `movingAverage` returns an object to add or clear the moving average.\n\n```js\n// repl-pad\nimport {movingAverage} from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Keep track of the last 10 items\nconst ma = movingAverage(10);\n\n// Each call to `add` returns the current average\nma.add(10); // 10\nma.add(5);  // 7.5\n```\n\nUse `clear` to clear data, or `compute` to calculate the average without adding new data\n\n```js\nma.compute(); // Yields current average\nma.clear();\n```\n\n\n### Exponential weighted moving average\n\nAn alternative approach is an _exponential weighted moving average_, which can calculate an average without storing data samples. This is a common technique on microcontrollers. \n\nIt's implemented as [`movingAverageLight`](https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html). Instead of passing the number of samples to record, a _scale_ parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.\n\n```js\n// repl-pad\nimport { movingAverageLight } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Init with a scaling of 3\nconst ma = movingAverageLight(3);\nma.add(10); // 10\nma.add(5); // 7.5\n```\n\n### Moving average timed\n\nConsider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via `movingAverageLight()`. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.\n\nOne solution to this is using [`Data.movingAverageTimed`](https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html). This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on `movingAverageLight`, so the same _scale_ parameter is there too.\n\nIf the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add `0`, since the speed must be zero if there are no events.\n\n```js\nimport { movingAverageTimed } from 'https://unpkg.com/ixfx/dist/data.js';\n// movingAverageTimed(updateRateMs, value, scaling): MovingAverage\n\n// Init averager\nconst avgSpeed = movingAverageTimed(500, 0);\n\n// Based on pointermove, calculate a speed and add to averager\ndocument.addEventListener(`pointermove`, evt => {\n  const speed = calcSpeed(evt);\n  avgSpeed.add(speed);\n});\n```\n\n## Case: Averaging complex data\n\nLet us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has _x_, _y_, _width_ and _height_ properties, and each of these we want to average seperately.\n\nTo do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.\n\nixfx's `mapObject` is used to map each property of an empty rectangle (x, y, width & height) to a new moving averager. In this way, `movingAverageRect` becomes a set of automatically-generated moving averagers.\n\n```js\n// repl-pad\nimport { movingAverage } from 'https://unpkg.com/ixfx/dist/data.js';\nimport { Rects } from 'https://unpkg.com/ixfx/dist/geometry.js';\nimport { mapObject } from 'https://unpkg.com/ixfx/dist/util.js';\n\n// How many samples to average over for each property\nconst samples = 10;\n\n// Create an average for each of the rect's properties (x, y, width, height)\nconst movingAverageRect = mapObject(Rects.empty, v => movingAverage(samples));\n\n// Continually-updated average rectangle\nlet averageRect = { x: 0, y: 0, width: 0, height: 0};\n\n// Add a new rectangle to be averaged\nconst add = (r) => {\n  const { x, y, width, height } = movingAverageRect;\n\n  // Add each of the properties of the input rectangle 'r'\n  // to separate averagers. We then collect all the averages\n  // in 'averageRect'\n  averageRect = { \n    x: x.add(r.x),\n    y: y.add(r.y),\n    width: width.add(r.width),\n    height: height.add(r.height)};\n}\n\n// Add 20 random rectangles\nfor (let i=0;i<20;i++) add(Rects.random());\n\n// This is the average after 20 random rects...\naverageRect;\n```\n\n<demo-element title=\"Moving average pointer\" src=\"/data/moving-average-pointer/\" />\n", "html": `<script type="module" hoist>
  import '/src/components/ReplPad';
<\/script>
<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>
<li>See also: <a href="../trackers/#numbers">Number trackers</a>
</div>
<h2 id="noise">Noise</h2>
<p>Data can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.</p>
<p>While we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.</p>
<p>Examples sources with noise and jitter:</p>
<ul>
<li>Pointer move events on a touch screen: <em>x</em> and <em>y</em> will move slightly, even though we might feel like we're not moving a finger</li>
<li>Audio level input: a very jittery input</li>
<li>Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value</li>
<li>Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence</li>
</ul>
<demo-element style="height:40vh" title="Moving average" src="/data/moving-average-audio/" />
<p>Even the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a <a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code is:raw>debounce</code></a> function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.</p>
<h2 id="averaging-a-data-set">Averaging a data set</h2>
<p>If you have all the values you want to average in advance, it's straightforward calculate using</p>
<ul>
<li>Simple averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code is:raw>Arrays.average</code></a>, or</li>
<li>Weighted averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code is:raw>Arrays.averageWeighted</code></a></li>
</ul>
<h3 id="simple">Simple</h3>
<p>The basic way to average is to add up all the values and divide by the number of values.</p>
<p>This is easy to do from 'first principles':</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> total <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: 20</span></code></pre>
<p>Or otherwise, using ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code is:raw>Arrays.average</code></a>. It silently ignores non-numbers (<em>undefined</em>, <em>null</em>, <em>NaN</em> etc), which can be useful.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Pass in an array:</span>
Arrays<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you have a set of numbers to average not already in an array, <a href="https://clinth.github.io/ixfx/functions/Numbers.average.html"><code is:raw>Numbers.average</code></a> is effectively the same as <code is:raw>Arrays.average</code>, but takes in a spread set of parameters:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Numbers <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/numbers.js'</span><span class="token punctuation">;</span>

Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="weighted-averaging">Weighted averaging</h3>
<p>Rather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.</p>
<p>ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code is:raw>Arrays.averageWeighted</code></a> can help with this.</p>
<p>A simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the <a href="../../modulation/easing/">easing functions</a>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/modulation.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Gaussian will weigh middle elements most heavily</span>
<span class="token comment">// Yields: 25</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// quadIn will weigh most recent (end-of-array) elements most heavily</span>
<span class="token comment">// Yields: 97</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">quadIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="averaging-streams">Averaging streams</h2>
<p>When averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when <a href="../normalising/#stream">normalising streams</a>.</p>
<h3 id="tracker">Tracker</h3>
<p>Ixfx has several <a href="../trackers/">'trackers'</a>, intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.</p>
<p>Here's the <a href="https://clinth.github.io/ixfx/functions/Data.numberTracker.html"><code is:raw>numberTracker</code></a> illustrated:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add some random values</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get average</span>
t<span class="token punctuation">.</span>avg</code></pre>
<p>These trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of <em>recent</em> data, which is where <a href="#moving-average">moving averages</a> are better.</p>
<p>It is, however, possible to set some options on the tracker to automatically reset itself after <em>n</em> samples, or to reset it yourself.</p>
<h3 id="moving-average">Moving average</h3>
<p>The moving averaging technique (AKA <em>moving</em> or <em>sliding window</em>) keeps track of the last <em>n</em> values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.</p>
<p>When using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.</p>
<p>This tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.</p>
<p><a href="https://clinth.github.io/ixfx/functions/Data.movingAverage.html"><code is:raw>movingAverage</code></a> takes a parameter for how many items to track. <code is:raw>movingAverage</code> returns an object to add or clear the moving average.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>movingAverage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Keep track of the last 10 items</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverage</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Each call to \`add\` returns the current average</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7.5</span></code></pre>
<p>Use <code is:raw>clear</code> to clear data, or <code is:raw>compute</code> to calculate the average without adding new data</p>
<pre class="language-js"><code is:raw class="language-js">ma<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields current average</span>
ma<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="exponential-weighted-moving-average">Exponential weighted moving average</h3>
<p>An alternative approach is an <em>exponential weighted moving average</em>, which can calculate an average without storing data samples. This is a common technique on microcontrollers.</p>
<p>It's implemented as <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html"><code is:raw>movingAverageLight</code></a>. Instead of passing the number of samples to record, a <em>scale</em> parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageLight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Init with a scaling of 3</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverageLight</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.5</span></code></pre>
<h3 id="moving-average-timed">Moving average timed</h3>
<p>Consider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via <code is:raw>movingAverageLight()</code>. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.</p>
<p>One solution to this is using <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html"><code is:raw>Data.movingAverageTimed</code></a>. This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on <code is:raw>movingAverageLight</code>, so the same <em>scale</em> parameter is there too.</p>
<p>If the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add <code is:raw>0</code>, since the speed must be zero if there are no events.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageTimed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token comment">// movingAverageTimed(updateRateMs, value, scaling): MovingAverage</span>

<span class="token comment">// Init averager</span>
<span class="token keyword">const</span> avgSpeed <span class="token operator">=</span> <span class="token function">movingAverageTimed</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Based on pointermove, calculate a speed and add to averager</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token function">calcSpeed</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  avgSpeed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="case-averaging-complex-data">Case: Averaging complex data</h2>
<p>Let us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has <em>x</em>, <em>y</em>, <em>width</em> and <em>height</em> properties, and each of these we want to average seperately.</p>
<p>To do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.</p>
<p>ixfx's <code is:raw>mapObject</code> is used to map each property of an empty rectangle (x, y, width &#x26; height) to a new moving averager. In this way, <code is:raw>movingAverageRect</code> becomes a set of automatically-generated moving averagers.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Rects <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/geometry.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/util.js'</span><span class="token punctuation">;</span>

<span class="token comment">// How many samples to average over for each property</span>
<span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// Create an average for each of the rect's properties (x, y, width, height)</span>
<span class="token keyword">const</span> movingAverageRect <span class="token operator">=</span> <span class="token function">mapObject</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token function">movingAverage</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Continually-updated average rectangle</span>
<span class="token keyword">let</span> averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Add a new rectangle to be averaged</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> movingAverageRect<span class="token punctuation">;</span>

  <span class="token comment">// Add each of the properties of the input rectangle 'r'</span>
  <span class="token comment">// to separate averagers. We then collect all the averages</span>
  <span class="token comment">// in 'averageRect'</span>
  averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> width<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> height<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Add 20 random rectangles</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This is the average after 20 random rects...</span>
averageRect<span class="token punctuation">;</span></code></pre>
<demo-element title="Moving average pointer" src="/data/moving-average-pointer/" />` } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>
<li>See also: <a href="../trackers/#numbers">Number trackers</a>
</li></ul></div><h2 id="noise">Noise</h2><p>Data can be noisy or jittery: instead of a convienent smooth line of a sensor going up and down, there might be all kinds of spikes, or perhaps the value is never static, always wavering up and down.</p><p>While we typically want to respond with nuance to input (be it from a human action, sensor, machine learning inference etc), we don't necessarily want to work with single data points in isolation. Because if we express a currently very low reading, it might be an erroneous spike in the data, not reflecting the average of the data, or the qualitative aspect we are working with.</p><p>Examples sources with noise and jitter:</p><ul>
<li>Pointer move events on a touch screen: <em>x</em> and <em>y</em> will move slightly, even though we might feel like we're not moving a finger</li>
<li>Audio level input: a very jittery input</li>
<li>Ultrasound sensor: signals might hit different angles of the same object, giving each pulse a different value</li>
<li>Pose detection via machine learning: a very jittery collection of points which shift around and snap in and out of existence</li>
</ul>${renderComponent($$result, "demo-element", "demo-element", { "style": "height:40vh", "title": "Moving average", "src": "/data/moving-average-audio/" })}<p>Even the humble physical button can exhibit jitter, where a single physical press is actually registered as several presses. In code, this is solved through a <a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code>debounce</code></a> function. Noise from physical sensors - particularly analog sensors - can also sometimes be reduced in the hardware domain.</p><h2 id="averaging-a-data-set">Averaging a data set</h2><p>If you have all the values you want to average in advance, it's straightforward calculate using</p><ul>
<li>Simple averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code>Arrays.average</code></a>, or</li>
<li>Weighted averaging: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code>Arrays.averageWeighted</code></a></li>
</ul><h3 id="simple">Simple</h3><p>The basic way to average is to add up all the values and divide by the number of values.</p><p>This is easy to do from 'first principles':</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">+</span> v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> total <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: 20</span></code></pre><p>Or otherwise, using ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.average.html"><code>Arrays.average</code></a>. It silently ignores non-numbers (<em>undefined</em>, <em>null</em>, <em>NaN</em> etc), which can be useful.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Pass in an array:</span>
Arrays<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If you have a set of numbers to average not already in an array, <a href="https://clinth.github.io/ixfx/functions/Numbers.average.html"><code>Numbers.average</code></a> is effectively the same as <code>Arrays.average</code>, but takes in a spread set of parameters:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Numbers <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/numbers.js'</span><span class="token punctuation">;</span>

Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
Numbers<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="weighted-averaging">Weighted averaging</h3><p>Rather than give all recorded values equal prominence in the average calculation, it's possible to weight them. For example, giving higher priority to more recent values.</p><p>ixfx's <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.averageWeighted.html"><code>Arrays.averageWeighted</code></a> can help with this.</p><p>A simple approach is to use a function which calculates the weighting of a given element. Here we can use one of the <a href="../../modulation/easing/">easing functions</a>.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/collections.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/modulation.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Gaussian will weigh middle elements most heavily</span>
<span class="token comment">// Yields: 25</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// quadIn will weigh most recent (end-of-array) elements most heavily</span>
<span class="token comment">// Yields: 97</span>
Arrays<span class="token punctuation">.</span><span class="token function">averageWeighted</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">quadIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="averaging-streams">Averaging streams</h2><p>When averaging a stream, we don't have the 'full picture' of all the data to average perfectly. This is because it's infeasible to keep a store of all data and it's not certain what data will arrive next. It's similiar issue we face when <a href="../normalising/#stream">normalising streams</a>.</p><h3 id="tracker">Tracker</h3><p>Ixfx has several <a href="../trackers/">'trackers'</a>, intended for monitoring the range of data in a stream. By default they don't record each data point, but rather keep a running total and average.</p><p>Here's the <a href="https://clinth.github.io/ixfx/functions/Data.numberTracker.html"><code>numberTracker</code></a> illustrated:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add some random values</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get average</span>
t<span class="token punctuation">.</span>avg</code></pre><p>These trackers are not great at adapting to temporal changes because by default they track the global average of stream (or at least, the data seen thus far). Typically we'd want to only consider the average of <em>recent</em> data, which is where <a href="#moving-average">moving averages</a> are better.</p><p>It is, however, possible to set some options on the tracker to automatically reset itself after <em>n</em> samples, or to reset it yourself.</p><h3 id="moving-average">Moving average</h3><p>The moving averaging technique (AKA <em>moving</em> or <em>sliding window</em>) keeps track of the last <em>n</em> values for the purposes of averaging. This way we only record a small chunk of recent data rather than attempt to store everything.</p><p>When using moving averaging, a key tuning parameter is the size of the 'window': how many items to keep track of. A larger window size will smooth noise at the expense of being less responsive to change. A smaller window size will more noisy but more accurately track the current data.</p><p>This tuning also needs to be done with respect to speed at which data is added. There's a big difference to a window size of 5 items if you're adding 100 items per millisecond versus one item per minute.</p><p><a href="https://clinth.github.io/ixfx/functions/Data.movingAverage.html"><code>movingAverage</code></a> takes a parameter for how many items to track. <code>movingAverage</code> returns an object to add or clear the moving average.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>movingAverage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Keep track of the last 10 items</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverage</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Each call to \`add\` returns the current average</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7.5</span></code></pre><p>Use <code>clear</code> to clear data, or <code>compute</code> to calculate the average without adding new data</p><pre class="language-js"><code class="language-js">ma<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields current average</span>
ma<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="exponential-weighted-moving-average">Exponential weighted moving average</h3><p>An alternative approach is an <em>exponential weighted moving average</em>, which can calculate an average without storing data samples. This is a common technique on microcontrollers.</p><p>It's implemented as <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageLight.html"><code>movingAverageLight</code></a>. Instead of passing the number of samples to record, a <em>scale</em> parameter is used. 1 means the latest value is used - that is, no averaging. Higher numbers blend in the latest value with increasingly lower priority. 3 is the default scaling if the parameter is not provided.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageLight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Init with a scaling of 3</span>
<span class="token keyword">const</span> ma <span class="token operator">=</span> <span class="token function">movingAverageLight</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
ma<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.5</span></code></pre><h3 id="moving-average-timed">Moving average timed</h3><p>Consider calculating the average speed of the pointer. Pointer events are tracked, with the distance travelled and elapsed time used to calculate the speed at that instant. The speed is then averaged via <code>movingAverageLight()</code>. This is fine while the pointer is moving, but if the pointer stops, there won't be any events. Consequentially, the average won't drop down to zero speed over time because the events are no longer flowing.</p><p>One solution to this is using <a href="https://clinth.github.io/ixfx/functions/Data.movingAverageTimed.html"><code>Data.movingAverageTimed</code></a>. This takes in an update rate (milliseconds) and a default value that gets added to the averager. It's based on <code>movingAverageLight</code>, so the same <em>scale</em> parameter is there too.</p><p>If the interval has elapsed since the last value is added to the averager, it will automatically add the default value. In the case of calculating speed, we might want to automatically add <code>0</code>, since the speed must be zero if there are no events.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverageTimed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token comment">// movingAverageTimed(updateRateMs, value, scaling): MovingAverage</span>

<span class="token comment">// Init averager</span>
<span class="token keyword">const</span> avgSpeed <span class="token operator">=</span> <span class="token function">movingAverageTimed</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Based on pointermove, calculate a speed and add to averager</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token function">calcSpeed</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  avgSpeed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="case-averaging-complex-data">Case: Averaging complex data</h2><p>Let us say you want to average more complex data over time, say a rectangle from a machine learning library. The rectangle has <em>x</em>, <em>y</em>, <em>width</em> and <em>height</em> properties, and each of these we want to average seperately.</p><p>To do so, we initialise a moving average for each property, and when new data comes in, update the approprate averager. A cumulative average rectangle is kept track of as well, so elsewhere in the code we can always read the current average.</p><p>ixfx's <code>mapObject</code> is used to map each property of an empty rectangle (x, y, width &#x26; height) to a new moving averager. In this way, <code>movingAverageRect</code> becomes a set of automatically-generated moving averagers.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> movingAverage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Rects <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/geometry.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/util.js'</span><span class="token punctuation">;</span>

<span class="token comment">// How many samples to average over for each property</span>
<span class="token keyword">const</span> samples <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// Create an average for each of the rect's properties (x, y, width, height)</span>
<span class="token keyword">const</span> movingAverageRect <span class="token operator">=</span> <span class="token function">mapObject</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span>empty<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token function">movingAverage</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Continually-updated average rectangle</span>
<span class="token keyword">let</span> averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Add a new rectangle to be averaged</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> movingAverageRect<span class="token punctuation">;</span>

  <span class="token comment">// Add each of the properties of the input rectangle 'r'</span>
  <span class="token comment">// to separate averagers. We then collect all the averages</span>
  <span class="token comment">// in 'averageRect'</span>
  averageRect <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> width<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> height<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Add 20 random rectangles</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>Rects<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// This is the average after 20 random rects...</span>
averageRect<span class="token punctuation">;</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Moving average pointer", "src": "/data/moving-average-pointer/" })}` })}`;
});

export { $$metadata, $$Averaging as default, frontmatter, metadata };
