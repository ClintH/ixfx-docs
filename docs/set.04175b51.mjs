import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

const metadata = { "headers": [{ "depth": 2, "slug": "immutable-set", "text": "Immutable set" }, { "depth": 1, "slug": "mutable-set", "text": "Mutable set" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n\n\nA set only keeps unique items, useful when you want to ignore duplicates. Adding _apples, oranges, grapes, pears, oranges_ will result in the set: _apples, oranges, grapes, pears_.\n\nJavascript has a built-in [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object. \n\nWith primitive data types, it works as expected:\n```js\nconst s = new Set();\ns.add(`apples`);\ns.add(`oranges`);\ns.add(`apples`);\n// Set contains: `apples`, `oranges`\ns.has(`apples`); // True\n```\n\nHowever a problem with the in-built Set is that it compares objects based on _reference_ rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.\n\n```js\nconst s = new Set();\ns.add({ fruit:`apples` });\ns.add({ fruit:`oranges` });\ns.add({ fruit:`apples` });\n// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }\ns.has({ fruit:`apples` }); // False\n```\n\nIn the above example, we get some surprises: the set seems to have duplicates, and `has` returns false for data it contains.\n\nAs an alternative, ixfx has an [immutable](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html) and mutable set that can compare by value rather than reference.\n\n## Immutable set\n\nThe key functions for a set are: `add()`, `has()`, `delete()` and iterating over values with `values()`.\n\nCreate an [immutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html), and add three items. Any function that changes the set returns the changed copy, so when we call `add()`, we keep track of the returned changed set.\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nlet s1 = Sets.immutable();\ns1 = s1.add(`apples`, `oranges`, `apples`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nlet s2 = Sets.immutable(v => v.fruit);\ns2 = s2.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns2.has({ fruit:`apples` }); // True\n```\n\nTo loop over all the values of the set, use the `values` iterator:\n```js\nfor (const v of s2.values() {\n\n})\n```\n\nOr make a copy as an array:\n```js\ns2.toArray();\n```\n\nItems can be removed by value as well:\n```js\ns2 = s2.delete({ fruit: `oranges` })l\n```\n\n# Mutable set\n\nThe [mutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html) has the same basic operations as the immutable set: `add()`, `has()`, `delete()` and `values()`. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.\n\n```js\nconst s = Sets.mutable();\ns.add(`apples`, `oranges`, `apples`);\n// Contains: `apples`, `oranges`\ns.has(`apples`); // True\ns.remove(`oranges`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nconst s = Sets.mutable(v => v.fruit);\ns.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns.has({ fruit:`apples` }); // True\n```\n\nTo listen for events:\n```js\ns.addEventListener(`add`, evt => {\n  const { value, updated } = evt;\n  // value refers to the thing added\n  // updated: true if item is brand new, false if it\'s replacing something with same value\n});\n\ns.addEventListener(`delete`, evt => {\n  // evt refers to the thing being deleted\n});\n\ns.addEventListener(`clear`, () => {\n  // when set has been cleared\n})\n```', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<p>A set only keeps unique items, useful when you want to ignore duplicates. Adding <em>apples, oranges, grapes, pears, oranges</em> will result in the set: <em>apples, oranges, grapes, pears</em>.</p>\n<p>Javascript has a built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> object.</p>\n<p>With primitive data types, it works as expected:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set contains: `apples`, `oranges`</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>However a problem with the in-built Set is that it compares objects based on <em>reference</em> rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// False</span></code></pre>\n<p>In the above example, we get some surprises: the set seems to have duplicates, and <code is:raw>has</code> returns false for data it contains.</p>\n<p>As an alternative, ixfx has an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable</a> and mutable set that can compare by value rather than reference.</p>\n<h2 id="immutable-set">Immutable set</h2>\n<p>The key functions for a set are: <code is:raw>add()</code>, <code is:raw>has()</code>, <code is:raw>delete()</code> and iterating over values with <code is:raw>values()</code>.</p>\n<p>Create an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable set</a>, and add three items. Any function that changes the set returns the changed copy, so when we call <code is:raw>add()</code>, we keep track of the returned changed set.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">let</span> s1 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To compare objects by value, it uses <code is:raw>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span>\ns2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>To loop over all the values of the set, use the <code is:raw>values</code> iterator:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> s2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>Or make a copy as an array:</p>\n<pre class="language-js"><code is:raw class="language-js">s2<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Items can be removed by value as well:</p>\n<pre class="language-js"><code is:raw class="language-js">s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>l</code></pre>\n<h1 id="mutable-set">Mutable set</h1>\n<p>The <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">mutable set</a> has the same basic operations as the immutable set: <code is:raw>add()</code>, <code is:raw>has()</code>, <code is:raw>delete()</code> and <code is:raw>values()</code>. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: `apples`, `oranges`</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span>\ns<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To compare objects by value, it uses <code is:raw>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>To listen for events:</p>\n<pre class="language-js"><code is:raw class="language-js">s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">add</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> updated <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>\n  <span class="token comment">// value refers to the thing added</span>\n  <span class="token comment">// updated: true if item is brand new, false if it\'s replacing something with same value</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ns<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">delete</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// evt refers to the thing being deleted</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ns<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">clear</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// when set has been cleared</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>' };
const frontmatter = { "title": "Set", "astro": { "headers": [{ "depth": 2, "slug": "immutable-set", "text": "Immutable set" }, { "depth": 1, "slug": "mutable-set", "text": "Mutable set" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n\n\nA set only keeps unique items, useful when you want to ignore duplicates. Adding _apples, oranges, grapes, pears, oranges_ will result in the set: _apples, oranges, grapes, pears_.\n\nJavascript has a built-in [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object. \n\nWith primitive data types, it works as expected:\n```js\nconst s = new Set();\ns.add(`apples`);\ns.add(`oranges`);\ns.add(`apples`);\n// Set contains: `apples`, `oranges`\ns.has(`apples`); // True\n```\n\nHowever a problem with the in-built Set is that it compares objects based on _reference_ rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.\n\n```js\nconst s = new Set();\ns.add({ fruit:`apples` });\ns.add({ fruit:`oranges` });\ns.add({ fruit:`apples` });\n// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }\ns.has({ fruit:`apples` }); // False\n```\n\nIn the above example, we get some surprises: the set seems to have duplicates, and `has` returns false for data it contains.\n\nAs an alternative, ixfx has an [immutable](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html) and mutable set that can compare by value rather than reference.\n\n## Immutable set\n\nThe key functions for a set are: `add()`, `has()`, `delete()` and iterating over values with `values()`.\n\nCreate an [immutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html), and add three items. Any function that changes the set returns the changed copy, so when we call `add()`, we keep track of the returned changed set.\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nlet s1 = Sets.immutable();\ns1 = s1.add(`apples`, `oranges`, `apples`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nlet s2 = Sets.immutable(v => v.fruit);\ns2 = s2.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns2.has({ fruit:`apples` }); // True\n```\n\nTo loop over all the values of the set, use the `values` iterator:\n```js\nfor (const v of s2.values() {\n\n})\n```\n\nOr make a copy as an array:\n```js\ns2.toArray();\n```\n\nItems can be removed by value as well:\n```js\ns2 = s2.delete({ fruit: `oranges` })l\n```\n\n# Mutable set\n\nThe [mutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html) has the same basic operations as the immutable set: `add()`, `has()`, `delete()` and `values()`. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.\n\n```js\nconst s = Sets.mutable();\ns.add(`apples`, `oranges`, `apples`);\n// Contains: `apples`, `oranges`\ns.has(`apples`); // True\ns.remove(`oranges`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nconst s = Sets.mutable(v => v.fruit);\ns.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns.has({ fruit:`apples` }); // True\n```\n\nTo listen for events:\n```js\ns.addEventListener(`add`, evt => {\n  const { value, updated } = evt;\n  // value refers to the thing added\n  // updated: true if item is brand new, false if it\'s replacing something with same value\n});\n\ns.addEventListener(`delete`, evt => {\n  // evt refers to the thing being deleted\n});\n\ns.addEventListener(`clear`, () => {\n  // when set has been cleared\n})\n```', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<p>A set only keeps unique items, useful when you want to ignore duplicates. Adding <em>apples, oranges, grapes, pears, oranges</em> will result in the set: <em>apples, oranges, grapes, pears</em>.</p>\n<p>Javascript has a built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> object.</p>\n<p>With primitive data types, it works as expected:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set contains: `apples`, `oranges`</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>However a problem with the in-built Set is that it compares objects based on <em>reference</em> rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// False</span></code></pre>\n<p>In the above example, we get some surprises: the set seems to have duplicates, and <code is:raw>has</code> returns false for data it contains.</p>\n<p>As an alternative, ixfx has an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable</a> and mutable set that can compare by value rather than reference.</p>\n<h2 id="immutable-set">Immutable set</h2>\n<p>The key functions for a set are: <code is:raw>add()</code>, <code is:raw>has()</code>, <code is:raw>delete()</code> and iterating over values with <code is:raw>values()</code>.</p>\n<p>Create an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable set</a>, and add three items. Any function that changes the set returns the changed copy, so when we call <code is:raw>add()</code>, we keep track of the returned changed set.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">let</span> s1 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To compare objects by value, it uses <code is:raw>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span>\ns2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>To loop over all the values of the set, use the <code is:raw>values</code> iterator:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> s2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>Or make a copy as an array:</p>\n<pre class="language-js"><code is:raw class="language-js">s2<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Items can be removed by value as well:</p>\n<pre class="language-js"><code is:raw class="language-js">s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>l</code></pre>\n<h1 id="mutable-set">Mutable set</h1>\n<p>The <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">mutable set</a> has the same basic operations as the immutable set: <code is:raw>add()</code>, <code is:raw>has()</code>, <code is:raw>delete()</code> and <code is:raw>values()</code>. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: `apples`, `oranges`</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span>\ns<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To compare objects by value, it uses <code is:raw>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>To listen for events:</p>\n<pre class="language-js"><code is:raw class="language-js">s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">add</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> updated <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>\n  <span class="token comment">// value refers to the thing added</span>\n  <span class="token comment">// updated: true if item is brand new, false if it\'s replacing something with same value</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ns<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">delete</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// evt refers to the thing being deleted</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ns<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">clear</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// when set has been cleared</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/data/collections/set.md", { modules: [{ module: $$module1, specifier: "../../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/data/collections/set.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Set = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Set;
  const $$content = { "title": "Set", "astro": { "headers": [{ "depth": 2, "slug": "immutable-set", "text": "Immutable set" }, { "depth": 1, "slug": "mutable-set", "text": "Mutable set" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n\n\nA set only keeps unique items, useful when you want to ignore duplicates. Adding _apples, oranges, grapes, pears, oranges_ will result in the set: _apples, oranges, grapes, pears_.\n\nJavascript has a built-in [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) object. \n\nWith primitive data types, it works as expected:\n```js\nconst s = new Set();\ns.add(`apples`);\ns.add(`oranges`);\ns.add(`apples`);\n// Set contains: `apples`, `oranges`\ns.has(`apples`); // True\n```\n\nHowever a problem with the in-built Set is that it compares objects based on _reference_ rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.\n\n```js\nconst s = new Set();\ns.add({ fruit:`apples` });\ns.add({ fruit:`oranges` });\ns.add({ fruit:`apples` });\n// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }\ns.has({ fruit:`apples` }); // False\n```\n\nIn the above example, we get some surprises: the set seems to have duplicates, and `has` returns false for data it contains.\n\nAs an alternative, ixfx has an [immutable](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html) and mutable set that can compare by value rather than reference.\n\n## Immutable set\n\nThe key functions for a set are: `add()`, `has()`, `delete()` and iterating over values with `values()`.\n\nCreate an [immutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html), and add three items. Any function that changes the set returns the changed copy, so when we call `add()`, we keep track of the returned changed set.\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nlet s1 = Sets.immutable();\ns1 = s1.add(`apples`, `oranges`, `apples`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nlet s2 = Sets.immutable(v => v.fruit);\ns2 = s2.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns2.has({ fruit:`apples` }); // True\n```\n\nTo loop over all the values of the set, use the `values` iterator:\n```js\nfor (const v of s2.values() {\n\n})\n```\n\nOr make a copy as an array:\n```js\ns2.toArray();\n```\n\nItems can be removed by value as well:\n```js\ns2 = s2.delete({ fruit: `oranges` })l\n```\n\n# Mutable set\n\nThe [mutable set](https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html) has the same basic operations as the immutable set: `add()`, `has()`, `delete()` and `values()`. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.\n\n```js\nconst s = Sets.mutable();\ns.add(`apples`, `oranges`, `apples`);\n// Contains: `apples`, `oranges`\ns.has(`apples`); // True\ns.remove(`oranges`);\n```\n\nTo compare objects by value, it uses `JSON.stringify` by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:\n\n```js\nimport { Sets } from "https://unpkg.com/ixfx/dist/collections.js"\nconst s = Sets.mutable(v => v.fruit);\ns.add({ fruit: `apples` }, { fruit: `oranges`}, { fruit: `apples` });\n// Contains: { fruit: `apples` }, { fruit: `oranges` }\ns.has({ fruit:`apples` }); // True\n```\n\nTo listen for events:\n```js\ns.addEventListener(`add`, evt => {\n  const { value, updated } = evt;\n  // value refers to the thing added\n  // updated: true if item is brand new, false if it\'s replacing something with same value\n});\n\ns.addEventListener(`delete`, evt => {\n  // evt refers to the thing being deleted\n});\n\ns.addEventListener(`clear`, () => {\n  // when set has been cleared\n})\n```', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>\n<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<p>A set only keeps unique items, useful when you want to ignore duplicates. Adding <em>apples, oranges, grapes, pears, oranges</em> will result in the set: <em>apples, oranges, grapes, pears</em>.</p>\n<p>Javascript has a built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> object.</p>\n<p>With primitive data types, it works as expected:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set contains: `apples`, `oranges`</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>However a problem with the in-built Set is that it compares objects based on <em>reference</em> rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// False</span></code></pre>\n<p>In the above example, we get some surprises: the set seems to have duplicates, and <code is:raw>has</code> returns false for data it contains.</p>\n<p>As an alternative, ixfx has an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable</a> and mutable set that can compare by value rather than reference.</p>\n<h2 id="immutable-set">Immutable set</h2>\n<p>The key functions for a set are: <code is:raw>add()</code>, <code is:raw>has()</code>, <code is:raw>delete()</code> and iterating over values with <code is:raw>values()</code>.</p>\n<p>Create an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable set</a>, and add three items. Any function that changes the set returns the changed copy, so when we call <code is:raw>add()</code>, we keep track of the returned changed set.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">let</span> s1 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To compare objects by value, it uses <code is:raw>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">let</span> s2 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span>\ns2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>To loop over all the values of the set, use the <code is:raw>values</code> iterator:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> s2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>Or make a copy as an array:</p>\n<pre class="language-js"><code is:raw class="language-js">s2<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Items can be removed by value as well:</p>\n<pre class="language-js"><code is:raw class="language-js">s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>l</code></pre>\n<h1 id="mutable-set">Mutable set</h1>\n<p>The <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">mutable set</a> has the same basic operations as the immutable set: <code is:raw>add()</code>, <code is:raw>has()</code>, <code is:raw>delete()</code> and <code is:raw>values()</code>. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: `apples`, `oranges`</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span>\ns<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To compare objects by value, it uses <code is:raw>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n<span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Contains: { fruit: `apples` }, { fruit: `oranges` }</span>\ns<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre>\n<p>To listen for events:</p>\n<pre class="language-js"><code is:raw class="language-js">s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">add</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> updated <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>\n  <span class="token comment">// value refers to the thing added</span>\n  <span class="token comment">// updated: true if item is brand new, false if it\'s replacing something with same value</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ns<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">delete</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// evt refers to the thing being deleted</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ns<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">clear</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// when set has been cleared</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Sets.html">Collections.Sets module</a></li>
<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">Immutable set</a></li>
<li><a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">Mutable set</a></li>
<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>
</ul></div><p>A set only keeps unique items, useful when you want to ignore duplicates. Adding <em>apples, oranges, grapes, pears, oranges</em> will result in the set: <em>apples, oranges, grapes, pears</em>.</p><p>Javascript has a built-in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> object.</p><p>With primitive data types, it works as expected:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set contains: \`apples\`, \`oranges\`</span>
s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre><p>However a problem with the in-built Set is that it compares objects based on <em>reference</em> rather than value when it comes to objects. This is further a problem when we use immutable objects, because the reference is changing all the time.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set contains: { fruit:"apples" }, { fruit:"oranges" }, { fruit :"apples" }</span>
s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// False</span></code></pre><p>In the above example, we get some surprises: the set seems to have duplicates, and <code>has</code> returns false for data it contains.</p><p>As an alternative, ixfx has an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable</a> and mutable set that can compare by value rather than reference.</p><h2 id="immutable-set">Immutable set</h2><p>The key functions for a set are: <code>add()</code>, <code>has()</code>, <code>delete()</code> and iterating over values with <code>values()</code>.</p><p>Create an <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetImmutable.html">immutable set</a>, and add three items. Any function that changes the set returns the changed copy, so when we call <code>add()</code>, we keep track of the returned changed set.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>To compare objects by value, it uses <code>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Contains: { fruit: \`apples\` }, { fruit: \`oranges\` }</span>
s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre><p>To loop over all the values of the set, use the <code>values</code> iterator:</p><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> s2<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Or make a copy as an array:</p><pre class="language-js"><code class="language-js">s2<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Items can be removed by value as well:</p><pre class="language-js"><code class="language-js">s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span>l</code></pre><h1 id="mutable-set">Mutable set</h1><p>The <a href="https://clinth.github.io/ixfx/interfaces/Collections.Sets.ISetMutable.html">mutable set</a> has the same basic operations as the immutable set: <code>add()</code>, <code>has()</code>, <code>delete()</code> and <code>values()</code>. However here the set itself changes (as with the in-built Javascript Set). It also provides events for listening for changes on the set.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Contains: \`apples\`, \`oranges\`</span>
s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span>
s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>To compare objects by value, it uses <code>JSON.stringify</code> by default to make a representation of the object. This can work fine for simple objects, but in complicated cases, you can provide a function when creating the set:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> Sets<span class="token punctuation">.</span><span class="token function">mutable</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Contains: { fruit: \`apples\` }, { fruit: \`oranges\` }</span>
s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fruit</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span></code></pre><p>To listen for events:</p><pre class="language-js"><code class="language-js">s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">add</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> updated <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>
  <span class="token comment">// value refers to the thing added</span>
  <span class="token comment">// updated: true if item is brand new, false if it's replacing something with same value</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">delete</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// evt refers to the thing being deleted</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

s<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">clear</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// when set has been cleared</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>` })}`;
});

export { $$metadata, $$Set as default, frontmatter, metadata };
