import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import { $ as $$module3 } from './StateMachinePlay.fba4d668.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 3, "slug": "demo", "text": "Demo" }], "source": "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html\">StateMachine.driver</a></li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions\">Example code</a>, <a href=\"https://clinth.github.io/ixfx-demos/flow/statemachine-regions/\">Online demo</a></li>\n<li><a href=\"https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0\">Glitch example</a></li>\n</ul></div>\n\nWhen using [state machines](../stateMachine/), it's common to have a big `switch` statement (or lots of `if`s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the \n[`StateMachine.driver`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html) is provided.\n\nWith it, you set up _state handlers_ for different states and guiding the machine to subsequent states. \n\nEach handler has an `if` field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.\n\nThe other part of the handler is `then` field. At its simplest, it is an object that tells what state to transition to, for example:\n```js\nconst handlers = [{\n  if: `sleeping`, // If we're in the 'sleeping' state\n  then: { next: 'walking' } // Go to 'walking' state\n}]\n```\n\nNote: The use of `if` and `then` for the handlers shouldn't be mistaken for regular Javascript `if .. else` control structures.\n\nThe `then` field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under `then` don't have to return a value - they could just be things you want to run when the state machine is in that state.\n\n```js\nconst handlers = [{\n  if: `walking`,  // If we're in the 'walking' state\n  then: [\n    () => {  // Randomly either go to 'resting' or 'running' state next\n      if (Math.random() > 0.5) return { next: 'resting' }\n      else return { next: 'running' }\n    }\n  ]\n}];\n```\n\nOnce we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.\n\n```js\n// Set up driver (note the use of await for both lines)\nconst driver = await StateMachine.driver(states, handlers);\n```\n\nAnd then, perhaps in a timing-based loop, call `run()`, which will execute a state handler for the current state.\n\n```js\n// Call .run every second\nsetInterval(async () => {\n  await driver.run();\n}, 1000);\n```\n\nHere's a complete example:\n\n```js\n// States\nconst states = {\n  sleeping: 'waking',\n  waking: ['resting','sleeping'],\n  resting: ['sleeping', 'walking'],\n  walking: ['running', 'resting'],\n  running: ['walking']\n};\n\nconst handlers = [\n  { \n    // If we're in the 'sleeping' state, move to next state\n    if: 'sleeping',\n    then: { next: true }\n  },\n  { \n    // If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state\n    if: 'waking',\n    then: [\n      () => {\n        if (Math.random() > 0.5) {\n          return { next: 'resting' }\n        } else {\n          return { next: 'sleeping' }\n        }\n      }\n    ]\n  }\n];\n\n// Set up driver\nconst driver = await StateMachine.driver(states, handlers);\n```\n\nOnce you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.\n```js\ndriver.run();\n```\n\nIf you use asynchronous event handlers, call `await driver.run()` instead.\n\nSome other things to do with the driver:\n```js\n// Check current state\ndriver.getValue(); // eg. 'resting'\n\n// Manually transition state\ndriver.to('walking');\n```\n\nSo far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use `{ next: true }` to transition to next available state. An alternative is `{ reset: true }`. When that is returned, the machine goes back to its initial state.\n\nEach result can also have a `score` field. This is only useful if you have several results under `then`. By default, the highest scoring result determines what happens. \n\nWith this in mind, we can re-write the earlier example, assigning random scores for each possible next state:\n\n```js\n...\n  { \n    if: 'waking',\n    then: [\n      // Two functions, each returns a result with a random score each time they are executed\n      () =>  { score: Math.random(), next: 'resting' },\n      () =>  { score: Math.random(), next: 'sleeping' }\n    ]\n  }\n...\n```\n\nIn practice you might want to weight the random values so one choice is more or less likely than another. See [Random](../../gen/random/) for more on that.\n\nEach handler also has an optional `resultChoice` field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use `resultChoice: 'random'` to evenly pick between choices. With that enabled, we no longer need scores.\n\n```js\n...\n  {\n    if: 'waking',\n    resultChoice: 'random',\n    then: [\n      // Because of resultChoice 'random', the driver\n      // will randomly pick one of these options when in the 'waking' state\n      { next: 'resting' },\n      { next: 'sleeping' }\n    ]\n  }\n...\n```\n\nWhen calling `driver.run()`, a result is returned with some status information, if that's needed:\n\n```js\nconst result = await driver.run();\nresult.value;   // state at the end of .run()\nresult.visited; // string array of unique states that have been visited\nresult.machine; // original machine description\n```\n\n### Demo\n\nIn the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.\n\n<demo-element title=\"State machine driver\" src=\"/flow/statemachine-agent/\" />\n", "html": `<script type="module" hoist>
import '/src/components/ReplPad';
<\/script>
<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html">StateMachine.driver</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions">Example code</a>, <a href="https://clinth.github.io/ixfx-demos/flow/statemachine-regions/">Online demo</a></li>
<li><a href="https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0">Glitch example</a></li>
</ul></div>
<p>When using <a href="../stateMachine/">state machines</a>, it's common to have a big <code is:raw>switch</code> statement (or lots of <code is:raw>if</code>s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the
<a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html"><code is:raw>StateMachine.driver</code></a> is provided.</p>
<p>With it, you set up <em>state handlers</em> for different states and guiding the machine to subsequent states.</p>
<p>Each handler has an <code is:raw>if</code> field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.</p>
<p>The other part of the handler is <code is:raw>then</code> field. At its simplest, it is an object that tells what state to transition to, for example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sleeping</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// If we're in the 'sleeping' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'walking'</span> <span class="token punctuation">}</span> <span class="token comment">// Go to 'walking' state</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre>
<p>Note: The use of <code is:raw>if</code> and <code is:raw>then</code> for the handlers shouldn't be mistaken for regular Javascript <code is:raw>if .. else</code> control structures.</p>
<p>The <code is:raw>then</code> field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under <code is:raw>then</code> don't have to return a value - they could just be things you want to run when the state machine is in that state.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">walking</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>  <span class="token comment">// If we're in the 'walking' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token comment">// Randomly either go to 'resting' or 'running' state next</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'running'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Once we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up driver (note the use of await for both lines)</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>And then, perhaps in a timing-based loop, call <code is:raw>run()</code>, which will execute a state handler for the current state.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Call .run every second</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Here's a complete example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// States</span>
<span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">sleeping</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">waking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resting'</span><span class="token punctuation">,</span><span class="token string">'sleeping'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resting</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'sleeping'</span><span class="token punctuation">,</span> <span class="token string">'walking'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">walking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'running'</span><span class="token punctuation">,</span> <span class="token string">'resting'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">running</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'walking'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'sleeping' state, move to next state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'sleeping'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Set up driver</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Once you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.</p>
<pre class="language-js"><code is:raw class="language-js">driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you use asynchronous event handlers, call <code is:raw>await driver.run()</code> instead.</p>
<p>Some other things to do with the driver:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Check current state</span>
driver<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg. 'resting'</span>

<span class="token comment">// Manually transition state</span>
driver<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'walking'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>So far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use <code is:raw>{ next: true }</code> to transition to next available state. An alternative is <code is:raw>{ reset: true }</code>. When that is returned, the machine goes back to its initial state.</p>
<p>Each result can also have a <code is:raw>score</code> field. This is only useful if you have several results under <code is:raw>then</code>. By default, the highest scoring result determines what happens.</p>
<p>With this in mind, we can re-write the earlier example, assigning random scores for each possible next state:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Two functions, each returns a result with a random score each time they are executed</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre>
<p>In practice you might want to weight the random values so one choice is more or less likely than another. See <a href="../../gen/random/">Random</a> for more on that.</p>
<p>Each handler also has an optional <code is:raw>resultChoice</code> field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use <code is:raw>resultChoice: 'random'</code> to evenly pick between choices. With that enabled, we no longer need scores.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resultChoice</span><span class="token operator">:</span> <span class="token string">'random'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Because of resultChoice 'random', the driver</span>
      <span class="token comment">// will randomly pick one of these options when in the 'waking' state</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre>
<p>When calling <code is:raw>driver.run()</code>, a result is returned with some status information, if that's needed:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token comment">// state at the end of .run()</span>
result<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// string array of unique states that have been visited</span>
result<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> <span class="token comment">// original machine description</span></code></pre>
<h3 id="demo">Demo</h3>
<p>In the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.</p>
<demo-element title="State machine driver" src="/flow/statemachine-agent/" />` };
const frontmatter = { "title": "State Machine Driver", "astro": { "headers": [{ "depth": 3, "slug": "demo", "text": "Demo" }], "source": "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html\">StateMachine.driver</a></li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions\">Example code</a>, <a href=\"https://clinth.github.io/ixfx-demos/flow/statemachine-regions/\">Online demo</a></li>\n<li><a href=\"https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0\">Glitch example</a></li>\n</ul></div>\n\nWhen using [state machines](../stateMachine/), it's common to have a big `switch` statement (or lots of `if`s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the \n[`StateMachine.driver`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html) is provided.\n\nWith it, you set up _state handlers_ for different states and guiding the machine to subsequent states. \n\nEach handler has an `if` field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.\n\nThe other part of the handler is `then` field. At its simplest, it is an object that tells what state to transition to, for example:\n```js\nconst handlers = [{\n  if: `sleeping`, // If we're in the 'sleeping' state\n  then: { next: 'walking' } // Go to 'walking' state\n}]\n```\n\nNote: The use of `if` and `then` for the handlers shouldn't be mistaken for regular Javascript `if .. else` control structures.\n\nThe `then` field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under `then` don't have to return a value - they could just be things you want to run when the state machine is in that state.\n\n```js\nconst handlers = [{\n  if: `walking`,  // If we're in the 'walking' state\n  then: [\n    () => {  // Randomly either go to 'resting' or 'running' state next\n      if (Math.random() > 0.5) return { next: 'resting' }\n      else return { next: 'running' }\n    }\n  ]\n}];\n```\n\nOnce we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.\n\n```js\n// Set up driver (note the use of await for both lines)\nconst driver = await StateMachine.driver(states, handlers);\n```\n\nAnd then, perhaps in a timing-based loop, call `run()`, which will execute a state handler for the current state.\n\n```js\n// Call .run every second\nsetInterval(async () => {\n  await driver.run();\n}, 1000);\n```\n\nHere's a complete example:\n\n```js\n// States\nconst states = {\n  sleeping: 'waking',\n  waking: ['resting','sleeping'],\n  resting: ['sleeping', 'walking'],\n  walking: ['running', 'resting'],\n  running: ['walking']\n};\n\nconst handlers = [\n  { \n    // If we're in the 'sleeping' state, move to next state\n    if: 'sleeping',\n    then: { next: true }\n  },\n  { \n    // If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state\n    if: 'waking',\n    then: [\n      () => {\n        if (Math.random() > 0.5) {\n          return { next: 'resting' }\n        } else {\n          return { next: 'sleeping' }\n        }\n      }\n    ]\n  }\n];\n\n// Set up driver\nconst driver = await StateMachine.driver(states, handlers);\n```\n\nOnce you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.\n```js\ndriver.run();\n```\n\nIf you use asynchronous event handlers, call `await driver.run()` instead.\n\nSome other things to do with the driver:\n```js\n// Check current state\ndriver.getValue(); // eg. 'resting'\n\n// Manually transition state\ndriver.to('walking');\n```\n\nSo far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use `{ next: true }` to transition to next available state. An alternative is `{ reset: true }`. When that is returned, the machine goes back to its initial state.\n\nEach result can also have a `score` field. This is only useful if you have several results under `then`. By default, the highest scoring result determines what happens. \n\nWith this in mind, we can re-write the earlier example, assigning random scores for each possible next state:\n\n```js\n...\n  { \n    if: 'waking',\n    then: [\n      // Two functions, each returns a result with a random score each time they are executed\n      () =>  { score: Math.random(), next: 'resting' },\n      () =>  { score: Math.random(), next: 'sleeping' }\n    ]\n  }\n...\n```\n\nIn practice you might want to weight the random values so one choice is more or less likely than another. See [Random](../../gen/random/) for more on that.\n\nEach handler also has an optional `resultChoice` field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use `resultChoice: 'random'` to evenly pick between choices. With that enabled, we no longer need scores.\n\n```js\n...\n  {\n    if: 'waking',\n    resultChoice: 'random',\n    then: [\n      // Because of resultChoice 'random', the driver\n      // will randomly pick one of these options when in the 'waking' state\n      { next: 'resting' },\n      { next: 'sleeping' }\n    ]\n  }\n...\n```\n\nWhen calling `driver.run()`, a result is returned with some status information, if that's needed:\n\n```js\nconst result = await driver.run();\nresult.value;   // state at the end of .run()\nresult.visited; // string array of unique states that have been visited\nresult.machine; // original machine description\n```\n\n### Demo\n\nIn the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.\n\n<demo-element title=\"State machine driver\" src=\"/flow/statemachine-agent/\" />\n", "html": `<script type="module" hoist>
import '/src/components/ReplPad';
<\/script>
<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html">StateMachine.driver</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions">Example code</a>, <a href="https://clinth.github.io/ixfx-demos/flow/statemachine-regions/">Online demo</a></li>
<li><a href="https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0">Glitch example</a></li>
</ul></div>
<p>When using <a href="../stateMachine/">state machines</a>, it's common to have a big <code is:raw>switch</code> statement (or lots of <code is:raw>if</code>s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the
<a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html"><code is:raw>StateMachine.driver</code></a> is provided.</p>
<p>With it, you set up <em>state handlers</em> for different states and guiding the machine to subsequent states.</p>
<p>Each handler has an <code is:raw>if</code> field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.</p>
<p>The other part of the handler is <code is:raw>then</code> field. At its simplest, it is an object that tells what state to transition to, for example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sleeping</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// If we're in the 'sleeping' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'walking'</span> <span class="token punctuation">}</span> <span class="token comment">// Go to 'walking' state</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre>
<p>Note: The use of <code is:raw>if</code> and <code is:raw>then</code> for the handlers shouldn't be mistaken for regular Javascript <code is:raw>if .. else</code> control structures.</p>
<p>The <code is:raw>then</code> field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under <code is:raw>then</code> don't have to return a value - they could just be things you want to run when the state machine is in that state.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">walking</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>  <span class="token comment">// If we're in the 'walking' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token comment">// Randomly either go to 'resting' or 'running' state next</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'running'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Once we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up driver (note the use of await for both lines)</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>And then, perhaps in a timing-based loop, call <code is:raw>run()</code>, which will execute a state handler for the current state.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Call .run every second</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Here's a complete example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// States</span>
<span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">sleeping</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">waking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resting'</span><span class="token punctuation">,</span><span class="token string">'sleeping'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resting</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'sleeping'</span><span class="token punctuation">,</span> <span class="token string">'walking'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">walking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'running'</span><span class="token punctuation">,</span> <span class="token string">'resting'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">running</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'walking'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'sleeping' state, move to next state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'sleeping'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Set up driver</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Once you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.</p>
<pre class="language-js"><code is:raw class="language-js">driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you use asynchronous event handlers, call <code is:raw>await driver.run()</code> instead.</p>
<p>Some other things to do with the driver:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Check current state</span>
driver<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg. 'resting'</span>

<span class="token comment">// Manually transition state</span>
driver<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'walking'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>So far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use <code is:raw>{ next: true }</code> to transition to next available state. An alternative is <code is:raw>{ reset: true }</code>. When that is returned, the machine goes back to its initial state.</p>
<p>Each result can also have a <code is:raw>score</code> field. This is only useful if you have several results under <code is:raw>then</code>. By default, the highest scoring result determines what happens.</p>
<p>With this in mind, we can re-write the earlier example, assigning random scores for each possible next state:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Two functions, each returns a result with a random score each time they are executed</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre>
<p>In practice you might want to weight the random values so one choice is more or less likely than another. See <a href="../../gen/random/">Random</a> for more on that.</p>
<p>Each handler also has an optional <code is:raw>resultChoice</code> field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use <code is:raw>resultChoice: 'random'</code> to evenly pick between choices. With that enabled, we no longer need scores.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resultChoice</span><span class="token operator">:</span> <span class="token string">'random'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Because of resultChoice 'random', the driver</span>
      <span class="token comment">// will randomly pick one of these options when in the 'waking' state</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre>
<p>When calling <code is:raw>driver.run()</code>, a result is returned with some status information, if that's needed:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token comment">// state at the end of .run()</span>
result<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// string array of unique states that have been visited</span>
result<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> <span class="token comment">// original machine description</span></code></pre>
<h3 id="demo">Demo</h3>
<p>In the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.</p>
<demo-element title="State machine driver" src="/flow/statemachine-agent/" />` } };
const $$metadata = createMetadata("/src/pages/flow/stateMachineDriver.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "/src/components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "./StateMachinePlay.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/flow/stateMachineDriver.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$StateMachineDriver = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$StateMachineDriver;
  const $$content = { "title": "State Machine Driver", "astro": { "headers": [{ "depth": 3, "slug": "demo", "text": "Demo" }], "source": "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html\">StateMachine.driver</a></li>\n<li><a href=\"https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions\">Example code</a>, <a href=\"https://clinth.github.io/ixfx-demos/flow/statemachine-regions/\">Online demo</a></li>\n<li><a href=\"https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0\">Glitch example</a></li>\n</ul></div>\n\nWhen using [state machines](../stateMachine/), it's common to have a big `switch` statement (or lots of `if`s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the \n[`StateMachine.driver`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html) is provided.\n\nWith it, you set up _state handlers_ for different states and guiding the machine to subsequent states. \n\nEach handler has an `if` field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.\n\nThe other part of the handler is `then` field. At its simplest, it is an object that tells what state to transition to, for example:\n```js\nconst handlers = [{\n  if: `sleeping`, // If we're in the 'sleeping' state\n  then: { next: 'walking' } // Go to 'walking' state\n}]\n```\n\nNote: The use of `if` and `then` for the handlers shouldn't be mistaken for regular Javascript `if .. else` control structures.\n\nThe `then` field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under `then` don't have to return a value - they could just be things you want to run when the state machine is in that state.\n\n```js\nconst handlers = [{\n  if: `walking`,  // If we're in the 'walking' state\n  then: [\n    () => {  // Randomly either go to 'resting' or 'running' state next\n      if (Math.random() > 0.5) return { next: 'resting' }\n      else return { next: 'running' }\n    }\n  ]\n}];\n```\n\nOnce we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.\n\n```js\n// Set up driver (note the use of await for both lines)\nconst driver = await StateMachine.driver(states, handlers);\n```\n\nAnd then, perhaps in a timing-based loop, call `run()`, which will execute a state handler for the current state.\n\n```js\n// Call .run every second\nsetInterval(async () => {\n  await driver.run();\n}, 1000);\n```\n\nHere's a complete example:\n\n```js\n// States\nconst states = {\n  sleeping: 'waking',\n  waking: ['resting','sleeping'],\n  resting: ['sleeping', 'walking'],\n  walking: ['running', 'resting'],\n  running: ['walking']\n};\n\nconst handlers = [\n  { \n    // If we're in the 'sleeping' state, move to next state\n    if: 'sleeping',\n    then: { next: true }\n  },\n  { \n    // If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state\n    if: 'waking',\n    then: [\n      () => {\n        if (Math.random() > 0.5) {\n          return { next: 'resting' }\n        } else {\n          return { next: 'sleeping' }\n        }\n      }\n    ]\n  }\n];\n\n// Set up driver\nconst driver = await StateMachine.driver(states, handlers);\n```\n\nOnce you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.\n```js\ndriver.run();\n```\n\nIf you use asynchronous event handlers, call `await driver.run()` instead.\n\nSome other things to do with the driver:\n```js\n// Check current state\ndriver.getValue(); // eg. 'resting'\n\n// Manually transition state\ndriver.to('walking');\n```\n\nSo far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use `{ next: true }` to transition to next available state. An alternative is `{ reset: true }`. When that is returned, the machine goes back to its initial state.\n\nEach result can also have a `score` field. This is only useful if you have several results under `then`. By default, the highest scoring result determines what happens. \n\nWith this in mind, we can re-write the earlier example, assigning random scores for each possible next state:\n\n```js\n...\n  { \n    if: 'waking',\n    then: [\n      // Two functions, each returns a result with a random score each time they are executed\n      () =>  { score: Math.random(), next: 'resting' },\n      () =>  { score: Math.random(), next: 'sleeping' }\n    ]\n  }\n...\n```\n\nIn practice you might want to weight the random values so one choice is more or less likely than another. See [Random](../../gen/random/) for more on that.\n\nEach handler also has an optional `resultChoice` field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use `resultChoice: 'random'` to evenly pick between choices. With that enabled, we no longer need scores.\n\n```js\n...\n  {\n    if: 'waking',\n    resultChoice: 'random',\n    then: [\n      // Because of resultChoice 'random', the driver\n      // will randomly pick one of these options when in the 'waking' state\n      { next: 'resting' },\n      { next: 'sleeping' }\n    ]\n  }\n...\n```\n\nWhen calling `driver.run()`, a result is returned with some status information, if that's needed:\n\n```js\nconst result = await driver.run();\nresult.value;   // state at the end of .run()\nresult.visited; // string array of unique states that have been visited\nresult.machine; // original machine description\n```\n\n### Demo\n\nIn the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.\n\n<demo-element title=\"State machine driver\" src=\"/flow/statemachine-agent/\" />\n", "html": `<script type="module" hoist>
import '/src/components/ReplPad';
<\/script>
<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html">StateMachine.driver</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions">Example code</a>, <a href="https://clinth.github.io/ixfx-demos/flow/statemachine-regions/">Online demo</a></li>
<li><a href="https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0">Glitch example</a></li>
</ul></div>
<p>When using <a href="../stateMachine/">state machines</a>, it's common to have a big <code is:raw>switch</code> statement (or lots of <code is:raw>if</code>s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the
<a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html"><code is:raw>StateMachine.driver</code></a> is provided.</p>
<p>With it, you set up <em>state handlers</em> for different states and guiding the machine to subsequent states.</p>
<p>Each handler has an <code is:raw>if</code> field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.</p>
<p>The other part of the handler is <code is:raw>then</code> field. At its simplest, it is an object that tells what state to transition to, for example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sleeping</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// If we're in the 'sleeping' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'walking'</span> <span class="token punctuation">}</span> <span class="token comment">// Go to 'walking' state</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre>
<p>Note: The use of <code is:raw>if</code> and <code is:raw>then</code> for the handlers shouldn't be mistaken for regular Javascript <code is:raw>if .. else</code> control structures.</p>
<p>The <code is:raw>then</code> field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under <code is:raw>then</code> don't have to return a value - they could just be things you want to run when the state machine is in that state.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">walking</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>  <span class="token comment">// If we're in the 'walking' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token comment">// Randomly either go to 'resting' or 'running' state next</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'running'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>Once we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up driver (note the use of await for both lines)</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>And then, perhaps in a timing-based loop, call <code is:raw>run()</code>, which will execute a state handler for the current state.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Call .run every second</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Here's a complete example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// States</span>
<span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">sleeping</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">waking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resting'</span><span class="token punctuation">,</span><span class="token string">'sleeping'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resting</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'sleeping'</span><span class="token punctuation">,</span> <span class="token string">'walking'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">walking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'running'</span><span class="token punctuation">,</span> <span class="token string">'resting'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">running</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'walking'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'sleeping' state, move to next state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'sleeping'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Set up driver</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Once you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.</p>
<pre class="language-js"><code is:raw class="language-js">driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you use asynchronous event handlers, call <code is:raw>await driver.run()</code> instead.</p>
<p>Some other things to do with the driver:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Check current state</span>
driver<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg. 'resting'</span>

<span class="token comment">// Manually transition state</span>
driver<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'walking'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>So far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use <code is:raw>{ next: true }</code> to transition to next available state. An alternative is <code is:raw>{ reset: true }</code>. When that is returned, the machine goes back to its initial state.</p>
<p>Each result can also have a <code is:raw>score</code> field. This is only useful if you have several results under <code is:raw>then</code>. By default, the highest scoring result determines what happens.</p>
<p>With this in mind, we can re-write the earlier example, assigning random scores for each possible next state:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Two functions, each returns a result with a random score each time they are executed</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre>
<p>In practice you might want to weight the random values so one choice is more or less likely than another. See <a href="../../gen/random/">Random</a> for more on that.</p>
<p>Each handler also has an optional <code is:raw>resultChoice</code> field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use <code is:raw>resultChoice: 'random'</code> to evenly pick between choices. With that enabled, we no longer need scores.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resultChoice</span><span class="token operator">:</span> <span class="token string">'random'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Because of resultChoice 'random', the driver</span>
      <span class="token comment">// will randomly pick one of these options when in the 'waking' state</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre>
<p>When calling <code is:raw>driver.run()</code>, a result is returned with some status information, if that's needed:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token comment">// state at the end of .run()</span>
result<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// string array of unique states that have been visited</span>
result<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> <span class="token comment">// original machine description</span></code></pre>
<h3 id="demo">Demo</h3>
<p>In the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.</p>
<demo-element title="State machine driver" src="/flow/statemachine-agent/" />` } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html">StateMachine.driver</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-regions">Example code</a>, <a href="https://clinth.github.io/ixfx-demos/flow/statemachine-regions/">Online demo</a></li>
<li><a href="https://glitch.com/edit/#!/ixix-state-machines-driver?path=index.html%3A1%3A0">Glitch example</a></li>
</ul></div><p>When using <a href="../stateMachine/">state machines</a>, it's common to have a big <code>switch</code> statement (or lots of <code>if</code>s) to alter behaviour depending on the current state. These behaviours in turn might trigger a state change. Since this is such a common pattern, the
<a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.driver.html"><code>StateMachine.driver</code></a> is provided.</p><p>With it, you set up <em>state handlers</em> for different states and guiding the machine to subsequent states.</p><p>Each handler has an <code>if</code> field, a single string or array of strings corresponding to the state(s) that handler applies to. While one handler can handle multiple different states, there can't be multiple handlers per state.</p><p>The other part of the handler is <code>then</code> field. At its simplest, it is an object that tells what state to transition to, for example:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sleeping</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">// If we're in the 'sleeping' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'walking'</span> <span class="token punctuation">}</span> <span class="token comment">// Go to 'walking' state</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>Note: The use of <code>if</code> and <code>then</code> for the handlers shouldn't be mistaken for regular Javascript <code>if .. else</code> control structures.</p><p>The <code>then</code> field can be an array of functions, all of which return the same kind of object. When the handler is run, it executes these functions to determine what to do. Functions defined under <code>then</code> don't have to return a value - they could just be things you want to run when the state machine is in that state.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">walking</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>  <span class="token comment">// If we're in the 'walking' state</span>
  <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token comment">// Randomly either go to 'resting' or 'running' state next</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'running'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>Once we have the state machine and the handlers, the driver can be initialised. This would likely happen once when your sketch is initialised.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Set up driver (note the use of await for both lines)</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>And then, perhaps in a timing-based loop, call <code>run()</code>, which will execute a state handler for the current state.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Call .run every second</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Here's a complete example:</p><pre class="language-js"><code class="language-js"><span class="token comment">// States</span>
<span class="token keyword">const</span> states <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">sleeping</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">waking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'resting'</span><span class="token punctuation">,</span><span class="token string">'sleeping'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resting</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'sleeping'</span><span class="token punctuation">,</span> <span class="token string">'walking'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">walking</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'running'</span><span class="token punctuation">,</span> <span class="token string">'resting'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">running</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'walking'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'sleeping' state, move to next state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'sleeping'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> 
    <span class="token comment">// If we're in the 'waking' state, randomly either go to 'resting' or 'sleeping' state</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Set up driver</span>
<span class="token keyword">const</span> driver <span class="token operator">=</span> <span class="token keyword">await</span> StateMachine<span class="token punctuation">.</span><span class="token function">driver</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Once you have the state machine and driver set up, you need to call .run() whenever you want the driver to do its thing. This might be called for example in a loop based on a timer.</p><pre class="language-js"><code class="language-js">driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If you use asynchronous event handlers, call <code>await driver.run()</code> instead.</p><p>Some other things to do with the driver:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Check current state</span>
driver<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eg. 'resting'</span>

<span class="token comment">// Manually transition state</span>
driver<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'walking'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>So far, handlers have returned an object describing what state to transition. Instead of hardcoding the state, you can use <code>{ next: true }</code> to transition to next available state. An alternative is <code>{ reset: true }</code>. When that is returned, the machine goes back to its initial state.</p><p>Each result can also have a <code>score</code> field. This is only useful if you have several results under <code>then</code>. By default, the highest scoring result determines what happens.</p><p>With this in mind, we can re-write the earlier example, assigning random scores for each possible next state:</p><pre class="language-js"><code class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span> 
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Two functions, each returns a result with a random score each time they are executed</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span> <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre><p>In practice you might want to weight the random values so one choice is more or less likely than another. See <a href="../../gen/random/">Random</a> for more on that.</p><p>Each handler also has an optional <code>resultChoice</code> field, which can be 'first', 'highest', 'lowest' or 'random'. By default, 'highest' is used, picking the highest scoring result. In our example, we might use <code>resultChoice: 'random'</code> to evenly pick between choices. With that enabled, we no longer need scores.</p><pre class="language-js"><code class="language-js"><span class="token operator">...</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token operator">:</span> <span class="token string">'waking'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resultChoice</span><span class="token operator">:</span> <span class="token string">'random'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">then</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// Because of resultChoice 'random', the driver</span>
      <span class="token comment">// will randomly pick one of these options when in the 'waking' state</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'resting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token string">'sleeping'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token operator">...</span></code></pre><p>When calling <code>driver.run()</code>, a result is returned with some status information, if that's needed:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> driver<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>value<span class="token punctuation">;</span>   <span class="token comment">// state at the end of .run()</span>
result<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// string array of unique states that have been visited</span>
result<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> <span class="token comment">// original machine description</span></code></pre><h3 id="demo">Demo</h3><p>In the demo below, the driver is used to autonomously change states based on an 'energy' level, also affected by current activity.</p>${renderComponent($$result, "demo-element", "demo-element", { "title": "State machine driver", "src": "/flow/statemachine-agent/" })}` })}`;
});

export { $$metadata, $$StateMachineDriver as default, frontmatter, metadata };
