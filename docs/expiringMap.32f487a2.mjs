import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1$1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module1 } from './chunks/index.edd3906c.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'shiki';
import 'prismjs';
import 'prismjs/components/index.js';

const metadata = { "headers": [{ "depth": 2, "slug": "basic-usage", "text": "Basic Usage" }, { "depth": 2, "slug": "automatically-removing", "text": "Automatically removing" }, { "depth": 2, "slug": "capacity-limiting", "text": "Capacity limiting" }, { "depth": 2, "slug": "time-oriented-methods", "text": "Time-oriented methods" }], "source": "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html\">ExpiringMap class</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\nThe ixfx [`ExpiringMap`](https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html) is a variant of the in-built Map. It can:\n* Set a capacity limit of the map, deleting entries when the capacity is reached\n* Delete entries that have not been set/get after some interval\n\nWhen is this kind of 'forgetful' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn't a clear event for when a key should be removed.\n\nFor example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we'd want to remove associated data after some timeout.\n\n## Basic Usage\n\nCreate with `Maps.expiringMap()`, using `set`, `get` and `delete` as usual with a map.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\nconst map = Maps.expiringMap();\nmap.set(`fruit`, `apple`);\nmap.has(`fruit`); // Yields: true\nmap.get(`fruit`); // Yields: `apple`\nmap.delete(`fruit`); // Yields: true (because key existed)\n```\n\nTo update the get/set time for an entry without actually updating it, use `touch`:\n\n```js\nmap.touch(`fruit`);\n```\n\nThe map has _expired_, _removed_ and _newKey_ events which are useful for taking action based on data coming and going. _expired_ fires when an item is automatically removed, _remove_ fires when an item is manually or automatically removed, and _newKey_ fires when something is set with a key that does not currently exist.\n\n```js\nmap.addEventListener(`expired`, evt => {\n  const { key, value } = evt;\n  console.log(`Key ${key} removed.`);\n})\n```\n\n## Automatically removing\n\nWhen creating the map, use the two `autoDelete`... [options](https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html). `autoDeletePolicy` can be 'get', 'set' or 'either'.\n\nIn the below example, items that aren't accessed for over one second are removed:\n\n```js\nconst map = Maps.expiringMap({\n autoDeleteElapsed: 1000,\n autoDeletePolicy: `get`\n});\n```\n\nUsing a policy of 'set' instead will remove items which are not updated (via `map.set(key, value)`) past the interval. 'either' will remove items if the interval of get or set exceeds the interval.\n\n## Capacity limiting\n\nWhen creating the map, specify `capacity` and `evictPolicy` [options](https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html). `capacity` is the total number of items the map can store. `evictPolicy` can be 'none', meaning that an error is thrown if the capacity is reached. This is the default. It can also be 'oldestGet', removing the entry that hasn't been accessed the longest, or 'oldestSet', deleting the entry which has't been updated the longest.\n\n```js\nconst map = new ExpiringMap({\n capacity: 5,\n evictPolicy: `oldestSet`\n});\n```\n\nThese capacity limiting settings can be combined with automatic removing based on time.\n\n## Time-oriented methods\n\nSince the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:\n\n```js\n// Remove all entries that were set more than 100ms ago\nmap.deleteWithElapsed(100, `set`);\n// Remove all entries that were last accessed more than 100ms ago\nmap.deleteWithElapsed(100, `get`);\n// Returns the elapsed time since `fruit` was last accessed\nmap.elapsedGet(`fruit`); \n// Returns the elapsed time since `fruit` was last set\nmap.elapsedSet(`fruit`);\n```", "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html">ExpiringMap class</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<p>The ixfx <a href="https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html"><code is:raw>ExpiringMap</code></a> is a variant of the in-built Map. It can:</p>\n<ul>\n<li>Set a capacity limit of the map, deleting entries when the capacity is reached</li>\n<li>Delete entries that have not been set/get after some interval</li>\n</ul>\n<p>When is this kind of \'forgetful\' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn\'t a clear event for when a key should be removed.</p>\n<p>For example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we\'d want to remove associated data after some timeout.</p>\n<h2 id="basic-usage">Basic Usage</h2>\n<p>Create with <code is:raw>Maps.expiringMap()</code>, using <code is:raw>set</code>, <code is:raw>get</code> and <code is:raw>delete</code> as usual with a map.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Maps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true</span>\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: `apple`</span>\nmap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true (because key existed)</span></code></pre>\n<p>To update the get/set time for an entry without actually updating it, use <code is:raw>touch</code>:</p>\n<pre class="language-js"><code is:raw class="language-js">map<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The map has <em>expired</em>, <em>removed</em> and <em>newKey</em> events which are useful for taking action based on data coming and going. <em>expired</em> fires when an item is automatically removed, <em>remove</em> fires when an item is manually or automatically removed, and <em>newKey</em> fires when something is set with a key that does not currently exist.</p>\n<pre class="language-js"><code is:raw class="language-js">map<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">expired</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> removed.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<h2 id="automatically-removing">Automatically removing</h2>\n<p>When creating the map, use the two <code is:raw>autoDelete</code>... <a href="https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html">options</a>. <code is:raw>autoDeletePolicy</code> can be \'get\', \'set\' or \'either\'.</p>\n<p>In the below example, items that aren\'t accessed for over one second are removed:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">autoDeleteElapsed</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n <span class="token literal-property property">autoDeletePolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Using a policy of \'set\' instead will remove items which are not updated (via <code is:raw>map.set(key, value)</code>) past the interval. \'either\' will remove items if the interval of get or set exceeds the interval.</p>\n<h2 id="capacity-limiting">Capacity limiting</h2>\n<p>When creating the map, specify <code is:raw>capacity</code> and <code is:raw>evictPolicy</code> <a href="https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html">options</a>. <code is:raw>capacity</code> is the total number of items the map can store. <code is:raw>evictPolicy</code> can be \'none\', meaning that an error is thrown if the capacity is reached. This is the default. It can also be \'oldestGet\', removing the entry that hasn\'t been accessed the longest, or \'oldestSet\', deleting the entry which has\'t been updated the longest.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n <span class="token literal-property property">evictPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oldestSet</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>These capacity limiting settings can be combined with automatic removing based on time.</p>\n<h2 id="time-oriented-methods">Time-oriented methods</h2>\n<p>Since the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Remove all entries that were set more than 100ms ago</span>\nmap<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Remove all entries that were last accessed more than 100ms ago</span>\nmap<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns the elapsed time since `fruit` was last accessed</span>\nmap<span class="token punctuation">.</span><span class="token function">elapsedGet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Returns the elapsed time since `fruit` was last set</span>\nmap<span class="token punctuation">.</span><span class="token function">elapsedSet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' };
const frontmatter = { "title": "Expiring Map", "astro": { "headers": [{ "depth": 2, "slug": "basic-usage", "text": "Basic Usage" }, { "depth": 2, "slug": "automatically-removing", "text": "Automatically removing" }, { "depth": 2, "slug": "capacity-limiting", "text": "Capacity limiting" }, { "depth": 2, "slug": "time-oriented-methods", "text": "Time-oriented methods" }], "source": "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html\">ExpiringMap class</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\nThe ixfx [`ExpiringMap`](https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html) is a variant of the in-built Map. It can:\n* Set a capacity limit of the map, deleting entries when the capacity is reached\n* Delete entries that have not been set/get after some interval\n\nWhen is this kind of 'forgetful' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn't a clear event for when a key should be removed.\n\nFor example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we'd want to remove associated data after some timeout.\n\n## Basic Usage\n\nCreate with `Maps.expiringMap()`, using `set`, `get` and `delete` as usual with a map.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\nconst map = Maps.expiringMap();\nmap.set(`fruit`, `apple`);\nmap.has(`fruit`); // Yields: true\nmap.get(`fruit`); // Yields: `apple`\nmap.delete(`fruit`); // Yields: true (because key existed)\n```\n\nTo update the get/set time for an entry without actually updating it, use `touch`:\n\n```js\nmap.touch(`fruit`);\n```\n\nThe map has _expired_, _removed_ and _newKey_ events which are useful for taking action based on data coming and going. _expired_ fires when an item is automatically removed, _remove_ fires when an item is manually or automatically removed, and _newKey_ fires when something is set with a key that does not currently exist.\n\n```js\nmap.addEventListener(`expired`, evt => {\n  const { key, value } = evt;\n  console.log(`Key ${key} removed.`);\n})\n```\n\n## Automatically removing\n\nWhen creating the map, use the two `autoDelete`... [options](https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html). `autoDeletePolicy` can be 'get', 'set' or 'either'.\n\nIn the below example, items that aren't accessed for over one second are removed:\n\n```js\nconst map = Maps.expiringMap({\n autoDeleteElapsed: 1000,\n autoDeletePolicy: `get`\n});\n```\n\nUsing a policy of 'set' instead will remove items which are not updated (via `map.set(key, value)`) past the interval. 'either' will remove items if the interval of get or set exceeds the interval.\n\n## Capacity limiting\n\nWhen creating the map, specify `capacity` and `evictPolicy` [options](https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html). `capacity` is the total number of items the map can store. `evictPolicy` can be 'none', meaning that an error is thrown if the capacity is reached. This is the default. It can also be 'oldestGet', removing the entry that hasn't been accessed the longest, or 'oldestSet', deleting the entry which has't been updated the longest.\n\n```js\nconst map = new ExpiringMap({\n capacity: 5,\n evictPolicy: `oldestSet`\n});\n```\n\nThese capacity limiting settings can be combined with automatic removing based on time.\n\n## Time-oriented methods\n\nSince the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:\n\n```js\n// Remove all entries that were set more than 100ms ago\nmap.deleteWithElapsed(100, `set`);\n// Remove all entries that were last accessed more than 100ms ago\nmap.deleteWithElapsed(100, `get`);\n// Returns the elapsed time since `fruit` was last accessed\nmap.elapsedGet(`fruit`); \n// Returns the elapsed time since `fruit` was last set\nmap.elapsedSet(`fruit`);\n```", "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html">ExpiringMap class</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<p>The ixfx <a href="https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html"><code is:raw>ExpiringMap</code></a> is a variant of the in-built Map. It can:</p>\n<ul>\n<li>Set a capacity limit of the map, deleting entries when the capacity is reached</li>\n<li>Delete entries that have not been set/get after some interval</li>\n</ul>\n<p>When is this kind of \'forgetful\' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn\'t a clear event for when a key should be removed.</p>\n<p>For example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we\'d want to remove associated data after some timeout.</p>\n<h2 id="basic-usage">Basic Usage</h2>\n<p>Create with <code is:raw>Maps.expiringMap()</code>, using <code is:raw>set</code>, <code is:raw>get</code> and <code is:raw>delete</code> as usual with a map.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Maps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true</span>\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: `apple`</span>\nmap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true (because key existed)</span></code></pre>\n<p>To update the get/set time for an entry without actually updating it, use <code is:raw>touch</code>:</p>\n<pre class="language-js"><code is:raw class="language-js">map<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The map has <em>expired</em>, <em>removed</em> and <em>newKey</em> events which are useful for taking action based on data coming and going. <em>expired</em> fires when an item is automatically removed, <em>remove</em> fires when an item is manually or automatically removed, and <em>newKey</em> fires when something is set with a key that does not currently exist.</p>\n<pre class="language-js"><code is:raw class="language-js">map<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">expired</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> removed.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<h2 id="automatically-removing">Automatically removing</h2>\n<p>When creating the map, use the two <code is:raw>autoDelete</code>... <a href="https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html">options</a>. <code is:raw>autoDeletePolicy</code> can be \'get\', \'set\' or \'either\'.</p>\n<p>In the below example, items that aren\'t accessed for over one second are removed:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">autoDeleteElapsed</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n <span class="token literal-property property">autoDeletePolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Using a policy of \'set\' instead will remove items which are not updated (via <code is:raw>map.set(key, value)</code>) past the interval. \'either\' will remove items if the interval of get or set exceeds the interval.</p>\n<h2 id="capacity-limiting">Capacity limiting</h2>\n<p>When creating the map, specify <code is:raw>capacity</code> and <code is:raw>evictPolicy</code> <a href="https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html">options</a>. <code is:raw>capacity</code> is the total number of items the map can store. <code is:raw>evictPolicy</code> can be \'none\', meaning that an error is thrown if the capacity is reached. This is the default. It can also be \'oldestGet\', removing the entry that hasn\'t been accessed the longest, or \'oldestSet\', deleting the entry which has\'t been updated the longest.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n <span class="token literal-property property">evictPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oldestSet</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>These capacity limiting settings can be combined with automatic removing based on time.</p>\n<h2 id="time-oriented-methods">Time-oriented methods</h2>\n<p>Since the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Remove all entries that were set more than 100ms ago</span>\nmap<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Remove all entries that were last accessed more than 100ms ago</span>\nmap<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns the elapsed time since `fruit` was last accessed</span>\nmap<span class="token punctuation">.</span><span class="token function">elapsedGet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Returns the elapsed time since `fruit` was last set</span>\nmap<span class="token punctuation">.</span><span class="token function">elapsedSet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/data/collections/expiringMap.md", { modules: [{ module: $$module1, specifier: "astro/components", assert: {} }, { module: $$module1$1, specifier: "../../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/data/collections/expiringMap.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$ExpiringMap = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$ExpiringMap;
  const $$content = { "title": "Expiring Map", "astro": { "headers": [{ "depth": 2, "slug": "basic-usage", "text": "Basic Usage" }, { "depth": 2, "slug": "automatically-removing", "text": "Automatically removing" }, { "depth": 2, "slug": "capacity-limiting", "text": "Capacity limiting" }, { "depth": 2, "slug": "time-oriented-methods", "text": "Time-oriented methods" }], "source": "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html\">ExpiringMap class</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\nThe ixfx [`ExpiringMap`](https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html) is a variant of the in-built Map. It can:\n* Set a capacity limit of the map, deleting entries when the capacity is reached\n* Delete entries that have not been set/get after some interval\n\nWhen is this kind of 'forgetful' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn't a clear event for when a key should be removed.\n\nFor example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we'd want to remove associated data after some timeout.\n\n## Basic Usage\n\nCreate with `Maps.expiringMap()`, using `set`, `get` and `delete` as usual with a map.\n\n```js\nimport { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n\nconst map = Maps.expiringMap();\nmap.set(`fruit`, `apple`);\nmap.has(`fruit`); // Yields: true\nmap.get(`fruit`); // Yields: `apple`\nmap.delete(`fruit`); // Yields: true (because key existed)\n```\n\nTo update the get/set time for an entry without actually updating it, use `touch`:\n\n```js\nmap.touch(`fruit`);\n```\n\nThe map has _expired_, _removed_ and _newKey_ events which are useful for taking action based on data coming and going. _expired_ fires when an item is automatically removed, _remove_ fires when an item is manually or automatically removed, and _newKey_ fires when something is set with a key that does not currently exist.\n\n```js\nmap.addEventListener(`expired`, evt => {\n  const { key, value } = evt;\n  console.log(`Key ${key} removed.`);\n})\n```\n\n## Automatically removing\n\nWhen creating the map, use the two `autoDelete`... [options](https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html). `autoDeletePolicy` can be 'get', 'set' or 'either'.\n\nIn the below example, items that aren't accessed for over one second are removed:\n\n```js\nconst map = Maps.expiringMap({\n autoDeleteElapsed: 1000,\n autoDeletePolicy: `get`\n});\n```\n\nUsing a policy of 'set' instead will remove items which are not updated (via `map.set(key, value)`) past the interval. 'either' will remove items if the interval of get or set exceeds the interval.\n\n## Capacity limiting\n\nWhen creating the map, specify `capacity` and `evictPolicy` [options](https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html). `capacity` is the total number of items the map can store. `evictPolicy` can be 'none', meaning that an error is thrown if the capacity is reached. This is the default. It can also be 'oldestGet', removing the entry that hasn't been accessed the longest, or 'oldestSet', deleting the entry which has't been updated the longest.\n\n```js\nconst map = new ExpiringMap({\n capacity: 5,\n evictPolicy: `oldestSet`\n});\n```\n\nThese capacity limiting settings can be combined with automatic removing based on time.\n\n## Time-oriented methods\n\nSince the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:\n\n```js\n// Remove all entries that were set more than 100ms ago\nmap.deleteWithElapsed(100, `set`);\n// Remove all entries that were last accessed more than 100ms ago\nmap.deleteWithElapsed(100, `get`);\n// Returns the elapsed time since `fruit` was last accessed\nmap.elapsedGet(`fruit`); \n// Returns the elapsed time since `fruit` was last set\nmap.elapsedSet(`fruit`);\n```", "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html">ExpiringMap class</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<p>The ixfx <a href="https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html"><code is:raw>ExpiringMap</code></a> is a variant of the in-built Map. It can:</p>\n<ul>\n<li>Set a capacity limit of the map, deleting entries when the capacity is reached</li>\n<li>Delete entries that have not been set/get after some interval</li>\n</ul>\n<p>When is this kind of \'forgetful\' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn\'t a clear event for when a key should be removed.</p>\n<p>For example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we\'d want to remove associated data after some timeout.</p>\n<h2 id="basic-usage">Basic Usage</h2>\n<p>Create with <code is:raw>Maps.expiringMap()</code>, using <code is:raw>set</code>, <code is:raw>get</code> and <code is:raw>delete</code> as usual with a map.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Maps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true</span>\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: `apple`</span>\nmap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true (because key existed)</span></code></pre>\n<p>To update the get/set time for an entry without actually updating it, use <code is:raw>touch</code>:</p>\n<pre class="language-js"><code is:raw class="language-js">map<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The map has <em>expired</em>, <em>removed</em> and <em>newKey</em> events which are useful for taking action based on data coming and going. <em>expired</em> fires when an item is automatically removed, <em>remove</em> fires when an item is manually or automatically removed, and <em>newKey</em> fires when something is set with a key that does not currently exist.</p>\n<pre class="language-js"><code is:raw class="language-js">map<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">expired</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> removed.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<h2 id="automatically-removing">Automatically removing</h2>\n<p>When creating the map, use the two <code is:raw>autoDelete</code>... <a href="https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html">options</a>. <code is:raw>autoDeletePolicy</code> can be \'get\', \'set\' or \'either\'.</p>\n<p>In the below example, items that aren\'t accessed for over one second are removed:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">autoDeleteElapsed</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n <span class="token literal-property property">autoDeletePolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Using a policy of \'set\' instead will remove items which are not updated (via <code is:raw>map.set(key, value)</code>) past the interval. \'either\' will remove items if the interval of get or set exceeds the interval.</p>\n<h2 id="capacity-limiting">Capacity limiting</h2>\n<p>When creating the map, specify <code is:raw>capacity</code> and <code is:raw>evictPolicy</code> <a href="https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html">options</a>. <code is:raw>capacity</code> is the total number of items the map can store. <code is:raw>evictPolicy</code> can be \'none\', meaning that an error is thrown if the capacity is reached. This is the default. It can also be \'oldestGet\', removing the entry that hasn\'t been accessed the longest, or \'oldestSet\', deleting the entry which has\'t been updated the longest.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n <span class="token literal-property property">evictPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oldestSet</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>These capacity limiting settings can be combined with automatic removing based on time.</p>\n<h2 id="time-oriented-methods">Time-oriented methods</h2>\n<p>Since the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Remove all entries that were set more than 100ms ago</span>\nmap<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Remove all entries that were last accessed more than 100ms ago</span>\nmap<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">get</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns the elapsed time since `fruit` was last accessed</span>\nmap<span class="token punctuation">.</span><span class="token function">elapsedGet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Returns the elapsed time since `fruit` was last set</span>\nmap<span class="token punctuation">.</span><span class="token function">elapsedSet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fruit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Collections.Maps.ExpiringMap.html">ExpiringMap class</a></li>
<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>
</ul></div><p>The ixfx <a href="https://clinth.github.io/ixfx/classes/Collections.ExpiringMap.html"><code>ExpiringMap</code></a> is a variant of the in-built Map. It can:</p><ul>
<li>Set a capacity limit of the map, deleting entries when the capacity is reached</li>
<li>Delete entries that have not been set/get after some interval</li>
</ul><p>When is this kind of 'forgetful' map useful? One case is when we want to associate a key with a value (as we normally do with a map), but there isn't a clear event for when a key should be removed.</p><p>For example, perhaps we receive data from network sources, each of which has an id. When we receive data, we know the source is alive, and we can get/set associated data in a map. But if something goes wrong with the source or connection, there might not be an accompanying event to let us know. Rather, we'd want to remove associated data after some timeout.</p><h2 id="basic-usage">Basic Usage</h2><p>Create with <code>Maps.expiringMap()</code>, using <code>set</code>, <code>get</code> and <code>delete</code> as usual with a map.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Maps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apple</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true</span>
map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: \`apple\`</span>
map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Yields: true (because key existed)</span></code></pre><p>To update the get/set time for an entry without actually updating it, use <code>touch</code>:</p><pre class="language-js"><code class="language-js">map<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The map has <em>expired</em>, <em>removed</em> and <em>newKey</em> events which are useful for taking action based on data coming and going. <em>expired</em> fires when an item is automatically removed, <em>remove</em> fires when an item is manually or automatically removed, and <em>newKey</em> fires when something is set with a key that does not currently exist.</p><pre class="language-js"><code class="language-js">map<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">expired</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Key </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> removed.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="automatically-removing">Automatically removing</h2><p>When creating the map, use the two <code>autoDelete</code>... <a href="https://clinth.github.io/ixfx/types/Collections.Maps.ExpiringMapOpts.html">options</a>. <code>autoDeletePolicy</code> can be 'get', 'set' or 'either'.</p><p>In the below example, items that aren't accessed for over one second are removed:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">expiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">autoDeleteElapsed</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
 <span class="token literal-property property">autoDeletePolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">get</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Using a policy of 'set' instead will remove items which are not updated (via <code>map.set(key, value)</code>) past the interval. 'either' will remove items if the interval of get or set exceeds the interval.</p><h2 id="capacity-limiting">Capacity limiting</h2><p>When creating the map, specify <code>capacity</code> and <code>evictPolicy</code> <a href="https://clinth.github.io/ixfx/types/Collections.ExpiringMapOpts.html">options</a>. <code>capacity</code> is the total number of items the map can store. <code>evictPolicy</code> can be 'none', meaning that an error is thrown if the capacity is reached. This is the default. It can also be 'oldestGet', removing the entry that hasn't been accessed the longest, or 'oldestSet', deleting the entry which has't been updated the longest.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpiringMap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
 <span class="token literal-property property">evictPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oldestSet</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>These capacity limiting settings can be combined with automatic removing based on time.</p><h2 id="time-oriented-methods">Time-oriented methods</h2><p>Since the ExpiringMap tracks times for each item, there are a range of time-oriented ways of working with the map:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Remove all entries that were set more than 100ms ago</span>
map<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">set</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Remove all entries that were last accessed more than 100ms ago</span>
map<span class="token punctuation">.</span><span class="token function">deleteWithElapsed</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">get</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns the elapsed time since \`fruit\` was last accessed</span>
map<span class="token punctuation">.</span><span class="token function">elapsedGet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Returns the elapsed time since \`fruit\` was last set</span>
map<span class="token punctuation">.</span><span class="token function">elapsedSet</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fruit</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>` })}`;
});

export { $$metadata, $$ExpiringMap as default, frontmatter, metadata };
