import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "adding-and-clearing", "text": "Adding and clearing" }, { "depth": 3, "slug": "working-with-frequency", "text": "Working with frequency" }, { "depth": 3, "slug": "iterating", "text": "Iterating" }, { "depth": 3, "slug": "custom-objects", "text": "Custom objects" }, { "depth": 2, "slug": "examples", "text": "Examples" }, { "depth": 3, "slug": "letter-frequency", "text": "Letter frequency" }], "source": '\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html">Data.FrequencyMutable class</a></li>\n<li><a href="../trackers/">Trackers</a> track data ranges</li>\n</div>\n\nThe `FrequencyMutable` class keeps track of the number of times a certain value is \'seen\'.\n\nIn some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that _mostly_ occurs.\n\nIn the demo below, a [weighted distribution](../../gen/random/#weighted-distribution) of random numbers is produced, with lower numbers occuring more often than higher numbers. A `FrequencyMutable` instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.\n\n<script type="module" hoist>\nimport \'/src/components/data/freqWeighted\';\n<\/script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class="toolbar centered">\n  <button id="btnStart">Start</button>\n  <button id="btnStop">Stop</button>\n  <button id="btnClear">Clear</button>\n</div>\n<div class="sxs">\n  <div class="dataLog" id="dataStream" style="max-height: 5em"></div>\n  <div>\n    <histogram-vis id="dataPlot"></histogram-vis>\n  </div>\n</div>\n\n\n## Usage\n\n[`frequencyMutable`](https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html) creates a new instance. The provided frequency histogram is _mutable_, meaning that the object reference stays the same while the data inside is permitted to change.\n\n\n### Adding and clearing\n\n```js\n// repl-pad#1\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\n// Create an instance\nconst freq = frequencyMutable();\n\n// Add data, here several at once\nfreq.add(`apples`, `oranges`, `apples`, `pears`, `pears`);\n\n// Get an array version\n// [ ["apples", 2], ["oranges",1],["pears",2] ]\nconst t = freq.toArray();\n```\n\nClear all data\n```js\nfreq.clear();\n```\n\n### Working with frequency\n\nGet the count of a specific group. Returns `undefined` if group is not found.\n\n```js\n// repl-pad#1\nconst f = freq.frequencyOf(`apples`); // 2\n```\n\nIt can be useful to work with the relative frequency rather than the absolute amount. For example, `apples` appears 40% of the time:\n\n```js\n// repl-pad#1\nconst rel = freq.relativeFrequencyOf(`apples`); // 0.4\n```\n\nTo find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):\n\n```js\n// repl-pad#1\n// Returns {min, max, avg, total}\nconst mma = freq.minMaxAvg(); \nconsole.log(`Average frequency is ${mma.avg}`);\n```\n\n### Iterating\n\nYou can get the data as an array and iterate:\n\n```js\n// repl-pad#1\nconst data = freq.entries(); // freq.toArray() gives same result\nfor (const [group, count] of data) {\n  console.log(`${group} has a count of ${count}`); // apples has a count of 2...\n}\n```\n\nTo get the entries sorted:\n\n```js\n// repl-pad#1\n// Sorting options are: value, valueReverse, key or keyReverse\nconst sorted = freq.entriesSorted(`key`); // Sort alphabetically by key\n```\n\n### Custom objects\n\nTo keep track of objects, provide a function that creates a string for the items you\'re adding. This allows you to group by different fields, or some combination of fields.\n\nIn the below example, cars are grouped by their make:\n\n```js\n// repl-pad\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\n// Two cars\nconst cars = [\n  {\n    make: `Toyota`,\n    model: `Corolla`,\n    year: 1980\n  },\n  {\n    make: `Honda`,\n    model: `Civic`,\n    year: 1985\n  }\n]\n\n// Count cars by make\nconst freq = frequencyMutable(car => car.make);\n\n// Add array of cars\nfreq.add(...cars);\n\n// Count a group\nfreq.frequencyOf(`Toyota`); // 1\n\n// Or by object, which uses the same stringify function\nfreq.frequencyOf(cars[1]); // 1\n```\n\n## Examples\n\n### Letter frequency\n\nThe below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the `Frequency`, sort by frequency and calculate a proportional amount.\n\n```js\n// repl-pad\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\nconst freq = frequencyMutable();\nconst text = \'This is a test\';\n\n// Loop through all characters\nfor (let i = 0; i < text.length; i++) {\n  const letter = text.toLocaleUpperCase().charAt(i);\n  if (letter === ` `) continue; // Skip spaces;\n  freq.add(letter); // Add letter\n}\n\n// Sort with most frequent at position 0 of the array\nconst sorted = freq.entriesSorted(`valueReverse`);\n// Grab just the top three\nconst topThree = sorted.slice(0, Math.min(sorted.length, 3));\n\n// Calculate the min, max and avg over all frequencies\nconst mma = freq.minMaxAvg();\n\n// Calculate percentage for a given letter\nconst percent = (kv) => Math.round(kv[1] / mma.total * 100);\n\nconst top = topThree[0];\nconsole.log(`Letter ${top[0]} appears ${percent(top)}% of the time.`);\n```\n\n<demo-element title="Frequency tracking" src="/data/frequency/" />\n', "html": '<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html">Data.FrequencyMutable class</a></li>\n<li><a href="../trackers/">Trackers</a> track data ranges</li>\n</div>\n<p>The <code is:raw>FrequencyMutable</code> class keeps track of the number of times a certain value is \'seen\'.</p>\n<p>In some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that <em>mostly</em> occurs.</p>\n<p>In the demo below, a <a href="../../gen/random/#weighted-distribution">weighted distribution</a> of random numbers is produced, with lower numbers occuring more often than higher numbers. A <code is:raw>FrequencyMutable</code> instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.</p>\n<script type="module" hoist>\nimport \'/src/components/data/freqWeighted\';\n<\/script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class="toolbar centered">\n  <button id="btnStart">Start</button>\n  <button id="btnStop">Stop</button>\n  <button id="btnClear">Clear</button>\n</div>\n<div class="sxs">\n  <div class="dataLog" id="dataStream" style="max-height: 5em"></div>\n  <div>\n    <histogram-vis id="dataPlot"></histogram-vis>\n  </div>\n</div>\n<h2 id="usage">Usage</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html"><code is:raw>frequencyMutable</code></a> creates a new instance. The provided frequency histogram is <em>mutable</em>, meaning that the object reference stays the same while the data inside is permitted to change.</p>\n<h3 id="adding-and-clearing">Adding and clearing</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token comment">// Create an instance</span>\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add data, here several at once</span>\nfreq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get an array version</span>\n<span class="token comment">// [ ["apples", 2], ["oranges",1],["pears",2] ]</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Clear all data</p>\n<pre class="language-js"><code is:raw class="language-js">freq<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="working-with-frequency">Working with frequency</h3>\n<p>Get the count of a specific group. Returns <code is:raw>undefined</code> if group is not found.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre>\n<p>It can be useful to work with the relative frequency rather than the absolute amount. For example, <code is:raw>apples</code> appears 40% of the time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> rel <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">relativeFrequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.4</span></code></pre>\n<p>To find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns {min, max, avg, total}</span>\n<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Average frequency is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mma<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="iterating">Iterating</h3>\n<p>You can get the data as an array and iterate:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// freq.toArray() gives same result</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>group<span class="token punctuation">,</span> count<span class="token punctuation">]</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>group<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has a count of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apples has a count of 2...</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To get the entries sorted:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Sorting options are: value, valueReverse, key or keyReverse</span>\n<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Sort alphabetically by key</span></code></pre>\n<h3 id="custom-objects">Custom objects</h3>\n<p>To keep track of objects, provide a function that creates a string for the items you\'re adding. This allows you to group by different fields, or some combination of fields.</p>\n<p>In the below example, cars are grouped by their make:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token comment">// Two cars</span>\n<span class="token keyword">const</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Toyota</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Corolla</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1980</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Honda</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Civic</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1985</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// Count cars by make</span>\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token parameter">car</span> <span class="token operator">=></span> car<span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add array of cars</span>\nfreq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>cars<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Count a group</span>\nfreq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Toyota</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// Or by object, which uses the same stringify function</span>\nfreq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre>\n<h2 id="examples">Examples</h2>\n<h3 id="letter-frequency">Letter frequency</h3>\n<p>The below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the <code is:raw>Frequency</code>, sort by frequency and calculate a proportional amount.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">\'This is a test\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Loop through all characters</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> letter <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// Skip spaces;</span>\n  freq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add letter</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Sort with most frequent at position 0 of the array</span>\n<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">valueReverse</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Grab just the top three</span>\n<span class="token keyword">const</span> topThree <span class="token operator">=</span> sorted<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>sorted<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate the min, max and avg over all frequencies</span>\n<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate percentage for a given letter</span>\n<span class="token keyword">const</span> <span class="token function-variable function">percent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">kv</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> mma<span class="token punctuation">.</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> top <span class="token operator">=</span> topThree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Letter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> appears </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">percent</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">% of the time.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Frequency tracking" src="/data/frequency/" />' };
const frontmatter = { "title": "Frequency", "astro": { "headers": [{ "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "adding-and-clearing", "text": "Adding and clearing" }, { "depth": 3, "slug": "working-with-frequency", "text": "Working with frequency" }, { "depth": 3, "slug": "iterating", "text": "Iterating" }, { "depth": 3, "slug": "custom-objects", "text": "Custom objects" }, { "depth": 2, "slug": "examples", "text": "Examples" }, { "depth": 3, "slug": "letter-frequency", "text": "Letter frequency" }], "source": '\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html">Data.FrequencyMutable class</a></li>\n<li><a href="../trackers/">Trackers</a> track data ranges</li>\n</div>\n\nThe `FrequencyMutable` class keeps track of the number of times a certain value is \'seen\'.\n\nIn some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that _mostly_ occurs.\n\nIn the demo below, a [weighted distribution](../../gen/random/#weighted-distribution) of random numbers is produced, with lower numbers occuring more often than higher numbers. A `FrequencyMutable` instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.\n\n<script type="module" hoist>\nimport \'/src/components/data/freqWeighted\';\n<\/script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class="toolbar centered">\n  <button id="btnStart">Start</button>\n  <button id="btnStop">Stop</button>\n  <button id="btnClear">Clear</button>\n</div>\n<div class="sxs">\n  <div class="dataLog" id="dataStream" style="max-height: 5em"></div>\n  <div>\n    <histogram-vis id="dataPlot"></histogram-vis>\n  </div>\n</div>\n\n\n## Usage\n\n[`frequencyMutable`](https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html) creates a new instance. The provided frequency histogram is _mutable_, meaning that the object reference stays the same while the data inside is permitted to change.\n\n\n### Adding and clearing\n\n```js\n// repl-pad#1\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\n// Create an instance\nconst freq = frequencyMutable();\n\n// Add data, here several at once\nfreq.add(`apples`, `oranges`, `apples`, `pears`, `pears`);\n\n// Get an array version\n// [ ["apples", 2], ["oranges",1],["pears",2] ]\nconst t = freq.toArray();\n```\n\nClear all data\n```js\nfreq.clear();\n```\n\n### Working with frequency\n\nGet the count of a specific group. Returns `undefined` if group is not found.\n\n```js\n// repl-pad#1\nconst f = freq.frequencyOf(`apples`); // 2\n```\n\nIt can be useful to work with the relative frequency rather than the absolute amount. For example, `apples` appears 40% of the time:\n\n```js\n// repl-pad#1\nconst rel = freq.relativeFrequencyOf(`apples`); // 0.4\n```\n\nTo find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):\n\n```js\n// repl-pad#1\n// Returns {min, max, avg, total}\nconst mma = freq.minMaxAvg(); \nconsole.log(`Average frequency is ${mma.avg}`);\n```\n\n### Iterating\n\nYou can get the data as an array and iterate:\n\n```js\n// repl-pad#1\nconst data = freq.entries(); // freq.toArray() gives same result\nfor (const [group, count] of data) {\n  console.log(`${group} has a count of ${count}`); // apples has a count of 2...\n}\n```\n\nTo get the entries sorted:\n\n```js\n// repl-pad#1\n// Sorting options are: value, valueReverse, key or keyReverse\nconst sorted = freq.entriesSorted(`key`); // Sort alphabetically by key\n```\n\n### Custom objects\n\nTo keep track of objects, provide a function that creates a string for the items you\'re adding. This allows you to group by different fields, or some combination of fields.\n\nIn the below example, cars are grouped by their make:\n\n```js\n// repl-pad\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\n// Two cars\nconst cars = [\n  {\n    make: `Toyota`,\n    model: `Corolla`,\n    year: 1980\n  },\n  {\n    make: `Honda`,\n    model: `Civic`,\n    year: 1985\n  }\n]\n\n// Count cars by make\nconst freq = frequencyMutable(car => car.make);\n\n// Add array of cars\nfreq.add(...cars);\n\n// Count a group\nfreq.frequencyOf(`Toyota`); // 1\n\n// Or by object, which uses the same stringify function\nfreq.frequencyOf(cars[1]); // 1\n```\n\n## Examples\n\n### Letter frequency\n\nThe below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the `Frequency`, sort by frequency and calculate a proportional amount.\n\n```js\n// repl-pad\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\nconst freq = frequencyMutable();\nconst text = \'This is a test\';\n\n// Loop through all characters\nfor (let i = 0; i < text.length; i++) {\n  const letter = text.toLocaleUpperCase().charAt(i);\n  if (letter === ` `) continue; // Skip spaces;\n  freq.add(letter); // Add letter\n}\n\n// Sort with most frequent at position 0 of the array\nconst sorted = freq.entriesSorted(`valueReverse`);\n// Grab just the top three\nconst topThree = sorted.slice(0, Math.min(sorted.length, 3));\n\n// Calculate the min, max and avg over all frequencies\nconst mma = freq.minMaxAvg();\n\n// Calculate percentage for a given letter\nconst percent = (kv) => Math.round(kv[1] / mma.total * 100);\n\nconst top = topThree[0];\nconsole.log(`Letter ${top[0]} appears ${percent(top)}% of the time.`);\n```\n\n<demo-element title="Frequency tracking" src="/data/frequency/" />\n', "html": '<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html">Data.FrequencyMutable class</a></li>\n<li><a href="../trackers/">Trackers</a> track data ranges</li>\n</div>\n<p>The <code is:raw>FrequencyMutable</code> class keeps track of the number of times a certain value is \'seen\'.</p>\n<p>In some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that <em>mostly</em> occurs.</p>\n<p>In the demo below, a <a href="../../gen/random/#weighted-distribution">weighted distribution</a> of random numbers is produced, with lower numbers occuring more often than higher numbers. A <code is:raw>FrequencyMutable</code> instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.</p>\n<script type="module" hoist>\nimport \'/src/components/data/freqWeighted\';\n<\/script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class="toolbar centered">\n  <button id="btnStart">Start</button>\n  <button id="btnStop">Stop</button>\n  <button id="btnClear">Clear</button>\n</div>\n<div class="sxs">\n  <div class="dataLog" id="dataStream" style="max-height: 5em"></div>\n  <div>\n    <histogram-vis id="dataPlot"></histogram-vis>\n  </div>\n</div>\n<h2 id="usage">Usage</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html"><code is:raw>frequencyMutable</code></a> creates a new instance. The provided frequency histogram is <em>mutable</em>, meaning that the object reference stays the same while the data inside is permitted to change.</p>\n<h3 id="adding-and-clearing">Adding and clearing</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token comment">// Create an instance</span>\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add data, here several at once</span>\nfreq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get an array version</span>\n<span class="token comment">// [ ["apples", 2], ["oranges",1],["pears",2] ]</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Clear all data</p>\n<pre class="language-js"><code is:raw class="language-js">freq<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="working-with-frequency">Working with frequency</h3>\n<p>Get the count of a specific group. Returns <code is:raw>undefined</code> if group is not found.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre>\n<p>It can be useful to work with the relative frequency rather than the absolute amount. For example, <code is:raw>apples</code> appears 40% of the time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> rel <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">relativeFrequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.4</span></code></pre>\n<p>To find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns {min, max, avg, total}</span>\n<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Average frequency is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mma<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="iterating">Iterating</h3>\n<p>You can get the data as an array and iterate:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// freq.toArray() gives same result</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>group<span class="token punctuation">,</span> count<span class="token punctuation">]</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>group<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has a count of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apples has a count of 2...</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To get the entries sorted:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Sorting options are: value, valueReverse, key or keyReverse</span>\n<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Sort alphabetically by key</span></code></pre>\n<h3 id="custom-objects">Custom objects</h3>\n<p>To keep track of objects, provide a function that creates a string for the items you\'re adding. This allows you to group by different fields, or some combination of fields.</p>\n<p>In the below example, cars are grouped by their make:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token comment">// Two cars</span>\n<span class="token keyword">const</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Toyota</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Corolla</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1980</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Honda</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Civic</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1985</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// Count cars by make</span>\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token parameter">car</span> <span class="token operator">=></span> car<span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add array of cars</span>\nfreq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>cars<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Count a group</span>\nfreq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Toyota</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// Or by object, which uses the same stringify function</span>\nfreq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre>\n<h2 id="examples">Examples</h2>\n<h3 id="letter-frequency">Letter frequency</h3>\n<p>The below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the <code is:raw>Frequency</code>, sort by frequency and calculate a proportional amount.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">\'This is a test\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Loop through all characters</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> letter <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// Skip spaces;</span>\n  freq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add letter</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Sort with most frequent at position 0 of the array</span>\n<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">valueReverse</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Grab just the top three</span>\n<span class="token keyword">const</span> topThree <span class="token operator">=</span> sorted<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>sorted<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate the min, max and avg over all frequencies</span>\n<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate percentage for a given letter</span>\n<span class="token keyword">const</span> <span class="token function-variable function">percent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">kv</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> mma<span class="token punctuation">.</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> top <span class="token operator">=</span> topThree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Letter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> appears </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">percent</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">% of the time.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Frequency tracking" src="/data/frequency/" />' } };
const $$metadata = createMetadata("/src/pages/data/frequency.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/components/data/freqWeighted';
` }, { type: "inline", value: `
  import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/data/frequency.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Frequency = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Frequency;
  const $$content = { "title": "Frequency", "astro": { "headers": [{ "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "adding-and-clearing", "text": "Adding and clearing" }, { "depth": 3, "slug": "working-with-frequency", "text": "Working with frequency" }, { "depth": 3, "slug": "iterating", "text": "Iterating" }, { "depth": 3, "slug": "custom-objects", "text": "Custom objects" }, { "depth": 2, "slug": "examples", "text": "Examples" }, { "depth": 3, "slug": "letter-frequency", "text": "Letter frequency" }], "source": '\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html">Data.FrequencyMutable class</a></li>\n<li><a href="../trackers/">Trackers</a> track data ranges</li>\n</div>\n\nThe `FrequencyMutable` class keeps track of the number of times a certain value is \'seen\'.\n\nIn some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that _mostly_ occurs.\n\nIn the demo below, a [weighted distribution](../../gen/random/#weighted-distribution) of random numbers is produced, with lower numbers occuring more often than higher numbers. A `FrequencyMutable` instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.\n\n<script type="module" hoist>\nimport \'/src/components/data/freqWeighted\';\n<\/script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class="toolbar centered">\n  <button id="btnStart">Start</button>\n  <button id="btnStop">Stop</button>\n  <button id="btnClear">Clear</button>\n</div>\n<div class="sxs">\n  <div class="dataLog" id="dataStream" style="max-height: 5em"></div>\n  <div>\n    <histogram-vis id="dataPlot"></histogram-vis>\n  </div>\n</div>\n\n\n## Usage\n\n[`frequencyMutable`](https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html) creates a new instance. The provided frequency histogram is _mutable_, meaning that the object reference stays the same while the data inside is permitted to change.\n\n\n### Adding and clearing\n\n```js\n// repl-pad#1\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\n// Create an instance\nconst freq = frequencyMutable();\n\n// Add data, here several at once\nfreq.add(`apples`, `oranges`, `apples`, `pears`, `pears`);\n\n// Get an array version\n// [ ["apples", 2], ["oranges",1],["pears",2] ]\nconst t = freq.toArray();\n```\n\nClear all data\n```js\nfreq.clear();\n```\n\n### Working with frequency\n\nGet the count of a specific group. Returns `undefined` if group is not found.\n\n```js\n// repl-pad#1\nconst f = freq.frequencyOf(`apples`); // 2\n```\n\nIt can be useful to work with the relative frequency rather than the absolute amount. For example, `apples` appears 40% of the time:\n\n```js\n// repl-pad#1\nconst rel = freq.relativeFrequencyOf(`apples`); // 0.4\n```\n\nTo find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):\n\n```js\n// repl-pad#1\n// Returns {min, max, avg, total}\nconst mma = freq.minMaxAvg(); \nconsole.log(`Average frequency is ${mma.avg}`);\n```\n\n### Iterating\n\nYou can get the data as an array and iterate:\n\n```js\n// repl-pad#1\nconst data = freq.entries(); // freq.toArray() gives same result\nfor (const [group, count] of data) {\n  console.log(`${group} has a count of ${count}`); // apples has a count of 2...\n}\n```\n\nTo get the entries sorted:\n\n```js\n// repl-pad#1\n// Sorting options are: value, valueReverse, key or keyReverse\nconst sorted = freq.entriesSorted(`key`); // Sort alphabetically by key\n```\n\n### Custom objects\n\nTo keep track of objects, provide a function that creates a string for the items you\'re adding. This allows you to group by different fields, or some combination of fields.\n\nIn the below example, cars are grouped by their make:\n\n```js\n// repl-pad\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\n// Two cars\nconst cars = [\n  {\n    make: `Toyota`,\n    model: `Corolla`,\n    year: 1980\n  },\n  {\n    make: `Honda`,\n    model: `Civic`,\n    year: 1985\n  }\n]\n\n// Count cars by make\nconst freq = frequencyMutable(car => car.make);\n\n// Add array of cars\nfreq.add(...cars);\n\n// Count a group\nfreq.frequencyOf(`Toyota`); // 1\n\n// Or by object, which uses the same stringify function\nfreq.frequencyOf(cars[1]); // 1\n```\n\n## Examples\n\n### Letter frequency\n\nThe below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the `Frequency`, sort by frequency and calculate a proportional amount.\n\n```js\n// repl-pad\nimport { frequencyMutable } from "https://unpkg.com/ixfx/dist/data.js"\n\nconst freq = frequencyMutable();\nconst text = \'This is a test\';\n\n// Loop through all characters\nfor (let i = 0; i < text.length; i++) {\n  const letter = text.toLocaleUpperCase().charAt(i);\n  if (letter === ` `) continue; // Skip spaces;\n  freq.add(letter); // Add letter\n}\n\n// Sort with most frequent at position 0 of the array\nconst sorted = freq.entriesSorted(`valueReverse`);\n// Grab just the top three\nconst topThree = sorted.slice(0, Math.min(sorted.length, 3));\n\n// Calculate the min, max and avg over all frequencies\nconst mma = freq.minMaxAvg();\n\n// Calculate percentage for a given letter\nconst percent = (kv) => Math.round(kv[1] / mma.total * 100);\n\nconst top = topThree[0];\nconsole.log(`Letter ${top[0]} appears ${percent(top)}% of the time.`);\n```\n\n<demo-element title="Frequency tracking" src="/data/frequency/" />\n', "html": '<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html">Data.FrequencyMutable class</a></li>\n<li><a href="../trackers/">Trackers</a> track data ranges</li>\n</div>\n<p>The <code is:raw>FrequencyMutable</code> class keeps track of the number of times a certain value is \'seen\'.</p>\n<p>In some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that <em>mostly</em> occurs.</p>\n<p>In the demo below, a <a href="../../gen/random/#weighted-distribution">weighted distribution</a> of random numbers is produced, with lower numbers occuring more often than higher numbers. A <code is:raw>FrequencyMutable</code> instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.</p>\n<script type="module" hoist>\nimport \'/src/components/data/freqWeighted\';\n<\/script>\n<style>\n  #dataStream {\n    width: 5em;\n  }\n  #dataStream {\n    flex-grow: unset;\n    max-height: 5em;\n    scoll-o\n  }\n</style>\n<div class="toolbar centered">\n  <button id="btnStart">Start</button>\n  <button id="btnStop">Stop</button>\n  <button id="btnClear">Clear</button>\n</div>\n<div class="sxs">\n  <div class="dataLog" id="dataStream" style="max-height: 5em"></div>\n  <div>\n    <histogram-vis id="dataPlot"></histogram-vis>\n  </div>\n</div>\n<h2 id="usage">Usage</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html"><code is:raw>frequencyMutable</code></a> creates a new instance. The provided frequency histogram is <em>mutable</em>, meaning that the object reference stays the same while the data inside is permitted to change.</p>\n<h3 id="adding-and-clearing">Adding and clearing</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token comment">// Create an instance</span>\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add data, here several at once</span>\nfreq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get an array version</span>\n<span class="token comment">// [ ["apples", 2], ["oranges",1],["pears",2] ]</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Clear all data</p>\n<pre class="language-js"><code is:raw class="language-js">freq<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="working-with-frequency">Working with frequency</h3>\n<p>Get the count of a specific group. Returns <code is:raw>undefined</code> if group is not found.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre>\n<p>It can be useful to work with the relative frequency rather than the absolute amount. For example, <code is:raw>apples</code> appears 40% of the time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> rel <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">relativeFrequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.4</span></code></pre>\n<p>To find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns {min, max, avg, total}</span>\n<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Average frequency is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mma<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h3 id="iterating">Iterating</h3>\n<p>You can get the data as an array and iterate:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// freq.toArray() gives same result</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>group<span class="token punctuation">,</span> count<span class="token punctuation">]</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>group<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has a count of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apples has a count of 2...</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To get the entries sorted:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Sorting options are: value, valueReverse, key or keyReverse</span>\n<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">key</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Sort alphabetically by key</span></code></pre>\n<h3 id="custom-objects">Custom objects</h3>\n<p>To keep track of objects, provide a function that creates a string for the items you\'re adding. This allows you to group by different fields, or some combination of fields.</p>\n<p>In the below example, cars are grouped by their make:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token comment">// Two cars</span>\n<span class="token keyword">const</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Toyota</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Corolla</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1980</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Honda</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Civic</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1985</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// Count cars by make</span>\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token parameter">car</span> <span class="token operator">=></span> car<span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add array of cars</span>\nfreq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>cars<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Count a group</span>\nfreq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Toyota</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// Or by object, which uses the same stringify function</span>\nfreq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre>\n<h2 id="examples">Examples</h2>\n<h3 id="letter-frequency">Letter frequency</h3>\n<p>The below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the <code is:raw>Frequency</code>, sort by frequency and calculate a proportional amount.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>\n\n<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">\'This is a test\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Loop through all characters</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> letter <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// Skip spaces;</span>\n  freq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add letter</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Sort with most frequent at position 0 of the array</span>\n<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">valueReverse</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Grab just the top three</span>\n<span class="token keyword">const</span> topThree <span class="token operator">=</span> sorted<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>sorted<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate the min, max and avg over all frequencies</span>\n<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate percentage for a given letter</span>\n<span class="token keyword">const</span> <span class="token function-variable function">percent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">kv</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> mma<span class="token punctuation">.</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> top <span class="token operator">=</span> topThree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Letter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> appears </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">percent</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">% of the time.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Frequency tracking" src="/data/frequency/" />' } };
  const STYLES = [
    { props: { "data-astro-id": "KUGVQ7KE" }, children: `#dataStream.astro-KUGVQ7KE{width:5em;}#dataStream.astro-KUGVQ7KE{flex-grow:unset;max-height:5em;scoll-o}` }
  ];
  for (const STYLE of STYLES)
    $$result.styles.add(STYLE);
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/data/freqWeighted';` },
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content, "class": "astro-KUGVQ7KE" }, { "default": () => render`<div class="tip astro-KUGVQ7KE">
<ul class="astro-KUGVQ7KE">
<li class="astro-KUGVQ7KE">API Reference <a href="https://clinth.github.io/ixfx/classes/Data.FrequencyMutable.html" class="astro-KUGVQ7KE">Data.FrequencyMutable class</a></li>
<li class="astro-KUGVQ7KE"><a href="../trackers/" class="astro-KUGVQ7KE">Trackers</a> track data ranges</li>
</ul></div><p class="astro-KUGVQ7KE">The <code class="astro-KUGVQ7KE">FrequencyMutable</code> class keeps track of the number of times a certain value is 'seen'.</p><p class="astro-KUGVQ7KE">In some scenarios it can be useful to aggregate data over time, rather than looking at a single event or snapshot-in-time. It allows you to do some fuzzy logic, for example using the value that <em class="astro-KUGVQ7KE">mostly</em> occurs.</p><p class="astro-KUGVQ7KE">In the demo below, a <a href="../../gen/random/#weighted-distribution" class="astro-KUGVQ7KE">weighted distribution</a> of random numbers is produced, with lower numbers occuring more often than higher numbers. A <code class="astro-KUGVQ7KE">FrequencyMutable</code> instance is used to count how many times each number appears, and for visualisation purposes shown as a histogram.</p><div class="toolbar centered astro-KUGVQ7KE">
  <button id="btnStart" class="astro-KUGVQ7KE">Start</button>
  <button id="btnStop" class="astro-KUGVQ7KE">Stop</button>
  <button id="btnClear" class="astro-KUGVQ7KE">Clear</button>
</div><div class="sxs astro-KUGVQ7KE">
  <div class="dataLog astro-KUGVQ7KE" id="dataStream" style="max-height: 5em"></div>
  <div class="astro-KUGVQ7KE">
    ${renderComponent($$result, "histogram-vis", "histogram-vis", { "id": "dataPlot", "class": "astro-KUGVQ7KE" })}
  </div>
</div><h2 id="usage" class="astro-KUGVQ7KE">Usage</h2><p class="astro-KUGVQ7KE"><a href="https://clinth.github.io/ixfx/functions/Data.frequencyMutable-1.html" class="astro-KUGVQ7KE"><code class="astro-KUGVQ7KE">frequencyMutable</code></a> creates a new instance. The provided frequency histogram is <em class="astro-KUGVQ7KE">mutable</em>, meaning that the object reference stays the same while the data inside is permitted to change.</p><h3 id="adding-and-clearing" class="astro-KUGVQ7KE">Adding and clearing</h3><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>

<span class="token comment">// Create an instance</span>
<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add data, here several at once</span>
freq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get an array version</span>
<span class="token comment">// [ ["apples", 2], ["oranges",1],["pears",2] ]</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p class="astro-KUGVQ7KE">Clear all data</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE">freq<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="working-with-frequency" class="astro-KUGVQ7KE">Working with frequency</h3><p class="astro-KUGVQ7KE">Get the count of a specific group. Returns <code class="astro-KUGVQ7KE">undefined</code> if group is not found.</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre><p class="astro-KUGVQ7KE">It can be useful to work with the relative frequency rather than the absolute amount. For example, <code class="astro-KUGVQ7KE">apples</code> appears 40% of the time:</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">const</span> rel <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">relativeFrequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.4</span></code></pre><p class="astro-KUGVQ7KE">To find the smallest, largest, average frequencies as well as the total frequency (ie. how many things have been added):</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad#1</span>
<span class="token comment">// Returns {min, max, avg, total}</span>
<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Average frequency is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>mma<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="iterating" class="astro-KUGVQ7KE">Iterating</h3><p class="astro-KUGVQ7KE">You can get the data as an array and iterate:</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// freq.toArray() gives same result</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>group<span class="token punctuation">,</span> count<span class="token punctuation">]</span> <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>group<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has a count of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apples has a count of 2...</span>
<span class="token punctuation">}</span></code></pre><p class="astro-KUGVQ7KE">To get the entries sorted:</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad#1</span>
<span class="token comment">// Sorting options are: value, valueReverse, key or keyReverse</span>
<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Sort alphabetically by key</span></code></pre><h3 id="custom-objects" class="astro-KUGVQ7KE">Custom objects</h3><p class="astro-KUGVQ7KE">To keep track of objects, provide a function that creates a string for the items you're adding. This allows you to group by different fields, or some combination of fields.</p><p class="astro-KUGVQ7KE">In the below example, cars are grouped by their make:</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>

<span class="token comment">// Two cars</span>
<span class="token keyword">const</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Toyota</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Corolla</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1980</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Honda</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Civic</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token number">1985</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment">// Count cars by make</span>
<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token parameter">car</span> <span class="token operator">=></span> car<span class="token punctuation">.</span>make<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add array of cars</span>
freq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>cars<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Count a group</span>
freq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Toyota</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// Or by object, which uses the same stringify function</span>
freq<span class="token punctuation">.</span><span class="token function">frequencyOf</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre><h2 id="examples" class="astro-KUGVQ7KE">Examples</h2><h3 id="letter-frequency" class="astro-KUGVQ7KE">Letter frequency</h3><p class="astro-KUGVQ7KE">The below example calculates frequency distribution of letters in a string. It demonstrates how to add items to the <code class="astro-KUGVQ7KE">Frequency</code>, sort by frequency and calculate a proportional amount.</p><pre class="language-js astro-KUGVQ7KE"><code class="language-js astro-KUGVQ7KE"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> frequencyMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span>

<span class="token keyword">const</span> freq <span class="token operator">=</span> <span class="token function">frequencyMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">'This is a test'</span><span class="token punctuation">;</span>

<span class="token comment">// Loop through all characters</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> letter <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>letter <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// Skip spaces;</span>
  freq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add letter</span>
<span class="token punctuation">}</span>

<span class="token comment">// Sort with most frequent at position 0 of the array</span>
<span class="token keyword">const</span> sorted <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">entriesSorted</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">valueReverse</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Grab just the top three</span>
<span class="token keyword">const</span> topThree <span class="token operator">=</span> sorted<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>sorted<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Calculate the min, max and avg over all frequencies</span>
<span class="token keyword">const</span> mma <span class="token operator">=</span> freq<span class="token punctuation">.</span><span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Calculate percentage for a given letter</span>
<span class="token keyword">const</span> <span class="token function-variable function">percent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">kv</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> mma<span class="token punctuation">.</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> top <span class="token operator">=</span> topThree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Letter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> appears </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">percent</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">% of the time.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Frequency tracking", "src": "/data/frequency/", "class": "astro-KUGVQ7KE" })}` })}`;
});

export { $$metadata, $$Frequency as default, frontmatter, metadata };
