import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "running-code-in-a-timed-loop", "text": "Running code in a timed loop" }, { "depth": 3, "slug": "continuously", "text": "Continuously" }, { "depth": 4, "slug": "control", "text": "Control" }, { "depth": 3, "slug": "delayed-loop", "text": "Delayed loop" }, { "depth": 2, "slug": "repeat", "text": "Repeat" }, { "depth": 2, "slug": "interval", "text": "Interval" }], "source": "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n<\/script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations. It's a generator.\n* [interval](#interval): Calls an async function or generator with some delay, returning results as they happen. It's a generator.\n* [repeat](#repeat): Execute a function a given number of times, collecting results. It's a generator.\n\n## Running code in a timed loop\n\nSome basic loops in Javascript look like:\n\n```js\nwhile (hue < 100) {\n  hue++;\n}\n\nconst list [ 100, 231, 90 ];\nfor (const i of list) {\n  // Do something with each item of the list\n}\n```\n\nThey don't have any in-built options for looping at a certain speed.\n\nInstead, we might use `setTimeout` or `setInterval`:\n```js\nsetInterval(() => {\n  // do something\n}, 1000); // Code every second\n\n// OR:\nconst f = () => {\n  // Reschedule itself to run again \n  // in 1 second, creating a loop\n  setTimeout(f, 1000);\n}\n// Initial schedule 'f' in one second\nsetTimeout(f, 1000);\n```\n\nOr perhaps we want to run a loop really fast, `requestAnimationFrame` is meant for animation loops:\n\n```js\nconst draw = () => {\n  // ... do some drawing\n  window.requestAnimationFrame(draw); // Reschedule\n}\nwindow.requestAnimationFrame(draw); // Schedule\n```\n\nThis might just be fine, however:\n* If you want to start/stop you have to keep track of the id of the timer\n* More plumbing required to adjust loop speed as it runs\n* Not particularly readable\n\nixfx has two functions to help with timed loops:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations\n\n### Continuously\n\n[`continuously`](https://clinth.github.io/ixfx/functions/Flow.continuously-1.html) is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.\n\nBy default, it runs at animation speed, useful for updating a canvas:\n\n```js\nimport { continuously } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\ncontinuously(() => {\n  // Do something at animation loop speed\n}).start();\n```\n\nIf you don't want the loop to run as fast as possible, provide an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html) or a number denoting milliseconds:\n\n```js\nconst fetchData = () => { // Do something };\n\n// Runs every minute\ncontinuously(fetchData, { mins: 1 }).start();\n```\n\nExamples of `continuously` in action:\n* [Poll data from an API](https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll)\n* [Animate a gradient](https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate)\n* [Process a list of things](https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async)\n\n#### Control\n\nNote the use of `start` to start the loop. This allows you setup the loop once, and trigger it from different places. If `start` is called while already running, the timer is reset. `cancel` stops a loop that is scheduled to run.\n\n```js\nconst job = () => { ... }\nconst jobLoop = continuously(job, 1000);\n...\njobLoop.start();  // Starts loop, or resets it if already pending\njobLoop.cancel(); // Cancels a scheduled loop\njobLoop.interval = { secs: 5 }; // Change loop speed\n```\n\nIt's possible to check the status of a `continuously` instance with its `runState` property. It returns a string, one of:\n* \"idle\": not yet started, or has been stopped.\n* \"scheduled\": started, waiting to run the callback.\n* \"running\": currently executing the callback.\n\n\n### Delayed loop\n\nIf you don't need to adjust the loop or control it from other parts of your code, [`delayLoop`](https://clinth.github.io/ixfx/functions/Flow.delayLoop.html) might be what you need. It is an async generator which runs indefinitely and has a simple syntax:\n\n```js\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nfor await (const o of delayLoop(1000)) {\n  // Do something every second\n  // Warning: loops forever\n}\n// Execution won't continue here until the loop is exited\n```\n\nNote the use of _for await_ is important here. Use `break` when you want to exit the loop.\n\nUsing `for await` means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:\n\n```js\n// repl-pad\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nsetTimeout(async () => {\n  for await (const o of delayLoop(1000)) {\n    console.log(`!`);\n  }\n});\n// Execution continues while looped code runs in parallel\nconsole.log(`Hello`);\n```\n\n`delayLoop` does not gather the results of the looped code. If that's what you need, consider [`repeat`](#repeat) or [`interval`](#interval).\n\n## Repeat\n\n[`repeat`](https://clinth.github.io/ixfx/functions/Flow.repeat.html) runs a function a certain number of times, yielding the results one-by-one. \n```js\n// repl-pad\nimport { repeat } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Five random numbers in an array\nconst results = [...repeat(5, Math.random)];\n\n// Or in a for-of loop:\nfor (const result of repeat(5, Math.random)) {\n  console.log(result);\n}\n// Exits after 5 numbers\n```\n\nThere's also an async version if the function being repeated needs to be _awaited_:\n```js\nimport { repeatAwait, sleep } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Some function that doesn't return until 1 second \nasync function task() {\n  await sleep(1000);\n  return Math.random();\n}\n\nfor await (const result of repeat(5, task)) {\n  console.log(result);\n}\n```\n\nIf you just want to run a function several times without caring about its return value, consider using [`count`](../../gen/generator/#count) instead.\n\n## Interval\n\n[`interval`](https://clinth.github.io/ixfx/functions/Flow.interval-1.html) calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the `for await` rather than `for`.\n\nThis example prints a new random number every second\n\n```js\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Call Math.random at a fixed interval of 1000ms\nconst randomGenerator = interval(Math.random, { fixed: 1000 } );\n\nfor await (const r of randomGenerator) {\n  // Prints a new random number every second\n  console.log(r);\n}\n// This will not run unless there is a `break` in the for await loop\nconsole.log(`Done.`); \n```\n\nWhen calling `interval`, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.\n\nThe second parameter are the options:\n\n```typescript\nIntervalOpts: {\n  delay?: \"before\" | \"after\"; // Should delay be before or after inner code is run?\n  fixed?: Interval;     // Use a fixed delay between iterations\n  minimum?: Interval;   // Enforce a minimum time between iterations\n  signal?: AbortSignal; // Signal to stop interval looping\n}\n```\n\nIn the earlier example, we used the `fixed` parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the `minimum` field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.\n\n`interval` can also be invoked more simply by just passing a number, which represents the fixed milliseconds.\n\n```js\n// These lines are the same\ninterval(Math.random, 1000 );\ninterval(Math.random, { fixed: 1000 } );\n```\n\nExample: Iterate through items in a list, with a delay of one minute before each item\n\n```js\nconst opts = { fixed: { mins: 1 }, delay: 'before' };\nconst list = [ 'thom', 'jonny', 'colin', 'ed', 'phil' ];\nfor await (const i of interval(list, opts)) {\n  // do something with i (code first runs after 1min wait)\n}\n```\n\nExample: Using a generator\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\";\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\";\n\n// A generator that counts to 5\nconst counter = count(5);\n\n// Loop over counter with 1000ms delay\nfor await (const v of interval(counter, 1000)) {\n  // Counts from 0...4, with a delay between each\n  // (although using ixfx's 'repeat' function would be the better way to do this)\n  console.log(v);\n}\n```\n\nOr alternatively, using the `.next().value` style of accessing a generator:\n\n```js\nconst counter = count(5);\nconst counterInterval = interval(counter, 1000);\n// Pauses until interval is up\nconst v = await counterInterval.next().value;\n// Execution continues after interval period...\n```\n", "html": `<script type="module" hoist>
import '/src/components/ReplPad';
<\/script>
<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
</ul></div>
<p>Overview:</p>
<ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations. It's a generator.</li>
<li><a href="#interval">interval</a>: Calls an async function or generator with some delay, returning results as they happen. It's a generator.</li>
<li><a href="#repeat">repeat</a>: Execute a function a given number of times, collecting results. It's a generator.</li>
</ul>
<h2 id="running-code-in-a-timed-loop">Running code in a timed loop</h2>
<p>Some basic loops in Javascript look like:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>hue <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  hue<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> list <span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with each item of the list</span>
<span class="token punctuation">}</span></code></pre>
<p>They don't have any in-built options for looping at a certain speed.</p>
<p>Instead, we might use <code is:raw>setTimeout</code> or <code is:raw>setInterval</code>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Code every second</span>

<span class="token comment">// OR:</span>
<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Reschedule itself to run again </span>
  <span class="token comment">// in 1 second, creating a loop</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Initial schedule 'f' in one second</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Or perhaps we want to run a loop really fast, <code is:raw>requestAnimationFrame</code> is meant for animation loops:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// ... do some drawing</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reschedule</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Schedule</span></code></pre>
<p>This might just be fine, however:</p>
<ul>
<li>If you want to start/stop you have to keep track of the id of the timer</li>
<li>More plumbing required to adjust loop speed as it runs</li>
<li>Not particularly readable</li>
</ul>
<p>ixfx has two functions to help with timed loops:</p>
<ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations</li>
</ul>
<h3 id="continuously">Continuously</h3>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.continuously-1.html"><code is:raw>continuously</code></a> is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.</p>
<p>By default, it runs at animation speed, useful for updating a canvas:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something at animation loop speed</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you don't want the loop to run as fast as possible, provide an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code is:raw>Interval</code></a> or a number denoting milliseconds:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// Do something };</span>

<span class="token comment">// Runs every minute</span>
<span class="token function">continuously</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Examples of <code is:raw>continuously</code> in action:</p>
<ul>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll">Poll data from an API</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate">Animate a gradient</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async">Process a list of things</a></li>
</ul>
<h4 id="control">Control</h4>
<p>Note the use of <code is:raw>start</code> to start the loop. This allows you setup the loop once, and trigger it from different places. If <code is:raw>start</code> is called while already running, the timer is reset. <code is:raw>cancel</code> stops a loop that is scheduled to run.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">job</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> jobLoop <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
jobLoop<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Starts loop, or resets it if already pending</span>
jobLoop<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cancels a scheduled loop</span>
jobLoop<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Change loop speed</span></code></pre>
<p>It's possible to check the status of a <code is:raw>continuously</code> instance with its <code is:raw>runState</code> property. It returns a string, one of:</p>
<ul>
<li>"idle": not yet started, or has been stopped.</li>
<li>"scheduled": started, waiting to run the callback.</li>
<li>"running": currently executing the callback.</li>
</ul>
<h3 id="delayed-loop">Delayed loop</h3>
<p>If you don't need to adjust the loop or control it from other parts of your code, <a href="https://clinth.github.io/ixfx/functions/Flow.delayLoop.html"><code is:raw>delayLoop</code></a> might be what you need. It is an async generator which runs indefinitely and has a simple syntax:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something every second</span>
  <span class="token comment">// Warning: loops forever</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution won't continue here until the loop is exited</span></code></pre>
<p>Note the use of <em>for await</em> is important here. Use <code is:raw>break</code> when you want to exit the loop.</p>
<p>Using <code is:raw>for await</code> means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues while looped code runs in parallel</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>delayLoop</code> does not gather the results of the looped code. If that's what you need, consider <a href="#repeat"><code is:raw>repeat</code></a> or <a href="#interval"><code is:raw>interval</code></a>.</p>
<h2 id="repeat">Repeat</h2>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.repeat.html"><code is:raw>repeat</code></a> runs a function a certain number of times, yielding the results one-by-one.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> repeat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Five random numbers in an array</span>
<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Or in a for-of loop:</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Exits after 5 numbers</span></code></pre>
<p>There's also an async version if the function being repeated needs to be <em>awaited</em>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> repeatAwait<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Some function that doesn't return until 1 second </span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>If you just want to run a function several times without caring about its return value, consider using <a href="../../gen/generator/#count"><code is:raw>count</code></a> instead.</p>
<h2 id="interval">Interval</h2>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.interval-1.html"><code is:raw>interval</code></a> calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the <code is:raw>for await</code> rather than <code is:raw>for</code>.</p>
<p>This example prints a new random number every second</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Call Math.random at a fixed interval of 1000ms</span>
<span class="token keyword">const</span> randomGenerator <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> r <span class="token keyword">of</span> randomGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints a new random number every second</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// This will not run unless there is a \`break\` in the for await loop</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>When calling <code is:raw>interval</code>, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.</p>
<p>The second parameter are the options:</p>
<pre class="language-typescript"><code is:raw class="language-typescript">IntervalOpts<span class="token operator">:</span> <span class="token punctuation">{</span>
  delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"before"</span> <span class="token operator">|</span> <span class="token string">"after"</span><span class="token punctuation">;</span> <span class="token comment">// Should delay be before or after inner code is run?</span>
  fixed<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>     <span class="token comment">// Use a fixed delay between iterations</span>
  minimum<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>   <span class="token comment">// Enforce a minimum time between iterations</span>
  signal<span class="token operator">?</span><span class="token operator">:</span> AbortSignal<span class="token punctuation">;</span> <span class="token comment">// Signal to stop interval looping</span>
<span class="token punctuation">}</span></code></pre>
<p>In the earlier example, we used the <code is:raw>fixed</code> parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the <code is:raw>minimum</code> field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.</p>
<p><code is:raw>interval</code> can also be invoked more simply by just passing a number, which represents the fixed milliseconds.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// These lines are the same</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example: Iterate through items in a list, with a delay of one minute before each item</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">'before'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'thom'</span><span class="token punctuation">,</span> <span class="token string">'jonny'</span><span class="token punctuation">,</span> <span class="token string">'colin'</span><span class="token punctuation">,</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'phil'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with i (code first runs after 1min wait)</span>
<span class="token punctuation">}</span></code></pre>
<p>Example: Using a generator</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/generators.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span><span class="token punctuation">;</span>

<span class="token comment">// A generator that counts to 5</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Loop over counter with 1000ms delay</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Counts from 0...4, with a delay between each</span>
  <span class="token comment">// (although using ixfx's 'repeat' function would be the better way to do this)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Or alternatively, using the <code is:raw>.next().value</code> style of accessing a generator:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counterInterval <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pauses until interval is up</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> counterInterval<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token comment">// Execution continues after interval period...</span></code></pre>` };
const frontmatter = { "title": "Loops and Intervals", "astro": { "headers": [{ "depth": 2, "slug": "running-code-in-a-timed-loop", "text": "Running code in a timed loop" }, { "depth": 3, "slug": "continuously", "text": "Continuously" }, { "depth": 4, "slug": "control", "text": "Control" }, { "depth": 3, "slug": "delayed-loop", "text": "Delayed loop" }, { "depth": 2, "slug": "repeat", "text": "Repeat" }, { "depth": 2, "slug": "interval", "text": "Interval" }], "source": "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n<\/script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations. It's a generator.\n* [interval](#interval): Calls an async function or generator with some delay, returning results as they happen. It's a generator.\n* [repeat](#repeat): Execute a function a given number of times, collecting results. It's a generator.\n\n## Running code in a timed loop\n\nSome basic loops in Javascript look like:\n\n```js\nwhile (hue < 100) {\n  hue++;\n}\n\nconst list [ 100, 231, 90 ];\nfor (const i of list) {\n  // Do something with each item of the list\n}\n```\n\nThey don't have any in-built options for looping at a certain speed.\n\nInstead, we might use `setTimeout` or `setInterval`:\n```js\nsetInterval(() => {\n  // do something\n}, 1000); // Code every second\n\n// OR:\nconst f = () => {\n  // Reschedule itself to run again \n  // in 1 second, creating a loop\n  setTimeout(f, 1000);\n}\n// Initial schedule 'f' in one second\nsetTimeout(f, 1000);\n```\n\nOr perhaps we want to run a loop really fast, `requestAnimationFrame` is meant for animation loops:\n\n```js\nconst draw = () => {\n  // ... do some drawing\n  window.requestAnimationFrame(draw); // Reschedule\n}\nwindow.requestAnimationFrame(draw); // Schedule\n```\n\nThis might just be fine, however:\n* If you want to start/stop you have to keep track of the id of the timer\n* More plumbing required to adjust loop speed as it runs\n* Not particularly readable\n\nixfx has two functions to help with timed loops:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations\n\n### Continuously\n\n[`continuously`](https://clinth.github.io/ixfx/functions/Flow.continuously-1.html) is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.\n\nBy default, it runs at animation speed, useful for updating a canvas:\n\n```js\nimport { continuously } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\ncontinuously(() => {\n  // Do something at animation loop speed\n}).start();\n```\n\nIf you don't want the loop to run as fast as possible, provide an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html) or a number denoting milliseconds:\n\n```js\nconst fetchData = () => { // Do something };\n\n// Runs every minute\ncontinuously(fetchData, { mins: 1 }).start();\n```\n\nExamples of `continuously` in action:\n* [Poll data from an API](https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll)\n* [Animate a gradient](https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate)\n* [Process a list of things](https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async)\n\n#### Control\n\nNote the use of `start` to start the loop. This allows you setup the loop once, and trigger it from different places. If `start` is called while already running, the timer is reset. `cancel` stops a loop that is scheduled to run.\n\n```js\nconst job = () => { ... }\nconst jobLoop = continuously(job, 1000);\n...\njobLoop.start();  // Starts loop, or resets it if already pending\njobLoop.cancel(); // Cancels a scheduled loop\njobLoop.interval = { secs: 5 }; // Change loop speed\n```\n\nIt's possible to check the status of a `continuously` instance with its `runState` property. It returns a string, one of:\n* \"idle\": not yet started, or has been stopped.\n* \"scheduled\": started, waiting to run the callback.\n* \"running\": currently executing the callback.\n\n\n### Delayed loop\n\nIf you don't need to adjust the loop or control it from other parts of your code, [`delayLoop`](https://clinth.github.io/ixfx/functions/Flow.delayLoop.html) might be what you need. It is an async generator which runs indefinitely and has a simple syntax:\n\n```js\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nfor await (const o of delayLoop(1000)) {\n  // Do something every second\n  // Warning: loops forever\n}\n// Execution won't continue here until the loop is exited\n```\n\nNote the use of _for await_ is important here. Use `break` when you want to exit the loop.\n\nUsing `for await` means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:\n\n```js\n// repl-pad\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nsetTimeout(async () => {\n  for await (const o of delayLoop(1000)) {\n    console.log(`!`);\n  }\n});\n// Execution continues while looped code runs in parallel\nconsole.log(`Hello`);\n```\n\n`delayLoop` does not gather the results of the looped code. If that's what you need, consider [`repeat`](#repeat) or [`interval`](#interval).\n\n## Repeat\n\n[`repeat`](https://clinth.github.io/ixfx/functions/Flow.repeat.html) runs a function a certain number of times, yielding the results one-by-one. \n```js\n// repl-pad\nimport { repeat } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Five random numbers in an array\nconst results = [...repeat(5, Math.random)];\n\n// Or in a for-of loop:\nfor (const result of repeat(5, Math.random)) {\n  console.log(result);\n}\n// Exits after 5 numbers\n```\n\nThere's also an async version if the function being repeated needs to be _awaited_:\n```js\nimport { repeatAwait, sleep } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Some function that doesn't return until 1 second \nasync function task() {\n  await sleep(1000);\n  return Math.random();\n}\n\nfor await (const result of repeat(5, task)) {\n  console.log(result);\n}\n```\n\nIf you just want to run a function several times without caring about its return value, consider using [`count`](../../gen/generator/#count) instead.\n\n## Interval\n\n[`interval`](https://clinth.github.io/ixfx/functions/Flow.interval-1.html) calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the `for await` rather than `for`.\n\nThis example prints a new random number every second\n\n```js\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Call Math.random at a fixed interval of 1000ms\nconst randomGenerator = interval(Math.random, { fixed: 1000 } );\n\nfor await (const r of randomGenerator) {\n  // Prints a new random number every second\n  console.log(r);\n}\n// This will not run unless there is a `break` in the for await loop\nconsole.log(`Done.`); \n```\n\nWhen calling `interval`, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.\n\nThe second parameter are the options:\n\n```typescript\nIntervalOpts: {\n  delay?: \"before\" | \"after\"; // Should delay be before or after inner code is run?\n  fixed?: Interval;     // Use a fixed delay between iterations\n  minimum?: Interval;   // Enforce a minimum time between iterations\n  signal?: AbortSignal; // Signal to stop interval looping\n}\n```\n\nIn the earlier example, we used the `fixed` parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the `minimum` field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.\n\n`interval` can also be invoked more simply by just passing a number, which represents the fixed milliseconds.\n\n```js\n// These lines are the same\ninterval(Math.random, 1000 );\ninterval(Math.random, { fixed: 1000 } );\n```\n\nExample: Iterate through items in a list, with a delay of one minute before each item\n\n```js\nconst opts = { fixed: { mins: 1 }, delay: 'before' };\nconst list = [ 'thom', 'jonny', 'colin', 'ed', 'phil' ];\nfor await (const i of interval(list, opts)) {\n  // do something with i (code first runs after 1min wait)\n}\n```\n\nExample: Using a generator\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\";\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\";\n\n// A generator that counts to 5\nconst counter = count(5);\n\n// Loop over counter with 1000ms delay\nfor await (const v of interval(counter, 1000)) {\n  // Counts from 0...4, with a delay between each\n  // (although using ixfx's 'repeat' function would be the better way to do this)\n  console.log(v);\n}\n```\n\nOr alternatively, using the `.next().value` style of accessing a generator:\n\n```js\nconst counter = count(5);\nconst counterInterval = interval(counter, 1000);\n// Pauses until interval is up\nconst v = await counterInterval.next().value;\n// Execution continues after interval period...\n```\n", "html": `<script type="module" hoist>
import '/src/components/ReplPad';
<\/script>
<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
</ul></div>
<p>Overview:</p>
<ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations. It's a generator.</li>
<li><a href="#interval">interval</a>: Calls an async function or generator with some delay, returning results as they happen. It's a generator.</li>
<li><a href="#repeat">repeat</a>: Execute a function a given number of times, collecting results. It's a generator.</li>
</ul>
<h2 id="running-code-in-a-timed-loop">Running code in a timed loop</h2>
<p>Some basic loops in Javascript look like:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>hue <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  hue<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> list <span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with each item of the list</span>
<span class="token punctuation">}</span></code></pre>
<p>They don't have any in-built options for looping at a certain speed.</p>
<p>Instead, we might use <code is:raw>setTimeout</code> or <code is:raw>setInterval</code>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Code every second</span>

<span class="token comment">// OR:</span>
<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Reschedule itself to run again </span>
  <span class="token comment">// in 1 second, creating a loop</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Initial schedule 'f' in one second</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Or perhaps we want to run a loop really fast, <code is:raw>requestAnimationFrame</code> is meant for animation loops:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// ... do some drawing</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reschedule</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Schedule</span></code></pre>
<p>This might just be fine, however:</p>
<ul>
<li>If you want to start/stop you have to keep track of the id of the timer</li>
<li>More plumbing required to adjust loop speed as it runs</li>
<li>Not particularly readable</li>
</ul>
<p>ixfx has two functions to help with timed loops:</p>
<ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations</li>
</ul>
<h3 id="continuously">Continuously</h3>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.continuously-1.html"><code is:raw>continuously</code></a> is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.</p>
<p>By default, it runs at animation speed, useful for updating a canvas:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something at animation loop speed</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you don't want the loop to run as fast as possible, provide an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code is:raw>Interval</code></a> or a number denoting milliseconds:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// Do something };</span>

<span class="token comment">// Runs every minute</span>
<span class="token function">continuously</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Examples of <code is:raw>continuously</code> in action:</p>
<ul>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll">Poll data from an API</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate">Animate a gradient</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async">Process a list of things</a></li>
</ul>
<h4 id="control">Control</h4>
<p>Note the use of <code is:raw>start</code> to start the loop. This allows you setup the loop once, and trigger it from different places. If <code is:raw>start</code> is called while already running, the timer is reset. <code is:raw>cancel</code> stops a loop that is scheduled to run.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">job</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> jobLoop <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
jobLoop<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Starts loop, or resets it if already pending</span>
jobLoop<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cancels a scheduled loop</span>
jobLoop<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Change loop speed</span></code></pre>
<p>It's possible to check the status of a <code is:raw>continuously</code> instance with its <code is:raw>runState</code> property. It returns a string, one of:</p>
<ul>
<li>"idle": not yet started, or has been stopped.</li>
<li>"scheduled": started, waiting to run the callback.</li>
<li>"running": currently executing the callback.</li>
</ul>
<h3 id="delayed-loop">Delayed loop</h3>
<p>If you don't need to adjust the loop or control it from other parts of your code, <a href="https://clinth.github.io/ixfx/functions/Flow.delayLoop.html"><code is:raw>delayLoop</code></a> might be what you need. It is an async generator which runs indefinitely and has a simple syntax:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something every second</span>
  <span class="token comment">// Warning: loops forever</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution won't continue here until the loop is exited</span></code></pre>
<p>Note the use of <em>for await</em> is important here. Use <code is:raw>break</code> when you want to exit the loop.</p>
<p>Using <code is:raw>for await</code> means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues while looped code runs in parallel</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>delayLoop</code> does not gather the results of the looped code. If that's what you need, consider <a href="#repeat"><code is:raw>repeat</code></a> or <a href="#interval"><code is:raw>interval</code></a>.</p>
<h2 id="repeat">Repeat</h2>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.repeat.html"><code is:raw>repeat</code></a> runs a function a certain number of times, yielding the results one-by-one.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> repeat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Five random numbers in an array</span>
<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Or in a for-of loop:</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Exits after 5 numbers</span></code></pre>
<p>There's also an async version if the function being repeated needs to be <em>awaited</em>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> repeatAwait<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Some function that doesn't return until 1 second </span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>If you just want to run a function several times without caring about its return value, consider using <a href="../../gen/generator/#count"><code is:raw>count</code></a> instead.</p>
<h2 id="interval">Interval</h2>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.interval-1.html"><code is:raw>interval</code></a> calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the <code is:raw>for await</code> rather than <code is:raw>for</code>.</p>
<p>This example prints a new random number every second</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Call Math.random at a fixed interval of 1000ms</span>
<span class="token keyword">const</span> randomGenerator <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> r <span class="token keyword">of</span> randomGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints a new random number every second</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// This will not run unless there is a \`break\` in the for await loop</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>When calling <code is:raw>interval</code>, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.</p>
<p>The second parameter are the options:</p>
<pre class="language-typescript"><code is:raw class="language-typescript">IntervalOpts<span class="token operator">:</span> <span class="token punctuation">{</span>
  delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"before"</span> <span class="token operator">|</span> <span class="token string">"after"</span><span class="token punctuation">;</span> <span class="token comment">// Should delay be before or after inner code is run?</span>
  fixed<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>     <span class="token comment">// Use a fixed delay between iterations</span>
  minimum<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>   <span class="token comment">// Enforce a minimum time between iterations</span>
  signal<span class="token operator">?</span><span class="token operator">:</span> AbortSignal<span class="token punctuation">;</span> <span class="token comment">// Signal to stop interval looping</span>
<span class="token punctuation">}</span></code></pre>
<p>In the earlier example, we used the <code is:raw>fixed</code> parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the <code is:raw>minimum</code> field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.</p>
<p><code is:raw>interval</code> can also be invoked more simply by just passing a number, which represents the fixed milliseconds.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// These lines are the same</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example: Iterate through items in a list, with a delay of one minute before each item</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">'before'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'thom'</span><span class="token punctuation">,</span> <span class="token string">'jonny'</span><span class="token punctuation">,</span> <span class="token string">'colin'</span><span class="token punctuation">,</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'phil'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with i (code first runs after 1min wait)</span>
<span class="token punctuation">}</span></code></pre>
<p>Example: Using a generator</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/generators.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span><span class="token punctuation">;</span>

<span class="token comment">// A generator that counts to 5</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Loop over counter with 1000ms delay</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Counts from 0...4, with a delay between each</span>
  <span class="token comment">// (although using ixfx's 'repeat' function would be the better way to do this)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Or alternatively, using the <code is:raw>.next().value</code> style of accessing a generator:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counterInterval <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pauses until interval is up</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> counterInterval<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token comment">// Execution continues after interval period...</span></code></pre>` } };
const $$metadata = createMetadata("/src/pages/flow/loops.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/flow/loops.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Loops = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Loops;
  const $$content = { "title": "Loops and Intervals", "astro": { "headers": [{ "depth": 2, "slug": "running-code-in-a-timed-loop", "text": "Running code in a timed loop" }, { "depth": 3, "slug": "continuously", "text": "Continuously" }, { "depth": 4, "slug": "control", "text": "Control" }, { "depth": 3, "slug": "delayed-loop", "text": "Delayed loop" }, { "depth": 2, "slug": "repeat", "text": "Repeat" }, { "depth": 2, "slug": "interval", "text": "Interval" }], "source": "\n<script type=\"module\" hoist>\nimport '/src/components/ReplPad';\n<\/script>\n<div class=\"tip\"><ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Flow.html\">Flow module</a></li>\n<li><a href=\"https://clinth.github.io/ixfx-demos/flow/\">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations. It's a generator.\n* [interval](#interval): Calls an async function or generator with some delay, returning results as they happen. It's a generator.\n* [repeat](#repeat): Execute a function a given number of times, collecting results. It's a generator.\n\n## Running code in a timed loop\n\nSome basic loops in Javascript look like:\n\n```js\nwhile (hue < 100) {\n  hue++;\n}\n\nconst list [ 100, 231, 90 ];\nfor (const i of list) {\n  // Do something with each item of the list\n}\n```\n\nThey don't have any in-built options for looping at a certain speed.\n\nInstead, we might use `setTimeout` or `setInterval`:\n```js\nsetInterval(() => {\n  // do something\n}, 1000); // Code every second\n\n// OR:\nconst f = () => {\n  // Reschedule itself to run again \n  // in 1 second, creating a loop\n  setTimeout(f, 1000);\n}\n// Initial schedule 'f' in one second\nsetTimeout(f, 1000);\n```\n\nOr perhaps we want to run a loop really fast, `requestAnimationFrame` is meant for animation loops:\n\n```js\nconst draw = () => {\n  // ... do some drawing\n  window.requestAnimationFrame(draw); // Reschedule\n}\nwindow.requestAnimationFrame(draw); // Schedule\n```\n\nThis might just be fine, however:\n* If you want to start/stop you have to keep track of the id of the timer\n* More plumbing required to adjust loop speed as it runs\n* Not particularly readable\n\nixfx has two functions to help with timed loops:\n* [continuously](#continuously): Useful for a 'main loop', can be controlled\n* [delayLoop](#delayed-loop): A 'for' loop with some delay between iterations\n\n### Continuously\n\n[`continuously`](https://clinth.github.io/ixfx/functions/Flow.continuously-1.html) is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.\n\nBy default, it runs at animation speed, useful for updating a canvas:\n\n```js\nimport { continuously } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\ncontinuously(() => {\n  // Do something at animation loop speed\n}).start();\n```\n\nIf you don't want the loop to run as fast as possible, provide an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html) or a number denoting milliseconds:\n\n```js\nconst fetchData = () => { // Do something };\n\n// Runs every minute\ncontinuously(fetchData, { mins: 1 }).start();\n```\n\nExamples of `continuously` in action:\n* [Poll data from an API](https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll)\n* [Animate a gradient](https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate)\n* [Process a list of things](https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async)\n\n#### Control\n\nNote the use of `start` to start the loop. This allows you setup the loop once, and trigger it from different places. If `start` is called while already running, the timer is reset. `cancel` stops a loop that is scheduled to run.\n\n```js\nconst job = () => { ... }\nconst jobLoop = continuously(job, 1000);\n...\njobLoop.start();  // Starts loop, or resets it if already pending\njobLoop.cancel(); // Cancels a scheduled loop\njobLoop.interval = { secs: 5 }; // Change loop speed\n```\n\nIt's possible to check the status of a `continuously` instance with its `runState` property. It returns a string, one of:\n* \"idle\": not yet started, or has been stopped.\n* \"scheduled\": started, waiting to run the callback.\n* \"running\": currently executing the callback.\n\n\n### Delayed loop\n\nIf you don't need to adjust the loop or control it from other parts of your code, [`delayLoop`](https://clinth.github.io/ixfx/functions/Flow.delayLoop.html) might be what you need. It is an async generator which runs indefinitely and has a simple syntax:\n\n```js\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nfor await (const o of delayLoop(1000)) {\n  // Do something every second\n  // Warning: loops forever\n}\n// Execution won't continue here until the loop is exited\n```\n\nNote the use of _for await_ is important here. Use `break` when you want to exit the loop.\n\nUsing `for await` means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:\n\n```js\n// repl-pad\nimport { delayLoop } from \"https://unpkg.com/ixfx/dist/flow.js\"\nsetTimeout(async () => {\n  for await (const o of delayLoop(1000)) {\n    console.log(`!`);\n  }\n});\n// Execution continues while looped code runs in parallel\nconsole.log(`Hello`);\n```\n\n`delayLoop` does not gather the results of the looped code. If that's what you need, consider [`repeat`](#repeat) or [`interval`](#interval).\n\n## Repeat\n\n[`repeat`](https://clinth.github.io/ixfx/functions/Flow.repeat.html) runs a function a certain number of times, yielding the results one-by-one. \n```js\n// repl-pad\nimport { repeat } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Five random numbers in an array\nconst results = [...repeat(5, Math.random)];\n\n// Or in a for-of loop:\nfor (const result of repeat(5, Math.random)) {\n  console.log(result);\n}\n// Exits after 5 numbers\n```\n\nThere's also an async version if the function being repeated needs to be _awaited_:\n```js\nimport { repeatAwait, sleep } from \"https://unpkg.com/ixfx/dist/flow.js\"\n\n// Some function that doesn't return until 1 second \nasync function task() {\n  await sleep(1000);\n  return Math.random();\n}\n\nfor await (const result of repeat(5, task)) {\n  console.log(result);\n}\n```\n\nIf you just want to run a function several times without caring about its return value, consider using [`count`](../../gen/generator/#count) instead.\n\n## Interval\n\n[`interval`](https://clinth.github.io/ixfx/functions/Flow.interval-1.html) calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the `for await` rather than `for`.\n\nThis example prints a new random number every second\n\n```js\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\"\n// Call Math.random at a fixed interval of 1000ms\nconst randomGenerator = interval(Math.random, { fixed: 1000 } );\n\nfor await (const r of randomGenerator) {\n  // Prints a new random number every second\n  console.log(r);\n}\n// This will not run unless there is a `break` in the for await loop\nconsole.log(`Done.`); \n```\n\nWhen calling `interval`, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.\n\nThe second parameter are the options:\n\n```typescript\nIntervalOpts: {\n  delay?: \"before\" | \"after\"; // Should delay be before or after inner code is run?\n  fixed?: Interval;     // Use a fixed delay between iterations\n  minimum?: Interval;   // Enforce a minimum time between iterations\n  signal?: AbortSignal; // Signal to stop interval looping\n}\n```\n\nIn the earlier example, we used the `fixed` parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the `minimum` field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.\n\n`interval` can also be invoked more simply by just passing a number, which represents the fixed milliseconds.\n\n```js\n// These lines are the same\ninterval(Math.random, 1000 );\ninterval(Math.random, { fixed: 1000 } );\n```\n\nExample: Iterate through items in a list, with a delay of one minute before each item\n\n```js\nconst opts = { fixed: { mins: 1 }, delay: 'before' };\nconst list = [ 'thom', 'jonny', 'colin', 'ed', 'phil' ];\nfor await (const i of interval(list, opts)) {\n  // do something with i (code first runs after 1min wait)\n}\n```\n\nExample: Using a generator\n```js\nimport { count } from \"https://unpkg.com/ixfx/dist/generators.js\";\nimport { interval } from \"https://unpkg.com/ixfx/dist/flow.js\";\n\n// A generator that counts to 5\nconst counter = count(5);\n\n// Loop over counter with 1000ms delay\nfor await (const v of interval(counter, 1000)) {\n  // Counts from 0...4, with a delay between each\n  // (although using ixfx's 'repeat' function would be the better way to do this)\n  console.log(v);\n}\n```\n\nOr alternatively, using the `.next().value` style of accessing a generator:\n\n```js\nconst counter = count(5);\nconst counterInterval = interval(counter, 1000);\n// Pauses until interval is up\nconst v = await counterInterval.next().value;\n// Execution continues after interval period...\n```\n", "html": `<script type="module" hoist>
import '/src/components/ReplPad';
<\/script>
<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
</ul></div>
<p>Overview:</p>
<ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations. It's a generator.</li>
<li><a href="#interval">interval</a>: Calls an async function or generator with some delay, returning results as they happen. It's a generator.</li>
<li><a href="#repeat">repeat</a>: Execute a function a given number of times, collecting results. It's a generator.</li>
</ul>
<h2 id="running-code-in-a-timed-loop">Running code in a timed loop</h2>
<p>Some basic loops in Javascript look like:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>hue <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  hue<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> list <span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with each item of the list</span>
<span class="token punctuation">}</span></code></pre>
<p>They don't have any in-built options for looping at a certain speed.</p>
<p>Instead, we might use <code is:raw>setTimeout</code> or <code is:raw>setInterval</code>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Code every second</span>

<span class="token comment">// OR:</span>
<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Reschedule itself to run again </span>
  <span class="token comment">// in 1 second, creating a loop</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Initial schedule 'f' in one second</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Or perhaps we want to run a loop really fast, <code is:raw>requestAnimationFrame</code> is meant for animation loops:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// ... do some drawing</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reschedule</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Schedule</span></code></pre>
<p>This might just be fine, however:</p>
<ul>
<li>If you want to start/stop you have to keep track of the id of the timer</li>
<li>More plumbing required to adjust loop speed as it runs</li>
<li>Not particularly readable</li>
</ul>
<p>ixfx has two functions to help with timed loops:</p>
<ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations</li>
</ul>
<h3 id="continuously">Continuously</h3>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.continuously-1.html"><code is:raw>continuously</code></a> is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.</p>
<p>By default, it runs at animation speed, useful for updating a canvas:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something at animation loop speed</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If you don't want the loop to run as fast as possible, provide an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code is:raw>Interval</code></a> or a number denoting milliseconds:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// Do something };</span>

<span class="token comment">// Runs every minute</span>
<span class="token function">continuously</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Examples of <code is:raw>continuously</code> in action:</p>
<ul>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll">Poll data from an API</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate">Animate a gradient</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async">Process a list of things</a></li>
</ul>
<h4 id="control">Control</h4>
<p>Note the use of <code is:raw>start</code> to start the loop. This allows you setup the loop once, and trigger it from different places. If <code is:raw>start</code> is called while already running, the timer is reset. <code is:raw>cancel</code> stops a loop that is scheduled to run.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">job</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> jobLoop <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
jobLoop<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Starts loop, or resets it if already pending</span>
jobLoop<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cancels a scheduled loop</span>
jobLoop<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Change loop speed</span></code></pre>
<p>It's possible to check the status of a <code is:raw>continuously</code> instance with its <code is:raw>runState</code> property. It returns a string, one of:</p>
<ul>
<li>"idle": not yet started, or has been stopped.</li>
<li>"scheduled": started, waiting to run the callback.</li>
<li>"running": currently executing the callback.</li>
</ul>
<h3 id="delayed-loop">Delayed loop</h3>
<p>If you don't need to adjust the loop or control it from other parts of your code, <a href="https://clinth.github.io/ixfx/functions/Flow.delayLoop.html"><code is:raw>delayLoop</code></a> might be what you need. It is an async generator which runs indefinitely and has a simple syntax:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something every second</span>
  <span class="token comment">// Warning: loops forever</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution won't continue here until the loop is exited</span></code></pre>
<p>Note the use of <em>for await</em> is important here. Use <code is:raw>break</code> when you want to exit the loop.</p>
<p>Using <code is:raw>for await</code> means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues while looped code runs in parallel</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>delayLoop</code> does not gather the results of the looped code. If that's what you need, consider <a href="#repeat"><code is:raw>repeat</code></a> or <a href="#interval"><code is:raw>interval</code></a>.</p>
<h2 id="repeat">Repeat</h2>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.repeat.html"><code is:raw>repeat</code></a> runs a function a certain number of times, yielding the results one-by-one.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> repeat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Five random numbers in an array</span>
<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Or in a for-of loop:</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Exits after 5 numbers</span></code></pre>
<p>There's also an async version if the function being repeated needs to be <em>awaited</em>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> repeatAwait<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Some function that doesn't return until 1 second </span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>If you just want to run a function several times without caring about its return value, consider using <a href="../../gen/generator/#count"><code is:raw>count</code></a> instead.</p>
<h2 id="interval">Interval</h2>
<p><a href="https://clinth.github.io/ixfx/functions/Flow.interval-1.html"><code is:raw>interval</code></a> calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the <code is:raw>for await</code> rather than <code is:raw>for</code>.</p>
<p>This example prints a new random number every second</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Call Math.random at a fixed interval of 1000ms</span>
<span class="token keyword">const</span> randomGenerator <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> r <span class="token keyword">of</span> randomGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints a new random number every second</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// This will not run unless there is a \`break\` in the for await loop</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>When calling <code is:raw>interval</code>, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.</p>
<p>The second parameter are the options:</p>
<pre class="language-typescript"><code is:raw class="language-typescript">IntervalOpts<span class="token operator">:</span> <span class="token punctuation">{</span>
  delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"before"</span> <span class="token operator">|</span> <span class="token string">"after"</span><span class="token punctuation">;</span> <span class="token comment">// Should delay be before or after inner code is run?</span>
  fixed<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>     <span class="token comment">// Use a fixed delay between iterations</span>
  minimum<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>   <span class="token comment">// Enforce a minimum time between iterations</span>
  signal<span class="token operator">?</span><span class="token operator">:</span> AbortSignal<span class="token punctuation">;</span> <span class="token comment">// Signal to stop interval looping</span>
<span class="token punctuation">}</span></code></pre>
<p>In the earlier example, we used the <code is:raw>fixed</code> parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the <code is:raw>minimum</code> field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.</p>
<p><code is:raw>interval</code> can also be invoked more simply by just passing a number, which represents the fixed milliseconds.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// These lines are the same</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example: Iterate through items in a list, with a delay of one minute before each item</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">'before'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'thom'</span><span class="token punctuation">,</span> <span class="token string">'jonny'</span><span class="token punctuation">,</span> <span class="token string">'colin'</span><span class="token punctuation">,</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'phil'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with i (code first runs after 1min wait)</span>
<span class="token punctuation">}</span></code></pre>
<p>Example: Using a generator</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/generators.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span><span class="token punctuation">;</span>

<span class="token comment">// A generator that counts to 5</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Loop over counter with 1000ms delay</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Counts from 0...4, with a delay between each</span>
  <span class="token comment">// (although using ixfx's 'repeat' function would be the better way to do this)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Or alternatively, using the <code is:raw>.next().value</code> style of accessing a generator:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counterInterval <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pauses until interval is up</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> counterInterval<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token comment">// Execution continues after interval period...</span></code></pre>` } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
</ul></div><p>Overview:</p><ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled. Typically for loops that run forever, like an animation loop. It's an object.</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations. It's a generator.</li>
<li><a href="#interval">interval</a>: Calls an async function or generator with some delay, returning results as they happen. It's a generator.</li>
<li><a href="#repeat">repeat</a>: Execute a function a given number of times, collecting results. It's a generator.</li>
</ul><h2 id="running-code-in-a-timed-loop">Running code in a timed loop</h2><p>Some basic loops in Javascript look like:</p><pre class="language-js"><code class="language-js"><span class="token keyword">while</span> <span class="token punctuation">(</span>hue <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  hue<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> list <span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with each item of the list</span>
<span class="token punctuation">}</span></code></pre><p>They don't have any in-built options for looping at a certain speed.</p><p>Instead, we might use <code>setTimeout</code> or <code>setInterval</code>:</p><pre class="language-js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Code every second</span>

<span class="token comment">// OR:</span>
<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Reschedule itself to run again </span>
  <span class="token comment">// in 1 second, creating a loop</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Initial schedule 'f' in one second</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or perhaps we want to run a loop really fast, <code>requestAnimationFrame</code> is meant for animation loops:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// ... do some drawing</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reschedule</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Schedule</span></code></pre><p>This might just be fine, however:</p><ul>
<li>If you want to start/stop you have to keep track of the id of the timer</li>
<li>More plumbing required to adjust loop speed as it runs</li>
<li>Not particularly readable</li>
</ul><p>ixfx has two functions to help with timed loops:</p><ul>
<li><a href="#continuously">continuously</a>: Useful for a 'main loop', can be controlled</li>
<li><a href="#delayed-loop">delayLoop</a>: A 'for' loop with some delay between iterations</li>
</ul><h3 id="continuously">Continuously</h3><p><a href="https://clinth.github.io/ixfx/functions/Flow.continuously-1.html"><code>continuously</code></a> is a controllable loop. It can be started, stopped and reset, with timing changed dynamically. As it runs, it keeps track of how many times it has looped, which can be useful for example to do something over time. It also allows the callback function to stop the loop.</p><p>By default, it runs at animation speed, useful for updating a canvas:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something at animation loop speed</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If you don't want the loop to run as fast as possible, provide an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code>Interval</code></a> or a number denoting milliseconds:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// Do something };</span>

<span class="token comment">// Runs every minute</span>
<span class="token function">continuously</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Examples of <code>continuously</code> in action:</p><ul>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/fetch-poll">Poll data from an API</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/dom/gradient-rotate">Animate a gradient</a></li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/list-async">Process a list of things</a></li>
</ul><h4 id="control">Control</h4><p>Note the use of <code>start</code> to start the loop. This allows you setup the loop once, and trigger it from different places. If <code>start</code> is called while already running, the timer is reset. <code>cancel</code> stops a loop that is scheduled to run.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">job</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> jobLoop <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
jobLoop<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Starts loop, or resets it if already pending</span>
jobLoop<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cancels a scheduled loop</span>
jobLoop<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Change loop speed</span></code></pre><p>It's possible to check the status of a <code>continuously</code> instance with its <code>runState</code> property. It returns a string, one of:</p><ul>
<li>"idle": not yet started, or has been stopped.</li>
<li>"scheduled": started, waiting to run the callback.</li>
<li>"running": currently executing the callback.</li>
</ul><h3 id="delayed-loop">Delayed loop</h3><p>If you don't need to adjust the loop or control it from other parts of your code, <a href="https://clinth.github.io/ixfx/functions/Flow.delayLoop.html"><code>delayLoop</code></a> might be what you need. It is an async generator which runs indefinitely and has a simple syntax:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something every second</span>
  <span class="token comment">// Warning: loops forever</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution won't continue here until the loop is exited</span></code></pre><p>Note the use of <em>for await</em> is important here. Use <code>break</code> when you want to exit the loop.</p><p>Using <code>for await</code> means that code won't continue running until the loop finishes. If you want some code running in a delay loop whilst also continuing execution, you can use this (somewhat awkward) technique:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> delayLoop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> o <span class="token keyword">of</span> <span class="token function">delayLoop</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues while looped code runs in parallel</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>delayLoop</code> does not gather the results of the looped code. If that's what you need, consider <a href="#repeat"><code>repeat</code></a> or <a href="#interval"><code>interval</code></a>.</p><h2 id="repeat">Repeat</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.repeat.html"><code>repeat</code></a> runs a function a certain number of times, yielding the results one-by-one.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> repeat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Five random numbers in an array</span>
<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Or in a for-of loop:</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Exits after 5 numbers</span></code></pre><p>There's also an async version if the function being repeated needs to be <em>awaited</em>:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> repeatAwait<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Some function that doesn't return until 1 second </span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> result <span class="token keyword">of</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>If you just want to run a function several times without caring about its return value, consider using <a href="../../gen/generator/#count"><code>count</code></a> instead.</p><h2 id="interval">Interval</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.interval-1.html"><code>interval</code></a> calls and yields the result of an synchronous or asynchronous function/generator at a given interval. It is an asynchronous generator, note the <code>for await</code> rather than <code>for</code>.</p><p>This example prints a new random number every second</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Call Math.random at a fixed interval of 1000ms</span>
<span class="token keyword">const</span> randomGenerator <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> r <span class="token keyword">of</span> randomGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints a new random number every second</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// This will not run unless there is a \`break\` in the for await loop</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>When calling <code>interval</code>, the first parameter is the code to run, or generator to use. In the above example it's a simple function call.</p><p>The second parameter are the options:</p><pre class="language-typescript"><code class="language-typescript">IntervalOpts<span class="token operator">:</span> <span class="token punctuation">{</span>
  delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"before"</span> <span class="token operator">|</span> <span class="token string">"after"</span><span class="token punctuation">;</span> <span class="token comment">// Should delay be before or after inner code is run?</span>
  fixed<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>     <span class="token comment">// Use a fixed delay between iterations</span>
  minimum<span class="token operator">?</span><span class="token operator">:</span> Interval<span class="token punctuation">;</span>   <span class="token comment">// Enforce a minimum time between iterations</span>
  signal<span class="token operator">?</span><span class="token operator">:</span> AbortSignal<span class="token punctuation">;</span> <span class="token comment">// Signal to stop interval looping</span>
<span class="token punctuation">}</span></code></pre><p>In the earlier example, we used the <code>fixed</code> parameter. This gives a constant delay between each execution of the function. If the function being called can take more or less time, the overall waiting time between executions could thus be quite different. As an alternative, use the <code>minimum</code> field. This will subtract the time taken to execute the function, meaning a more regular pacing between executions.</p><p><code>interval</code> can also be invoked more simply by just passing a number, which represents the fixed milliseconds.</p><pre class="language-js"><code class="language-js"><span class="token comment">// These lines are the same</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Example: Iterate through items in a list, with a delay of one minute before each item</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">'before'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'thom'</span><span class="token punctuation">,</span> <span class="token string">'jonny'</span><span class="token punctuation">,</span> <span class="token string">'colin'</span><span class="token punctuation">,</span> <span class="token string">'ed'</span><span class="token punctuation">,</span> <span class="token string">'phil'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with i (code first runs after 1min wait)</span>
<span class="token punctuation">}</span></code></pre><p>Example: Using a generator</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/generators.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interval <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span><span class="token punctuation">;</span>

<span class="token comment">// A generator that counts to 5</span>
<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Loop over counter with 1000ms delay</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Counts from 0...4, with a delay between each</span>
  <span class="token comment">// (although using ixfx's 'repeat' function would be the better way to do this)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>Or alternatively, using the <code>.next().value</code> style of accessing a generator:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> counterInterval <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pauses until interval is up</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">await</span> counterInterval<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token comment">// Execution continues after interval period...</span></code></pre>` })}`;
});

export { $$metadata, $$Loops as default, frontmatter, metadata };
