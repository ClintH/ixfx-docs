import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "distance-and-angles", "text": "Distance and angles" }, { "depth": 3, "slug": "relation", "text": "Relation" }, { "depth": 3, "slug": "see-also", "text": "See also" }, { "depth": 2, "slug": "interpolation", "text": "Interpolation" }, { "depth": 2, "slug": "areas", "text": "Areas" }, { "depth": 2, "slug": "rotation--translation", "text": "Rotation & Translation" }, { "depth": 2, "slug": "conversions", "text": "Conversions" }, { "depth": 2, "slug": "normalise", "text": "Normalise" }, { "depth": 2, "slug": "random", "text": "Random" }, { "depth": 2, "slug": "applying-functions", "text": "Applying functions" }, { "depth": 2, "slug": "math-operations", "text": "Math operations" }, { "depth": 2, "slug": "comparisons", "text": "Comparisons" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>\n</div>\n\nA point is an `x` and `y` [Cartesian coordinate](../units/#cartesian); the basic building block for [lines](../line/), [arcs](../arc/), [rectangles](../rect/) and paths.\n\n```js\n// A point at (100, 200)\nconst p = {x: 100, y: 200};\n```\n\nThere\'s no defined unit for `x` and `y`, but pixel coordinates are typical.\n\n## Distance and angles\n\nCalculate distance between two points with [`distance`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance).\n\n```js\n// repl-pad\nimport { Points, radianToDegree} from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculates distance between point a and b\nconst distance = Points.distance(a, b); // Returns a number\n\n// Calculate angle in radians between points a and b\nconst angleRad = Points.angle(a, b);\nconst angleDeg = radianToDegree(angleRad);\n```\n\nIn the example below, [normalised](#normalised-points) points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.\n\n<demo-element title="Point math" src="/geometry/point-math/" />\n\n### Relation\n\n[`relation`](https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html) helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a `pointermove` handler, perhaps we don\'t care about the absolute pointer coordinate, what we really care about is the distance from where the `pointerdown` event first happened. i.e, the change.\n\nCall `relation` to initialise the tracker, giving the reference point:\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nconst tracker = Points.relation({ x: 100, y:100 });\n```\n\nAfter that, call the returned function (here assigned to `tracker`) to compute the relation of any other point to the reference point:\n\n```js\n// Compare 50,50 to 100,100\nconst result = tracker({ x: 50, y: 50 });\n```\n\nThe result contains the properties _angle_ (in radians), _distance_, _centroid_ (a Point), and _average_ (a Point). _centroid_ is the middle point between the reference and current point. _average_ is an average of the _x_ and _y_ values of all points passed to the tracker function.\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\n\nlet tracker = null;\n\n// Start tracking on pointer down\ndocument.addEventListener(`pointerdown`, evt => {\n  tracker = Points.relation(evt);\n});\n\n// Use tracker when a move happens\ndocument.addEventListener(`pointermove`, evt => {\n  if (!t) return; // Didn\'t start tracking\n\n  // Compare to the point recorded in `pointerdown`\n  const r = tracker(evt);\n  console.log(`Distance from start: ${r.distance}`);\n});\n\n// Forget about tracker when pointer is up\ndocument.addEventListener(`pointerup`, evt => {\n  tracker = null;\n});\n```\n\n<demo-element title="Point relation" src="/geometry/point-relation/" />\n\n### See also\n\n* [`distanceToExterior`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html): distance to the exterior of a basic shape\n* [`distanceToCenter`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html): distance to the center of a basic shape\n\n## Interpolation\n\nCalculate an in-between point with [`interpolate`](https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html). Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.\n\n<demo-element title="Point interpolation" src="/geometry/point-interpolate/" />\n\n\nThe signature of the `interpolate` is:\n\n```typescript\ninterpolate(amount: number, a: Point, b: Point, allowOverflow?: boolean): Point\n```\n\n\nInterpolation is between two points, _a_ and _b_. An interpolation amount of 0 means the value of point _a_ and an amount of 1 means the value of _b_. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to _b_, 0.2 is mostly close to _a_ and so on.\n\n```js\n// repl-pad#1\nimport { Points, radianToDegree} from "https://unpkg.com/ixfx/dist/geometry.js"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculate a Point between `a` and `b` using a relative \n// progress amount (0 -> 1). \nconst p = Points.interpolate(0.5, a, b); // Returns {x,y}\n```\n\nBy default, an interpolation amount outside of the 0..1 range throws an error. However, if _true_ is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the _a->b_ line. Or a value of 2 would be past _b_ at a distance of the line. \n\n## Areas\n\nCalculates a rectangle which encompasses all the provided points with [`bbox`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox). It returns a [Rectangle](../rect/), with _x, y, width_ and _height_ properties.\n\n```js\n// repl-pad#1\nconst points = [a, b];\nconst rect = Points.bbox(...points); \n```\n\nThe [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.\n\nixfx has a simple [`convexHull`](https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html) implementation\n\n```js\nconst pointsToContain = [ /* some array of points */ ];\nconst pts = Points.convexHull(...pointsToContain);\n// pts is the outer set of points\n``` \n\n<demo-element title="Centroid and Convex Hull" src="/geometry/point-centroid-hull/" />\n\n[`centroid`](https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html) calculates a sort of center of a given set of points.\n\n```js\nconst pts = [ /* some array of points */ ];\nconst c = Points.centroid(...pts);\n// c is x,y centroid.\n```\n\n[`leftmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html)/[`rightmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html) returns the most left/right point of a set of points.\n\n## Rotation & Translation\n\nRotate a point around a given point with [`rotate`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate)\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0\nconst p = Points.rotate({x:10,y:10}, Math.PI/2, {x:0, y:0});\n\n// Rotate 10,10 by 15 degrees around the origin of 0,0\nconst pp = Points.rotate({x:10,y:10}, degreeToRadian(15), {x:0, y:0});\n```\n\n[`project`](https://clinth.github.io/ixfx/functions/Geometry.Points.project.html) yields a point at a specified distance and angle from an origin point.\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst origin = { x: 100, y: 100 };\n\n// 100 units away @ 10 degrees\nPoints.project(origin, 100, degreeToRadian(10));\n```\n\n## Conversions\n\nConverting a Point _to_ some other shape of data\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst p = { x: 5, y: 10 };\n\n// To an array [x, y]\nPoints.toArray(p); // [5, 10]\n\n// Human-readable representation:\nPoints.toString(p); // "(5, 10)"\n\n// Round x and y\nPoints.toIntegerValues({ x: 5.5, y: 10.5 }); // {x: 6, y: 11 }\n```\n\nConverting _from_ some other shape of data to Point\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n// Convert from two numeric parameters\nPoints.from(10, 15);    // { x: 10, y: 15}\n\n// Convert from an array\nPoints.from([10, 15]);  // {x: 10, y: 15}\n\n// Convert an array of arrays\nPoints.fromNumbers([ [10, 15], [5, 5]]); // [{x:10, y:15}, {x:5, y:5}]\n```\n\n## Normalise\n\nIt\'s often useful to work with [normalised](../../data/normalising/) points. Thus a point of `{x:0.5, y:0.5}` would mean 50% x, and 50% y. See the discussion on [normalising points](../../data/normalising/#geometry) for more on this.\n\nIn short, you can normalise point using `Points.divide`:\n\n```js\n// repl-pad#2\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst pt = { x: 500, y: 500 };\n\n// Normalise `pt` by viewport size,\n// yielding a point on 0..1 scale.\nPoints.divide(pt, window.innerWidth, window.innerHeight);\n\n// In principle it might exceed 0..1 range, so it may need to be clamped, too:\nPoints.clamp(Points.divide(pt, window.innerWidth, window.innerHeight));\n```\n\nTo apply a normalised point to some destination range, use `Points.multiply`\n\n```js\n// repl-pad#2\n// Maps a relative point to viewport size\nPoints.multiply(pt, window.innerWidth, window.innerHeight);\n```\n\n`clamp` locks x,y to a minimum and maximum, by default 0..1:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nPoints.clamp({ x:2,   y:2 });      // { x:1.0, y:1.0 }\nPoints.clamp({ x:0.5, y:0.5 });    // { x:0.5, y:0.5 }\n```\n\n## Random\n\n[`random`](https://clinth.github.io/ixfx/functions/Geometry.Points.random.html) creates a random point, by default on a normalised 0..1 scale:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nconst pt = Points.random();\n```\n\nA custom random source can be provided to skew values:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nimport { weightedSkewed } from "https://unpkg.com/ixfx/dist/random.js";\nconst pt = Points.random(weightedSkewed(`quadIn`));\n```\n\n## Applying functions\n\n[`apply`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply) returns a point with a given function applied to both `x` and `y` fields:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst p = {x:100.1234, y:100.1234};\n\n// Adds 10 to both x and y\nPoints.apply(p, v => v + 10);\n\n// Rounds the fields\nPoints.apply(p, Math.round);\n```\n\n[`pipeline`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html) creates a reusable function which applies a series of transformations to a point.\n\nIn the below example, a point will be normalised, and then inverted.\n\n```js\n// repl-pad#3\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst somePoint = { x: 1.2, y: 3.4 };\n\n// Create pipeline\nconst p = Points.pipeline(Points.normalise, Points.invert);\n\n// Run pipeline on `somePoint`\nconst changedPoint = p(somePoint); \n```\n\nIf a reusable pipeline is not needed, use [`pipelineApply`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html) instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:\n\n```js\n// repl-pad#3\nconst changedPoint = Points.pipelineApply(somePoint, Points.normalise, Points.invert);\n```\n\n[`reduce`](https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html) works like the usual Javascript `reduce` function:\n\n```js\n// Sum x and y values separately\nconst total = Points.reduce(points, (p, acc) => ({x: p.x + acc.x, y: p.y + acc.y})\n);\n// total.x / total.y\n```\n\n## Math operations\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Returns {x,y} of a * b\nPoints.multiply(a, b);\n\n// Returns {x,y} of a, with a.x * 2 and a.y * 0.5\nPoints.multiply(a, 2, 0.5);\n\n// Returns {x,y} of a / b\nPoints.divide(a, b);\n\n// Returns {x,y} of a, with a.x / 2 and a.y / 0.5\nPoints.divide(a, 2, 0.5);\n\n// Returns {x,y} of a + b\nPoints.sum(a, b);\n\n// Returns {x,y} of a - b;\nPoints.subtract(a, b);\n```\n\n[`invert`](https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html) flips one or more axis of a point. By default, both.\n\n```js\nconst a = { x: 20, y: 10 };\n\n// Returns { x: -20, y: -10 } \nPoints.invert(a);\n\n// Returns { x: -20, y: 10\nPoints.invert(a, `x`);\n```\n\n## Comparisons\n\n[`compare`](https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html) returns:\n* -1 if either _x_ or _y_ of point `a` is _less_ than what `b` has\n* 0 if _x_ and _y_ for `a` and `b` are identical\n* 1 if either _x_ or _y_ of point `a` is _greater_ than what `b` has\n\n```js\n// Returns 0, both points are equal\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 10 });\n\n// Returns -1, a.y is less than b.y\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 20 });\n\n// Returns 1, a.x is greater than b.x\nPoints.compare({ x: 10, y: 10 }, { x: 9, y: 10 });\n```\n\n[`isEqual`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html) returns _true_ if points have the same value:\n\n```js\nconst a = { x: 10, y: 10 };\nconst b = { x: 10, y: 10 };\na === b; // false, because identity of objects is different\nPoints.isEqual(a, b); // true, because values are the same\n```\n\nNote that additional properties of the the points are not compared, only the _x_, _y_ (and optional _z_).\n\nMore checks:\n* [`isNull`](https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html) returns true if _x_ and _y_ are _null_\n* [`isEmpty`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html) returns true if _x_ and _y_ are 0. Use `Points.Empty` to create an empty point.\n* [`isPlaceholder`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html) returns _true_ if both _x_ and _y_ are _NaN_. Use `Points.Placeholder` to create a placeholder point.\n* [`isPoint`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html) returns _true_ if the passed object has at least _x_ and _y_ properties.\n\n[`findMinimum`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum) allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.\n\nExample:\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Find the point closest to the {x:100, y:100}\nconst points = [/* ... points ... */];\nconst center = {x: 100, y: 100};\n\n// closestToCenter will be a Point {x,y}\nconst closestToCenter = Points.findMinimum((a, b) => {\n  const aDist = distance(a, center);\n  const bDist = distance(b, center);\n\n  // Returns `a` if its distance is less than `b`\n  //  or otherwise returns `b`\n  return (aDistance < bDistance) ? a : b;\n}, points);\n```', "html": '<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>\n</div>\n<p>A point is an <code is:raw>x</code> and <code is:raw>y</code> <a href="../units/#cartesian">Cartesian coordinate</a>; the basic building block for <a href="../line/">lines</a>, <a href="../arc/">arcs</a>, <a href="../rect/">rectangles</a> and paths.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// A point at (100, 200)</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>There\'s no defined unit for <code is:raw>x</code> and <code is:raw>y</code>, but pixel coordinates are typical.</p>\n<h2 id="distance-and-angles">Distance and angles</h2>\n<p>Calculate distance between two points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance"><code is:raw>distance</code></a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculates distance between point a and b</span>\n<span class="token keyword">const</span> distance <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a number</span>\n\n<span class="token comment">// Calculate angle in radians between points a and b</span>\n<span class="token keyword">const</span> angleRad <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">angle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> angleDeg <span class="token operator">=</span> <span class="token function">radianToDegree</span><span class="token punctuation">(</span>angleRad<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, <a href="#normalised-points">normalised</a> points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.</p>\n<demo-element title="Point math" src="/geometry/point-math/" />\n<h3 id="relation">Relation</h3>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html"><code is:raw>relation</code></a> helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a <code is:raw>pointermove</code> handler, perhaps we don\'t care about the absolute pointer coordinate, what we really care about is the distance from where the <code is:raw>pointerdown</code> event first happened. i.e, the change.</p>\n<p>Call <code is:raw>relation</code> to initialise the tracker, giving the reference point:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>After that, call the returned function (here assigned to <code is:raw>tracker</code>) to compute the relation of any other point to the reference point:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Compare 50,50 to 100,100</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The result contains the properties <em>angle</em> (in radians), <em>distance</em>, <em>centroid</em> (a Point), and <em>average</em> (a Point). <em>centroid</em> is the middle point between the reference and current point. <em>average</em> is an average of the <em>x</em> and <em>y</em> values of all points passed to the tracker function.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start tracking on pointer down</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use tracker when a move happens</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Didn\'t start tracking</span>\n\n  <span class="token comment">// Compare to the point recorded in `pointerdown`</span>\n  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Forget about tracker when pointer is up</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Point relation" src="/geometry/point-relation/" />\n<h3 id="see-also">See also</h3>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html"><code is:raw>distanceToExterior</code></a>: distance to the exterior of a basic shape</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html"><code is:raw>distanceToCenter</code></a>: distance to the center of a basic shape</li>\n</ul>\n<h2 id="interpolation">Interpolation</h2>\n<p>Calculate an in-between point with <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html"><code is:raw>interpolate</code></a>. Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.</p>\n<demo-element title="Point interpolation" src="/geometry/point-interpolate/" />\n<p>The signature of the <code is:raw>interpolate</code> is:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token function">interpolate</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> a<span class="token operator">:</span> Point<span class="token punctuation">,</span> b<span class="token operator">:</span> Point<span class="token punctuation">,</span> allowOverflow<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Point</code></pre>\n<p>Interpolation is between two points, <em>a</em> and <em>b</em>. An interpolation amount of 0 means the value of point <em>a</em> and an amount of 1 means the value of <em>b</em>. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to <em>b</em>, 0.2 is mostly close to <em>a</em> and so on.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate a Point between `a` and `b` using a relative </span>\n<span class="token comment">// progress amount (0 -> 1). </span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre>\n<p>By default, an interpolation amount outside of the 0..1 range throws an error. However, if <em>true</em> is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the <em>a->b</em> line. Or a value of 2 would be past <em>b</em> at a distance of the line.</p>\n<h2 id="areas">Areas</h2>\n<p>Calculates a rectangle which encompasses all the provided points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox"><code is:raw>bbox</code></a>. It returns a <a href="../rect/">Rectangle</a>, with <em>x, y, width</em> and <em>height</em> properties.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> rect <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">bbox</span><span class="token punctuation">(</span><span class="token operator">...</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>The [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.</p>\n<p>ixfx has a simple <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html"><code is:raw>convexHull</code></a> implementation</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> pointsToContain <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pts <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">convexHull</span><span class="token punctuation">(</span><span class="token operator">...</span>pointsToContain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// pts is the outer set of points</span></code></pre>\n<demo-element title="Centroid and Convex Hull" src="/geometry/point-centroid-hull/" />\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html"><code is:raw>centroid</code></a> calculates a sort of center of a given set of points.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> pts <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">centroid</span><span class="token punctuation">(</span><span class="token operator">...</span>pts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// c is x,y centroid.</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html"><code is:raw>leftmost</code></a>/<a href="https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html"><code is:raw>rightmost</code></a> returns the most left/right point of a set of points.</p>\n<h2 id="rotation--translation">Rotation &#x26; Translation</h2>\n<p>Rotate a point around a given point with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate"><code is:raw>rotate</code></a></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Rotate 10,10 by 15 degrees around the origin of 0,0</span>\n<span class="token keyword">const</span> pp <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.project.html"><code is:raw>project</code></a> yields a point at a specified distance and angle from an origin point.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 100 units away @ 10 degrees</span>\nPoints<span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="conversions">Conversions</h2>\n<p>Converting a Point <em>to</em> some other shape of data</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// To an array [x, y]</span>\nPoints<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 10]</span>\n\n<span class="token comment">// Human-readable representation:</span>\nPoints<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "(5, 10)"</span>\n\n<span class="token comment">// Round x and y</span>\nPoints<span class="token punctuation">.</span><span class="token function">toIntegerValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {x: 6, y: 11 }</span></code></pre>\n<p>Converting <em>from</em> some other shape of data to Point</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token comment">// Convert from two numeric parameters</span>\nPoints<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x: 10, y: 15}</span>\n\n<span class="token comment">// Convert from an array</span>\nPoints<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {x: 10, y: 15}</span>\n\n<span class="token comment">// Convert an array of arrays</span>\nPoints<span class="token punctuation">.</span><span class="token function">fromNumbers</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{x:10, y:15}, {x:5, y:5}]</span></code></pre>\n<h2 id="normalise">Normalise</h2>\n<p>It\'s often useful to work with <a href="../../data/normalising/">normalised</a> points. Thus a point of <code is:raw>{x:0.5, y:0.5}</code> would mean 50% x, and 50% y. See the discussion on <a href="../../data/normalising/#geometry">normalising points</a> for more on this.</p>\n<p>In short, you can normalise point using <code is:raw>Points.divide</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Normalise `pt` by viewport size,</span>\n<span class="token comment">// yielding a point on 0..1 scale.</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// In principle it might exceed 0..1 range, so it may need to be clamped, too:</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To apply a normalised point to some destination range, use <code is:raw>Points.multiply</code></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token comment">// Maps a relative point to viewport size</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>clamp</code> locks x,y to a minimum and maximum, by default 0..1:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// { x:1.0, y:1.0 }</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x:0.5, y:0.5 }</span></code></pre>\n<h2 id="random">Random</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.random.html"><code is:raw>random</code></a> creates a random point, by default on a normalised 0..1 scale:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>A custom random source can be provided to skew values:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> weightedSkewed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/random.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token function">weightedSkewed</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">quadIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="applying-functions">Applying functions</h2>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply"><code is:raw>apply</code></a> returns a point with a given function applied to both <code is:raw>x</code> and <code is:raw>y</code> fields:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Adds 10 to both x and y</span>\n<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Rounds the fields</span>\n<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Math<span class="token punctuation">.</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html"><code is:raw>pipeline</code></a> creates a reusable function which applies a series of transformations to a point.</p>\n<p>In the below example, a point will be normalised, and then inverted.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> somePoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3.4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create pipeline</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Run pipeline on `somePoint`</span>\n<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>If a reusable pipeline is not needed, use <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html"><code is:raw>pipelineApply</code></a> instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipelineApply</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html"><code is:raw>reduce</code></a> works like the usual Javascript <code is:raw>reduce</code> function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Sum x and y values separately</span>\n<span class="token keyword">const</span> total <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> acc</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> acc<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> acc<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// total.x / total.y</span></code></pre>\n<h2 id="math-operations">Math operations</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a * b</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a, with a.x * 2 and a.y * 0.5</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a / b</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a, with a.x / 2 and a.y / 0.5</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a + b</span>\nPoints<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a - b;</span>\nPoints<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html"><code is:raw>invert</code></a> flips one or more axis of a point. By default, both.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { x: -20, y: -10 } </span>\nPoints<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { x: -20, y: 10</span>\nPoints<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="comparisons">Comparisons</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html"><code is:raw>compare</code></a> returns:</p>\n<ul>\n<li>-1 if either <em>x</em> or <em>y</em> of point <code is:raw>a</code> is <em>less</em> than what <code is:raw>b</code> has</li>\n<li>0 if <em>x</em> and <em>y</em> for <code is:raw>a</code> and <code is:raw>b</code> are identical</li>\n<li>1 if either <em>x</em> or <em>y</em> of point <code is:raw>a</code> is <em>greater</em> than what <code is:raw>b</code> has</li>\n</ul>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Returns 0, both points are equal</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns -1, a.y is less than b.y</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns 1, a.x is greater than b.x</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html"><code is:raw>isEqual</code></a> returns <em>true</em> if points have the same value:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\na <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false, because identity of objects is different</span>\nPoints<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, because values are the same</span></code></pre>\n<p>Note that additional properties of the the points are not compared, only the <em>x</em>, <em>y</em> (and optional <em>z</em>).</p>\n<p>More checks:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html"><code is:raw>isNull</code></a> returns true if <em>x</em> and <em>y</em> are <em>null</em></li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html"><code is:raw>isEmpty</code></a> returns true if <em>x</em> and <em>y</em> are 0. Use <code is:raw>Points.Empty</code> to create an empty point.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html"><code is:raw>isPlaceholder</code></a> returns <em>true</em> if both <em>x</em> and <em>y</em> are <em>NaN</em>. Use <code is:raw>Points.Placeholder</code> to create a placeholder point.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html"><code is:raw>isPoint</code></a> returns <em>true</em> if the passed object has at least <em>x</em> and <em>y</em> properties.</li>\n</ul>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum"><code is:raw>findMinimum</code></a> allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.</p>\n<p>Example:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Find the point closest to the {x:100, y:100}</span>\n<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... points ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> center <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// closestToCenter will be a Point {x,y}</span>\n<span class="token keyword">const</span> closestToCenter <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">findMinimum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> aDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> bDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Returns `a` if its distance is less than `b`</span>\n  <span class="token comment">//  or otherwise returns `b`</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>aDistance <span class="token operator">&lt;</span> bDistance<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' };
const frontmatter = { "title": "Point", "astro": { "headers": [{ "depth": 2, "slug": "distance-and-angles", "text": "Distance and angles" }, { "depth": 3, "slug": "relation", "text": "Relation" }, { "depth": 3, "slug": "see-also", "text": "See also" }, { "depth": 2, "slug": "interpolation", "text": "Interpolation" }, { "depth": 2, "slug": "areas", "text": "Areas" }, { "depth": 2, "slug": "rotation--translation", "text": "Rotation & Translation" }, { "depth": 2, "slug": "conversions", "text": "Conversions" }, { "depth": 2, "slug": "normalise", "text": "Normalise" }, { "depth": 2, "slug": "random", "text": "Random" }, { "depth": 2, "slug": "applying-functions", "text": "Applying functions" }, { "depth": 2, "slug": "math-operations", "text": "Math operations" }, { "depth": 2, "slug": "comparisons", "text": "Comparisons" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>\n</div>\n\nA point is an `x` and `y` [Cartesian coordinate](../units/#cartesian); the basic building block for [lines](../line/), [arcs](../arc/), [rectangles](../rect/) and paths.\n\n```js\n// A point at (100, 200)\nconst p = {x: 100, y: 200};\n```\n\nThere\'s no defined unit for `x` and `y`, but pixel coordinates are typical.\n\n## Distance and angles\n\nCalculate distance between two points with [`distance`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance).\n\n```js\n// repl-pad\nimport { Points, radianToDegree} from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculates distance between point a and b\nconst distance = Points.distance(a, b); // Returns a number\n\n// Calculate angle in radians between points a and b\nconst angleRad = Points.angle(a, b);\nconst angleDeg = radianToDegree(angleRad);\n```\n\nIn the example below, [normalised](#normalised-points) points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.\n\n<demo-element title="Point math" src="/geometry/point-math/" />\n\n### Relation\n\n[`relation`](https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html) helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a `pointermove` handler, perhaps we don\'t care about the absolute pointer coordinate, what we really care about is the distance from where the `pointerdown` event first happened. i.e, the change.\n\nCall `relation` to initialise the tracker, giving the reference point:\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nconst tracker = Points.relation({ x: 100, y:100 });\n```\n\nAfter that, call the returned function (here assigned to `tracker`) to compute the relation of any other point to the reference point:\n\n```js\n// Compare 50,50 to 100,100\nconst result = tracker({ x: 50, y: 50 });\n```\n\nThe result contains the properties _angle_ (in radians), _distance_, _centroid_ (a Point), and _average_ (a Point). _centroid_ is the middle point between the reference and current point. _average_ is an average of the _x_ and _y_ values of all points passed to the tracker function.\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\n\nlet tracker = null;\n\n// Start tracking on pointer down\ndocument.addEventListener(`pointerdown`, evt => {\n  tracker = Points.relation(evt);\n});\n\n// Use tracker when a move happens\ndocument.addEventListener(`pointermove`, evt => {\n  if (!t) return; // Didn\'t start tracking\n\n  // Compare to the point recorded in `pointerdown`\n  const r = tracker(evt);\n  console.log(`Distance from start: ${r.distance}`);\n});\n\n// Forget about tracker when pointer is up\ndocument.addEventListener(`pointerup`, evt => {\n  tracker = null;\n});\n```\n\n<demo-element title="Point relation" src="/geometry/point-relation/" />\n\n### See also\n\n* [`distanceToExterior`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html): distance to the exterior of a basic shape\n* [`distanceToCenter`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html): distance to the center of a basic shape\n\n## Interpolation\n\nCalculate an in-between point with [`interpolate`](https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html). Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.\n\n<demo-element title="Point interpolation" src="/geometry/point-interpolate/" />\n\n\nThe signature of the `interpolate` is:\n\n```typescript\ninterpolate(amount: number, a: Point, b: Point, allowOverflow?: boolean): Point\n```\n\n\nInterpolation is between two points, _a_ and _b_. An interpolation amount of 0 means the value of point _a_ and an amount of 1 means the value of _b_. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to _b_, 0.2 is mostly close to _a_ and so on.\n\n```js\n// repl-pad#1\nimport { Points, radianToDegree} from "https://unpkg.com/ixfx/dist/geometry.js"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculate a Point between `a` and `b` using a relative \n// progress amount (0 -> 1). \nconst p = Points.interpolate(0.5, a, b); // Returns {x,y}\n```\n\nBy default, an interpolation amount outside of the 0..1 range throws an error. However, if _true_ is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the _a->b_ line. Or a value of 2 would be past _b_ at a distance of the line. \n\n## Areas\n\nCalculates a rectangle which encompasses all the provided points with [`bbox`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox). It returns a [Rectangle](../rect/), with _x, y, width_ and _height_ properties.\n\n```js\n// repl-pad#1\nconst points = [a, b];\nconst rect = Points.bbox(...points); \n```\n\nThe [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.\n\nixfx has a simple [`convexHull`](https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html) implementation\n\n```js\nconst pointsToContain = [ /* some array of points */ ];\nconst pts = Points.convexHull(...pointsToContain);\n// pts is the outer set of points\n``` \n\n<demo-element title="Centroid and Convex Hull" src="/geometry/point-centroid-hull/" />\n\n[`centroid`](https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html) calculates a sort of center of a given set of points.\n\n```js\nconst pts = [ /* some array of points */ ];\nconst c = Points.centroid(...pts);\n// c is x,y centroid.\n```\n\n[`leftmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html)/[`rightmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html) returns the most left/right point of a set of points.\n\n## Rotation & Translation\n\nRotate a point around a given point with [`rotate`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate)\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0\nconst p = Points.rotate({x:10,y:10}, Math.PI/2, {x:0, y:0});\n\n// Rotate 10,10 by 15 degrees around the origin of 0,0\nconst pp = Points.rotate({x:10,y:10}, degreeToRadian(15), {x:0, y:0});\n```\n\n[`project`](https://clinth.github.io/ixfx/functions/Geometry.Points.project.html) yields a point at a specified distance and angle from an origin point.\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst origin = { x: 100, y: 100 };\n\n// 100 units away @ 10 degrees\nPoints.project(origin, 100, degreeToRadian(10));\n```\n\n## Conversions\n\nConverting a Point _to_ some other shape of data\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst p = { x: 5, y: 10 };\n\n// To an array [x, y]\nPoints.toArray(p); // [5, 10]\n\n// Human-readable representation:\nPoints.toString(p); // "(5, 10)"\n\n// Round x and y\nPoints.toIntegerValues({ x: 5.5, y: 10.5 }); // {x: 6, y: 11 }\n```\n\nConverting _from_ some other shape of data to Point\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n// Convert from two numeric parameters\nPoints.from(10, 15);    // { x: 10, y: 15}\n\n// Convert from an array\nPoints.from([10, 15]);  // {x: 10, y: 15}\n\n// Convert an array of arrays\nPoints.fromNumbers([ [10, 15], [5, 5]]); // [{x:10, y:15}, {x:5, y:5}]\n```\n\n## Normalise\n\nIt\'s often useful to work with [normalised](../../data/normalising/) points. Thus a point of `{x:0.5, y:0.5}` would mean 50% x, and 50% y. See the discussion on [normalising points](../../data/normalising/#geometry) for more on this.\n\nIn short, you can normalise point using `Points.divide`:\n\n```js\n// repl-pad#2\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst pt = { x: 500, y: 500 };\n\n// Normalise `pt` by viewport size,\n// yielding a point on 0..1 scale.\nPoints.divide(pt, window.innerWidth, window.innerHeight);\n\n// In principle it might exceed 0..1 range, so it may need to be clamped, too:\nPoints.clamp(Points.divide(pt, window.innerWidth, window.innerHeight));\n```\n\nTo apply a normalised point to some destination range, use `Points.multiply`\n\n```js\n// repl-pad#2\n// Maps a relative point to viewport size\nPoints.multiply(pt, window.innerWidth, window.innerHeight);\n```\n\n`clamp` locks x,y to a minimum and maximum, by default 0..1:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nPoints.clamp({ x:2,   y:2 });      // { x:1.0, y:1.0 }\nPoints.clamp({ x:0.5, y:0.5 });    // { x:0.5, y:0.5 }\n```\n\n## Random\n\n[`random`](https://clinth.github.io/ixfx/functions/Geometry.Points.random.html) creates a random point, by default on a normalised 0..1 scale:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nconst pt = Points.random();\n```\n\nA custom random source can be provided to skew values:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nimport { weightedSkewed } from "https://unpkg.com/ixfx/dist/random.js";\nconst pt = Points.random(weightedSkewed(`quadIn`));\n```\n\n## Applying functions\n\n[`apply`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply) returns a point with a given function applied to both `x` and `y` fields:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst p = {x:100.1234, y:100.1234};\n\n// Adds 10 to both x and y\nPoints.apply(p, v => v + 10);\n\n// Rounds the fields\nPoints.apply(p, Math.round);\n```\n\n[`pipeline`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html) creates a reusable function which applies a series of transformations to a point.\n\nIn the below example, a point will be normalised, and then inverted.\n\n```js\n// repl-pad#3\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst somePoint = { x: 1.2, y: 3.4 };\n\n// Create pipeline\nconst p = Points.pipeline(Points.normalise, Points.invert);\n\n// Run pipeline on `somePoint`\nconst changedPoint = p(somePoint); \n```\n\nIf a reusable pipeline is not needed, use [`pipelineApply`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html) instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:\n\n```js\n// repl-pad#3\nconst changedPoint = Points.pipelineApply(somePoint, Points.normalise, Points.invert);\n```\n\n[`reduce`](https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html) works like the usual Javascript `reduce` function:\n\n```js\n// Sum x and y values separately\nconst total = Points.reduce(points, (p, acc) => ({x: p.x + acc.x, y: p.y + acc.y})\n);\n// total.x / total.y\n```\n\n## Math operations\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Returns {x,y} of a * b\nPoints.multiply(a, b);\n\n// Returns {x,y} of a, with a.x * 2 and a.y * 0.5\nPoints.multiply(a, 2, 0.5);\n\n// Returns {x,y} of a / b\nPoints.divide(a, b);\n\n// Returns {x,y} of a, with a.x / 2 and a.y / 0.5\nPoints.divide(a, 2, 0.5);\n\n// Returns {x,y} of a + b\nPoints.sum(a, b);\n\n// Returns {x,y} of a - b;\nPoints.subtract(a, b);\n```\n\n[`invert`](https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html) flips one or more axis of a point. By default, both.\n\n```js\nconst a = { x: 20, y: 10 };\n\n// Returns { x: -20, y: -10 } \nPoints.invert(a);\n\n// Returns { x: -20, y: 10\nPoints.invert(a, `x`);\n```\n\n## Comparisons\n\n[`compare`](https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html) returns:\n* -1 if either _x_ or _y_ of point `a` is _less_ than what `b` has\n* 0 if _x_ and _y_ for `a` and `b` are identical\n* 1 if either _x_ or _y_ of point `a` is _greater_ than what `b` has\n\n```js\n// Returns 0, both points are equal\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 10 });\n\n// Returns -1, a.y is less than b.y\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 20 });\n\n// Returns 1, a.x is greater than b.x\nPoints.compare({ x: 10, y: 10 }, { x: 9, y: 10 });\n```\n\n[`isEqual`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html) returns _true_ if points have the same value:\n\n```js\nconst a = { x: 10, y: 10 };\nconst b = { x: 10, y: 10 };\na === b; // false, because identity of objects is different\nPoints.isEqual(a, b); // true, because values are the same\n```\n\nNote that additional properties of the the points are not compared, only the _x_, _y_ (and optional _z_).\n\nMore checks:\n* [`isNull`](https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html) returns true if _x_ and _y_ are _null_\n* [`isEmpty`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html) returns true if _x_ and _y_ are 0. Use `Points.Empty` to create an empty point.\n* [`isPlaceholder`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html) returns _true_ if both _x_ and _y_ are _NaN_. Use `Points.Placeholder` to create a placeholder point.\n* [`isPoint`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html) returns _true_ if the passed object has at least _x_ and _y_ properties.\n\n[`findMinimum`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum) allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.\n\nExample:\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Find the point closest to the {x:100, y:100}\nconst points = [/* ... points ... */];\nconst center = {x: 100, y: 100};\n\n// closestToCenter will be a Point {x,y}\nconst closestToCenter = Points.findMinimum((a, b) => {\n  const aDist = distance(a, center);\n  const bDist = distance(b, center);\n\n  // Returns `a` if its distance is less than `b`\n  //  or otherwise returns `b`\n  return (aDistance < bDistance) ? a : b;\n}, points);\n```', "html": '<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>\n</div>\n<p>A point is an <code is:raw>x</code> and <code is:raw>y</code> <a href="../units/#cartesian">Cartesian coordinate</a>; the basic building block for <a href="../line/">lines</a>, <a href="../arc/">arcs</a>, <a href="../rect/">rectangles</a> and paths.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// A point at (100, 200)</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>There\'s no defined unit for <code is:raw>x</code> and <code is:raw>y</code>, but pixel coordinates are typical.</p>\n<h2 id="distance-and-angles">Distance and angles</h2>\n<p>Calculate distance between two points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance"><code is:raw>distance</code></a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculates distance between point a and b</span>\n<span class="token keyword">const</span> distance <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a number</span>\n\n<span class="token comment">// Calculate angle in radians between points a and b</span>\n<span class="token keyword">const</span> angleRad <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">angle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> angleDeg <span class="token operator">=</span> <span class="token function">radianToDegree</span><span class="token punctuation">(</span>angleRad<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, <a href="#normalised-points">normalised</a> points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.</p>\n<demo-element title="Point math" src="/geometry/point-math/" />\n<h3 id="relation">Relation</h3>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html"><code is:raw>relation</code></a> helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a <code is:raw>pointermove</code> handler, perhaps we don\'t care about the absolute pointer coordinate, what we really care about is the distance from where the <code is:raw>pointerdown</code> event first happened. i.e, the change.</p>\n<p>Call <code is:raw>relation</code> to initialise the tracker, giving the reference point:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>After that, call the returned function (here assigned to <code is:raw>tracker</code>) to compute the relation of any other point to the reference point:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Compare 50,50 to 100,100</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The result contains the properties <em>angle</em> (in radians), <em>distance</em>, <em>centroid</em> (a Point), and <em>average</em> (a Point). <em>centroid</em> is the middle point between the reference and current point. <em>average</em> is an average of the <em>x</em> and <em>y</em> values of all points passed to the tracker function.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start tracking on pointer down</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use tracker when a move happens</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Didn\'t start tracking</span>\n\n  <span class="token comment">// Compare to the point recorded in `pointerdown`</span>\n  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Forget about tracker when pointer is up</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Point relation" src="/geometry/point-relation/" />\n<h3 id="see-also">See also</h3>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html"><code is:raw>distanceToExterior</code></a>: distance to the exterior of a basic shape</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html"><code is:raw>distanceToCenter</code></a>: distance to the center of a basic shape</li>\n</ul>\n<h2 id="interpolation">Interpolation</h2>\n<p>Calculate an in-between point with <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html"><code is:raw>interpolate</code></a>. Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.</p>\n<demo-element title="Point interpolation" src="/geometry/point-interpolate/" />\n<p>The signature of the <code is:raw>interpolate</code> is:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token function">interpolate</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> a<span class="token operator">:</span> Point<span class="token punctuation">,</span> b<span class="token operator">:</span> Point<span class="token punctuation">,</span> allowOverflow<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Point</code></pre>\n<p>Interpolation is between two points, <em>a</em> and <em>b</em>. An interpolation amount of 0 means the value of point <em>a</em> and an amount of 1 means the value of <em>b</em>. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to <em>b</em>, 0.2 is mostly close to <em>a</em> and so on.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate a Point between `a` and `b` using a relative </span>\n<span class="token comment">// progress amount (0 -> 1). </span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre>\n<p>By default, an interpolation amount outside of the 0..1 range throws an error. However, if <em>true</em> is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the <em>a->b</em> line. Or a value of 2 would be past <em>b</em> at a distance of the line.</p>\n<h2 id="areas">Areas</h2>\n<p>Calculates a rectangle which encompasses all the provided points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox"><code is:raw>bbox</code></a>. It returns a <a href="../rect/">Rectangle</a>, with <em>x, y, width</em> and <em>height</em> properties.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> rect <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">bbox</span><span class="token punctuation">(</span><span class="token operator">...</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>The [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.</p>\n<p>ixfx has a simple <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html"><code is:raw>convexHull</code></a> implementation</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> pointsToContain <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pts <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">convexHull</span><span class="token punctuation">(</span><span class="token operator">...</span>pointsToContain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// pts is the outer set of points</span></code></pre>\n<demo-element title="Centroid and Convex Hull" src="/geometry/point-centroid-hull/" />\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html"><code is:raw>centroid</code></a> calculates a sort of center of a given set of points.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> pts <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">centroid</span><span class="token punctuation">(</span><span class="token operator">...</span>pts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// c is x,y centroid.</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html"><code is:raw>leftmost</code></a>/<a href="https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html"><code is:raw>rightmost</code></a> returns the most left/right point of a set of points.</p>\n<h2 id="rotation--translation">Rotation &#x26; Translation</h2>\n<p>Rotate a point around a given point with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate"><code is:raw>rotate</code></a></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Rotate 10,10 by 15 degrees around the origin of 0,0</span>\n<span class="token keyword">const</span> pp <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.project.html"><code is:raw>project</code></a> yields a point at a specified distance and angle from an origin point.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 100 units away @ 10 degrees</span>\nPoints<span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="conversions">Conversions</h2>\n<p>Converting a Point <em>to</em> some other shape of data</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// To an array [x, y]</span>\nPoints<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 10]</span>\n\n<span class="token comment">// Human-readable representation:</span>\nPoints<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "(5, 10)"</span>\n\n<span class="token comment">// Round x and y</span>\nPoints<span class="token punctuation">.</span><span class="token function">toIntegerValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {x: 6, y: 11 }</span></code></pre>\n<p>Converting <em>from</em> some other shape of data to Point</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token comment">// Convert from two numeric parameters</span>\nPoints<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x: 10, y: 15}</span>\n\n<span class="token comment">// Convert from an array</span>\nPoints<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {x: 10, y: 15}</span>\n\n<span class="token comment">// Convert an array of arrays</span>\nPoints<span class="token punctuation">.</span><span class="token function">fromNumbers</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{x:10, y:15}, {x:5, y:5}]</span></code></pre>\n<h2 id="normalise">Normalise</h2>\n<p>It\'s often useful to work with <a href="../../data/normalising/">normalised</a> points. Thus a point of <code is:raw>{x:0.5, y:0.5}</code> would mean 50% x, and 50% y. See the discussion on <a href="../../data/normalising/#geometry">normalising points</a> for more on this.</p>\n<p>In short, you can normalise point using <code is:raw>Points.divide</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Normalise `pt` by viewport size,</span>\n<span class="token comment">// yielding a point on 0..1 scale.</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// In principle it might exceed 0..1 range, so it may need to be clamped, too:</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To apply a normalised point to some destination range, use <code is:raw>Points.multiply</code></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token comment">// Maps a relative point to viewport size</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>clamp</code> locks x,y to a minimum and maximum, by default 0..1:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// { x:1.0, y:1.0 }</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x:0.5, y:0.5 }</span></code></pre>\n<h2 id="random">Random</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.random.html"><code is:raw>random</code></a> creates a random point, by default on a normalised 0..1 scale:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>A custom random source can be provided to skew values:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> weightedSkewed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/random.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token function">weightedSkewed</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">quadIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="applying-functions">Applying functions</h2>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply"><code is:raw>apply</code></a> returns a point with a given function applied to both <code is:raw>x</code> and <code is:raw>y</code> fields:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Adds 10 to both x and y</span>\n<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Rounds the fields</span>\n<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Math<span class="token punctuation">.</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html"><code is:raw>pipeline</code></a> creates a reusable function which applies a series of transformations to a point.</p>\n<p>In the below example, a point will be normalised, and then inverted.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> somePoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3.4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create pipeline</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Run pipeline on `somePoint`</span>\n<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>If a reusable pipeline is not needed, use <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html"><code is:raw>pipelineApply</code></a> instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipelineApply</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html"><code is:raw>reduce</code></a> works like the usual Javascript <code is:raw>reduce</code> function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Sum x and y values separately</span>\n<span class="token keyword">const</span> total <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> acc</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> acc<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> acc<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// total.x / total.y</span></code></pre>\n<h2 id="math-operations">Math operations</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a * b</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a, with a.x * 2 and a.y * 0.5</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a / b</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a, with a.x / 2 and a.y / 0.5</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a + b</span>\nPoints<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a - b;</span>\nPoints<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html"><code is:raw>invert</code></a> flips one or more axis of a point. By default, both.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { x: -20, y: -10 } </span>\nPoints<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { x: -20, y: 10</span>\nPoints<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="comparisons">Comparisons</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html"><code is:raw>compare</code></a> returns:</p>\n<ul>\n<li>-1 if either <em>x</em> or <em>y</em> of point <code is:raw>a</code> is <em>less</em> than what <code is:raw>b</code> has</li>\n<li>0 if <em>x</em> and <em>y</em> for <code is:raw>a</code> and <code is:raw>b</code> are identical</li>\n<li>1 if either <em>x</em> or <em>y</em> of point <code is:raw>a</code> is <em>greater</em> than what <code is:raw>b</code> has</li>\n</ul>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Returns 0, both points are equal</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns -1, a.y is less than b.y</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns 1, a.x is greater than b.x</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html"><code is:raw>isEqual</code></a> returns <em>true</em> if points have the same value:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\na <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false, because identity of objects is different</span>\nPoints<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, because values are the same</span></code></pre>\n<p>Note that additional properties of the the points are not compared, only the <em>x</em>, <em>y</em> (and optional <em>z</em>).</p>\n<p>More checks:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html"><code is:raw>isNull</code></a> returns true if <em>x</em> and <em>y</em> are <em>null</em></li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html"><code is:raw>isEmpty</code></a> returns true if <em>x</em> and <em>y</em> are 0. Use <code is:raw>Points.Empty</code> to create an empty point.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html"><code is:raw>isPlaceholder</code></a> returns <em>true</em> if both <em>x</em> and <em>y</em> are <em>NaN</em>. Use <code is:raw>Points.Placeholder</code> to create a placeholder point.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html"><code is:raw>isPoint</code></a> returns <em>true</em> if the passed object has at least <em>x</em> and <em>y</em> properties.</li>\n</ul>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum"><code is:raw>findMinimum</code></a> allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.</p>\n<p>Example:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Find the point closest to the {x:100, y:100}</span>\n<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... points ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> center <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// closestToCenter will be a Point {x,y}</span>\n<span class="token keyword">const</span> closestToCenter <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">findMinimum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> aDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> bDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Returns `a` if its distance is less than `b`</span>\n  <span class="token comment">//  or otherwise returns `b`</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>aDistance <span class="token operator">&lt;</span> bDistance<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/types/geometry/point.md", { modules: [{ module: $$module1, specifier: "../../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/types/geometry/point.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Point = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Point;
  const $$content = { "title": "Point", "astro": { "headers": [{ "depth": 2, "slug": "distance-and-angles", "text": "Distance and angles" }, { "depth": 3, "slug": "relation", "text": "Relation" }, { "depth": 3, "slug": "see-also", "text": "See also" }, { "depth": 2, "slug": "interpolation", "text": "Interpolation" }, { "depth": 2, "slug": "areas", "text": "Areas" }, { "depth": 2, "slug": "rotation--translation", "text": "Rotation & Translation" }, { "depth": 2, "slug": "conversions", "text": "Conversions" }, { "depth": 2, "slug": "normalise", "text": "Normalise" }, { "depth": 2, "slug": "random", "text": "Random" }, { "depth": 2, "slug": "applying-functions", "text": "Applying functions" }, { "depth": 2, "slug": "math-operations", "text": "Math operations" }, { "depth": 2, "slug": "comparisons", "text": "Comparisons" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>\n</div>\n\nA point is an `x` and `y` [Cartesian coordinate](../units/#cartesian); the basic building block for [lines](../line/), [arcs](../arc/), [rectangles](../rect/) and paths.\n\n```js\n// A point at (100, 200)\nconst p = {x: 100, y: 200};\n```\n\nThere\'s no defined unit for `x` and `y`, but pixel coordinates are typical.\n\n## Distance and angles\n\nCalculate distance between two points with [`distance`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance).\n\n```js\n// repl-pad\nimport { Points, radianToDegree} from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculates distance between point a and b\nconst distance = Points.distance(a, b); // Returns a number\n\n// Calculate angle in radians between points a and b\nconst angleRad = Points.angle(a, b);\nconst angleDeg = radianToDegree(angleRad);\n```\n\nIn the example below, [normalised](#normalised-points) points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.\n\n<demo-element title="Point math" src="/geometry/point-math/" />\n\n### Relation\n\n[`relation`](https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html) helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a `pointermove` handler, perhaps we don\'t care about the absolute pointer coordinate, what we really care about is the distance from where the `pointerdown` event first happened. i.e, the change.\n\nCall `relation` to initialise the tracker, giving the reference point:\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nconst tracker = Points.relation({ x: 100, y:100 });\n```\n\nAfter that, call the returned function (here assigned to `tracker`) to compute the relation of any other point to the reference point:\n\n```js\n// Compare 50,50 to 100,100\nconst result = tracker({ x: 50, y: 50 });\n```\n\nThe result contains the properties _angle_ (in radians), _distance_, _centroid_ (a Point), and _average_ (a Point). _centroid_ is the middle point between the reference and current point. _average_ is an average of the _x_ and _y_ values of all points passed to the tracker function.\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\n\nlet tracker = null;\n\n// Start tracking on pointer down\ndocument.addEventListener(`pointerdown`, evt => {\n  tracker = Points.relation(evt);\n});\n\n// Use tracker when a move happens\ndocument.addEventListener(`pointermove`, evt => {\n  if (!t) return; // Didn\'t start tracking\n\n  // Compare to the point recorded in `pointerdown`\n  const r = tracker(evt);\n  console.log(`Distance from start: ${r.distance}`);\n});\n\n// Forget about tracker when pointer is up\ndocument.addEventListener(`pointerup`, evt => {\n  tracker = null;\n});\n```\n\n<demo-element title="Point relation" src="/geometry/point-relation/" />\n\n### See also\n\n* [`distanceToExterior`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html): distance to the exterior of a basic shape\n* [`distanceToCenter`](https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html): distance to the center of a basic shape\n\n## Interpolation\n\nCalculate an in-between point with [`interpolate`](https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html). Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.\n\n<demo-element title="Point interpolation" src="/geometry/point-interpolate/" />\n\n\nThe signature of the `interpolate` is:\n\n```typescript\ninterpolate(amount: number, a: Point, b: Point, allowOverflow?: boolean): Point\n```\n\n\nInterpolation is between two points, _a_ and _b_. An interpolation amount of 0 means the value of point _a_ and an amount of 1 means the value of _b_. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to _b_, 0.2 is mostly close to _a_ and so on.\n\n```js\n// repl-pad#1\nimport { Points, radianToDegree} from "https://unpkg.com/ixfx/dist/geometry.js"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Calculate a Point between `a` and `b` using a relative \n// progress amount (0 -> 1). \nconst p = Points.interpolate(0.5, a, b); // Returns {x,y}\n```\n\nBy default, an interpolation amount outside of the 0..1 range throws an error. However, if _true_ is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the _a->b_ line. Or a value of 2 would be past _b_ at a distance of the line. \n\n## Areas\n\nCalculates a rectangle which encompasses all the provided points with [`bbox`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox). It returns a [Rectangle](../rect/), with _x, y, width_ and _height_ properties.\n\n```js\n// repl-pad#1\nconst points = [a, b];\nconst rect = Points.bbox(...points); \n```\n\nThe [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.\n\nixfx has a simple [`convexHull`](https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html) implementation\n\n```js\nconst pointsToContain = [ /* some array of points */ ];\nconst pts = Points.convexHull(...pointsToContain);\n// pts is the outer set of points\n``` \n\n<demo-element title="Centroid and Convex Hull" src="/geometry/point-centroid-hull/" />\n\n[`centroid`](https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html) calculates a sort of center of a given set of points.\n\n```js\nconst pts = [ /* some array of points */ ];\nconst c = Points.centroid(...pts);\n// c is x,y centroid.\n```\n\n[`leftmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html)/[`rightmost`](https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html) returns the most left/right point of a set of points.\n\n## Rotation & Translation\n\nRotate a point around a given point with [`rotate`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate)\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0\nconst p = Points.rotate({x:10,y:10}, Math.PI/2, {x:0, y:0});\n\n// Rotate 10,10 by 15 degrees around the origin of 0,0\nconst pp = Points.rotate({x:10,y:10}, degreeToRadian(15), {x:0, y:0});\n```\n\n[`project`](https://clinth.github.io/ixfx/functions/Geometry.Points.project.html) yields a point at a specified distance and angle from an origin point.\n\n```js\n// repl-pad\nimport { Points, degreeToRadian } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst origin = { x: 100, y: 100 };\n\n// 100 units away @ 10 degrees\nPoints.project(origin, 100, degreeToRadian(10));\n```\n\n## Conversions\n\nConverting a Point _to_ some other shape of data\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst p = { x: 5, y: 10 };\n\n// To an array [x, y]\nPoints.toArray(p); // [5, 10]\n\n// Human-readable representation:\nPoints.toString(p); // "(5, 10)"\n\n// Round x and y\nPoints.toIntegerValues({ x: 5.5, y: 10.5 }); // {x: 6, y: 11 }\n```\n\nConverting _from_ some other shape of data to Point\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n// Convert from two numeric parameters\nPoints.from(10, 15);    // { x: 10, y: 15}\n\n// Convert from an array\nPoints.from([10, 15]);  // {x: 10, y: 15}\n\n// Convert an array of arrays\nPoints.fromNumbers([ [10, 15], [5, 5]]); // [{x:10, y:15}, {x:5, y:5}]\n```\n\n## Normalise\n\nIt\'s often useful to work with [normalised](../../data/normalising/) points. Thus a point of `{x:0.5, y:0.5}` would mean 50% x, and 50% y. See the discussion on [normalising points](../../data/normalising/#geometry) for more on this.\n\nIn short, you can normalise point using `Points.divide`:\n\n```js\n// repl-pad#2\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst pt = { x: 500, y: 500 };\n\n// Normalise `pt` by viewport size,\n// yielding a point on 0..1 scale.\nPoints.divide(pt, window.innerWidth, window.innerHeight);\n\n// In principle it might exceed 0..1 range, so it may need to be clamped, too:\nPoints.clamp(Points.divide(pt, window.innerWidth, window.innerHeight));\n```\n\nTo apply a normalised point to some destination range, use `Points.multiply`\n\n```js\n// repl-pad#2\n// Maps a relative point to viewport size\nPoints.multiply(pt, window.innerWidth, window.innerHeight);\n```\n\n`clamp` locks x,y to a minimum and maximum, by default 0..1:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nPoints.clamp({ x:2,   y:2 });      // { x:1.0, y:1.0 }\nPoints.clamp({ x:0.5, y:0.5 });    // { x:0.5, y:0.5 }\n```\n\n## Random\n\n[`random`](https://clinth.github.io/ixfx/functions/Geometry.Points.random.html) creates a random point, by default on a normalised 0..1 scale:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nconst pt = Points.random();\n```\n\nA custom random source can be provided to skew values:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js";\nimport { weightedSkewed } from "https://unpkg.com/ixfx/dist/random.js";\nconst pt = Points.random(weightedSkewed(`quadIn`));\n```\n\n## Applying functions\n\n[`apply`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply) returns a point with a given function applied to both `x` and `y` fields:\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst p = {x:100.1234, y:100.1234};\n\n// Adds 10 to both x and y\nPoints.apply(p, v => v + 10);\n\n// Rounds the fields\nPoints.apply(p, Math.round);\n```\n\n[`pipeline`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html) creates a reusable function which applies a series of transformations to a point.\n\nIn the below example, a point will be normalised, and then inverted.\n\n```js\n// repl-pad#3\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst somePoint = { x: 1.2, y: 3.4 };\n\n// Create pipeline\nconst p = Points.pipeline(Points.normalise, Points.invert);\n\n// Run pipeline on `somePoint`\nconst changedPoint = p(somePoint); \n```\n\nIf a reusable pipeline is not needed, use [`pipelineApply`](https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html) instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:\n\n```js\n// repl-pad#3\nconst changedPoint = Points.pipelineApply(somePoint, Points.normalise, Points.invert);\n```\n\n[`reduce`](https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html) works like the usual Javascript `reduce` function:\n\n```js\n// Sum x and y values separately\nconst total = Points.reduce(points, (p, acc) => ({x: p.x + acc.x, y: p.y + acc.y})\n);\n// total.x / total.y\n```\n\n## Math operations\n\n```js\n// repl-pad\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\nconst a = {x: 10, y: 10};\nconst b = {x: 20, y: 20};\n\n// Returns {x,y} of a * b\nPoints.multiply(a, b);\n\n// Returns {x,y} of a, with a.x * 2 and a.y * 0.5\nPoints.multiply(a, 2, 0.5);\n\n// Returns {x,y} of a / b\nPoints.divide(a, b);\n\n// Returns {x,y} of a, with a.x / 2 and a.y / 0.5\nPoints.divide(a, 2, 0.5);\n\n// Returns {x,y} of a + b\nPoints.sum(a, b);\n\n// Returns {x,y} of a - b;\nPoints.subtract(a, b);\n```\n\n[`invert`](https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html) flips one or more axis of a point. By default, both.\n\n```js\nconst a = { x: 20, y: 10 };\n\n// Returns { x: -20, y: -10 } \nPoints.invert(a);\n\n// Returns { x: -20, y: 10\nPoints.invert(a, `x`);\n```\n\n## Comparisons\n\n[`compare`](https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html) returns:\n* -1 if either _x_ or _y_ of point `a` is _less_ than what `b` has\n* 0 if _x_ and _y_ for `a` and `b` are identical\n* 1 if either _x_ or _y_ of point `a` is _greater_ than what `b` has\n\n```js\n// Returns 0, both points are equal\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 10 });\n\n// Returns -1, a.y is less than b.y\nPoints.compare({ x: 10, y: 10 }, { x: 10, y: 20 });\n\n// Returns 1, a.x is greater than b.x\nPoints.compare({ x: 10, y: 10 }, { x: 9, y: 10 });\n```\n\n[`isEqual`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html) returns _true_ if points have the same value:\n\n```js\nconst a = { x: 10, y: 10 };\nconst b = { x: 10, y: 10 };\na === b; // false, because identity of objects is different\nPoints.isEqual(a, b); // true, because values are the same\n```\n\nNote that additional properties of the the points are not compared, only the _x_, _y_ (and optional _z_).\n\nMore checks:\n* [`isNull`](https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html) returns true if _x_ and _y_ are _null_\n* [`isEmpty`](https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html) returns true if _x_ and _y_ are 0. Use `Points.Empty` to create an empty point.\n* [`isPlaceholder`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html) returns _true_ if both _x_ and _y_ are _NaN_. Use `Points.Placeholder` to create a placeholder point.\n* [`isPoint`](https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html) returns _true_ if the passed object has at least _x_ and _y_ properties.\n\n[`findMinimum`](https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum) allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.\n\nExample:\n\n```js\nimport { Points } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Find the point closest to the {x:100, y:100}\nconst points = [/* ... points ... */];\nconst center = {x: 100, y: 100};\n\n// closestToCenter will be a Point {x,y}\nconst closestToCenter = Points.findMinimum((a, b) => {\n  const aDist = distance(a, center);\n  const bDist = distance(b, center);\n\n  // Returns `a` if its distance is less than `b`\n  //  or otherwise returns `b`\n  return (aDistance < bDistance) ? a : b;\n}, points);\n```', "html": '<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>\n</div>\n<p>A point is an <code is:raw>x</code> and <code is:raw>y</code> <a href="../units/#cartesian">Cartesian coordinate</a>; the basic building block for <a href="../line/">lines</a>, <a href="../arc/">arcs</a>, <a href="../rect/">rectangles</a> and paths.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// A point at (100, 200)</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>There\'s no defined unit for <code is:raw>x</code> and <code is:raw>y</code>, but pixel coordinates are typical.</p>\n<h2 id="distance-and-angles">Distance and angles</h2>\n<p>Calculate distance between two points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance"><code is:raw>distance</code></a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculates distance between point a and b</span>\n<span class="token keyword">const</span> distance <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a number</span>\n\n<span class="token comment">// Calculate angle in radians between points a and b</span>\n<span class="token keyword">const</span> angleRad <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">angle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> angleDeg <span class="token operator">=</span> <span class="token function">radianToDegree</span><span class="token punctuation">(</span>angleRad<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, <a href="#normalised-points">normalised</a> points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.</p>\n<demo-element title="Point math" src="/geometry/point-math/" />\n<h3 id="relation">Relation</h3>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html"><code is:raw>relation</code></a> helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a <code is:raw>pointermove</code> handler, perhaps we don\'t care about the absolute pointer coordinate, what we really care about is the distance from where the <code is:raw>pointerdown</code> event first happened. i.e, the change.</p>\n<p>Call <code is:raw>relation</code> to initialise the tracker, giving the reference point:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>After that, call the returned function (here assigned to <code is:raw>tracker</code>) to compute the relation of any other point to the reference point:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Compare 50,50 to 100,100</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The result contains the properties <em>angle</em> (in radians), <em>distance</em>, <em>centroid</em> (a Point), and <em>average</em> (a Point). <em>centroid</em> is the middle point between the reference and current point. <em>average</em> is an average of the <em>x</em> and <em>y</em> values of all points passed to the tracker function.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Start tracking on pointer down</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Use tracker when a move happens</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Didn\'t start tracking</span>\n\n  <span class="token comment">// Compare to the point recorded in `pointerdown`</span>\n  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Forget about tracker when pointer is up</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Point relation" src="/geometry/point-relation/" />\n<h3 id="see-also">See also</h3>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html"><code is:raw>distanceToExterior</code></a>: distance to the exterior of a basic shape</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html"><code is:raw>distanceToCenter</code></a>: distance to the center of a basic shape</li>\n</ul>\n<h2 id="interpolation">Interpolation</h2>\n<p>Calculate an in-between point with <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html"><code is:raw>interpolate</code></a>. Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.</p>\n<demo-element title="Point interpolation" src="/geometry/point-interpolate/" />\n<p>The signature of the <code is:raw>interpolate</code> is:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token function">interpolate</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> a<span class="token operator">:</span> Point<span class="token punctuation">,</span> b<span class="token operator">:</span> Point<span class="token punctuation">,</span> allowOverflow<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Point</code></pre>\n<p>Interpolation is between two points, <em>a</em> and <em>b</em>. An interpolation amount of 0 means the value of point <em>a</em> and an amount of 1 means the value of <em>b</em>. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to <em>b</em>, 0.2 is mostly close to <em>a</em> and so on.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Calculate a Point between `a` and `b` using a relative </span>\n<span class="token comment">// progress amount (0 -> 1). </span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre>\n<p>By default, an interpolation amount outside of the 0..1 range throws an error. However, if <em>true</em> is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the <em>a->b</em> line. Or a value of 2 would be past <em>b</em> at a distance of the line.</p>\n<h2 id="areas">Areas</h2>\n<p>Calculates a rectangle which encompasses all the provided points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox"><code is:raw>bbox</code></a>. It returns a <a href="../rect/">Rectangle</a>, with <em>x, y, width</em> and <em>height</em> properties.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> rect <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">bbox</span><span class="token punctuation">(</span><span class="token operator">...</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>The [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.</p>\n<p>ixfx has a simple <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html"><code is:raw>convexHull</code></a> implementation</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> pointsToContain <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pts <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">convexHull</span><span class="token punctuation">(</span><span class="token operator">...</span>pointsToContain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// pts is the outer set of points</span></code></pre>\n<demo-element title="Centroid and Convex Hull" src="/geometry/point-centroid-hull/" />\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html"><code is:raw>centroid</code></a> calculates a sort of center of a given set of points.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> pts <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">centroid</span><span class="token punctuation">(</span><span class="token operator">...</span>pts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// c is x,y centroid.</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html"><code is:raw>leftmost</code></a>/<a href="https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html"><code is:raw>rightmost</code></a> returns the most left/right point of a set of points.</p>\n<h2 id="rotation--translation">Rotation &#x26; Translation</h2>\n<p>Rotate a point around a given point with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate"><code is:raw>rotate</code></a></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Rotate 10,10 by 15 degrees around the origin of 0,0</span>\n<span class="token keyword">const</span> pp <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.project.html"><code is:raw>project</code></a> yields a point at a specified distance and angle from an origin point.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 100 units away @ 10 degrees</span>\nPoints<span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="conversions">Conversions</h2>\n<p>Converting a Point <em>to</em> some other shape of data</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// To an array [x, y]</span>\nPoints<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 10]</span>\n\n<span class="token comment">// Human-readable representation:</span>\nPoints<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "(5, 10)"</span>\n\n<span class="token comment">// Round x and y</span>\nPoints<span class="token punctuation">.</span><span class="token function">toIntegerValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {x: 6, y: 11 }</span></code></pre>\n<p>Converting <em>from</em> some other shape of data to Point</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token comment">// Convert from two numeric parameters</span>\nPoints<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x: 10, y: 15}</span>\n\n<span class="token comment">// Convert from an array</span>\nPoints<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {x: 10, y: 15}</span>\n\n<span class="token comment">// Convert an array of arrays</span>\nPoints<span class="token punctuation">.</span><span class="token function">fromNumbers</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{x:10, y:15}, {x:5, y:5}]</span></code></pre>\n<h2 id="normalise">Normalise</h2>\n<p>It\'s often useful to work with <a href="../../data/normalising/">normalised</a> points. Thus a point of <code is:raw>{x:0.5, y:0.5}</code> would mean 50% x, and 50% y. See the discussion on <a href="../../data/normalising/#geometry">normalising points</a> for more on this.</p>\n<p>In short, you can normalise point using <code is:raw>Points.divide</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Normalise `pt` by viewport size,</span>\n<span class="token comment">// yielding a point on 0..1 scale.</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// In principle it might exceed 0..1 range, so it may need to be clamped, too:</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To apply a normalised point to some destination range, use <code is:raw>Points.multiply</code></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token comment">// Maps a relative point to viewport size</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>clamp</code> locks x,y to a minimum and maximum, by default 0..1:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// { x:1.0, y:1.0 }</span>\nPoints<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x:0.5, y:0.5 }</span></code></pre>\n<h2 id="random">Random</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.random.html"><code is:raw>random</code></a> creates a random point, by default on a normalised 0..1 scale:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>A custom random source can be provided to skew values:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> weightedSkewed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/random.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token function">weightedSkewed</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">quadIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="applying-functions">Applying functions</h2>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply"><code is:raw>apply</code></a> returns a point with a given function applied to both <code is:raw>x</code> and <code is:raw>y</code> fields:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Adds 10 to both x and y</span>\n<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Rounds the fields</span>\n<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Math<span class="token punctuation">.</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html"><code is:raw>pipeline</code></a> creates a reusable function which applies a series of transformations to a point.</p>\n<p>In the below example, a point will be normalised, and then inverted.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> somePoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3.4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create pipeline</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Run pipeline on `somePoint`</span>\n<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>If a reusable pipeline is not needed, use <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html"><code is:raw>pipelineApply</code></a> instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipelineApply</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html"><code is:raw>reduce</code></a> works like the usual Javascript <code is:raw>reduce</code> function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Sum x and y values separately</span>\n<span class="token keyword">const</span> total <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> acc</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> acc<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> acc<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// total.x / total.y</span></code></pre>\n<h2 id="math-operations">Math operations</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a * b</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a, with a.x * 2 and a.y * 0.5</span>\nPoints<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a / b</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a, with a.x / 2 and a.y / 0.5</span>\nPoints<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a + b</span>\nPoints<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns {x,y} of a - b;</span>\nPoints<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html"><code is:raw>invert</code></a> flips one or more axis of a point. By default, both.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { x: -20, y: -10 } </span>\nPoints<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { x: -20, y: 10</span>\nPoints<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="comparisons">Comparisons</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html"><code is:raw>compare</code></a> returns:</p>\n<ul>\n<li>-1 if either <em>x</em> or <em>y</em> of point <code is:raw>a</code> is <em>less</em> than what <code is:raw>b</code> has</li>\n<li>0 if <em>x</em> and <em>y</em> for <code is:raw>a</code> and <code is:raw>b</code> are identical</li>\n<li>1 if either <em>x</em> or <em>y</em> of point <code is:raw>a</code> is <em>greater</em> than what <code is:raw>b</code> has</li>\n</ul>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Returns 0, both points are equal</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns -1, a.y is less than b.y</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns 1, a.x is greater than b.x</span>\nPoints<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html"><code is:raw>isEqual</code></a> returns <em>true</em> if points have the same value:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\na <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false, because identity of objects is different</span>\nPoints<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, because values are the same</span></code></pre>\n<p>Note that additional properties of the the points are not compared, only the <em>x</em>, <em>y</em> (and optional <em>z</em>).</p>\n<p>More checks:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html"><code is:raw>isNull</code></a> returns true if <em>x</em> and <em>y</em> are <em>null</em></li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html"><code is:raw>isEmpty</code></a> returns true if <em>x</em> and <em>y</em> are 0. Use <code is:raw>Points.Empty</code> to create an empty point.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html"><code is:raw>isPlaceholder</code></a> returns <em>true</em> if both <em>x</em> and <em>y</em> are <em>NaN</em>. Use <code is:raw>Points.Placeholder</code> to create a placeholder point.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html"><code is:raw>isPoint</code></a> returns <em>true</em> if the passed object has at least <em>x</em> and <em>y</em> properties.</li>\n</ul>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum"><code is:raw>findMinimum</code></a> allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.</p>\n<p>Example:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Find the point closest to the {x:100, y:100}</span>\n<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... points ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> center <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// closestToCenter will be a Point {x,y}</span>\n<span class="token keyword">const</span> closestToCenter <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">findMinimum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> aDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> bDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Returns `a` if its distance is less than `b`</span>\n  <span class="token comment">//  or otherwise returns `b`</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>aDistance <span class="token operator">&lt;</span> bDistance<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>Demos <a href="https://clinth.github.io/ixfx-demos/geometry/">Geometry</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry">source</a>)</li>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html">Geometry.Points module</a></li>
</ul></div><p>A point is an <code>x</code> and <code>y</code> <a href="../units/#cartesian">Cartesian coordinate</a>; the basic building block for <a href="../line/">lines</a>, <a href="../arc/">arcs</a>, <a href="../rect/">rectangles</a> and paths.</p><pre class="language-js"><code class="language-js"><span class="token comment">// A point at (100, 200)</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>There's no defined unit for <code>x</code> and <code>y</code>, but pixel coordinates are typical.</p><h2 id="distance-and-angles">Distance and angles</h2><p>Calculate distance between two points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#distance"><code>distance</code></a>.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Calculates distance between point a and b</span>
<span class="token keyword">const</span> distance <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns a number</span>

<span class="token comment">// Calculate angle in radians between points a and b</span>
<span class="token keyword">const</span> angleRad <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">angle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> angleDeg <span class="token operator">=</span> <span class="token function">radianToDegree</span><span class="token punctuation">(</span>angleRad<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the example below, <a href="#normalised-points">normalised</a> points are used for the distance calculation, so a distance value of 0.5 means 50% of the screen width/height away from the middle.</p>${renderComponent($$result, "demo-element", "demo-element", { "title": "Point math", "src": "/geometry/point-math/" })}<h3 id="relation">Relation</h3><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.relation.html"><code>relation</code></a> helps tracking the relation between two points. This is particularly useful for working with pointer events. For example, in a <code>pointermove</code> handler, perhaps we don't care about the absolute pointer coordinate, what we really care about is the distance from where the <code>pointerdown</code> event first happened. i.e, the change.</p><p>Call <code>relation</code> to initialise the tracker, giving the reference point:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>After that, call the returned function (here assigned to <code>tracker</code>) to compute the relation of any other point to the reference point:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Compare 50,50 to 100,100</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The result contains the properties <em>angle</em> (in radians), <em>distance</em>, <em>centroid</em> (a Point), and <em>average</em> (a Point). <em>centroid</em> is the middle point between the reference and current point. <em>average</em> is an average of the <em>x</em> and <em>y</em> values of all points passed to the tracker function.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// Start tracking on pointer down</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  tracker <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">relation</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use tracker when a move happens</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Didn't start tracking</span>

  <span class="token comment">// Compare to the point recorded in \`pointerdown\`</span>
  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">tracker</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>r<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Forget about tracker when pointer is up</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointerup</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Point relation", "src": "/geometry/point-relation/" })}<h3 id="see-also">See also</h3><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToExterior.html"><code>distanceToExterior</code></a>: distance to the exterior of a basic shape</li>
<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.distanceToCenter.html"><code>distanceToCenter</code></a>: distance to the center of a basic shape</li>
</ul><h2 id="interpolation">Interpolation</h2><p>Calculate an in-between point with <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.interpolate.html"><code>interpolate</code></a>. Interpolation can be useful for smoothly moving to a destination, as seen in the demo below.</p>${renderComponent($$result, "demo-element", "demo-element", { "title": "Point interpolation", "src": "/geometry/point-interpolate/" })}<p>The signature of the <code>interpolate</code> is:</p><pre class="language-typescript"><code class="language-typescript"><span class="token function">interpolate</span><span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> a<span class="token operator">:</span> Point<span class="token punctuation">,</span> b<span class="token operator">:</span> Point<span class="token punctuation">,</span> allowOverflow<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Point</code></pre><p>Interpolation is between two points, <em>a</em> and <em>b</em>. An interpolation amount of 0 means the value of point <em>a</em> and an amount of 1 means the value of <em>b</em>. Anywhere in between is a mix, eg 0.5 is in the middle, 0.8 is mostly close to <em>b</em>, 0.2 is mostly close to <em>a</em> and so on.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> radianToDegree<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Calculate a Point between \`a\` and \`b\` using a relative </span>
<span class="token comment">// progress amount (0 -> 1). </span>
<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre><p>By default, an interpolation amount outside of the 0..1 range throws an error. However, if <em>true</em> is passed in as a fourth argument, it will allow overflowing. Eg, a value of -0.5 would start halfway behind the <em>a->b</em> line. Or a value of 2 would be past <em>b</em> at a distance of the line.</p><h2 id="areas">Areas</h2><p>Calculates a rectangle which encompasses all the provided points with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#bbox"><code>bbox</code></a>. It returns a <a href="../rect/">Rectangle</a>, with <em>x, y, width</em> and <em>height</em> properties.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rect <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">bbox</span><span class="token punctuation">(</span><span class="token operator">...</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>The [convex hull] is set of points which can minimally enclose a larger set. In other words, if we have a set of scattered points, the convex hull is the list of points which defines the outer edge of all these points.</p><p>ixfx has a simple <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.convexHull.html"><code>convexHull</code></a> implementation</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> pointsToContain <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pts <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">convexHull</span><span class="token punctuation">(</span><span class="token operator">...</span>pointsToContain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// pts is the outer set of points</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Centroid and Convex Hull", "src": "/geometry/point-centroid-hull/" })}<p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.centroid.html"><code>centroid</code></a> calculates a sort of center of a given set of points.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> pts <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">/* some array of points */</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">centroid</span><span class="token punctuation">(</span><span class="token operator">...</span>pts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// c is x,y centroid.</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.leftmost.html"><code>leftmost</code></a>/<a href="https://clinth.github.io/ixfx/functions/Geometry.Points.rightmost.html"><code>rightmost</code></a> returns the most left/right point of a set of points.</p><h2 id="rotation--translation">Rotation &#x26; Translation</h2><p>Rotate a point around a given point with <a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#rotate"><code>rotate</code></a></p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token comment">// Rotate 10,10 by Math.PI/2 radians around the origin of 0,0</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Rotate 10,10 by 15 degrees around the origin of 0,0</span>
<span class="token keyword">const</span> pp <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.project.html"><code>project</code></a> yields a point at a specified distance and angle from an origin point.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points<span class="token punctuation">,</span> degreeToRadian <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 100 units away @ 10 degrees</span>
Points<span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token function">degreeToRadian</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="conversions">Conversions</h2><p>Converting a Point <em>to</em> some other shape of data</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// To an array [x, y]</span>
Points<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 10]</span>

<span class="token comment">// Human-readable representation:</span>
Points<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "(5, 10)"</span>

<span class="token comment">// Round x and y</span>
Points<span class="token punctuation">.</span><span class="token function">toIntegerValues</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {x: 6, y: 11 }</span></code></pre><p>Converting <em>from</em> some other shape of data to Point</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token comment">// Convert from two numeric parameters</span>
Points<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x: 10, y: 15}</span>

<span class="token comment">// Convert from an array</span>
Points<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {x: 10, y: 15}</span>

<span class="token comment">// Convert an array of arrays</span>
Points<span class="token punctuation">.</span><span class="token function">fromNumbers</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{x:10, y:15}, {x:5, y:5}]</span></code></pre><h2 id="normalise">Normalise</h2><p>It's often useful to work with <a href="../../data/normalising/">normalised</a> points. Thus a point of <code>{x:0.5, y:0.5}</code> would mean 50% x, and 50% y. See the discussion on <a href="../../data/normalising/#geometry">normalising points</a> for more on this.</p><p>In short, you can normalise point using <code>Points.divide</code>:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#2</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Normalise \`pt\` by viewport size,</span>
<span class="token comment">// yielding a point on 0..1 scale.</span>
Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// In principle it might exceed 0..1 range, so it may need to be clamped, too:</span>
Points<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>To apply a normalised point to some destination range, use <code>Points.multiply</code></p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#2</span>
<span class="token comment">// Maps a relative point to viewport size</span>
Points<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>clamp</code> locks x,y to a minimum and maximum, by default 0..1:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
Points<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// { x:1.0, y:1.0 }</span>
Points<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// { x:0.5, y:0.5 }</span></code></pre><h2 id="random">Random</h2><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.random.html"><code>random</code></a> creates a random point, by default on a normalised 0..1 scale:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>A custom random source can be provided to skew values:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> weightedSkewed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/random.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pt <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token function">weightedSkewed</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">quadIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="applying-functions">Applying functions</h2><p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#apply"><code>apply</code></a> returns a point with a given function applied to both <code>x</code> and <code>y</code> fields:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">100.1234</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Adds 10 to both x and y</span>
<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Rounds the fields</span>
<span class="token function">Points</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Math<span class="token punctuation">.</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipeline.html"><code>pipeline</code></a> creates a reusable function which applies a series of transformations to a point.</p><p>In the below example, a point will be normalised, and then inverted.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#3</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token keyword">const</span> somePoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3.4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Create pipeline</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span>Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Run pipeline on \`somePoint\`</span>
<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>If a reusable pipeline is not needed, use <a href="https://clinth.github.io/ixfx/functions/Geometry.Points.pipelineApply.html"><code>pipelineApply</code></a> instead. This takes a point as a first parameter, and a series of operations as subsequent parameters:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#3</span>
<span class="token keyword">const</span> changedPoint <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">pipelineApply</span><span class="token punctuation">(</span>somePoint<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>normalise<span class="token punctuation">,</span> Points<span class="token punctuation">.</span>invert<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.reduce.html"><code>reduce</code></a> works like the usual Javascript <code>reduce</code> function:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Sum x and y values separately</span>
<span class="token keyword">const</span> total <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> acc</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> acc<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> acc<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// total.x / total.y</span></code></pre><h2 id="math-operations">Math operations</h2><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Returns {x,y} of a * b</span>
Points<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns {x,y} of a, with a.x * 2 and a.y * 0.5</span>
Points<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns {x,y} of a / b</span>
Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns {x,y} of a, with a.x / 2 and a.y / 0.5</span>
Points<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns {x,y} of a + b</span>
Points<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns {x,y} of a - b;</span>
Points<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.invert.html"><code>invert</code></a> flips one or more axis of a point. By default, both.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Returns { x: -20, y: -10 } </span>
Points<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns { x: -20, y: 10</span>
Points<span class="token punctuation">.</span><span class="token function">invert</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">x</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="comparisons">Comparisons</h2><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.compare.html"><code>compare</code></a> returns:</p><ul>
<li>-1 if either <em>x</em> or <em>y</em> of point <code>a</code> is <em>less</em> than what <code>b</code> has</li>
<li>0 if <em>x</em> and <em>y</em> for <code>a</code> and <code>b</code> are identical</li>
<li>1 if either <em>x</em> or <em>y</em> of point <code>a</code> is <em>greater</em> than what <code>b</code> has</li>
</ul><pre class="language-js"><code class="language-js"><span class="token comment">// Returns 0, both points are equal</span>
Points<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns -1, a.y is less than b.y</span>
Points<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns 1, a.x is greater than b.x</span>
Points<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEqual.html"><code>isEqual</code></a> returns <em>true</em> if points have the same value:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
a <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// false, because identity of objects is different</span>
Points<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, because values are the same</span></code></pre><p>Note that additional properties of the the points are not compared, only the <em>x</em>, <em>y</em> (and optional <em>z</em>).</p><p>More checks:</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isNull.html"><code>isNull</code></a> returns true if <em>x</em> and <em>y</em> are <em>null</em></li>
<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isEmpty.html"><code>isEmpty</code></a> returns true if <em>x</em> and <em>y</em> are 0. Use <code>Points.Empty</code> to create an empty point.</li>
<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPlaceholder.html"><code>isPlaceholder</code></a> returns <em>true</em> if both <em>x</em> and <em>y</em> are <em>NaN</em>. Use <code>Points.Placeholder</code> to create a placeholder point.</li>
<li><a href="https://clinth.github.io/ixfx/functions/Geometry.Points.isPoint.html"><code>isPoint</code></a> returns <em>true</em> if the passed object has at least <em>x</em> and <em>y</em> properties.</li>
</ul><p><a href="https://clinth.github.io/ixfx/modules/Geometry.Points.html#findMinimum"><code>findMinimum</code></a> allows you to compare an array of points, keeping the one which satisfies the provided comparer function over all others.</p><p>Example:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Points <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token comment">// Find the point closest to the {x:100, y:100}</span>
<span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... points ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> center <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// closestToCenter will be a Point {x,y}</span>
<span class="token keyword">const</span> closestToCenter <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">findMinimum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> aDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> bDist <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> center<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Returns \`a\` if its distance is less than \`b\`</span>
  <span class="token comment">//  or otherwise returns \`b\`</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>aDistance <span class="token operator">&lt;</span> bDistance<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>` })}`;
});

export { $$metadata, $$Point as default, frontmatter, metadata };
