import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import { $ as $$module3 } from './chunks/FuncPlotElement.b0f9669c.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';
import 'lit/directives/class-map.js';
import './chunks/chunk-IYXXLC7L.d562e3d6.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "time-based", "text": "Time-based" }, { "depth": 3, "slug": "tick-based", "text": "Tick-based" }, { "depth": 2, "slug": "its-a-function", "text": "It's a function" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "custom-curves", "text": "Custom curves" }, { "depth": 3, "slug": "simple-cubic-beziers", "text": "Simple cubic beziers" }, { "depth": 2, "slug": "defined-easings", "text": "Defined easings" }, { "depth": 2, "slug": "credits", "text": "Credits" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>\n</ul>\n</div>\n\n\nEasing functions help to give a *dynamic* to transition. In [Cartesian](../../types/geometry/units/#cartesian) terms, they give a _y_ value for _x_ (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time _t_ (where _t_ is 0 .. 1).\n\nNormally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that\'s all you need, ixfx\'s [count](../../gen/generator/#count) and [numericRange](../../gen/generator/#numeric-range) functions might do the job.\n\nFor example, count by 0.1 from 0 to 1:\n\n<div data-easing=true id="demo0" title="Linear function" fn="x"></div>\n\nThis is a _linear_ function, with the same \'speed\' throughout the progression towards the end point.\n\nIn contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this `cubicIn` function:\n\n<div data-easing=true id="demo1" title="cubicIn" easing="cubicIn"></div>\n\nOr perhaps gathering speed quickly, but then slowing down toward the end (`cubicOut`):\n\n<div data-easing=true id="demo1" title="cubicOut" easing="cubicOut"></div>\n\nJump to the [Defined Easings](#defined-easings) to see a list of pre-defined easing functions.\n\n## Usage\n\nEasings can be driven by time or _ticks_, created by [`Easings.time`](https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html) or [`Easings.tick`](https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html), respectively. \n\nEach of these returns an [`Easings.Easing`](https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html), which has this type:\n\n```typescript\ntype Easing = {\n  // Returns value at this point\n  // Usually 0-1, but some functions can overshoot\n  compute():number\n  // Reset easing to beginning\n  reset():void\n  // Returns true if easing is finished\n  get isDone():boolean\n}\n```\n\n### Time-based\n\nExample: \'sineIn\' easing that takes one second to complete:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Initialise\nconst e = Easings.time(`sineIn`, 1000);\n\n// Returns value at this point in time.\n// Usually 0-1, but some functions overshoot bounds\nconst v = e.compute();\n// ..call e.compute() whenever the \'latest\' value is needed\n\n// Can check if easing has completed\nif (e.isDone) ...\n```\n\nTime starts being counted from when the easing is initialised (ie. calling `Easings.time()`). For this reason, you likely want to initialise just before it\'s needed, or values you will lose part of the range. Calling `reset()` can also be useful for resetting the timer.\n\nYou\'ll probably call `compute()` inside an existing draw/update loop that is running. If you don\'t have a loop already, here is a snippet that returns an easing over time:\n\n```js\nimport { Generators, Flow } from "https://unpkg.com/ixfx/dist/bundle.js";\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Define an easing that takes 1 second to reach end\nconst e = Easings.time(`sineIn`, 1000);\n\n// Increment by 10% from 0 to 1\nconst range = Generators.numericPercent(0.1); \n// Iterate over range at 100ms intervals\nfor await (const v of Flow.interval(range, 100)) {\n  console.log(e.compute());\n}\n```\n\n* [Try it out with fn-vis](https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==)\n\n### Tick-based\nExample: a `sineOut` easing that takes 100 ticks to complete:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Set up\nconst e = Easings.tick(`sineOut`, 100);\n\n// Get the value of the easing function at this point\nconst v = e.compute();\n// ...each call to compute() will \'advance\' the easing\n// function by one tick. So after 100 calls to compute()\n// the function will be done.\n\n// Can check if easing has completed\nif (e.isDone) ...\n```\n\n`compute` typically returns value between 0..1, but some functions purposefully overshoot this range (such as the `back` series of easings, shown [below](#defined-easings)).\n\nOnce you have this value, it can be applied as necessary. For example, positioning an element:\n\n```js\nel.style.transform = `translate(${e.compute() * width}px, 0px)`;\n```\n\nSee the source of the demos below for more ideas, or [try it out on fn-vis](https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=)\n\n## It\'s a function\n\nIt\'s good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.\n\nAn easing-function-from-scratch example is an exponential function:\n\n```js\nconst fn = (x) => Math.pow(x,2);\nfn(0);    // 0\nfn(0.5);  // 0.25\nfn(0.75); // 0.5625\nfn(1);    // 1\n```\n\nYou can see this in action:\n\n<div editable data-easing=true id="demo2" fn="Math.pow(x,2)"></div>\n\nTry the following functions:\n* `x`: Linear, returns the same input value\n* `x/2`: Halves input value\n* `Math.sqrt(x)`: Square root of value\n* `Math.random() * x`: Reduces value by some random amount\n* `x + (0.1 - Math.random()* 0.2)`: Jitters value by up to 10%\n  \nPre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Get the function\nconst fn = Easings.functions.cubicIn;\n\n// Use it to transform an input value (0..1)\n// and set to variable \'v\'\nconst v = fn(0.5);\n```\n\n## Demos\n\nHere, the easing function advances on each call (tapping the circle), rather than by time.\n\n<demo-element title="Discrete easing" src="/modulation/easing-tick/" />\n\nBelow is the common usage of time-based easing\n\n<demo-element title="Timer easing" src="/modulation/easing-timer/" />\n\nIn this demo, a target value is reached over time by using an easing function.\n\n<demo-element title="Easing set" src="/modulation/easing-set/" />\n\n\n<script type="module" hoist>\nimport \'/src/components/FuncPlotElement\';\nimport {Easings} from \'/node_modules/ixfx/dist/modulation.js\';\nconst run = () => {\n  document.querySelectorAll(`[data-easing]`).forEach(el => {\n    const plot = document.createElement(`func-plot-element`);// importEl(el, `func-plot-element`);\n    el.append(plot);\n    const fnAttr = el.getAttribute(`fn`);\n    const easingAttr = el.getAttribute(`easing`);\n    const editableAttr = el.getAttribute(`editable`);\n    plot.editable = editableAttr !== `false` && editableAttr !== null;\n\n    if (fnAttr !== null && fnAttr.length > 0) {\n      plot.setFunctionByString(fnAttr);\n    } else if (easingAttr !== null && easingAttr.length > 0) {\n      const easingFn = Easings.get(easingAttr);\n      if (easingFn === undefined) {\n        console.error(`Could not find easing: ${easingAttr}`);\n      } else {\n        plot.setFunction(easingAttr, easingFn);\n      }\n    } else {\n      console.warn(`Neither fn or easing attributes defined for function plot.`);\n    }\n\n    // Give component time to render before plotting\n    // setTimeout(() => {\n    //   plot.plot(false);\n    // }, 1000);\n  });\n}\nsetTimeout(() => run(), 10);\n<\/script>\n\n## Custom curves\n\n### Simple cubic beziers\n\nYou can make your own easing curve using a simplified _cubic bezier_. See [this curve, for example](https://cubic-bezier.com/#0,1.24,1,-1.15). It\'s defined by points `0, 1.24, 1, -1.15`. The key points we need here are `1.24` (point b), and `-1.15` (point d).\n\nThis can be used as follows:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\nconst e = Easings.time(Easings.fromCubicBezier(1.24, -1.15), 1000);\ne.compute();\n```\n\nUse the [cubic bezier editor](https://cubic-bezier.com/#0,1.24,1,-1.15) to shape a curve, but make sure the first point remains 0 and the third point remains 1.\n\n\n## Defined easings\n\nThere are several well known easing functions which are pre-defined in ixfx.\n\n<!-- Astro bug. Either we get two lit elements, or an exception -->\n<!-- <easing-gallery-element client:only="lit" /> -->\n\n<div id="easingGallery"></div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/modulation/EasingGalleryElement\';\nimportEl(\n  `easingGallery`, \n  `easing-gallery-element`, {});\n<\/script>\n\n## Credits\n\nMost easing functions by [Andrey Sitnik and Ivan Solovev](https://easings.net/) ', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>\n</ul>\n</div>\n<p>Easing functions help to give a <em>dynamic</em> to transition. In <a href="../../types/geometry/units/#cartesian">Cartesian</a> terms, they give a <em>y</em> value for <em>x</em> (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time <em>t</em> (where <em>t</em> is 0 .. 1).</p>\n<p>Normally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that\'s all you need, ixfx\'s <a href="../../gen/generator/#count">count</a> and <a href="../../gen/generator/#numeric-range">numericRange</a> functions might do the job.</p>\n<p>For example, count by 0.1 from 0 to 1:</p>\n<div data-easing=true id="demo0" title="Linear function" fn="x"></div>\n<p>This is a <em>linear</em> function, with the same \'speed\' throughout the progression towards the end point.</p>\n<p>In contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this <code is:raw>cubicIn</code> function:</p>\n<div data-easing=true id="demo1" title="cubicIn" easing="cubicIn"></div>\n<p>Or perhaps gathering speed quickly, but then slowing down toward the end (<code is:raw>cubicOut</code>):</p>\n<div data-easing=true id="demo1" title="cubicOut" easing="cubicOut"></div>\n<p>Jump to the <a href="#defined-easings">Defined Easings</a> to see a list of pre-defined easing functions.</p>\n<h2 id="usage">Usage</h2>\n<p>Easings can be driven by time or <em>ticks</em>, created by <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html"><code is:raw>Easings.time</code></a> or <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html"><code is:raw>Easings.tick</code></a>, respectively.</p>\n<p>Each of these returns an <a href="https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html"><code is:raw>Easings.Easing</code></a>, which has this type:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Easing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Returns value at this point</span>\n  <span class="token comment">// Usually 0-1, but some functions can overshoot</span>\n  <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>\n  <span class="token comment">// Reset easing to beginning</span>\n  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>\n  <span class="token comment">// Returns true if easing is finished</span>\n  <span class="token keyword">get</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="time-based">Time-based</h3>\n<p>Example: \'sineIn\' easing that takes one second to complete:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns value at this point in time.</span>\n<span class="token comment">// Usually 0-1, but some functions overshoot bounds</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ..call e.compute() whenever the \'latest\' value is needed</span>\n\n<span class="token comment">// Can check if easing has completed</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p>Time starts being counted from when the easing is initialised (ie. calling <code is:raw>Easings.time()</code>). For this reason, you likely want to initialise just before it\'s needed, or values you will lose part of the range. Calling <code is:raw>reset()</code> can also be useful for resetting the timer.</p>\n<p>You\'ll probably call <code is:raw>compute()</code> inside an existing draw/update loop that is running. If you don\'t have a loop already, here is a snippet that returns an easing over time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Generators<span class="token punctuation">,</span> Flow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/bundle.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Define an easing that takes 1 second to reach end</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Increment by 10% from 0 to 1</span>\n<span class="token keyword">const</span> range <span class="token operator">=</span> Generators<span class="token punctuation">.</span><span class="token function">numericPercent</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Iterate over range at 100ms intervals</span>\n<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> Flow<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<ul>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==">Try it out with fn-vis</a></li>\n</ul>\n<h3 id="tick-based">Tick-based</h3>\n<p>Example: a <code is:raw>sineOut</code> easing that takes 100 ticks to complete:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Set up</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineOut</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the value of the easing function at this point</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...each call to compute() will \'advance\' the easing</span>\n<span class="token comment">// function by one tick. So after 100 calls to compute()</span>\n<span class="token comment">// the function will be done.</span>\n\n<span class="token comment">// Can check if easing has completed</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p><code is:raw>compute</code> typically returns value between 0..1, but some functions purposefully overshoot this range (such as the <code is:raw>back</code> series of easings, shown <a href="#defined-easings">below</a>).</p>\n<p>Once you have this value, it can be applied as necessary. For example, positioning an element:</p>\n<pre class="language-js"><code is:raw class="language-js">el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>\n<p>See the source of the demos below for more ideas, or <a href="https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=">try it out on fn-vis</a></p>\n<h2 id="its-a-function">It\'s a function</h2>\n<p>It\'s good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.</p>\n<p>An easing-function-from-scratch example is an exponential function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.25</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.5625</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span></code></pre>\n<p>You can see this in action:</p>\n<div editable data-easing=true id="demo2" fn="Math.pow(x,2)"></div>\n<p>Try the following functions:</p>\n<ul>\n<li><code is:raw>x</code>: Linear, returns the same input value</li>\n<li><code is:raw>x/2</code>: Halves input value</li>\n<li><code is:raw>Math.sqrt(x)</code>: Square root of value</li>\n<li><code is:raw>Math.random() * x</code>: Reduces value by some random amount</li>\n<li><code is:raw>x + (0.1 - Math.random()* 0.2)</code>: Jitters value by up to 10%</li>\n</ul>\n<p>Pre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the function</span>\n<span class="token keyword">const</span> fn <span class="token operator">=</span> Easings<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>cubicIn<span class="token punctuation">;</span>\n\n<span class="token comment">// Use it to transform an input value (0..1)</span>\n<span class="token comment">// and set to variable \'v\'</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="demos">Demos</h2>\n<p>Here, the easing function advances on each call (tapping the circle), rather than by time.</p>\n<demo-element title="Discrete easing" src="/modulation/easing-tick/" />\n<p>Below is the common usage of time-based easing</p>\n<demo-element title="Timer easing" src="/modulation/easing-timer/" />\n<p>In this demo, a target value is reached over time by using an easing function.</p>\n<demo-element title="Easing set" src="/modulation/easing-set/" />\n<script type="module" hoist>\nimport \'/src/components/FuncPlotElement\';\nimport {Easings} from \'/node_modules/ixfx/dist/modulation.js\';\nconst run = () => {\n  document.querySelectorAll(`[data-easing]`).forEach(el => {\n    const plot = document.createElement(`func-plot-element`);// importEl(el, `func-plot-element`);\n    el.append(plot);\n    const fnAttr = el.getAttribute(`fn`);\n    const easingAttr = el.getAttribute(`easing`);\n    const editableAttr = el.getAttribute(`editable`);\n    plot.editable = editableAttr !== `false` && editableAttr !== null;\n\n    if (fnAttr !== null && fnAttr.length > 0) {\n      plot.setFunctionByString(fnAttr);\n    } else if (easingAttr !== null && easingAttr.length > 0) {\n      const easingFn = Easings.get(easingAttr);\n      if (easingFn === undefined) {\n        console.error(`Could not find easing: ${easingAttr}`);\n      } else {\n        plot.setFunction(easingAttr, easingFn);\n      }\n    } else {\n      console.warn(`Neither fn or easing attributes defined for function plot.`);\n    }\n\n    // Give component time to render before plotting\n    // setTimeout(() => {\n    //   plot.plot(false);\n    // }, 1000);\n  });\n}\nsetTimeout(() => run(), 10);\n<\/script>\n<h2 id="custom-curves">Custom curves</h2>\n<h3 id="simple-cubic-beziers">Simple cubic beziers</h3>\n<p>You can make your own easing curve using a simplified <em>cubic bezier</em>. See <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">this curve, for example</a>. It\'s defined by points <code is:raw>0, 1.24, 1, -1.15</code>. The key points we need here are <code is:raw>1.24</code> (point b), and <code is:raw>-1.15</code> (point d).</p>\n<p>This can be used as follows:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>Easings<span class="token punctuation">.</span><span class="token function">fromCubicBezier</span><span class="token punctuation">(</span><span class="token number">1.24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ne<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Use the <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">cubic bezier editor</a> to shape a curve, but make sure the first point remains 0 and the third point remains 1.</p>\n<h2 id="defined-easings">Defined easings</h2>\n<p>There are several well known easing functions which are pre-defined in ixfx.</p>\n<!-- Astro bug. Either we get two lit elements, or an exception -->\n<!-- <easing-gallery-element client:only="lit" /> -->\n<div id="easingGallery"></div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/modulation/EasingGalleryElement\';\nimportEl(\n  `easingGallery`, \n  `easing-gallery-element`, {});\n<\/script>\n<h2 id="credits">Credits</h2>\n<p>Most easing functions by <a href="https://easings.net/">Andrey Sitnik and Ivan Solovev</a></p>' };
const frontmatter = { "title": "Easing", "astro": { "headers": [{ "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "time-based", "text": "Time-based" }, { "depth": 3, "slug": "tick-based", "text": "Tick-based" }, { "depth": 2, "slug": "its-a-function", "text": "It's a function" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "custom-curves", "text": "Custom curves" }, { "depth": 3, "slug": "simple-cubic-beziers", "text": "Simple cubic beziers" }, { "depth": 2, "slug": "defined-easings", "text": "Defined easings" }, { "depth": 2, "slug": "credits", "text": "Credits" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>\n</ul>\n</div>\n\n\nEasing functions help to give a *dynamic* to transition. In [Cartesian](../../types/geometry/units/#cartesian) terms, they give a _y_ value for _x_ (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time _t_ (where _t_ is 0 .. 1).\n\nNormally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that\'s all you need, ixfx\'s [count](../../gen/generator/#count) and [numericRange](../../gen/generator/#numeric-range) functions might do the job.\n\nFor example, count by 0.1 from 0 to 1:\n\n<div data-easing=true id="demo0" title="Linear function" fn="x"></div>\n\nThis is a _linear_ function, with the same \'speed\' throughout the progression towards the end point.\n\nIn contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this `cubicIn` function:\n\n<div data-easing=true id="demo1" title="cubicIn" easing="cubicIn"></div>\n\nOr perhaps gathering speed quickly, but then slowing down toward the end (`cubicOut`):\n\n<div data-easing=true id="demo1" title="cubicOut" easing="cubicOut"></div>\n\nJump to the [Defined Easings](#defined-easings) to see a list of pre-defined easing functions.\n\n## Usage\n\nEasings can be driven by time or _ticks_, created by [`Easings.time`](https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html) or [`Easings.tick`](https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html), respectively. \n\nEach of these returns an [`Easings.Easing`](https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html), which has this type:\n\n```typescript\ntype Easing = {\n  // Returns value at this point\n  // Usually 0-1, but some functions can overshoot\n  compute():number\n  // Reset easing to beginning\n  reset():void\n  // Returns true if easing is finished\n  get isDone():boolean\n}\n```\n\n### Time-based\n\nExample: \'sineIn\' easing that takes one second to complete:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Initialise\nconst e = Easings.time(`sineIn`, 1000);\n\n// Returns value at this point in time.\n// Usually 0-1, but some functions overshoot bounds\nconst v = e.compute();\n// ..call e.compute() whenever the \'latest\' value is needed\n\n// Can check if easing has completed\nif (e.isDone) ...\n```\n\nTime starts being counted from when the easing is initialised (ie. calling `Easings.time()`). For this reason, you likely want to initialise just before it\'s needed, or values you will lose part of the range. Calling `reset()` can also be useful for resetting the timer.\n\nYou\'ll probably call `compute()` inside an existing draw/update loop that is running. If you don\'t have a loop already, here is a snippet that returns an easing over time:\n\n```js\nimport { Generators, Flow } from "https://unpkg.com/ixfx/dist/bundle.js";\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Define an easing that takes 1 second to reach end\nconst e = Easings.time(`sineIn`, 1000);\n\n// Increment by 10% from 0 to 1\nconst range = Generators.numericPercent(0.1); \n// Iterate over range at 100ms intervals\nfor await (const v of Flow.interval(range, 100)) {\n  console.log(e.compute());\n}\n```\n\n* [Try it out with fn-vis](https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==)\n\n### Tick-based\nExample: a `sineOut` easing that takes 100 ticks to complete:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Set up\nconst e = Easings.tick(`sineOut`, 100);\n\n// Get the value of the easing function at this point\nconst v = e.compute();\n// ...each call to compute() will \'advance\' the easing\n// function by one tick. So after 100 calls to compute()\n// the function will be done.\n\n// Can check if easing has completed\nif (e.isDone) ...\n```\n\n`compute` typically returns value between 0..1, but some functions purposefully overshoot this range (such as the `back` series of easings, shown [below](#defined-easings)).\n\nOnce you have this value, it can be applied as necessary. For example, positioning an element:\n\n```js\nel.style.transform = `translate(${e.compute() * width}px, 0px)`;\n```\n\nSee the source of the demos below for more ideas, or [try it out on fn-vis](https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=)\n\n## It\'s a function\n\nIt\'s good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.\n\nAn easing-function-from-scratch example is an exponential function:\n\n```js\nconst fn = (x) => Math.pow(x,2);\nfn(0);    // 0\nfn(0.5);  // 0.25\nfn(0.75); // 0.5625\nfn(1);    // 1\n```\n\nYou can see this in action:\n\n<div editable data-easing=true id="demo2" fn="Math.pow(x,2)"></div>\n\nTry the following functions:\n* `x`: Linear, returns the same input value\n* `x/2`: Halves input value\n* `Math.sqrt(x)`: Square root of value\n* `Math.random() * x`: Reduces value by some random amount\n* `x + (0.1 - Math.random()* 0.2)`: Jitters value by up to 10%\n  \nPre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Get the function\nconst fn = Easings.functions.cubicIn;\n\n// Use it to transform an input value (0..1)\n// and set to variable \'v\'\nconst v = fn(0.5);\n```\n\n## Demos\n\nHere, the easing function advances on each call (tapping the circle), rather than by time.\n\n<demo-element title="Discrete easing" src="/modulation/easing-tick/" />\n\nBelow is the common usage of time-based easing\n\n<demo-element title="Timer easing" src="/modulation/easing-timer/" />\n\nIn this demo, a target value is reached over time by using an easing function.\n\n<demo-element title="Easing set" src="/modulation/easing-set/" />\n\n\n<script type="module" hoist>\nimport \'/src/components/FuncPlotElement\';\nimport {Easings} from \'/node_modules/ixfx/dist/modulation.js\';\nconst run = () => {\n  document.querySelectorAll(`[data-easing]`).forEach(el => {\n    const plot = document.createElement(`func-plot-element`);// importEl(el, `func-plot-element`);\n    el.append(plot);\n    const fnAttr = el.getAttribute(`fn`);\n    const easingAttr = el.getAttribute(`easing`);\n    const editableAttr = el.getAttribute(`editable`);\n    plot.editable = editableAttr !== `false` && editableAttr !== null;\n\n    if (fnAttr !== null && fnAttr.length > 0) {\n      plot.setFunctionByString(fnAttr);\n    } else if (easingAttr !== null && easingAttr.length > 0) {\n      const easingFn = Easings.get(easingAttr);\n      if (easingFn === undefined) {\n        console.error(`Could not find easing: ${easingAttr}`);\n      } else {\n        plot.setFunction(easingAttr, easingFn);\n      }\n    } else {\n      console.warn(`Neither fn or easing attributes defined for function plot.`);\n    }\n\n    // Give component time to render before plotting\n    // setTimeout(() => {\n    //   plot.plot(false);\n    // }, 1000);\n  });\n}\nsetTimeout(() => run(), 10);\n<\/script>\n\n## Custom curves\n\n### Simple cubic beziers\n\nYou can make your own easing curve using a simplified _cubic bezier_. See [this curve, for example](https://cubic-bezier.com/#0,1.24,1,-1.15). It\'s defined by points `0, 1.24, 1, -1.15`. The key points we need here are `1.24` (point b), and `-1.15` (point d).\n\nThis can be used as follows:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\nconst e = Easings.time(Easings.fromCubicBezier(1.24, -1.15), 1000);\ne.compute();\n```\n\nUse the [cubic bezier editor](https://cubic-bezier.com/#0,1.24,1,-1.15) to shape a curve, but make sure the first point remains 0 and the third point remains 1.\n\n\n## Defined easings\n\nThere are several well known easing functions which are pre-defined in ixfx.\n\n<!-- Astro bug. Either we get two lit elements, or an exception -->\n<!-- <easing-gallery-element client:only="lit" /> -->\n\n<div id="easingGallery"></div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/modulation/EasingGalleryElement\';\nimportEl(\n  `easingGallery`, \n  `easing-gallery-element`, {});\n<\/script>\n\n## Credits\n\nMost easing functions by [Andrey Sitnik and Ivan Solovev](https://easings.net/) ', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>\n</ul>\n</div>\n<p>Easing functions help to give a <em>dynamic</em> to transition. In <a href="../../types/geometry/units/#cartesian">Cartesian</a> terms, they give a <em>y</em> value for <em>x</em> (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time <em>t</em> (where <em>t</em> is 0 .. 1).</p>\n<p>Normally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that\'s all you need, ixfx\'s <a href="../../gen/generator/#count">count</a> and <a href="../../gen/generator/#numeric-range">numericRange</a> functions might do the job.</p>\n<p>For example, count by 0.1 from 0 to 1:</p>\n<div data-easing=true id="demo0" title="Linear function" fn="x"></div>\n<p>This is a <em>linear</em> function, with the same \'speed\' throughout the progression towards the end point.</p>\n<p>In contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this <code is:raw>cubicIn</code> function:</p>\n<div data-easing=true id="demo1" title="cubicIn" easing="cubicIn"></div>\n<p>Or perhaps gathering speed quickly, but then slowing down toward the end (<code is:raw>cubicOut</code>):</p>\n<div data-easing=true id="demo1" title="cubicOut" easing="cubicOut"></div>\n<p>Jump to the <a href="#defined-easings">Defined Easings</a> to see a list of pre-defined easing functions.</p>\n<h2 id="usage">Usage</h2>\n<p>Easings can be driven by time or <em>ticks</em>, created by <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html"><code is:raw>Easings.time</code></a> or <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html"><code is:raw>Easings.tick</code></a>, respectively.</p>\n<p>Each of these returns an <a href="https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html"><code is:raw>Easings.Easing</code></a>, which has this type:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Easing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Returns value at this point</span>\n  <span class="token comment">// Usually 0-1, but some functions can overshoot</span>\n  <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>\n  <span class="token comment">// Reset easing to beginning</span>\n  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>\n  <span class="token comment">// Returns true if easing is finished</span>\n  <span class="token keyword">get</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="time-based">Time-based</h3>\n<p>Example: \'sineIn\' easing that takes one second to complete:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns value at this point in time.</span>\n<span class="token comment">// Usually 0-1, but some functions overshoot bounds</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ..call e.compute() whenever the \'latest\' value is needed</span>\n\n<span class="token comment">// Can check if easing has completed</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p>Time starts being counted from when the easing is initialised (ie. calling <code is:raw>Easings.time()</code>). For this reason, you likely want to initialise just before it\'s needed, or values you will lose part of the range. Calling <code is:raw>reset()</code> can also be useful for resetting the timer.</p>\n<p>You\'ll probably call <code is:raw>compute()</code> inside an existing draw/update loop that is running. If you don\'t have a loop already, here is a snippet that returns an easing over time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Generators<span class="token punctuation">,</span> Flow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/bundle.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Define an easing that takes 1 second to reach end</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Increment by 10% from 0 to 1</span>\n<span class="token keyword">const</span> range <span class="token operator">=</span> Generators<span class="token punctuation">.</span><span class="token function">numericPercent</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Iterate over range at 100ms intervals</span>\n<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> Flow<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<ul>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==">Try it out with fn-vis</a></li>\n</ul>\n<h3 id="tick-based">Tick-based</h3>\n<p>Example: a <code is:raw>sineOut</code> easing that takes 100 ticks to complete:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Set up</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineOut</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the value of the easing function at this point</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...each call to compute() will \'advance\' the easing</span>\n<span class="token comment">// function by one tick. So after 100 calls to compute()</span>\n<span class="token comment">// the function will be done.</span>\n\n<span class="token comment">// Can check if easing has completed</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p><code is:raw>compute</code> typically returns value between 0..1, but some functions purposefully overshoot this range (such as the <code is:raw>back</code> series of easings, shown <a href="#defined-easings">below</a>).</p>\n<p>Once you have this value, it can be applied as necessary. For example, positioning an element:</p>\n<pre class="language-js"><code is:raw class="language-js">el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>\n<p>See the source of the demos below for more ideas, or <a href="https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=">try it out on fn-vis</a></p>\n<h2 id="its-a-function">It\'s a function</h2>\n<p>It\'s good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.</p>\n<p>An easing-function-from-scratch example is an exponential function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.25</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.5625</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span></code></pre>\n<p>You can see this in action:</p>\n<div editable data-easing=true id="demo2" fn="Math.pow(x,2)"></div>\n<p>Try the following functions:</p>\n<ul>\n<li><code is:raw>x</code>: Linear, returns the same input value</li>\n<li><code is:raw>x/2</code>: Halves input value</li>\n<li><code is:raw>Math.sqrt(x)</code>: Square root of value</li>\n<li><code is:raw>Math.random() * x</code>: Reduces value by some random amount</li>\n<li><code is:raw>x + (0.1 - Math.random()* 0.2)</code>: Jitters value by up to 10%</li>\n</ul>\n<p>Pre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the function</span>\n<span class="token keyword">const</span> fn <span class="token operator">=</span> Easings<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>cubicIn<span class="token punctuation">;</span>\n\n<span class="token comment">// Use it to transform an input value (0..1)</span>\n<span class="token comment">// and set to variable \'v\'</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="demos">Demos</h2>\n<p>Here, the easing function advances on each call (tapping the circle), rather than by time.</p>\n<demo-element title="Discrete easing" src="/modulation/easing-tick/" />\n<p>Below is the common usage of time-based easing</p>\n<demo-element title="Timer easing" src="/modulation/easing-timer/" />\n<p>In this demo, a target value is reached over time by using an easing function.</p>\n<demo-element title="Easing set" src="/modulation/easing-set/" />\n<script type="module" hoist>\nimport \'/src/components/FuncPlotElement\';\nimport {Easings} from \'/node_modules/ixfx/dist/modulation.js\';\nconst run = () => {\n  document.querySelectorAll(`[data-easing]`).forEach(el => {\n    const plot = document.createElement(`func-plot-element`);// importEl(el, `func-plot-element`);\n    el.append(plot);\n    const fnAttr = el.getAttribute(`fn`);\n    const easingAttr = el.getAttribute(`easing`);\n    const editableAttr = el.getAttribute(`editable`);\n    plot.editable = editableAttr !== `false` && editableAttr !== null;\n\n    if (fnAttr !== null && fnAttr.length > 0) {\n      plot.setFunctionByString(fnAttr);\n    } else if (easingAttr !== null && easingAttr.length > 0) {\n      const easingFn = Easings.get(easingAttr);\n      if (easingFn === undefined) {\n        console.error(`Could not find easing: ${easingAttr}`);\n      } else {\n        plot.setFunction(easingAttr, easingFn);\n      }\n    } else {\n      console.warn(`Neither fn or easing attributes defined for function plot.`);\n    }\n\n    // Give component time to render before plotting\n    // setTimeout(() => {\n    //   plot.plot(false);\n    // }, 1000);\n  });\n}\nsetTimeout(() => run(), 10);\n<\/script>\n<h2 id="custom-curves">Custom curves</h2>\n<h3 id="simple-cubic-beziers">Simple cubic beziers</h3>\n<p>You can make your own easing curve using a simplified <em>cubic bezier</em>. See <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">this curve, for example</a>. It\'s defined by points <code is:raw>0, 1.24, 1, -1.15</code>. The key points we need here are <code is:raw>1.24</code> (point b), and <code is:raw>-1.15</code> (point d).</p>\n<p>This can be used as follows:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>Easings<span class="token punctuation">.</span><span class="token function">fromCubicBezier</span><span class="token punctuation">(</span><span class="token number">1.24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ne<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Use the <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">cubic bezier editor</a> to shape a curve, but make sure the first point remains 0 and the third point remains 1.</p>\n<h2 id="defined-easings">Defined easings</h2>\n<p>There are several well known easing functions which are pre-defined in ixfx.</p>\n<!-- Astro bug. Either we get two lit elements, or an exception -->\n<!-- <easing-gallery-element client:only="lit" /> -->\n<div id="easingGallery"></div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/modulation/EasingGalleryElement\';\nimportEl(\n  `easingGallery`, \n  `easing-gallery-element`, {});\n<\/script>\n<h2 id="credits">Credits</h2>\n<p>Most easing functions by <a href="https://easings.net/">Andrey Sitnik and Ivan Solovev</a></p>' } };
const $$metadata = createMetadata("/src/pages/modulation/easing.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "/src/components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "/src/components/FuncPlotElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/loader';
import '/src/components/modulation/EasingGalleryElement';
importEl(
  \`easingGallery\`, 
  \`easing-gallery-element\`, {});
` }, { type: "inline", value: `
import '/src/components/FuncPlotElement';
import {Easings} from '/node_modules/ixfx/dist/modulation.js';
const run = () => {
  document.querySelectorAll(\`[data-easing]\`).forEach(el => {
    const plot = document.createElement(\`func-plot-element\`);// importEl(el, \`func-plot-element\`);
    el.append(plot);
    const fnAttr = el.getAttribute(\`fn\`);
    const easingAttr = el.getAttribute(\`easing\`);
    const editableAttr = el.getAttribute(\`editable\`);
    plot.editable = editableAttr !== \`false\` && editableAttr !== null;

    if (fnAttr !== null && fnAttr.length > 0) {
      plot.setFunctionByString(fnAttr);
    } else if (easingAttr !== null && easingAttr.length > 0) {
      const easingFn = Easings.get(easingAttr);
      if (easingFn === undefined) {
        console.error(\`Could not find easing: \${easingAttr}\`);
      } else {
        plot.setFunction(easingAttr, easingFn);
      }
    } else {
      console.warn(\`Neither fn or easing attributes defined for function plot.\`);
    }

    // Give component time to render before plotting
    // setTimeout(() => {
    //   plot.plot(false);
    // }, 1000);
  });
}
setTimeout(() => run(), 10);
` }] });
const $$Astro = createAstro("/src/pages/modulation/easing.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Easing = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Easing;
  const $$content = { "title": "Easing", "astro": { "headers": [{ "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "time-based", "text": "Time-based" }, { "depth": 3, "slug": "tick-based", "text": "Tick-based" }, { "depth": 2, "slug": "its-a-function", "text": "It's a function" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "custom-curves", "text": "Custom curves" }, { "depth": 3, "slug": "simple-cubic-beziers", "text": "Simple cubic beziers" }, { "depth": 2, "slug": "defined-easings", "text": "Defined easings" }, { "depth": 2, "slug": "credits", "text": "Credits" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>\n</ul>\n</div>\n\n\nEasing functions help to give a *dynamic* to transition. In [Cartesian](../../types/geometry/units/#cartesian) terms, they give a _y_ value for _x_ (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time _t_ (where _t_ is 0 .. 1).\n\nNormally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that\'s all you need, ixfx\'s [count](../../gen/generator/#count) and [numericRange](../../gen/generator/#numeric-range) functions might do the job.\n\nFor example, count by 0.1 from 0 to 1:\n\n<div data-easing=true id="demo0" title="Linear function" fn="x"></div>\n\nThis is a _linear_ function, with the same \'speed\' throughout the progression towards the end point.\n\nIn contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this `cubicIn` function:\n\n<div data-easing=true id="demo1" title="cubicIn" easing="cubicIn"></div>\n\nOr perhaps gathering speed quickly, but then slowing down toward the end (`cubicOut`):\n\n<div data-easing=true id="demo1" title="cubicOut" easing="cubicOut"></div>\n\nJump to the [Defined Easings](#defined-easings) to see a list of pre-defined easing functions.\n\n## Usage\n\nEasings can be driven by time or _ticks_, created by [`Easings.time`](https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html) or [`Easings.tick`](https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html), respectively. \n\nEach of these returns an [`Easings.Easing`](https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html), which has this type:\n\n```typescript\ntype Easing = {\n  // Returns value at this point\n  // Usually 0-1, but some functions can overshoot\n  compute():number\n  // Reset easing to beginning\n  reset():void\n  // Returns true if easing is finished\n  get isDone():boolean\n}\n```\n\n### Time-based\n\nExample: \'sineIn\' easing that takes one second to complete:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Initialise\nconst e = Easings.time(`sineIn`, 1000);\n\n// Returns value at this point in time.\n// Usually 0-1, but some functions overshoot bounds\nconst v = e.compute();\n// ..call e.compute() whenever the \'latest\' value is needed\n\n// Can check if easing has completed\nif (e.isDone) ...\n```\n\nTime starts being counted from when the easing is initialised (ie. calling `Easings.time()`). For this reason, you likely want to initialise just before it\'s needed, or values you will lose part of the range. Calling `reset()` can also be useful for resetting the timer.\n\nYou\'ll probably call `compute()` inside an existing draw/update loop that is running. If you don\'t have a loop already, here is a snippet that returns an easing over time:\n\n```js\nimport { Generators, Flow } from "https://unpkg.com/ixfx/dist/bundle.js";\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Define an easing that takes 1 second to reach end\nconst e = Easings.time(`sineIn`, 1000);\n\n// Increment by 10% from 0 to 1\nconst range = Generators.numericPercent(0.1); \n// Iterate over range at 100ms intervals\nfor await (const v of Flow.interval(range, 100)) {\n  console.log(e.compute());\n}\n```\n\n* [Try it out with fn-vis](https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==)\n\n### Tick-based\nExample: a `sineOut` easing that takes 100 ticks to complete:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Set up\nconst e = Easings.tick(`sineOut`, 100);\n\n// Get the value of the easing function at this point\nconst v = e.compute();\n// ...each call to compute() will \'advance\' the easing\n// function by one tick. So after 100 calls to compute()\n// the function will be done.\n\n// Can check if easing has completed\nif (e.isDone) ...\n```\n\n`compute` typically returns value between 0..1, but some functions purposefully overshoot this range (such as the `back` series of easings, shown [below](#defined-easings)).\n\nOnce you have this value, it can be applied as necessary. For example, positioning an element:\n\n```js\nel.style.transform = `translate(${e.compute() * width}px, 0px)`;\n```\n\nSee the source of the demos below for more ideas, or [try it out on fn-vis](https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=)\n\n## It\'s a function\n\nIt\'s good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.\n\nAn easing-function-from-scratch example is an exponential function:\n\n```js\nconst fn = (x) => Math.pow(x,2);\nfn(0);    // 0\nfn(0.5);  // 0.25\nfn(0.75); // 0.5625\nfn(1);    // 1\n```\n\nYou can see this in action:\n\n<div editable data-easing=true id="demo2" fn="Math.pow(x,2)"></div>\n\nTry the following functions:\n* `x`: Linear, returns the same input value\n* `x/2`: Halves input value\n* `Math.sqrt(x)`: Square root of value\n* `Math.random() * x`: Reduces value by some random amount\n* `x + (0.1 - Math.random()* 0.2)`: Jitters value by up to 10%\n  \nPre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\n\n// Get the function\nconst fn = Easings.functions.cubicIn;\n\n// Use it to transform an input value (0..1)\n// and set to variable \'v\'\nconst v = fn(0.5);\n```\n\n## Demos\n\nHere, the easing function advances on each call (tapping the circle), rather than by time.\n\n<demo-element title="Discrete easing" src="/modulation/easing-tick/" />\n\nBelow is the common usage of time-based easing\n\n<demo-element title="Timer easing" src="/modulation/easing-timer/" />\n\nIn this demo, a target value is reached over time by using an easing function.\n\n<demo-element title="Easing set" src="/modulation/easing-set/" />\n\n\n<script type="module" hoist>\nimport \'/src/components/FuncPlotElement\';\nimport {Easings} from \'/node_modules/ixfx/dist/modulation.js\';\nconst run = () => {\n  document.querySelectorAll(`[data-easing]`).forEach(el => {\n    const plot = document.createElement(`func-plot-element`);// importEl(el, `func-plot-element`);\n    el.append(plot);\n    const fnAttr = el.getAttribute(`fn`);\n    const easingAttr = el.getAttribute(`easing`);\n    const editableAttr = el.getAttribute(`editable`);\n    plot.editable = editableAttr !== `false` && editableAttr !== null;\n\n    if (fnAttr !== null && fnAttr.length > 0) {\n      plot.setFunctionByString(fnAttr);\n    } else if (easingAttr !== null && easingAttr.length > 0) {\n      const easingFn = Easings.get(easingAttr);\n      if (easingFn === undefined) {\n        console.error(`Could not find easing: ${easingAttr}`);\n      } else {\n        plot.setFunction(easingAttr, easingFn);\n      }\n    } else {\n      console.warn(`Neither fn or easing attributes defined for function plot.`);\n    }\n\n    // Give component time to render before plotting\n    // setTimeout(() => {\n    //   plot.plot(false);\n    // }, 1000);\n  });\n}\nsetTimeout(() => run(), 10);\n<\/script>\n\n## Custom curves\n\n### Simple cubic beziers\n\nYou can make your own easing curve using a simplified _cubic bezier_. See [this curve, for example](https://cubic-bezier.com/#0,1.24,1,-1.15). It\'s defined by points `0, 1.24, 1, -1.15`. The key points we need here are `1.24` (point b), and `-1.15` (point d).\n\nThis can be used as follows:\n\n```js\nimport { Easings } from "https://unpkg.com/ixfx/dist/modulation.js";\nconst e = Easings.time(Easings.fromCubicBezier(1.24, -1.15), 1000);\ne.compute();\n```\n\nUse the [cubic bezier editor](https://cubic-bezier.com/#0,1.24,1,-1.15) to shape a curve, but make sure the first point remains 0 and the third point remains 1.\n\n\n## Defined easings\n\nThere are several well known easing functions which are pre-defined in ixfx.\n\n<!-- Astro bug. Either we get two lit elements, or an exception -->\n<!-- <easing-gallery-element client:only="lit" /> -->\n\n<div id="easingGallery"></div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/modulation/EasingGalleryElement\';\nimportEl(\n  `easingGallery`, \n  `easing-gallery-element`, {});\n<\/script>\n\n## Credits\n\nMost easing functions by [Andrey Sitnik and Ivan Solovev](https://easings.net/) ', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>\n</ul>\n</div>\n<p>Easing functions help to give a <em>dynamic</em> to transition. In <a href="../../types/geometry/units/#cartesian">Cartesian</a> terms, they give a <em>y</em> value for <em>x</em> (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time <em>t</em> (where <em>t</em> is 0 .. 1).</p>\n<p>Normally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that\'s all you need, ixfx\'s <a href="../../gen/generator/#count">count</a> and <a href="../../gen/generator/#numeric-range">numericRange</a> functions might do the job.</p>\n<p>For example, count by 0.1 from 0 to 1:</p>\n<div data-easing=true id="demo0" title="Linear function" fn="x"></div>\n<p>This is a <em>linear</em> function, with the same \'speed\' throughout the progression towards the end point.</p>\n<p>In contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this <code is:raw>cubicIn</code> function:</p>\n<div data-easing=true id="demo1" title="cubicIn" easing="cubicIn"></div>\n<p>Or perhaps gathering speed quickly, but then slowing down toward the end (<code is:raw>cubicOut</code>):</p>\n<div data-easing=true id="demo1" title="cubicOut" easing="cubicOut"></div>\n<p>Jump to the <a href="#defined-easings">Defined Easings</a> to see a list of pre-defined easing functions.</p>\n<h2 id="usage">Usage</h2>\n<p>Easings can be driven by time or <em>ticks</em>, created by <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html"><code is:raw>Easings.time</code></a> or <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html"><code is:raw>Easings.tick</code></a>, respectively.</p>\n<p>Each of these returns an <a href="https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html"><code is:raw>Easings.Easing</code></a>, which has this type:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Easing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Returns value at this point</span>\n  <span class="token comment">// Usually 0-1, but some functions can overshoot</span>\n  <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>\n  <span class="token comment">// Reset easing to beginning</span>\n  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>\n  <span class="token comment">// Returns true if easing is finished</span>\n  <span class="token keyword">get</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="time-based">Time-based</h3>\n<p>Example: \'sineIn\' easing that takes one second to complete:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns value at this point in time.</span>\n<span class="token comment">// Usually 0-1, but some functions overshoot bounds</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ..call e.compute() whenever the \'latest\' value is needed</span>\n\n<span class="token comment">// Can check if easing has completed</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p>Time starts being counted from when the easing is initialised (ie. calling <code is:raw>Easings.time()</code>). For this reason, you likely want to initialise just before it\'s needed, or values you will lose part of the range. Calling <code is:raw>reset()</code> can also be useful for resetting the timer.</p>\n<p>You\'ll probably call <code is:raw>compute()</code> inside an existing draw/update loop that is running. If you don\'t have a loop already, here is a snippet that returns an easing over time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Generators<span class="token punctuation">,</span> Flow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/bundle.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Define an easing that takes 1 second to reach end</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineIn</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Increment by 10% from 0 to 1</span>\n<span class="token keyword">const</span> range <span class="token operator">=</span> Generators<span class="token punctuation">.</span><span class="token function">numericPercent</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// Iterate over range at 100ms intervals</span>\n<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> Flow<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<ul>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==">Try it out with fn-vis</a></li>\n</ul>\n<h3 id="tick-based">Tick-based</h3>\n<p>Example: a <code is:raw>sineOut</code> easing that takes 100 ticks to complete:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Set up</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sineOut</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the value of the easing function at this point</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...each call to compute() will \'advance\' the easing</span>\n<span class="token comment">// function by one tick. So after 100 calls to compute()</span>\n<span class="token comment">// the function will be done.</span>\n\n<span class="token comment">// Can check if easing has completed</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p><code is:raw>compute</code> typically returns value between 0..1, but some functions purposefully overshoot this range (such as the <code is:raw>back</code> series of easings, shown <a href="#defined-easings">below</a>).</p>\n<p>Once you have this value, it can be applied as necessary. For example, positioning an element:</p>\n<pre class="language-js"><code is:raw class="language-js">el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0px)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre>\n<p>See the source of the demos below for more ideas, or <a href="https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=">try it out on fn-vis</a></p>\n<h2 id="its-a-function">It\'s a function</h2>\n<p>It\'s good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.</p>\n<p>An easing-function-from-scratch example is an exponential function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.25</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.5625</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span></code></pre>\n<p>You can see this in action:</p>\n<div editable data-easing=true id="demo2" fn="Math.pow(x,2)"></div>\n<p>Try the following functions:</p>\n<ul>\n<li><code is:raw>x</code>: Linear, returns the same input value</li>\n<li><code is:raw>x/2</code>: Halves input value</li>\n<li><code is:raw>Math.sqrt(x)</code>: Square root of value</li>\n<li><code is:raw>Math.random() * x</code>: Reduces value by some random amount</li>\n<li><code is:raw>x + (0.1 - Math.random()* 0.2)</code>: Jitters value by up to 10%</li>\n</ul>\n<p>Pre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the function</span>\n<span class="token keyword">const</span> fn <span class="token operator">=</span> Easings<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>cubicIn<span class="token punctuation">;</span>\n\n<span class="token comment">// Use it to transform an input value (0..1)</span>\n<span class="token comment">// and set to variable \'v\'</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="demos">Demos</h2>\n<p>Here, the easing function advances on each call (tapping the circle), rather than by time.</p>\n<demo-element title="Discrete easing" src="/modulation/easing-tick/" />\n<p>Below is the common usage of time-based easing</p>\n<demo-element title="Timer easing" src="/modulation/easing-timer/" />\n<p>In this demo, a target value is reached over time by using an easing function.</p>\n<demo-element title="Easing set" src="/modulation/easing-set/" />\n<script type="module" hoist>\nimport \'/src/components/FuncPlotElement\';\nimport {Easings} from \'/node_modules/ixfx/dist/modulation.js\';\nconst run = () => {\n  document.querySelectorAll(`[data-easing]`).forEach(el => {\n    const plot = document.createElement(`func-plot-element`);// importEl(el, `func-plot-element`);\n    el.append(plot);\n    const fnAttr = el.getAttribute(`fn`);\n    const easingAttr = el.getAttribute(`easing`);\n    const editableAttr = el.getAttribute(`editable`);\n    plot.editable = editableAttr !== `false` && editableAttr !== null;\n\n    if (fnAttr !== null && fnAttr.length > 0) {\n      plot.setFunctionByString(fnAttr);\n    } else if (easingAttr !== null && easingAttr.length > 0) {\n      const easingFn = Easings.get(easingAttr);\n      if (easingFn === undefined) {\n        console.error(`Could not find easing: ${easingAttr}`);\n      } else {\n        plot.setFunction(easingAttr, easingFn);\n      }\n    } else {\n      console.warn(`Neither fn or easing attributes defined for function plot.`);\n    }\n\n    // Give component time to render before plotting\n    // setTimeout(() => {\n    //   plot.plot(false);\n    // }, 1000);\n  });\n}\nsetTimeout(() => run(), 10);\n<\/script>\n<h2 id="custom-curves">Custom curves</h2>\n<h3 id="simple-cubic-beziers">Simple cubic beziers</h3>\n<p>You can make your own easing curve using a simplified <em>cubic bezier</em>. See <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">this curve, for example</a>. It\'s defined by points <code is:raw>0, 1.24, 1, -1.15</code>. The key points we need here are <code is:raw>1.24</code> (point b), and <code is:raw>-1.15</code> (point d).</p>\n<p>This can be used as follows:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>Easings<span class="token punctuation">.</span><span class="token function">fromCubicBezier</span><span class="token punctuation">(</span><span class="token number">1.24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ne<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Use the <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">cubic bezier editor</a> to shape a curve, but make sure the first point remains 0 and the third point remains 1.</p>\n<h2 id="defined-easings">Defined easings</h2>\n<p>There are several well known easing functions which are pre-defined in ixfx.</p>\n<!-- Astro bug. Either we get two lit elements, or an exception -->\n<!-- <easing-gallery-element client:only="lit" /> -->\n<div id="easingGallery"></div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/modulation/EasingGalleryElement\';\nimportEl(\n  `easingGallery`, \n  `easing-gallery-element`, {});\n<\/script>\n<h2 id="credits">Credits</h2>\n<p>Most easing functions by <a href="https://easings.net/">Andrey Sitnik and Ivan Solovev</a></p>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/loader';
import '/src/components/modulation/EasingGalleryElement';
importEl(
  \`easingGallery\`, 
  \`easing-gallery-element\`, {});` },
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/FuncPlotElement';
import {Easings} from '/node_modules/ixfx/dist/modulation.js';
const run = () => {
  document.querySelectorAll(\`[data-easing]\`).forEach(el => {
    const plot = document.createElement(\`func-plot-element\`);// importEl(el, \`func-plot-element\`);
    el.append(plot);
    const fnAttr = el.getAttribute(\`fn\`);
    const easingAttr = el.getAttribute(\`easing\`);
    const editableAttr = el.getAttribute(\`editable\`);
    plot.editable = editableAttr !== \`false\` && editableAttr !== null;

    if (fnAttr !== null && fnAttr.length > 0) {
      plot.setFunctionByString(fnAttr);
    } else if (easingAttr !== null && easingAttr.length > 0) {
      const easingFn = Easings.get(easingAttr);
      if (easingFn === undefined) {
        console.error(\`Could not find easing: \${easingAttr}\`);
      } else {
        plot.setFunction(easingAttr, easingFn);
      }
    } else {
      console.warn(\`Neither fn or easing attributes defined for function plot.\`);
    }

    // Give component time to render before plotting
    // setTimeout(() => {
    //   plot.plot(false);
    // }, 1000);
  });
}
setTimeout(() => run(), 10);` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Easings.html">Easings module</a></li>
<li><a href="https://fn-vis.pages.dev/1/#H4sIANJT3mQAA1WQsU7EMAyGX+VXphaVpiwMRcfGwMDESCtdufpKIHGixq1OqvruJCeBdJttff5+yx+bcn4k1apgvai92hQP7r+vlGEjZrCq3fYqo1G1aWekKIm5V3tfXZs87hNhXPCzYMPLEA1PETvOs3fo1JdIiK3WC4efqT55p83lfNGjiaKTd7GDGM/1d+zUU8cda50dBMPwK83wTHCGF6GOT56jgHD4i6nFOCqOn2TtscJjc/fQNE159USSVxaa18EWRYnDM7aOAUuCNQkonxKStSgzDaTcd+IRiV9SFBB8lDeKcZioWLNzr5D0uQJUetjNA/tfXucbdFIBAAA=">fn-vis</a>: useful for seeing output values</li>
<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Online modulation demos</a></li>
</ul>
</div><p>Easing functions help to give a <em>dynamic</em> to transition. In <a href="../../types/geometry/units/#cartesian">Cartesian</a> terms, they give a <em>y</em> value for <em>x</em> (where x is 0 .. 1). Or in temporal terms, you can think of them as giving a value at time <em>t</em> (where <em>t</em> is 0 .. 1).</p><p>Normally, a way of getting from 0 to 1 would be count upwards by some fixed amount. And if that's all you need, ixfx's <a href="../../gen/generator/#count">count</a> and <a href="../../gen/generator/#numeric-range">numericRange</a> functions might do the job.</p><p>For example, count by 0.1 from 0 to 1:</p><div data-easing="true" id="demo0" title="Linear function" fn="x"></div><p>This is a <em>linear</em> function, with the same 'speed' throughout the progression towards the end point.</p><p>In contrast, easing functions give some dynamics to the journey. For example, maybe it starts slowly, but gets faster as it nears the end, as in this <code>cubicIn</code> function:</p><div data-easing="true" id="demo1" title="cubicIn" easing="cubicIn"></div><p>Or perhaps gathering speed quickly, but then slowing down toward the end (<code>cubicOut</code>):</p><div data-easing="true" id="demo1" title="cubicOut" easing="cubicOut"></div><p>Jump to the <a href="#defined-easings">Defined Easings</a> to see a list of pre-defined easing functions.</p><h2 id="usage">Usage</h2><p>Easings can be driven by time or <em>ticks</em>, created by <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.time.html"><code>Easings.time</code></a> or <a href="https://clinth.github.io/ixfx/functions/Modulation.Easings.tick.html"><code>Easings.tick</code></a>, respectively.</p><p>Each of these returns an <a href="https://clinth.github.io/ixfx/types/Modulation.Easings.Easing.html"><code>Easings.Easing</code></a>, which has this type:</p><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Easing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Returns value at this point</span>
  <span class="token comment">// Usually 0-1, but some functions can overshoot</span>
  <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>
  <span class="token comment">// Reset easing to beginning</span>
  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
  <span class="token comment">// Returns true if easing is finished</span>
  <span class="token keyword">get</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">boolean</span>
<span class="token punctuation">}</span></code></pre><h3 id="time-based">Time-based</h3><p>Example: 'sineIn' easing that takes one second to complete:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sineIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns value at this point in time.</span>
<span class="token comment">// Usually 0-1, but some functions overshoot bounds</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ..call e.compute() whenever the 'latest' value is needed</span>

<span class="token comment">// Can check if easing has completed</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre><p>Time starts being counted from when the easing is initialised (ie. calling <code>Easings.time()</code>). For this reason, you likely want to initialise just before it's needed, or values you will lose part of the range. Calling <code>reset()</code> can also be useful for resetting the timer.</p><p>You'll probably call <code>compute()</code> inside an existing draw/update loop that is running. If you don't have a loop already, here is a snippet that returns an easing over time:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Generators<span class="token punctuation">,</span> Flow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/bundle.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>

<span class="token comment">// Define an easing that takes 1 second to reach end</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sineIn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Increment by 10% from 0 to 1</span>
<span class="token keyword">const</span> range <span class="token operator">=</span> Generators<span class="token punctuation">.</span><span class="token function">numericPercent</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Iterate over range at 100ms intervals</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> Flow<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><ul>
<li><a href="https://fn-vis.pages.dev/1/#H4sIAABU3mQAA1WQsU7EMAyGX8XK1KLSlIWhp2NjYGBiJJUuXH0lkDhR7VYnVX13kpNAYrT1+fut/31TIY6oepV8FLU3myIb/uZGOXLirFf9tjcFZdXnmxFZMnOv9qG5DWU9ZMKFFGeBDZ4tO5oYdrjMMYBRnyKJe60XSt9Te45Bu+vlqkfHorN38VZcpPaLjToYMqR1cSA4grjiDJEQgqNF0NA5EgsgHH9jWnEBq9MHen9q4LG7e+i6rr55GOWFBOfV+qqq4fgEmyEAjwJrFmB5JWVrVRcaIOe+IY2Q+SVHAaTI8orMdsJqLc69gayvDyqX9a+84Qc1a72VTgEAAA==">Try it out with fn-vis</a></li>
</ul><h3 id="tick-based">Tick-based</h3><p>Example: a <code>sineOut</code> easing that takes 100 ticks to complete:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>

<span class="token comment">// Set up</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sineOut</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get the value of the easing function at this point</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...each call to compute() will 'advance' the easing</span>
<span class="token comment">// function by one tick. So after 100 calls to compute()</span>
<span class="token comment">// the function will be done.</span>

<span class="token comment">// Can check if easing has completed</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre><p><code>compute</code> typically returns value between 0..1, but some functions purposefully overshoot this range (such as the <code>back</code> series of easings, shown <a href="#defined-easings">below</a>).</p><p>Once you have this value, it can be applied as necessary. For example, positioning an element:</p><pre class="language-js"><code class="language-js">el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0px)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></code></pre><p>See the source of the demos below for more ideas, or <a href="https://fn-vis.pages.dev/1/#H4sIAB5U3mQAA1WRQU/DMAyF/8pTTq1U1u3aadw47MAJbnTSQuu1YakTNe6YVPW/kwaB4Gj7vc/P8tusBteSqpS3TtRSzIr18FsXyrARo62q5qVYpUFV0dNSkKh5UMupSMXaPkWFGbwbBTOedDDcBSy4jG5ArXoRH6qynNhfu03jhtLcL/eyNUHKyJ2sFuN48xFqta+55rLEq74SdsV2u4WY5hogDp2D9KObuh6UViTlkWPXBDQ6UAHHlAz4NNai197TN5B008fJEMc9wTDTCK9jXndBIDmy0HjTFolkLbU1N46DgHD4uWizkrPzO1l7LrCL4fKU948/y3IcHjHXDFgS3KKb1pP9JJTlqxqIcV6IW0T9RGvDuyDPFILuKLutzCXh872KT/n3pNMX560UxrYBAAA=">try it out on fn-vis</a></p><h2 id="its-a-function">It's a function</h2><p>It's good to remember that easing functions are not magic. They just return a number based on an input within the range of 0..1.</p><p>An easing-function-from-scratch example is an exponential function:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 0</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.25</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.5625</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span></code></pre><p>You can see this in action:</p><div editable data-easing="true" id="demo2" fn="Math.pow(x,2)"></div><p>Try the following functions:</p><ul>
<li><code>x</code>: Linear, returns the same input value</li>
<li><code>x/2</code>: Halves input value</li>
<li><code>Math.sqrt(x)</code>: Square root of value</li>
<li><code>Math.random() * x</code>: Reduces value by some random amount</li>
<li><code>x + (0.1 - Math.random()* 0.2)</code>: Jitters value by up to 10%</li>
</ul><p>Pre-defined easing functions can be used directly to avoid the time/tick mechanism. In this case, you need to provide an input value on a scale of 0..1.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>

<span class="token comment">// Get the function</span>
<span class="token keyword">const</span> fn <span class="token operator">=</span> Easings<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>cubicIn<span class="token punctuation">;</span>

<span class="token comment">// Use it to transform an input value (0..1)</span>
<span class="token comment">// and set to variable 'v'</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="demos">Demos</h2><p>Here, the easing function advances on each call (tapping the circle), rather than by time.</p>${renderComponent($$result, "demo-element", "demo-element", { "title": "Discrete easing", "src": "/modulation/easing-tick/" })}<p>Below is the common usage of time-based easing</p>${renderComponent($$result, "demo-element", "demo-element", { "title": "Timer easing", "src": "/modulation/easing-timer/" })}<p>In this demo, a target value is reached over time by using an easing function.</p>${renderComponent($$result, "demo-element", "demo-element", { "title": "Easing set", "src": "/modulation/easing-set/" })}<h2 id="custom-curves">Custom curves</h2><h3 id="simple-cubic-beziers">Simple cubic beziers</h3><p>You can make your own easing curve using a simplified <em>cubic bezier</em>. See <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">this curve, for example</a>. It's defined by points <code>0, 1.24, 1, -1.15</code>. The key points we need here are <code>1.24</code> (point b), and <code>-1.15</code> (point d).</p><p>This can be used as follows:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> Easings<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span>Easings<span class="token punctuation">.</span><span class="token function">fromCubicBezier</span><span class="token punctuation">(</span><span class="token number">1.24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Use the <a href="https://cubic-bezier.com/#0,1.24,1,-1.15">cubic bezier editor</a> to shape a curve, but make sure the first point remains 0 and the third point remains 1.</p><h2 id="defined-easings">Defined easings</h2><p>There are several well known easing functions which are pre-defined in ixfx.</p><div id="easingGallery"></div><h2 id="credits">Credits</h2><p>Most easing functions by <a href="https://easings.net/">Andrey Sitnik and Ivan Solovev</a></p>` })}`;
});

export { $$metadata, $$Easing as default, frontmatter, metadata };
