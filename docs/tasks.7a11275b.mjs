import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "queuing", "text": "Queuing" }, { "depth": 2, "slug": "calling-with-a-timeout", "text": "Calling with a timeout" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n</ul></div>\n\n## Queuing\n\nThe [TaskQueue](https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html) is a utility class to run a series of functions one-by-one.\n\n```js\nimport { TaskQueue, sleep } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Initialise queue\nconst q = new TaskQueue();\n\n// After that, add a task whenever you like\nq.enqueue(async () => {\n  // Do something...\n\n  // Wait one second before allowing the next task to run\n  await sleep(1000);\n});\n```\n\n\'Tasks\' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.\n\n## Calling with a timeout\n\nThere are times you might want to call a function, but handle cases where it fails or we don\'t get a result after some period. [`waitFor`](https://clinth.github.io/ixfx/functions/Flow.waitFor.html) helps with this.\n\nThe signature is:\n```ts\nfunction waitFor(\n  timeoutMs: number,\n  onAborted: (reason: string) => void,\n  onComplete?: (success: boolean) => void\n):(error:message) => void\n```\n\n`waitFor` returns a function for signalling the result. If this function is _not_ called within the timeout, or is passed an error message, the abort callback will run.\n\n```js\n// Set up waitFor, with a timeout of 1 second\n// If an error occurs, we just print it out\nconst done = waitFor(1000, (error) => { \n  console.error(error);\n});\n\n// Mark as done when user clicks\ndocument.addEventListener(`click`, () => {\n  done();\n});\n\n// Mark as failed if person presses a key\ndocument.addEventListner(`keypress`, () => {\n  done(`Ooops, key was pressed`);\n});\n```\n\nIn the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.\n\n```js\nconst done = waitFor(1000, \n  (error) => { \n    console.error(error);\n  },\n  (success) => {\n    if (!success) return; // Failed\n    console.log(`yay`);\n  }\n);\n```\n', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n</ul></div>\n<h2 id="queuing">Queuing</h2>\n<p>The <a href="https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html">TaskQueue</a> is a utility class to run a series of functions one-by-one.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> TaskQueue<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token comment">// Initialise queue</span>\n<span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// After that, add a task whenever you like</span>\nq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n\n  <span class="token comment">// Wait one second before allowing the next task to run</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>\'Tasks\' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.</p>\n<h2 id="calling-with-a-timeout">Calling with a timeout</h2>\n<p>There are times you might want to call a function, but handle cases where it fails or we don\'t get a result after some period. <a href="https://clinth.github.io/ixfx/functions/Flow.waitFor.html"><code is:raw>waitFor</code></a> helps with this.</p>\n<p>The signature is:</p>\n<pre class="language-ts"><code is:raw class="language-ts"><span class="token keyword">function</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>\n  timeoutMs<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onAborted</span><span class="token operator">:</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  onComplete<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>success<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>error<span class="token operator">:</span>message<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre>\n<p><code is:raw>waitFor</code> returns a function for signalling the result. If this function is <em>not</em> called within the timeout, or is passed an error message, the abort callback will run.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up waitFor, with a timeout of 1 second</span>\n<span class="token comment">// If an error occurs, we just print it out</span>\n<span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Mark as done when user clicks</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Mark as failed if person presses a key</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListner</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">keypress</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ooops, key was pressed</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> \n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">success</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Failed</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yay</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' };
const frontmatter = { "title": "Tasks", "astro": { "headers": [{ "depth": 2, "slug": "queuing", "text": "Queuing" }, { "depth": 2, "slug": "calling-with-a-timeout", "text": "Calling with a timeout" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n</ul></div>\n\n## Queuing\n\nThe [TaskQueue](https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html) is a utility class to run a series of functions one-by-one.\n\n```js\nimport { TaskQueue, sleep } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Initialise queue\nconst q = new TaskQueue();\n\n// After that, add a task whenever you like\nq.enqueue(async () => {\n  // Do something...\n\n  // Wait one second before allowing the next task to run\n  await sleep(1000);\n});\n```\n\n\'Tasks\' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.\n\n## Calling with a timeout\n\nThere are times you might want to call a function, but handle cases where it fails or we don\'t get a result after some period. [`waitFor`](https://clinth.github.io/ixfx/functions/Flow.waitFor.html) helps with this.\n\nThe signature is:\n```ts\nfunction waitFor(\n  timeoutMs: number,\n  onAborted: (reason: string) => void,\n  onComplete?: (success: boolean) => void\n):(error:message) => void\n```\n\n`waitFor` returns a function for signalling the result. If this function is _not_ called within the timeout, or is passed an error message, the abort callback will run.\n\n```js\n// Set up waitFor, with a timeout of 1 second\n// If an error occurs, we just print it out\nconst done = waitFor(1000, (error) => { \n  console.error(error);\n});\n\n// Mark as done when user clicks\ndocument.addEventListener(`click`, () => {\n  done();\n});\n\n// Mark as failed if person presses a key\ndocument.addEventListner(`keypress`, () => {\n  done(`Ooops, key was pressed`);\n});\n```\n\nIn the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.\n\n```js\nconst done = waitFor(1000, \n  (error) => { \n    console.error(error);\n  },\n  (success) => {\n    if (!success) return; // Failed\n    console.log(`yay`);\n  }\n);\n```\n', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n</ul></div>\n<h2 id="queuing">Queuing</h2>\n<p>The <a href="https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html">TaskQueue</a> is a utility class to run a series of functions one-by-one.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> TaskQueue<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token comment">// Initialise queue</span>\n<span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// After that, add a task whenever you like</span>\nq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n\n  <span class="token comment">// Wait one second before allowing the next task to run</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>\'Tasks\' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.</p>\n<h2 id="calling-with-a-timeout">Calling with a timeout</h2>\n<p>There are times you might want to call a function, but handle cases where it fails or we don\'t get a result after some period. <a href="https://clinth.github.io/ixfx/functions/Flow.waitFor.html"><code is:raw>waitFor</code></a> helps with this.</p>\n<p>The signature is:</p>\n<pre class="language-ts"><code is:raw class="language-ts"><span class="token keyword">function</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>\n  timeoutMs<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onAborted</span><span class="token operator">:</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  onComplete<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>success<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>error<span class="token operator">:</span>message<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre>\n<p><code is:raw>waitFor</code> returns a function for signalling the result. If this function is <em>not</em> called within the timeout, or is passed an error message, the abort callback will run.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up waitFor, with a timeout of 1 second</span>\n<span class="token comment">// If an error occurs, we just print it out</span>\n<span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Mark as done when user clicks</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Mark as failed if person presses a key</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListner</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">keypress</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ooops, key was pressed</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> \n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">success</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Failed</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yay</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/flow/tasks.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/flow/tasks.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Tasks = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Tasks;
  const $$content = { "title": "Tasks", "astro": { "headers": [{ "depth": 2, "slug": "queuing", "text": "Queuing" }, { "depth": 2, "slug": "calling-with-a-timeout", "text": "Calling with a timeout" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n</ul></div>\n\n## Queuing\n\nThe [TaskQueue](https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html) is a utility class to run a series of functions one-by-one.\n\n```js\nimport { TaskQueue, sleep } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Initialise queue\nconst q = new TaskQueue();\n\n// After that, add a task whenever you like\nq.enqueue(async () => {\n  // Do something...\n\n  // Wait one second before allowing the next task to run\n  await sleep(1000);\n});\n```\n\n\'Tasks\' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.\n\n## Calling with a timeout\n\nThere are times you might want to call a function, but handle cases where it fails or we don\'t get a result after some period. [`waitFor`](https://clinth.github.io/ixfx/functions/Flow.waitFor.html) helps with this.\n\nThe signature is:\n```ts\nfunction waitFor(\n  timeoutMs: number,\n  onAborted: (reason: string) => void,\n  onComplete?: (success: boolean) => void\n):(error:message) => void\n```\n\n`waitFor` returns a function for signalling the result. If this function is _not_ called within the timeout, or is passed an error message, the abort callback will run.\n\n```js\n// Set up waitFor, with a timeout of 1 second\n// If an error occurs, we just print it out\nconst done = waitFor(1000, (error) => { \n  console.error(error);\n});\n\n// Mark as done when user clicks\ndocument.addEventListener(`click`, () => {\n  done();\n});\n\n// Mark as failed if person presses a key\ndocument.addEventListner(`keypress`, () => {\n  done(`Ooops, key was pressed`);\n});\n```\n\nIn the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.\n\n```js\nconst done = waitFor(1000, \n  (error) => { \n    console.error(error);\n  },\n  (success) => {\n    if (!success) return; // Failed\n    console.log(`yay`);\n  }\n);\n```\n', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n</ul></div>\n<h2 id="queuing">Queuing</h2>\n<p>The <a href="https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html">TaskQueue</a> is a utility class to run a series of functions one-by-one.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> TaskQueue<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token comment">// Initialise queue</span>\n<span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// After that, add a task whenever you like</span>\nq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something...</span>\n\n  <span class="token comment">// Wait one second before allowing the next task to run</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>\'Tasks\' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.</p>\n<h2 id="calling-with-a-timeout">Calling with a timeout</h2>\n<p>There are times you might want to call a function, but handle cases where it fails or we don\'t get a result after some period. <a href="https://clinth.github.io/ixfx/functions/Flow.waitFor.html"><code is:raw>waitFor</code></a> helps with this.</p>\n<p>The signature is:</p>\n<pre class="language-ts"><code is:raw class="language-ts"><span class="token keyword">function</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>\n  timeoutMs<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onAborted</span><span class="token operator">:</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  onComplete<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>success<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>error<span class="token operator">:</span>message<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre>\n<p><code is:raw>waitFor</code> returns a function for signalling the result. If this function is <em>not</em> called within the timeout, or is passed an error message, the abort callback will run.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up waitFor, with a timeout of 1 second</span>\n<span class="token comment">// If an error occurs, we just print it out</span>\n<span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Mark as done when user clicks</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Mark as failed if person presses a key</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListner</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">keypress</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ooops, key was pressed</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> \n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">success</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Failed</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yay</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
</ul></div><h2 id="queuing">Queuing</h2><p>The <a href="https://clinth.github.io/ixfx/classes/Flow.TaskQueue.html">TaskQueue</a> is a utility class to run a series of functions one-by-one.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> TaskQueue<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Initialise queue</span>
<span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// After that, add a task whenever you like</span>
q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something...</span>

  <span class="token comment">// Wait one second before allowing the next task to run</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>'Tasks' are just async functions. The queue waits for the function to return a result, after which it takes the next item in the queue to process.</p><h2 id="calling-with-a-timeout">Calling with a timeout</h2><p>There are times you might want to call a function, but handle cases where it fails or we don't get a result after some period. <a href="https://clinth.github.io/ixfx/functions/Flow.waitFor.html"><code>waitFor</code></a> helps with this.</p><p>The signature is:</p><pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">waitFor</span><span class="token punctuation">(</span>
  timeoutMs<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onAborted</span><span class="token operator">:</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  onComplete<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>success<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>
<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>error<span class="token operator">:</span>message<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span></code></pre><p><code>waitFor</code> returns a function for signalling the result. If this function is <em>not</em> called within the timeout, or is passed an error message, the abort callback will run.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Set up waitFor, with a timeout of 1 second</span>
<span class="token comment">// If an error occurs, we just print it out</span>
<span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> 
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Mark as done when user clicks</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Mark as failed if person presses a key</span>
document<span class="token punctuation">.</span><span class="token function">addEventListner</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">keypress</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">done</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Ooops, key was pressed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the above example, we only listen for the error case - if the timeout happens or the user presses a key. We can also get notified when the operation completes, successfully or not.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> done <span class="token operator">=</span> <span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> 
  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">success</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Failed</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">yay</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>` })}`;
});

export { $$metadata, $$Tasks as default, frontmatter, metadata };
