import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const metadata = { "headers": [{ "depth": 2, "slug": "interpolation", "text": "Interpolation" }, { "depth": 2, "slug": "scale", "text": "Scale" }, { "depth": 2, "slug": "parsing", "text": "Parsing" }, { "depth": 2, "slug": "variations", "text": "Variations" }, { "depth": 2, "slug": "credits", "text": "Credits" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/types/geometry/arc\';\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</div>\n\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/types/colour/ColourScaleElement\';\n<\/script>\n\n\n## Interpolation\n\nColours can be _interpolated_, eg. getting the colour that is 50% between red and blue.\n\n```js\n// repl-pad#1\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns  `rgb(128, 0, 128)`\nColour.interpolate(0.5, `red`, `blue`);\n```\n\nRegular CSS colour definitions can also be used:\n\n```js\n// repl-pad#1\n// Returns `rgb(0, 85, 128))`\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`);\n```\n\nBy default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.\n\n```js\n// repl-pad#1\n// Mix in HCL colour space. Returns `rgb(0, 170, 255))`\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`, `hcl`);\n\n// ..or object options can be used. Here we also add the `long` parameter\n// to make interpolation go the long way around the circle\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`, {space: `hcl`, long: true} );\n```\n\nThe colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for `scale`.\n\n## Scale\n\nYou can generate a series of colours with a specified number of steps with `scale`. The start and end colours are included appear as first and last step respectively.\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.\nColour.scale(10, `hcl`, `red`, `blue`);\n```\n\nThe demo below shows `scale` in action, as well how different interpolations can be between colour spaces.\n\n<div id="colourScale"></div>\n<script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script>\n\nBy default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the `long` option. This only applies to hsl, hcl and cubehelix colour spaces.\n\n```js\nColour.scale(10, {space: `hcl`, long: true}, `red`, `blue`);\n```\n\n## Parsing\n\nIf you need to parse a colour string into its components:\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns { h: 10.47, s: 1, l: 0.875 }\nColour.toHsl(`pink`);\n\n// Returns { r: 255, g: 192, b: 203 }\nColour.toRgb(`pink`);\n```\n\n## Variations\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns a colour string for blue at 50% opacity\n// `rgba(0, 0, 255, 0.5)`\nconst halfBlue = Colour.opacity(`blue`, 0.5);\n\n// If a colour already has opacity, it is multiplied\n// `rgba(0, 0, 255, 0.25)`\nconst quarterBlue = Colour.opacity(halfBlue, 0.5);\n```\n\n## Credits\n\nMost of the functionality of the colour module is via Mike Bostock\'s [d3-color](https://github.com/d3/d3-color) and [d3-interpolate](https://github.com/d3/d3-interpolate). ', "html": '<script type="module" hoist>\nimport \'/src/components/types/geometry/arc\';\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/types/colour/ColourScaleElement\';\n<\/script>\n<h2 id="interpolation">Interpolation</h2>\n<p>Colours can be <em>interpolated</em>, eg. getting the colour that is 50% between red and blue.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns  `rgb(128, 0, 128)`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Regular CSS colour definitions can also be used:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns `rgb(0, 85, 128))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>By default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Mix in HCL colour space. Returns `rgb(0, 170, 255))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ..or object options can be used. Here we also add the `long` parameter</span>\n<span class="token comment">// to make interpolation go the long way around the circle</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for <code is:raw>scale</code>.</p>\n<h2 id="scale">Scale</h2>\n<p>You can generate a series of colours with a specified number of steps with <code is:raw>scale</code>. The start and end colours are included appear as first and last step respectively.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.</span>\nColour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The demo below shows <code is:raw>scale</code> in action, as well how different interpolations can be between colour spaces.</p>\n<div id="colourScale"></div>\n<script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script>\n<p>By default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the <code is:raw>long</code> option. This only applies to hsl, hcl and cubehelix colour spaces.</p>\n<pre class="language-js"><code is:raw class="language-js">Colour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="parsing">Parsing</h2>\n<p>If you need to parse a colour string into its components:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns { h: 10.47, s: 1, l: 0.875 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toHsl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { r: 255, g: 192, b: 203 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="variations">Variations</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns a colour string for blue at 50% opacity</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.5)`</span>\n<span class="token keyword">const</span> halfBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If a colour already has opacity, it is multiplied</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.25)`</span>\n<span class="token keyword">const</span> quarterBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>halfBlue<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="credits">Credits</h2>\n<p>Most of the functionality of the colour module is via Mike Bostock\'s <a href="https://github.com/d3/d3-color">d3-color</a> and <a href="https://github.com/d3/d3-interpolate">d3-interpolate</a>.</p>' };
const frontmatter = { "title": "Colour", "astro": { "headers": [{ "depth": 2, "slug": "interpolation", "text": "Interpolation" }, { "depth": 2, "slug": "scale", "text": "Scale" }, { "depth": 2, "slug": "parsing", "text": "Parsing" }, { "depth": 2, "slug": "variations", "text": "Variations" }, { "depth": 2, "slug": "credits", "text": "Credits" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/types/geometry/arc\';\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</div>\n\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/types/colour/ColourScaleElement\';\n<\/script>\n\n\n## Interpolation\n\nColours can be _interpolated_, eg. getting the colour that is 50% between red and blue.\n\n```js\n// repl-pad#1\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns  `rgb(128, 0, 128)`\nColour.interpolate(0.5, `red`, `blue`);\n```\n\nRegular CSS colour definitions can also be used:\n\n```js\n// repl-pad#1\n// Returns `rgb(0, 85, 128))`\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`);\n```\n\nBy default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.\n\n```js\n// repl-pad#1\n// Mix in HCL colour space. Returns `rgb(0, 170, 255))`\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`, `hcl`);\n\n// ..or object options can be used. Here we also add the `long` parameter\n// to make interpolation go the long way around the circle\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`, {space: `hcl`, long: true} );\n```\n\nThe colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for `scale`.\n\n## Scale\n\nYou can generate a series of colours with a specified number of steps with `scale`. The start and end colours are included appear as first and last step respectively.\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.\nColour.scale(10, `hcl`, `red`, `blue`);\n```\n\nThe demo below shows `scale` in action, as well how different interpolations can be between colour spaces.\n\n<div id="colourScale"></div>\n<script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script>\n\nBy default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the `long` option. This only applies to hsl, hcl and cubehelix colour spaces.\n\n```js\nColour.scale(10, {space: `hcl`, long: true}, `red`, `blue`);\n```\n\n## Parsing\n\nIf you need to parse a colour string into its components:\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns { h: 10.47, s: 1, l: 0.875 }\nColour.toHsl(`pink`);\n\n// Returns { r: 255, g: 192, b: 203 }\nColour.toRgb(`pink`);\n```\n\n## Variations\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns a colour string for blue at 50% opacity\n// `rgba(0, 0, 255, 0.5)`\nconst halfBlue = Colour.opacity(`blue`, 0.5);\n\n// If a colour already has opacity, it is multiplied\n// `rgba(0, 0, 255, 0.25)`\nconst quarterBlue = Colour.opacity(halfBlue, 0.5);\n```\n\n## Credits\n\nMost of the functionality of the colour module is via Mike Bostock\'s [d3-color](https://github.com/d3/d3-color) and [d3-interpolate](https://github.com/d3/d3-interpolate). ', "html": '<script type="module" hoist>\nimport \'/src/components/types/geometry/arc\';\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/types/colour/ColourScaleElement\';\n<\/script>\n<h2 id="interpolation">Interpolation</h2>\n<p>Colours can be <em>interpolated</em>, eg. getting the colour that is 50% between red and blue.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns  `rgb(128, 0, 128)`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Regular CSS colour definitions can also be used:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns `rgb(0, 85, 128))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>By default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Mix in HCL colour space. Returns `rgb(0, 170, 255))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ..or object options can be used. Here we also add the `long` parameter</span>\n<span class="token comment">// to make interpolation go the long way around the circle</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for <code is:raw>scale</code>.</p>\n<h2 id="scale">Scale</h2>\n<p>You can generate a series of colours with a specified number of steps with <code is:raw>scale</code>. The start and end colours are included appear as first and last step respectively.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.</span>\nColour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The demo below shows <code is:raw>scale</code> in action, as well how different interpolations can be between colour spaces.</p>\n<div id="colourScale"></div>\n<script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script>\n<p>By default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the <code is:raw>long</code> option. This only applies to hsl, hcl and cubehelix colour spaces.</p>\n<pre class="language-js"><code is:raw class="language-js">Colour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="parsing">Parsing</h2>\n<p>If you need to parse a colour string into its components:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns { h: 10.47, s: 1, l: 0.875 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toHsl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { r: 255, g: 192, b: 203 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="variations">Variations</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns a colour string for blue at 50% opacity</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.5)`</span>\n<span class="token keyword">const</span> halfBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If a colour already has opacity, it is multiplied</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.25)`</span>\n<span class="token keyword">const</span> quarterBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>halfBlue<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="credits">Credits</h2>\n<p>Most of the functionality of the colour module is via Mike Bostock\'s <a href="https://github.com/d3/d3-color">d3-color</a> and <a href="https://github.com/d3/d3-interpolate">d3-interpolate</a>.</p>' } };
const $$metadata = createMetadata("/src/pages/types/colour/index.md", { modules: [{ module: $$module1, specifier: "../../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/loader';
import '/src/components/types/colour/ColourScaleElement';
` }, { type: "inline", value: `
import '/src/components/types/geometry/arc';
import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/types/colour/index.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  const $$content = { "title": "Colour", "astro": { "headers": [{ "depth": 2, "slug": "interpolation", "text": "Interpolation" }, { "depth": 2, "slug": "scale", "text": "Scale" }, { "depth": 2, "slug": "parsing", "text": "Parsing" }, { "depth": 2, "slug": "variations", "text": "Variations" }, { "depth": 2, "slug": "credits", "text": "Credits" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/types/geometry/arc\';\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</div>\n\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/types/colour/ColourScaleElement\';\n<\/script>\n\n\n## Interpolation\n\nColours can be _interpolated_, eg. getting the colour that is 50% between red and blue.\n\n```js\n// repl-pad#1\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns  `rgb(128, 0, 128)`\nColour.interpolate(0.5, `red`, `blue`);\n```\n\nRegular CSS colour definitions can also be used:\n\n```js\n// repl-pad#1\n// Returns `rgb(0, 85, 128))`\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`);\n```\n\nBy default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.\n\n```js\n// repl-pad#1\n// Mix in HCL colour space. Returns `rgb(0, 170, 255))`\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`, `hcl`);\n\n// ..or object options can be used. Here we also add the `long` parameter\n// to make interpolation go the long way around the circle\nColour.interpolate(0.5, `hsl(200, 100%, 50%)`, `hsl(90, 100%, 50%`, {space: `hcl`, long: true} );\n```\n\nThe colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for `scale`.\n\n## Scale\n\nYou can generate a series of colours with a specified number of steps with `scale`. The start and end colours are included appear as first and last step respectively.\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.\nColour.scale(10, `hcl`, `red`, `blue`);\n```\n\nThe demo below shows `scale` in action, as well how different interpolations can be between colour spaces.\n\n<div id="colourScale"></div>\n<script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script>\n\nBy default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the `long` option. This only applies to hsl, hcl and cubehelix colour spaces.\n\n```js\nColour.scale(10, {space: `hcl`, long: true}, `red`, `blue`);\n```\n\n## Parsing\n\nIf you need to parse a colour string into its components:\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns { h: 10.47, s: 1, l: 0.875 }\nColour.toHsl(`pink`);\n\n// Returns { r: 255, g: 192, b: 203 }\nColour.toRgb(`pink`);\n```\n\n## Variations\n\n```js\n// repl-pad\nimport { Colour } from "https://unpkg.com/ixfx/dist/visual.js"\n\n// Returns a colour string for blue at 50% opacity\n// `rgba(0, 0, 255, 0.5)`\nconst halfBlue = Colour.opacity(`blue`, 0.5);\n\n// If a colour already has opacity, it is multiplied\n// `rgba(0, 0, 255, 0.25)`\nconst quarterBlue = Colour.opacity(halfBlue, 0.5);\n```\n\n## Credits\n\nMost of the functionality of the colour module is via Mike Bostock\'s [d3-color](https://github.com/d3/d3-color) and [d3-interpolate](https://github.com/d3/d3-interpolate). ', "html": '<script type="module" hoist>\nimport \'/src/components/types/geometry/arc\';\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</div>\n<script type="module" hoist>\nimport \'/src/loader\';\nimport \'/src/components/types/colour/ColourScaleElement\';\n<\/script>\n<h2 id="interpolation">Interpolation</h2>\n<p>Colours can be <em>interpolated</em>, eg. getting the colour that is 50% between red and blue.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns  `rgb(128, 0, 128)`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Regular CSS colour definitions can also be used:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns `rgb(0, 85, 128))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>By default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Mix in HCL colour space. Returns `rgb(0, 170, 255))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ..or object options can be used. Here we also add the `long` parameter</span>\n<span class="token comment">// to make interpolation go the long way around the circle</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for <code is:raw>scale</code>.</p>\n<h2 id="scale">Scale</h2>\n<p>You can generate a series of colours with a specified number of steps with <code is:raw>scale</code>. The start and end colours are included appear as first and last step respectively.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.</span>\nColour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The demo below shows <code is:raw>scale</code> in action, as well how different interpolations can be between colour spaces.</p>\n<div id="colourScale"></div>\n<script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script>\n<p>By default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the <code is:raw>long</code> option. This only applies to hsl, hcl and cubehelix colour spaces.</p>\n<pre class="language-js"><code is:raw class="language-js">Colour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="parsing">Parsing</h2>\n<p>If you need to parse a colour string into its components:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns { h: 10.47, s: 1, l: 0.875 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toHsl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { r: 255, g: 192, b: 203 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="variations">Variations</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns a colour string for blue at 50% opacity</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.5)`</span>\n<span class="token keyword">const</span> halfBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If a colour already has opacity, it is multiplied</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.25)`</span>\n<span class="token keyword">const</span> quarterBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>halfBlue<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="credits">Credits</h2>\n<p>Most of the functionality of the colour module is via Mike Bostock\'s <a href="https://github.com/d3/d3-color">d3-color</a> and <a href="https://github.com/d3/d3-interpolate">d3-interpolate</a>.</p>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/loader';
import '/src/components/types/colour/ColourScaleElement';` },
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/types/geometry/arc';
import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render(_a || (_a = __template(['<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</ul></div><h2 id="interpolation">Interpolation</h2><p>Colours can be <em>interpolated</em>, eg. getting the colour that is 50% between red and blue.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns  `rgb(128, 0, 128)`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Regular CSS colour definitions can also be used:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns `rgb(0, 85, 128))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>By default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Mix in HCL colour space. Returns `rgb(0, 170, 255))`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ..or object options can be used. Here we also add the `long` parameter</span>\n<span class="token comment">// to make interpolation go the long way around the circle</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for <code>scale</code>.</p><h2 id="scale">Scale</h2><p>You can generate a series of colours with a specified number of steps with <code>scale</code>. The start and end colours are included appear as first and last step respectively.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.</span>\nColour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The demo below shows <code>scale</code> in action, as well how different interpolations can be between colour spaces.</p><div id="colourScale"></div><script type="module">\nimportEl(\n  `colourScale`, \n  `colourscale-element`, {});\n<\/script><p>By default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the <code>long</code> option. This only applies to hsl, hcl and cubehelix colour spaces.</p><pre class="language-js"><code class="language-js">Colour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hcl</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="parsing">Parsing</h2><p>If you need to parse a colour string into its components:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns { h: 10.47, s: 1, l: 0.875 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toHsl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { r: 255, g: 192, b: 203 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="variations">Variations</h2><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns a colour string for blue at 50% opacity</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.5)`</span>\n<span class="token keyword">const</span> halfBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">blue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If a colour already has opacity, it is multiplied</span>\n<span class="token comment">// `rgba(0, 0, 255, 0.25)`</span>\n<span class="token keyword">const</span> quarterBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>halfBlue<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="credits">Credits</h2><p>Most of the functionality of the colour module is via Mike Bostock\'s <a href="https://github.com/d3/d3-color">d3-color</a> and <a href="https://github.com/d3/d3-interpolate">d3-interpolate</a>.</p>'], ['<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Visual.Colour.html">Visual.Colour module</a></li>\n</ul></div><h2 id="interpolation">Interpolation</h2><p>Colours can be <em>interpolated</em>, eg. getting the colour that is 50% between red and blue.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns  \\`rgb(128, 0, 128)\\`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">red</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">blue</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Regular CSS colour definitions can also be used:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Returns \\`rgb(0, 85, 128))\\`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>By default colours are mixed in the RGB colour space. Options include: rgb, hsb, hcl, lch and lab.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Mix in HCL colour space. Returns \\`rgb(0, 170, 255))\\`</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hcl</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ..or object options can be used. Here we also add the \\`long\\` parameter</span>\n<span class="token comment">// to make interpolation go the long way around the circle</span>\nColour<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hsl(200, 100%, 50%)</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hsl(90, 100%, 50%</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hcl</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The colour space you choose can have a large impact on what colour is generated. Colour spaces are different with regard to perceptual brightness, uniformity and saturation. See example below for <code>scale</code>.</p><h2 id="scale">Scale</h2><p>You can generate a series of colours with a specified number of steps with <code>scale</code>. The start and end colours are included appear as first and last step respectively.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Mixes in HCL space, returns an array of 10 string rgb() values, spaced between red and blue.</span>\nColour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hcl</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">red</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">blue</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The demo below shows <code>scale</code> in action, as well how different interpolations can be between colour spaces.</p><div id="colourScale"></div><script type="module">\nimportEl(\n  \\`colourScale\\`, \n  \\`colourscale-element\\`, {});\n<\/script><p>By default, a scale will be made in the shortest distance between the colours. If you purposefully want to include more colour variations, use the <code>long</code> option. This only applies to hsl, hcl and cubehelix colour spaces.</p><pre class="language-js"><code class="language-js">Colour<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">hcl</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">long</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">red</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">blue</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="parsing">Parsing</h2><p>If you need to parse a colour string into its components:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns { h: 10.47, s: 1, l: 0.875 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toHsl</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">pink</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns { r: 255, g: 192, b: 203 }</span>\nColour<span class="token punctuation">.</span><span class="token function">toRgb</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">pink</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="variations">Variations</h2><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Colour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/visual.js"</span>\n\n<span class="token comment">// Returns a colour string for blue at 50% opacity</span>\n<span class="token comment">// \\`rgba(0, 0, 255, 0.5)\\`</span>\n<span class="token keyword">const</span> halfBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\\`</span><span class="token string">blue</span><span class="token template-punctuation string">\\`</span></span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// If a colour already has opacity, it is multiplied</span>\n<span class="token comment">// \\`rgba(0, 0, 255, 0.25)\\`</span>\n<span class="token keyword">const</span> quarterBlue <span class="token operator">=</span> Colour<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>halfBlue<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="credits">Credits</h2><p>Most of the functionality of the colour module is via Mike Bostock\'s <a href="https://github.com/d3/d3-color">d3-color</a> and <a href="https://github.com/d3/d3-interpolate">d3-interpolate</a>.</p>']))) })}`;
});

export { $$metadata, $$Index as default, frontmatter, metadata };
