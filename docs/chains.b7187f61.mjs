import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

const metadata = { "headers": [{ "depth": 1, "slug": "creating-chains", "text": "Creating chains" }, { "depth": 2, "slug": "chainsrun", "text": "Chains.run" }, { "depth": 2, "slug": "chainsprepare", "text": "Chains.prepare" }, { "depth": 2, "slug": "chainssingle", "text": "Chains.single" }, { "depth": 1, "slug": "sources", "text": "Sources" }, { "depth": 2, "slug": "array", "text": "Array" }, { "depth": 2, "slug": "events", "text": "Events" }, { "depth": 2, "slug": "timestamp", "text": "Timestamp" }, { "depth": 2, "slug": "function", "text": "Function" }, { "depth": 1, "slug": "consuming-data-from-chains", "text": "Consuming data from chains" }, { "depth": 2, "slug": "iterating-with-for--of", "text": "Iterating with for .. of" }, { "depth": 2, "slug": "reading-values", "text": "Reading values" }, { "depth": 2, "slug": "accumulating", "text": "Accumulating" }, { "depth": 1, "slug": "synchronising", "text": "Synchronising" }, { "depth": 2, "slug": "chainscombinelatesttoarray", "text": "Chains.combineLatestToArray" }, { "depth": 2, "slug": "chainscombinelatesttoobject", "text": "Chains.combineLatestToObject" }, { "depth": 2, "slug": "chainssynctoarray", "text": "Chains.syncToArray" }, { "depth": 1, "slug": "links", "text": "Links" }, { "depth": 2, "slug": "math", "text": "Math" }, { "depth": 3, "slug": "chainlinksmin--max", "text": "Chain.Links.min / max" }, { "depth": 3, "slug": "chainslinksaverage", "text": "Chains.Links.average()" }, { "depth": 3, "slug": "chainslinkssum", "text": "Chains.Links.sum()" }, { "depth": 3, "slug": "chainlinkstally", "text": "Chain.Links.tally" }, { "depth": 2, "slug": "filtering", "text": "Filtering" }, { "depth": 3, "slug": "chainslinksfilter", "text": "Chains.Links.filter" }, { "depth": 3, "slug": "chainlinksdrop", "text": "Chain.Links.drop" }, { "depth": 3, "slug": "chainlinksrank--rankarray", "text": "Chain.Links.rank / rankArray" }, { "depth": 2, "slug": "changing-shape", "text": "Changing shape" }, { "depth": 3, "slug": "chainslinkstransform", "text": "Chains.Links.transform" }, { "depth": 3, "slug": "chainslinksreduce", "text": "Chains.Links.reduce" }, { "depth": 3, "slug": "chainslinkschunk", "text": "Chains.Links.chunk" }, { "depth": 2, "slug": "timing-of-values", "text": "Timing of values" }, { "depth": 3, "slug": "chainlinksdelay", "text": "Chain.Links.delay" }, { "depth": 3, "slug": "chainlinksdebounce", "text": "Chain.Links.debounce" }, { "depth": 2, "slug": "stopping-a-chain", "text": "Stopping a chain" }, { "depth": 3, "slug": "chainslinkstake", "text": "Chains.Links.take" }, { "depth": 3, "slug": "chainlinksduration", "text": "Chain.Links.duration" }], "source": "\n'Chains' are an ixfx way of working with iterable data. A chain is made up of _links_, each of which processes data in turn. A link is nothing more than a function which returns a generator. _Sources_ are things that produce data for links to process.\n\nChains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.\n\n# Creating chains\n\n## Chains.run\n\n`run()` is used when we have a source at the same time we're setting up the chain of processing.\n\nLets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.\n\n```js\n// Set up the chain\nconst xy = Chains.run(\n  // Start with a source: in this case, event data\n  Chains.From.event(window, `pointermove`),\n  // Transform takes data from the previous link/source\n  // and returns data for the next link.\n  // In this case, we just pluck out the x,y values\n  Chains.Links.transform(event => ({x:event.x,y:event.y}))\n);\n```\n\nThe return result of `run()` is a regular Javascript asynchronous generator, see below for how to use the data.\n\nA disadvantage of `run()` is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.\n\n## Chains.prepare\n\nIf you don't have a source ready, `prepare()` allows you to define the chain and call it with a source later.\n\n```js\n// Set up chain\nconst chain = Chains.prepare(\n Chains.Links.transform( v => Number.parseInt(v) ),\n Chains.Links.filter(v => v % 2 === 0)\n);\n\n// Use the chain with an array as a source\nconst ch = chain(Chains.From.array([1,2,3],100));\nfor (const value of ch) {\n  ...\n}\n```\n\nChains made with `prepare()` can be re-used with a different source:\n```js\nconst ch2 = chain(Chains.From.array([4,5,6],100));\n```\n\n## Chains.single\n\nChains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.\n\n```js\n// Create a chain that flattens values\nconst reduce = Chains.reduce(values => Math.max(...values));\n// Feed it a single input (an array), get a single output back:\nconst result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n```\n\n# Sources\n\n## Array\n\nItems from an array can be a source, reading them one at a time with a given interval.\n```js\nconst someArray= [1,2,3,4,5];\n// Read one item every 100ms\nconst c = Chains.From.array(someArray, 100);\n```\n\n## Events\n\nEvent data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.\n\n```js\nconst c = Chains.From.event(window, `pointermove`);\n```\n\nExample: Emits relative x,y coordinates\n```js\nconst xy = Chains.run(\n  Chains.From.event(window, `pointermove`),\n  Chains.Links.transform(event => ({\n    x:event.x/window.innerWidth,\n    y:event.y/window.innerHeight\n    }))\n);\n```\n\n## Timestamp\n\nGenerates the current time in milliseconds at a given interval.\n\n```js\n// Emits the time every second\nconst c = Chains.From.timestamp({ interval: 1000 });\n```\n\nBy default it runs forever, but you can use `loops` or `elapsed` options to limit the number of times it runs\n```js\n// Run 100 times\nconst c = Chains.From.timestamp({ interval: 1000, loops: 100 });\n// Run for one minute\nconst c = Chains.From.timestamp({ interval: 1000, elapsed: 60*1000 });\n```\n\n## Function\n\nRepeatedly calls a function, yielding its values.\n\n```js\n// Produces random values\nconst l = Chains.from.func(Math.random);\n```\n\nAn example:\n```js\nconst chain = Chains.chain(\n Chains.From.func(Math.random),\n // Take first 5 results\n Chains.cap(5)\n);\n```\n\n\n# Consuming data from chains\n\n## Iterating with for .. of\n\nThe return result of `run()` is a regular Javascript asynchronous generator. This means you can use a `for .. of` loop or step through it manually.\n\n```js\nfor await (const coord of xy) {\n  // Prints out the {x,y} value when a\n  // 'pointermove' happens.\n  console.log(coord);\n}\n// Execution does not continue\n```\n\nIn the above pattern, execution of code after the `for await` unless the chain ends. In this case, since the source is an event, it will never end.\n\nAn alternative means of access is using ixfx's `asCallback`, which, if you don't prefix it with `await`, continues execution.\n```js\nChains.asCallback(xy, coord => {\n  console.log(coord);\n});\n// Execution continues, even while\n// data gets printed\n```\n\nYou can also optionally provide a third parameter to be notified asynchronously when the chain is completed:\n```js\nChains.asCallback(chain, value => {\n  // do something with values\n}, () => {\n  // do something when 'chain' ends\n});\n```\n\n## Reading values\n\nThe `for..of` pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. `asValue` handles this, providing a function to read the latest value from the chain.\n\n```js\n// Set it up\nconst readChain = Chains.asValue(chain);\n...\n// Some point later, read the value\nconst currentValue = await readChain();\n```\n\nWhen initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.\n```js\nconst readChain = Chains.asValue(chain, {x:0.5,y:0.5});\n```\n\n## Accumulating\n\nAll data from a chain can be accumulated into an array:\n```js\nconst values = await Chains.asArray(chain);\n```\n\nIf the chain is infinite (never ends), be sure to provide some limits:\n```js\n// Stop after we have five items\nconst values = await asArray(chain, { limit: 5 });\n// Stop after 5 seconds has elapsed\nconst values = await asArray(chain, { elapsed: 5000 });\n```\n\n`asArray` returns a new array, and is meant to be used with `await` so execution only continues when the data is fully read.\n\nAlternatively you can add to an existing array over time using `addToArray`.\n```js\nconst data = []; // An array to add items to\nChains.addToArray(data, chain); // Add values from 'chain' into 'data'\n// Execution continues, with `data` growing as values are yielded from the chain\n```\n\n# Synchronising\n\nChains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.\n\n## Chains.combineLatestToArray\n\nMonitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or _undefined_ if not yet emitted.\n\n```js\n// Three sources\nconst sources = [ ch1, ch2, ch3 ];\n// 'combined' will be an async generator\nconst combined = Chains.combineLatestToArray(sources);\nfor await (const v of combined) {\n  // v will be an array [ value1, value2, value3 ],\n  // with indexes corresponding to `sources`\n}\n// Execution continues when one of the sources finishes.\n```\n\nThe tempo of this stream will be set by the fastest source stream. `syncToArray` in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.\n\nThere are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.\n\n## Chains.combineLatestToObject\n\nThis function is essentially the same as `combineLatestToArray()` however it returns an object of values rather than array.\n\n```js\nconst combined = Chains.combineLatestToObject({\n  a: ch1,\n  b: ch2,\n  c: ch3\n});\nfor await (const v of combined) {\n  // v will be an object: { a, b, c }\n  // where each value will be the value from the \n  // corresponding source\n}\n```\n\n## Chains.syncToArray\n\nWaits for all sources to produce a value, sending the combined results as an array. \n\nAfter sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast `combineToArray/combineToObject` have their pace set by the fastest source.\n\n```js\n// Three sources\nconst sources = [ ch1, ch2, ch3 ];\n// 'synced' will be an async generator\nconst synced = Chains.syncToArray(sources);\nfor await (const v of synced) {\n  // v will be an array of values, corresponding to\n  // the indexes of 'sources'\n}\n```\n\nAs soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.\n\n# Links\n\n_Links_ are the things you use when calling `Chains.run` or `Chains.prepare`. These are the little functions which work with data flowing through the chain, and pass it on to the next link.\n\nTypically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.\n\nHere's an overview of the in-built links\n\nMath functions\n* min, max, average, sum, tally\n\nFiltering\n* filter, drop\n* rank, rankArray\n  \nChanging the shape of values\n* chunk\n* reduce\n\nTiming of values\n* debounce, delay\n  \nStopping a chain\n* duration\n* take\n\n## Math\n### Chain.Links.min / max\n\nFor every input value, `min` and `max` will always emit the smallest or largest value seen so far.\n\n```js\nconst ch = Chains.run(\n  Chains.From.array([1,2,3,4]),\n  Chains.Links.min();\n)\n// Produces 1, 1, 1, 1\n```\n\nWorks with chains that output numbers or array of numbers. Non-numbers are skipped.\n\n### Chains.Links.average()\n\nTaking a numeric input (or array of numbers), `average` continuously returns a running average.\n\n```js\nChains.Links.average();\n```\n\nNon-numbers in the input stream are skipped.\n\n### Chains.Links.sum()\n\nTaking a numeric input (or array of numbers), `sum` returns the current total.\n\nNon-numbers in the input stream are skipped.\n\n### Chain.Links.tally\n\n`tally` throws away the input value and instead emits the total number of values produced.\n\nExample usage:\n```js\nconst ch = Chains.run(\n  Chains.From.timestamp({ interval: 100 }),\n  Chains.Links.tally()\n);\n\nfor await (const v of ch) {\n  // Produces: 1, 2, 3 ... every 100ms\n}\n```\n\n## Filtering\n### Chains.Links.filter\n\n`filter` only passes values for which the predicate function returns _true_.\n\n```js\n// Only allow even numbers to pass,\n// dropping all odd numbers\nChain.Links.filter(v => v % 2 === 0)\n```\n\n### Chain.Links.drop\n\n`drop` is the opposite of `filter`. Instead dropping values which the predicate function returns _true_\n\n```js\n// Drop all even numbers, \n// only allowing odd numbers to pass\nChain.Links.drop(v => v % 2 === 0)\n```\n\n### Chain.Links.rank / rankArray\n\n`rank` allows values to be scored using some function, emitting the 'best' value. `rankArray` is the same, but it works within a set of values.\n\nThe ranking function gets two parameters, `a` and `b`, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.\n\nEg, ranking objects based off a 'size' field:\n```js\nChains.Links.rank((a,b) => {\n  if (a.size > b.size) return `a`;\n  if (a.size < b.size) return `b`;\n  return `eq`\n})\n```\n\n`rank` has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.\n\nYou can change these, for example:\n```js\nChains.Links.rank(fn, { \n  emitEqualRanked: true, \n  emitRepeatHighest: true \n});\n```\n\n`rankArray` works instead with arrays as input values. By default, it behaves similarly to `rank`, but checks the contents of the array. If the `withinArrays` option is set to _true_, it will instead emit the highest value within each array, and not care about previous values.\n\n## Changing shape\n### Chains.Links.transform\n\nTakes an input value and returns an output value.\n\n```js\n// Eg. return a doubled version of the input value\nChains.Links.transform( v => v * 2 );\n```\n\nExample usage\n```js\nconst ch = Chains.run(Chains.From.array([1,2,3,4]),\n  Chains.Links.transform( v => v * 2)\n);\nfor await (const v of ch) {\n  // 2, 4, 6, 8\n}\n```\n\n### Chains.Links.reduce\n\n`reduce` assumes its input is an array, returning a single combined result using a function\n```js\n// Return the largest of the values\nChains.reduce(values => Math.max(...values));\n```\n\nExample usage\n```js\n// Create a chain that flattens values\nconst reduce = Chains.reduce(values => Math.max(...values));\n// Feed it a single input (an array), get a single output back:\nconst result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n```\n\n### Chains.Links.chunk\n\nGiven a stream of values, `chunk` breaks it up into arrays of a given length.\n\nFor example, given a chunk size of 3:\n```js\nChains.Links.chunk(3);\n```\n\nIf the stream of input values is: `1, 2, 3, 4, 5, 6` we would get chunks of `[ 1, 2, 3], [ 4, 5, 6 ]`\n\nBy default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to `chunk` to _false_ (ie `Chains.Link.chunk(3, false)`) to instead throw away the under-sized chunk.\n\n## Timing of values\n### Chain.Links.delay\n\n`delay` changes the timing of the stream, allowing you to add delay before or after a value is yielded.\n\n```js\nChains.Links.delay({ before:1000 });\nChains.Links.delay({ after:1000 });\n```\n\nExample usage\n```js\nconst ch = Chains.run(Chains.From.event(document, `click`),\n  Chains.Links.delay({ before: 1000 });\n);\nfor await (const v of ch) {\n  // Runs 1s after a click\n}\n```\n\n### Chain.Links.debounce\n\nEnsures a minimum time between values. Values produced too quickly are dropped.\n\n```js\nChain.Links.debounce(100); // 100ms\n```\n\nExample usage:\n```js\nconst chain = Chains.run(\n // Produce values every 10ms for 350ms\n Chains.From.timestamp({ interval: 10, elapsed: 350 }),\n // Only let a value through every 100ms\n Chains.Links.debounce(100)\n);\n```\n\n## Stopping a chain\n### Chains.Links.take\n\nThis link will return the input value, but will break the chain after a certain number of values flow through it.\n\n```js\n// Stop after 5 results\nChains.Links.take(5);\n```\n\nExample usage\n```js\n// Handle five click events and then finish\nconst ch = Chains.run(Chains.From.event(document, `click`),\n  Chains.Links.take(5)\n)\n```\n\n\n### Chain.Links.duration\n\n`duration` will close a chain after a given interval has elapsed.\n\n```js\nChains.Links.duration(100); // 100ms\n```\n\n\n\n\n\n\n\n", "html": `<p>'Chains' are an ixfx way of working with iterable data. A chain is made up of <em>links</em>, each of which processes data in turn. A link is nothing more than a function which returns a generator. <em>Sources</em> are things that produce data for links to process.</p>
<p>Chains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.</p>
<h1 id="creating-chains">Creating chains</h1>
<h2 id="chainsrun">Chains.run</h2>
<p><code is:raw>run()</code> is used when we have a source at the same time we're setting up the chain of processing.</p>
<p>Lets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up the chain</span>
<span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  <span class="token comment">// Start with a source: in this case, event data</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// Transform takes data from the previous link/source</span>
  <span class="token comment">// and returns data for the next link.</span>
  <span class="token comment">// In this case, we just pluck out the x,y values</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The return result of <code is:raw>run()</code> is a regular Javascript asynchronous generator, see below for how to use the data.</p>
<p>A disadvantage of <code is:raw>run()</code> is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.</p>
<h2 id="chainsprepare">Chains.prepare</h2>
<p>If you don't have a source ready, <code is:raw>prepare()</code> allows you to define the chain and call it with a source later.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up chain</span>
<span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use the chain with an array as a source</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span></code></pre>
<p>Chains made with <code is:raw>prepare()</code> can be re-used with a different source:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch2 <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="chainssingle">Chains.single</h2>
<p>Chains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre>
<h1 id="sources">Sources</h1>
<h2 id="array">Array</h2>
<p>Items from an array can be a source, reading them one at a time with a given interval.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Read one item every 100ms</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>someArray<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="events">Events</h2>
<p>Event data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example: Emits relative x,y coordinates</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token operator">/</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token operator">/</span>window<span class="token punctuation">.</span>innerHeight
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="timestamp">Timestamp</h2>
<p>Generates the current time in milliseconds at a given interval.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Emits the time every second</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>By default it runs forever, but you can use <code is:raw>loops</code> or <code is:raw>elapsed</code> options to limit the number of times it runs</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Run 100 times</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">loops</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Run for one minute</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="function">Function</h2>
<p>Repeatedly calls a function, yielding its values.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Produces random values</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> Chains<span class="token punctuation">.</span>from<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>An example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Take first 5 results</span>
 Chains<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h1 id="consuming-data-from-chains">Consuming data from chains</h1>
<h2 id="iterating-with-for--of">Iterating with for .. of</h2>
<p>The return result of <code is:raw>run()</code> is a regular Javascript asynchronous generator. This means you can use a <code is:raw>for .. of</code> loop or step through it manually.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> coord <span class="token keyword">of</span> xy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints out the {x,y} value when a</span>
  <span class="token comment">// 'pointermove' happens.</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution does not continue</span></code></pre>
<p>In the above pattern, execution of code after the <code is:raw>for await</code> unless the chain ends. In this case, since the source is an event, it will never end.</p>
<p>An alternative means of access is using ixfx's <code is:raw>asCallback</code>, which, if you don't prefix it with <code is:raw>await</code>, continues execution.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>xy<span class="token punctuation">,</span> <span class="token parameter">coord</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues, even while</span>
<span class="token comment">// data gets printed</span></code></pre>
<p>You can also optionally provide a third parameter to be notified asynchronously when the chain is completed:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with values</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something when 'chain' ends</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="reading-values">Reading values</h2>
<p>The <code is:raw>for..of</code> pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. <code is:raw>asValue</code> handles this, providing a function to read the latest value from the chain.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set it up</span>
<span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token comment">// Some point later, read the value</span>
<span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>When initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="accumulating">Accumulating</h2>
<p>All data from a chain can be accumulated into an array:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If the chain is infinite (never ends), be sure to provide some limits:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Stop after we have five items</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Stop after 5 seconds has elapsed</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>asArray</code> returns a new array, and is meant to be used with <code is:raw>await</code> so execution only continues when the data is fully read.</p>
<p>Alternatively you can add to an existing array over time using <code is:raw>addToArray</code>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// An array to add items to</span>
Chains<span class="token punctuation">.</span><span class="token function">addToArray</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add values from 'chain' into 'data'</span>
<span class="token comment">// Execution continues, with \`data\` growing as values are yielded from the chain</span></code></pre>
<h1 id="synchronising">Synchronising</h1>
<p>Chains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.</p>
<h2 id="chainscombinelatesttoarray">Chains.combineLatestToArray</h2>
<p>Monitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or <em>undefined</em> if not yet emitted.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'combined' will be an async generator</span>
<span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array [ value1, value2, value3 ],</span>
  <span class="token comment">// with indexes corresponding to \`sources\`</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution continues when one of the sources finishes.</span></code></pre>
<p>The tempo of this stream will be set by the fastest source stream. <code is:raw>syncToArray</code> in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.</p>
<p>There are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.</p>
<h2 id="chainscombinelatesttoobject">Chains.combineLatestToObject</h2>
<p>This function is essentially the same as <code is:raw>combineLatestToArray()</code> however it returns an object of values rather than array.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> ch1<span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> ch2<span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> ch3
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an object: { a, b, c }</span>
  <span class="token comment">// where each value will be the value from the </span>
  <span class="token comment">// corresponding source</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="chainssynctoarray">Chains.syncToArray</h2>
<p>Waits for all sources to produce a value, sending the combined results as an array.</p>
<p>After sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast <code is:raw>combineToArray/combineToObject</code> have their pace set by the fastest source.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'synced' will be an async generator</span>
<span class="token keyword">const</span> synced <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">syncToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> synced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array of values, corresponding to</span>
  <span class="token comment">// the indexes of 'sources'</span>
<span class="token punctuation">}</span></code></pre>
<p>As soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.</p>
<h1 id="links">Links</h1>
<p><em>Links</em> are the things you use when calling <code is:raw>Chains.run</code> or <code is:raw>Chains.prepare</code>. These are the little functions which work with data flowing through the chain, and pass it on to the next link.</p>
<p>Typically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.</p>
<p>Here's an overview of the in-built links</p>
<p>Math functions</p>
<ul>
<li>min, max, average, sum, tally</li>
</ul>
<p>Filtering</p>
<ul>
<li>filter, drop</li>
<li>rank, rankArray</li>
</ul>
<p>Changing the shape of values</p>
<ul>
<li>chunk</li>
<li>reduce</li>
</ul>
<p>Timing of values</p>
<ul>
<li>debounce, delay</li>
</ul>
<p>Stopping a chain</p>
<ul>
<li>duration</li>
<li>take</li>
</ul>
<h2 id="math">Math</h2>
<h3 id="chainlinksmin--max">Chain.Links.min / max</h3>
<p>For every input value, <code is:raw>min</code> and <code is:raw>max</code> will always emit the smallest or largest value seen so far.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span>
<span class="token comment">// Produces 1, 1, 1, 1</span></code></pre>
<p>Works with chains that output numbers or array of numbers. Non-numbers are skipped.</p>
<h3 id="chainslinksaverage">Chains.Links.average()</h3>
<p>Taking a numeric input (or array of numbers), <code is:raw>average</code> continuously returns a running average.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Non-numbers in the input stream are skipped.</p>
<h3 id="chainslinkssum">Chains.Links.sum()</h3>
<p>Taking a numeric input (or array of numbers), <code is:raw>sum</code> returns the current total.</p>
<p>Non-numbers in the input stream are skipped.</p>
<h3 id="chainlinkstally">Chain.Links.tally</h3>
<p><code is:raw>tally</code> throws away the input value and instead emits the total number of values produced.</p>
<p>Example usage:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Produces: 1, 2, 3 ... every 100ms</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="filtering">Filtering</h2>
<h3 id="chainslinksfilter">Chains.Links.filter</h3>
<p><code is:raw>filter</code> only passes values for which the predicate function returns <em>true</em>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Only allow even numbers to pass,</span>
<span class="token comment">// dropping all odd numbers</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksdrop">Chain.Links.drop</h3>
<p><code is:raw>drop</code> is the opposite of <code is:raw>filter</code>. Instead dropping values which the predicate function returns <em>true</em></p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Drop all even numbers, </span>
<span class="token comment">// only allowing odd numbers to pass</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksrank--rankarray">Chain.Links.rank / rankArray</h3>
<p><code is:raw>rank</code> allows values to be scored using some function, emitting the 'best' value. <code is:raw>rankArray</code> is the same, but it works within a set of values.</p>
<p>The ranking function gets two parameters, <code is:raw>a</code> and <code is:raw>b</code>, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.</p>
<p>Eg, ranking objects based off a 'size' field:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">></span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eq</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p><code is:raw>rank</code> has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.</p>
<p>You can change these, for example:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">emitEqualRanked</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">emitRepeatHighest</span><span class="token operator">:</span> <span class="token boolean">true</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>rankArray</code> works instead with arrays as input values. By default, it behaves similarly to <code is:raw>rank</code>, but checks the contents of the array. If the <code is:raw>withinArrays</code> option is set to <em>true</em>, it will instead emit the highest value within each array, and not care about previous values.</p>
<h2 id="changing-shape">Changing shape</h2>
<h3 id="chainslinkstransform">Chains.Links.transform</h3>
<p>Takes an input value and returns an output value.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Eg. return a doubled version of the input value</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2, 4, 6, 8</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="chainslinksreduce">Chains.Links.reduce</h3>
<p><code is:raw>reduce</code> assumes its input is an array, returning a single combined result using a function</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Return the largest of the values</span>
Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre>
<h3 id="chainslinkschunk">Chains.Links.chunk</h3>
<p>Given a stream of values, <code is:raw>chunk</code> breaks it up into arrays of a given length.</p>
<p>For example, given a chunk size of 3:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If the stream of input values is: <code is:raw>1, 2, 3, 4, 5, 6</code> we would get chunks of <code is:raw>[ 1, 2, 3], [ 4, 5, 6 ]</code></p>
<p>By default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to <code is:raw>chunk</code> to <em>false</em> (ie <code is:raw>Chains.Link.chunk(3, false)</code>) to instead throw away the under-sized chunk.</p>
<h2 id="timing-of-values">Timing of values</h2>
<h3 id="chainlinksdelay">Chain.Links.delay</h3>
<p><code is:raw>delay</code> changes the timing of the stream, allowing you to add delay before or after a value is yielded.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">after</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs 1s after a click</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="chainlinksdebounce">Chain.Links.debounce</h3>
<p>Ensures a minimum time between values. Values produced too quickly are dropped.</p>
<pre class="language-js"><code is:raw class="language-js">Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>
<p>Example usage:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
 <span class="token comment">// Produce values every 10ms for 350ms</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">350</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Only let a value through every 100ms</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="stopping-a-chain">Stopping a chain</h2>
<h3 id="chainslinkstake">Chains.Links.take</h3>
<p>This link will return the input value, but will break the chain after a certain number of values flow through it.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Stop after 5 results</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Handle five click events and then finish</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksduration">Chain.Links.duration</h3>
<p><code is:raw>duration</code> will close a chain after a given interval has elapsed.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>` };
const frontmatter = { "title": "Chains", "astro": { "headers": [{ "depth": 1, "slug": "creating-chains", "text": "Creating chains" }, { "depth": 2, "slug": "chainsrun", "text": "Chains.run" }, { "depth": 2, "slug": "chainsprepare", "text": "Chains.prepare" }, { "depth": 2, "slug": "chainssingle", "text": "Chains.single" }, { "depth": 1, "slug": "sources", "text": "Sources" }, { "depth": 2, "slug": "array", "text": "Array" }, { "depth": 2, "slug": "events", "text": "Events" }, { "depth": 2, "slug": "timestamp", "text": "Timestamp" }, { "depth": 2, "slug": "function", "text": "Function" }, { "depth": 1, "slug": "consuming-data-from-chains", "text": "Consuming data from chains" }, { "depth": 2, "slug": "iterating-with-for--of", "text": "Iterating with for .. of" }, { "depth": 2, "slug": "reading-values", "text": "Reading values" }, { "depth": 2, "slug": "accumulating", "text": "Accumulating" }, { "depth": 1, "slug": "synchronising", "text": "Synchronising" }, { "depth": 2, "slug": "chainscombinelatesttoarray", "text": "Chains.combineLatestToArray" }, { "depth": 2, "slug": "chainscombinelatesttoobject", "text": "Chains.combineLatestToObject" }, { "depth": 2, "slug": "chainssynctoarray", "text": "Chains.syncToArray" }, { "depth": 1, "slug": "links", "text": "Links" }, { "depth": 2, "slug": "math", "text": "Math" }, { "depth": 3, "slug": "chainlinksmin--max", "text": "Chain.Links.min / max" }, { "depth": 3, "slug": "chainslinksaverage", "text": "Chains.Links.average()" }, { "depth": 3, "slug": "chainslinkssum", "text": "Chains.Links.sum()" }, { "depth": 3, "slug": "chainlinkstally", "text": "Chain.Links.tally" }, { "depth": 2, "slug": "filtering", "text": "Filtering" }, { "depth": 3, "slug": "chainslinksfilter", "text": "Chains.Links.filter" }, { "depth": 3, "slug": "chainlinksdrop", "text": "Chain.Links.drop" }, { "depth": 3, "slug": "chainlinksrank--rankarray", "text": "Chain.Links.rank / rankArray" }, { "depth": 2, "slug": "changing-shape", "text": "Changing shape" }, { "depth": 3, "slug": "chainslinkstransform", "text": "Chains.Links.transform" }, { "depth": 3, "slug": "chainslinksreduce", "text": "Chains.Links.reduce" }, { "depth": 3, "slug": "chainslinkschunk", "text": "Chains.Links.chunk" }, { "depth": 2, "slug": "timing-of-values", "text": "Timing of values" }, { "depth": 3, "slug": "chainlinksdelay", "text": "Chain.Links.delay" }, { "depth": 3, "slug": "chainlinksdebounce", "text": "Chain.Links.debounce" }, { "depth": 2, "slug": "stopping-a-chain", "text": "Stopping a chain" }, { "depth": 3, "slug": "chainslinkstake", "text": "Chains.Links.take" }, { "depth": 3, "slug": "chainlinksduration", "text": "Chain.Links.duration" }], "source": "\n'Chains' are an ixfx way of working with iterable data. A chain is made up of _links_, each of which processes data in turn. A link is nothing more than a function which returns a generator. _Sources_ are things that produce data for links to process.\n\nChains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.\n\n# Creating chains\n\n## Chains.run\n\n`run()` is used when we have a source at the same time we're setting up the chain of processing.\n\nLets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.\n\n```js\n// Set up the chain\nconst xy = Chains.run(\n  // Start with a source: in this case, event data\n  Chains.From.event(window, `pointermove`),\n  // Transform takes data from the previous link/source\n  // and returns data for the next link.\n  // In this case, we just pluck out the x,y values\n  Chains.Links.transform(event => ({x:event.x,y:event.y}))\n);\n```\n\nThe return result of `run()` is a regular Javascript asynchronous generator, see below for how to use the data.\n\nA disadvantage of `run()` is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.\n\n## Chains.prepare\n\nIf you don't have a source ready, `prepare()` allows you to define the chain and call it with a source later.\n\n```js\n// Set up chain\nconst chain = Chains.prepare(\n Chains.Links.transform( v => Number.parseInt(v) ),\n Chains.Links.filter(v => v % 2 === 0)\n);\n\n// Use the chain with an array as a source\nconst ch = chain(Chains.From.array([1,2,3],100));\nfor (const value of ch) {\n  ...\n}\n```\n\nChains made with `prepare()` can be re-used with a different source:\n```js\nconst ch2 = chain(Chains.From.array([4,5,6],100));\n```\n\n## Chains.single\n\nChains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.\n\n```js\n// Create a chain that flattens values\nconst reduce = Chains.reduce(values => Math.max(...values));\n// Feed it a single input (an array), get a single output back:\nconst result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n```\n\n# Sources\n\n## Array\n\nItems from an array can be a source, reading them one at a time with a given interval.\n```js\nconst someArray= [1,2,3,4,5];\n// Read one item every 100ms\nconst c = Chains.From.array(someArray, 100);\n```\n\n## Events\n\nEvent data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.\n\n```js\nconst c = Chains.From.event(window, `pointermove`);\n```\n\nExample: Emits relative x,y coordinates\n```js\nconst xy = Chains.run(\n  Chains.From.event(window, `pointermove`),\n  Chains.Links.transform(event => ({\n    x:event.x/window.innerWidth,\n    y:event.y/window.innerHeight\n    }))\n);\n```\n\n## Timestamp\n\nGenerates the current time in milliseconds at a given interval.\n\n```js\n// Emits the time every second\nconst c = Chains.From.timestamp({ interval: 1000 });\n```\n\nBy default it runs forever, but you can use `loops` or `elapsed` options to limit the number of times it runs\n```js\n// Run 100 times\nconst c = Chains.From.timestamp({ interval: 1000, loops: 100 });\n// Run for one minute\nconst c = Chains.From.timestamp({ interval: 1000, elapsed: 60*1000 });\n```\n\n## Function\n\nRepeatedly calls a function, yielding its values.\n\n```js\n// Produces random values\nconst l = Chains.from.func(Math.random);\n```\n\nAn example:\n```js\nconst chain = Chains.chain(\n Chains.From.func(Math.random),\n // Take first 5 results\n Chains.cap(5)\n);\n```\n\n\n# Consuming data from chains\n\n## Iterating with for .. of\n\nThe return result of `run()` is a regular Javascript asynchronous generator. This means you can use a `for .. of` loop or step through it manually.\n\n```js\nfor await (const coord of xy) {\n  // Prints out the {x,y} value when a\n  // 'pointermove' happens.\n  console.log(coord);\n}\n// Execution does not continue\n```\n\nIn the above pattern, execution of code after the `for await` unless the chain ends. In this case, since the source is an event, it will never end.\n\nAn alternative means of access is using ixfx's `asCallback`, which, if you don't prefix it with `await`, continues execution.\n```js\nChains.asCallback(xy, coord => {\n  console.log(coord);\n});\n// Execution continues, even while\n// data gets printed\n```\n\nYou can also optionally provide a third parameter to be notified asynchronously when the chain is completed:\n```js\nChains.asCallback(chain, value => {\n  // do something with values\n}, () => {\n  // do something when 'chain' ends\n});\n```\n\n## Reading values\n\nThe `for..of` pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. `asValue` handles this, providing a function to read the latest value from the chain.\n\n```js\n// Set it up\nconst readChain = Chains.asValue(chain);\n...\n// Some point later, read the value\nconst currentValue = await readChain();\n```\n\nWhen initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.\n```js\nconst readChain = Chains.asValue(chain, {x:0.5,y:0.5});\n```\n\n## Accumulating\n\nAll data from a chain can be accumulated into an array:\n```js\nconst values = await Chains.asArray(chain);\n```\n\nIf the chain is infinite (never ends), be sure to provide some limits:\n```js\n// Stop after we have five items\nconst values = await asArray(chain, { limit: 5 });\n// Stop after 5 seconds has elapsed\nconst values = await asArray(chain, { elapsed: 5000 });\n```\n\n`asArray` returns a new array, and is meant to be used with `await` so execution only continues when the data is fully read.\n\nAlternatively you can add to an existing array over time using `addToArray`.\n```js\nconst data = []; // An array to add items to\nChains.addToArray(data, chain); // Add values from 'chain' into 'data'\n// Execution continues, with `data` growing as values are yielded from the chain\n```\n\n# Synchronising\n\nChains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.\n\n## Chains.combineLatestToArray\n\nMonitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or _undefined_ if not yet emitted.\n\n```js\n// Three sources\nconst sources = [ ch1, ch2, ch3 ];\n// 'combined' will be an async generator\nconst combined = Chains.combineLatestToArray(sources);\nfor await (const v of combined) {\n  // v will be an array [ value1, value2, value3 ],\n  // with indexes corresponding to `sources`\n}\n// Execution continues when one of the sources finishes.\n```\n\nThe tempo of this stream will be set by the fastest source stream. `syncToArray` in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.\n\nThere are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.\n\n## Chains.combineLatestToObject\n\nThis function is essentially the same as `combineLatestToArray()` however it returns an object of values rather than array.\n\n```js\nconst combined = Chains.combineLatestToObject({\n  a: ch1,\n  b: ch2,\n  c: ch3\n});\nfor await (const v of combined) {\n  // v will be an object: { a, b, c }\n  // where each value will be the value from the \n  // corresponding source\n}\n```\n\n## Chains.syncToArray\n\nWaits for all sources to produce a value, sending the combined results as an array. \n\nAfter sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast `combineToArray/combineToObject` have their pace set by the fastest source.\n\n```js\n// Three sources\nconst sources = [ ch1, ch2, ch3 ];\n// 'synced' will be an async generator\nconst synced = Chains.syncToArray(sources);\nfor await (const v of synced) {\n  // v will be an array of values, corresponding to\n  // the indexes of 'sources'\n}\n```\n\nAs soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.\n\n# Links\n\n_Links_ are the things you use when calling `Chains.run` or `Chains.prepare`. These are the little functions which work with data flowing through the chain, and pass it on to the next link.\n\nTypically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.\n\nHere's an overview of the in-built links\n\nMath functions\n* min, max, average, sum, tally\n\nFiltering\n* filter, drop\n* rank, rankArray\n  \nChanging the shape of values\n* chunk\n* reduce\n\nTiming of values\n* debounce, delay\n  \nStopping a chain\n* duration\n* take\n\n## Math\n### Chain.Links.min / max\n\nFor every input value, `min` and `max` will always emit the smallest or largest value seen so far.\n\n```js\nconst ch = Chains.run(\n  Chains.From.array([1,2,3,4]),\n  Chains.Links.min();\n)\n// Produces 1, 1, 1, 1\n```\n\nWorks with chains that output numbers or array of numbers. Non-numbers are skipped.\n\n### Chains.Links.average()\n\nTaking a numeric input (or array of numbers), `average` continuously returns a running average.\n\n```js\nChains.Links.average();\n```\n\nNon-numbers in the input stream are skipped.\n\n### Chains.Links.sum()\n\nTaking a numeric input (or array of numbers), `sum` returns the current total.\n\nNon-numbers in the input stream are skipped.\n\n### Chain.Links.tally\n\n`tally` throws away the input value and instead emits the total number of values produced.\n\nExample usage:\n```js\nconst ch = Chains.run(\n  Chains.From.timestamp({ interval: 100 }),\n  Chains.Links.tally()\n);\n\nfor await (const v of ch) {\n  // Produces: 1, 2, 3 ... every 100ms\n}\n```\n\n## Filtering\n### Chains.Links.filter\n\n`filter` only passes values for which the predicate function returns _true_.\n\n```js\n// Only allow even numbers to pass,\n// dropping all odd numbers\nChain.Links.filter(v => v % 2 === 0)\n```\n\n### Chain.Links.drop\n\n`drop` is the opposite of `filter`. Instead dropping values which the predicate function returns _true_\n\n```js\n// Drop all even numbers, \n// only allowing odd numbers to pass\nChain.Links.drop(v => v % 2 === 0)\n```\n\n### Chain.Links.rank / rankArray\n\n`rank` allows values to be scored using some function, emitting the 'best' value. `rankArray` is the same, but it works within a set of values.\n\nThe ranking function gets two parameters, `a` and `b`, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.\n\nEg, ranking objects based off a 'size' field:\n```js\nChains.Links.rank((a,b) => {\n  if (a.size > b.size) return `a`;\n  if (a.size < b.size) return `b`;\n  return `eq`\n})\n```\n\n`rank` has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.\n\nYou can change these, for example:\n```js\nChains.Links.rank(fn, { \n  emitEqualRanked: true, \n  emitRepeatHighest: true \n});\n```\n\n`rankArray` works instead with arrays as input values. By default, it behaves similarly to `rank`, but checks the contents of the array. If the `withinArrays` option is set to _true_, it will instead emit the highest value within each array, and not care about previous values.\n\n## Changing shape\n### Chains.Links.transform\n\nTakes an input value and returns an output value.\n\n```js\n// Eg. return a doubled version of the input value\nChains.Links.transform( v => v * 2 );\n```\n\nExample usage\n```js\nconst ch = Chains.run(Chains.From.array([1,2,3,4]),\n  Chains.Links.transform( v => v * 2)\n);\nfor await (const v of ch) {\n  // 2, 4, 6, 8\n}\n```\n\n### Chains.Links.reduce\n\n`reduce` assumes its input is an array, returning a single combined result using a function\n```js\n// Return the largest of the values\nChains.reduce(values => Math.max(...values));\n```\n\nExample usage\n```js\n// Create a chain that flattens values\nconst reduce = Chains.reduce(values => Math.max(...values));\n// Feed it a single input (an array), get a single output back:\nconst result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n```\n\n### Chains.Links.chunk\n\nGiven a stream of values, `chunk` breaks it up into arrays of a given length.\n\nFor example, given a chunk size of 3:\n```js\nChains.Links.chunk(3);\n```\n\nIf the stream of input values is: `1, 2, 3, 4, 5, 6` we would get chunks of `[ 1, 2, 3], [ 4, 5, 6 ]`\n\nBy default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to `chunk` to _false_ (ie `Chains.Link.chunk(3, false)`) to instead throw away the under-sized chunk.\n\n## Timing of values\n### Chain.Links.delay\n\n`delay` changes the timing of the stream, allowing you to add delay before or after a value is yielded.\n\n```js\nChains.Links.delay({ before:1000 });\nChains.Links.delay({ after:1000 });\n```\n\nExample usage\n```js\nconst ch = Chains.run(Chains.From.event(document, `click`),\n  Chains.Links.delay({ before: 1000 });\n);\nfor await (const v of ch) {\n  // Runs 1s after a click\n}\n```\n\n### Chain.Links.debounce\n\nEnsures a minimum time between values. Values produced too quickly are dropped.\n\n```js\nChain.Links.debounce(100); // 100ms\n```\n\nExample usage:\n```js\nconst chain = Chains.run(\n // Produce values every 10ms for 350ms\n Chains.From.timestamp({ interval: 10, elapsed: 350 }),\n // Only let a value through every 100ms\n Chains.Links.debounce(100)\n);\n```\n\n## Stopping a chain\n### Chains.Links.take\n\nThis link will return the input value, but will break the chain after a certain number of values flow through it.\n\n```js\n// Stop after 5 results\nChains.Links.take(5);\n```\n\nExample usage\n```js\n// Handle five click events and then finish\nconst ch = Chains.run(Chains.From.event(document, `click`),\n  Chains.Links.take(5)\n)\n```\n\n\n### Chain.Links.duration\n\n`duration` will close a chain after a given interval has elapsed.\n\n```js\nChains.Links.duration(100); // 100ms\n```\n\n\n\n\n\n\n\n", "html": `<p>'Chains' are an ixfx way of working with iterable data. A chain is made up of <em>links</em>, each of which processes data in turn. A link is nothing more than a function which returns a generator. <em>Sources</em> are things that produce data for links to process.</p>
<p>Chains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.</p>
<h1 id="creating-chains">Creating chains</h1>
<h2 id="chainsrun">Chains.run</h2>
<p><code is:raw>run()</code> is used when we have a source at the same time we're setting up the chain of processing.</p>
<p>Lets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up the chain</span>
<span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  <span class="token comment">// Start with a source: in this case, event data</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// Transform takes data from the previous link/source</span>
  <span class="token comment">// and returns data for the next link.</span>
  <span class="token comment">// In this case, we just pluck out the x,y values</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The return result of <code is:raw>run()</code> is a regular Javascript asynchronous generator, see below for how to use the data.</p>
<p>A disadvantage of <code is:raw>run()</code> is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.</p>
<h2 id="chainsprepare">Chains.prepare</h2>
<p>If you don't have a source ready, <code is:raw>prepare()</code> allows you to define the chain and call it with a source later.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up chain</span>
<span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use the chain with an array as a source</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span></code></pre>
<p>Chains made with <code is:raw>prepare()</code> can be re-used with a different source:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch2 <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="chainssingle">Chains.single</h2>
<p>Chains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre>
<h1 id="sources">Sources</h1>
<h2 id="array">Array</h2>
<p>Items from an array can be a source, reading them one at a time with a given interval.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Read one item every 100ms</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>someArray<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="events">Events</h2>
<p>Event data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example: Emits relative x,y coordinates</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token operator">/</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token operator">/</span>window<span class="token punctuation">.</span>innerHeight
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="timestamp">Timestamp</h2>
<p>Generates the current time in milliseconds at a given interval.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Emits the time every second</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>By default it runs forever, but you can use <code is:raw>loops</code> or <code is:raw>elapsed</code> options to limit the number of times it runs</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Run 100 times</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">loops</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Run for one minute</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="function">Function</h2>
<p>Repeatedly calls a function, yielding its values.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Produces random values</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> Chains<span class="token punctuation">.</span>from<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>An example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Take first 5 results</span>
 Chains<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h1 id="consuming-data-from-chains">Consuming data from chains</h1>
<h2 id="iterating-with-for--of">Iterating with for .. of</h2>
<p>The return result of <code is:raw>run()</code> is a regular Javascript asynchronous generator. This means you can use a <code is:raw>for .. of</code> loop or step through it manually.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> coord <span class="token keyword">of</span> xy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints out the {x,y} value when a</span>
  <span class="token comment">// 'pointermove' happens.</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution does not continue</span></code></pre>
<p>In the above pattern, execution of code after the <code is:raw>for await</code> unless the chain ends. In this case, since the source is an event, it will never end.</p>
<p>An alternative means of access is using ixfx's <code is:raw>asCallback</code>, which, if you don't prefix it with <code is:raw>await</code>, continues execution.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>xy<span class="token punctuation">,</span> <span class="token parameter">coord</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues, even while</span>
<span class="token comment">// data gets printed</span></code></pre>
<p>You can also optionally provide a third parameter to be notified asynchronously when the chain is completed:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with values</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something when 'chain' ends</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="reading-values">Reading values</h2>
<p>The <code is:raw>for..of</code> pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. <code is:raw>asValue</code> handles this, providing a function to read the latest value from the chain.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set it up</span>
<span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token comment">// Some point later, read the value</span>
<span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>When initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="accumulating">Accumulating</h2>
<p>All data from a chain can be accumulated into an array:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If the chain is infinite (never ends), be sure to provide some limits:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Stop after we have five items</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Stop after 5 seconds has elapsed</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>asArray</code> returns a new array, and is meant to be used with <code is:raw>await</code> so execution only continues when the data is fully read.</p>
<p>Alternatively you can add to an existing array over time using <code is:raw>addToArray</code>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// An array to add items to</span>
Chains<span class="token punctuation">.</span><span class="token function">addToArray</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add values from 'chain' into 'data'</span>
<span class="token comment">// Execution continues, with \`data\` growing as values are yielded from the chain</span></code></pre>
<h1 id="synchronising">Synchronising</h1>
<p>Chains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.</p>
<h2 id="chainscombinelatesttoarray">Chains.combineLatestToArray</h2>
<p>Monitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or <em>undefined</em> if not yet emitted.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'combined' will be an async generator</span>
<span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array [ value1, value2, value3 ],</span>
  <span class="token comment">// with indexes corresponding to \`sources\`</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution continues when one of the sources finishes.</span></code></pre>
<p>The tempo of this stream will be set by the fastest source stream. <code is:raw>syncToArray</code> in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.</p>
<p>There are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.</p>
<h2 id="chainscombinelatesttoobject">Chains.combineLatestToObject</h2>
<p>This function is essentially the same as <code is:raw>combineLatestToArray()</code> however it returns an object of values rather than array.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> ch1<span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> ch2<span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> ch3
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an object: { a, b, c }</span>
  <span class="token comment">// where each value will be the value from the </span>
  <span class="token comment">// corresponding source</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="chainssynctoarray">Chains.syncToArray</h2>
<p>Waits for all sources to produce a value, sending the combined results as an array.</p>
<p>After sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast <code is:raw>combineToArray/combineToObject</code> have their pace set by the fastest source.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'synced' will be an async generator</span>
<span class="token keyword">const</span> synced <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">syncToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> synced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array of values, corresponding to</span>
  <span class="token comment">// the indexes of 'sources'</span>
<span class="token punctuation">}</span></code></pre>
<p>As soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.</p>
<h1 id="links">Links</h1>
<p><em>Links</em> are the things you use when calling <code is:raw>Chains.run</code> or <code is:raw>Chains.prepare</code>. These are the little functions which work with data flowing through the chain, and pass it on to the next link.</p>
<p>Typically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.</p>
<p>Here's an overview of the in-built links</p>
<p>Math functions</p>
<ul>
<li>min, max, average, sum, tally</li>
</ul>
<p>Filtering</p>
<ul>
<li>filter, drop</li>
<li>rank, rankArray</li>
</ul>
<p>Changing the shape of values</p>
<ul>
<li>chunk</li>
<li>reduce</li>
</ul>
<p>Timing of values</p>
<ul>
<li>debounce, delay</li>
</ul>
<p>Stopping a chain</p>
<ul>
<li>duration</li>
<li>take</li>
</ul>
<h2 id="math">Math</h2>
<h3 id="chainlinksmin--max">Chain.Links.min / max</h3>
<p>For every input value, <code is:raw>min</code> and <code is:raw>max</code> will always emit the smallest or largest value seen so far.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span>
<span class="token comment">// Produces 1, 1, 1, 1</span></code></pre>
<p>Works with chains that output numbers or array of numbers. Non-numbers are skipped.</p>
<h3 id="chainslinksaverage">Chains.Links.average()</h3>
<p>Taking a numeric input (or array of numbers), <code is:raw>average</code> continuously returns a running average.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Non-numbers in the input stream are skipped.</p>
<h3 id="chainslinkssum">Chains.Links.sum()</h3>
<p>Taking a numeric input (or array of numbers), <code is:raw>sum</code> returns the current total.</p>
<p>Non-numbers in the input stream are skipped.</p>
<h3 id="chainlinkstally">Chain.Links.tally</h3>
<p><code is:raw>tally</code> throws away the input value and instead emits the total number of values produced.</p>
<p>Example usage:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Produces: 1, 2, 3 ... every 100ms</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="filtering">Filtering</h2>
<h3 id="chainslinksfilter">Chains.Links.filter</h3>
<p><code is:raw>filter</code> only passes values for which the predicate function returns <em>true</em>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Only allow even numbers to pass,</span>
<span class="token comment">// dropping all odd numbers</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksdrop">Chain.Links.drop</h3>
<p><code is:raw>drop</code> is the opposite of <code is:raw>filter</code>. Instead dropping values which the predicate function returns <em>true</em></p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Drop all even numbers, </span>
<span class="token comment">// only allowing odd numbers to pass</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksrank--rankarray">Chain.Links.rank / rankArray</h3>
<p><code is:raw>rank</code> allows values to be scored using some function, emitting the 'best' value. <code is:raw>rankArray</code> is the same, but it works within a set of values.</p>
<p>The ranking function gets two parameters, <code is:raw>a</code> and <code is:raw>b</code>, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.</p>
<p>Eg, ranking objects based off a 'size' field:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">></span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eq</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p><code is:raw>rank</code> has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.</p>
<p>You can change these, for example:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">emitEqualRanked</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">emitRepeatHighest</span><span class="token operator">:</span> <span class="token boolean">true</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>rankArray</code> works instead with arrays as input values. By default, it behaves similarly to <code is:raw>rank</code>, but checks the contents of the array. If the <code is:raw>withinArrays</code> option is set to <em>true</em>, it will instead emit the highest value within each array, and not care about previous values.</p>
<h2 id="changing-shape">Changing shape</h2>
<h3 id="chainslinkstransform">Chains.Links.transform</h3>
<p>Takes an input value and returns an output value.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Eg. return a doubled version of the input value</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2, 4, 6, 8</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="chainslinksreduce">Chains.Links.reduce</h3>
<p><code is:raw>reduce</code> assumes its input is an array, returning a single combined result using a function</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Return the largest of the values</span>
Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre>
<h3 id="chainslinkschunk">Chains.Links.chunk</h3>
<p>Given a stream of values, <code is:raw>chunk</code> breaks it up into arrays of a given length.</p>
<p>For example, given a chunk size of 3:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If the stream of input values is: <code is:raw>1, 2, 3, 4, 5, 6</code> we would get chunks of <code is:raw>[ 1, 2, 3], [ 4, 5, 6 ]</code></p>
<p>By default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to <code is:raw>chunk</code> to <em>false</em> (ie <code is:raw>Chains.Link.chunk(3, false)</code>) to instead throw away the under-sized chunk.</p>
<h2 id="timing-of-values">Timing of values</h2>
<h3 id="chainlinksdelay">Chain.Links.delay</h3>
<p><code is:raw>delay</code> changes the timing of the stream, allowing you to add delay before or after a value is yielded.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">after</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs 1s after a click</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="chainlinksdebounce">Chain.Links.debounce</h3>
<p>Ensures a minimum time between values. Values produced too quickly are dropped.</p>
<pre class="language-js"><code is:raw class="language-js">Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>
<p>Example usage:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
 <span class="token comment">// Produce values every 10ms for 350ms</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">350</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Only let a value through every 100ms</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="stopping-a-chain">Stopping a chain</h2>
<h3 id="chainslinkstake">Chains.Links.take</h3>
<p>This link will return the input value, but will break the chain after a certain number of values flow through it.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Stop after 5 results</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Handle five click events and then finish</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksduration">Chain.Links.duration</h3>
<p><code is:raw>duration</code> will close a chain after a given interval has elapsed.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>` } };
const $$metadata = createMetadata("/src/pages/data/chains.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/data/chains.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Chains = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Chains;
  const $$content = { "title": "Chains", "astro": { "headers": [{ "depth": 1, "slug": "creating-chains", "text": "Creating chains" }, { "depth": 2, "slug": "chainsrun", "text": "Chains.run" }, { "depth": 2, "slug": "chainsprepare", "text": "Chains.prepare" }, { "depth": 2, "slug": "chainssingle", "text": "Chains.single" }, { "depth": 1, "slug": "sources", "text": "Sources" }, { "depth": 2, "slug": "array", "text": "Array" }, { "depth": 2, "slug": "events", "text": "Events" }, { "depth": 2, "slug": "timestamp", "text": "Timestamp" }, { "depth": 2, "slug": "function", "text": "Function" }, { "depth": 1, "slug": "consuming-data-from-chains", "text": "Consuming data from chains" }, { "depth": 2, "slug": "iterating-with-for--of", "text": "Iterating with for .. of" }, { "depth": 2, "slug": "reading-values", "text": "Reading values" }, { "depth": 2, "slug": "accumulating", "text": "Accumulating" }, { "depth": 1, "slug": "synchronising", "text": "Synchronising" }, { "depth": 2, "slug": "chainscombinelatesttoarray", "text": "Chains.combineLatestToArray" }, { "depth": 2, "slug": "chainscombinelatesttoobject", "text": "Chains.combineLatestToObject" }, { "depth": 2, "slug": "chainssynctoarray", "text": "Chains.syncToArray" }, { "depth": 1, "slug": "links", "text": "Links" }, { "depth": 2, "slug": "math", "text": "Math" }, { "depth": 3, "slug": "chainlinksmin--max", "text": "Chain.Links.min / max" }, { "depth": 3, "slug": "chainslinksaverage", "text": "Chains.Links.average()" }, { "depth": 3, "slug": "chainslinkssum", "text": "Chains.Links.sum()" }, { "depth": 3, "slug": "chainlinkstally", "text": "Chain.Links.tally" }, { "depth": 2, "slug": "filtering", "text": "Filtering" }, { "depth": 3, "slug": "chainslinksfilter", "text": "Chains.Links.filter" }, { "depth": 3, "slug": "chainlinksdrop", "text": "Chain.Links.drop" }, { "depth": 3, "slug": "chainlinksrank--rankarray", "text": "Chain.Links.rank / rankArray" }, { "depth": 2, "slug": "changing-shape", "text": "Changing shape" }, { "depth": 3, "slug": "chainslinkstransform", "text": "Chains.Links.transform" }, { "depth": 3, "slug": "chainslinksreduce", "text": "Chains.Links.reduce" }, { "depth": 3, "slug": "chainslinkschunk", "text": "Chains.Links.chunk" }, { "depth": 2, "slug": "timing-of-values", "text": "Timing of values" }, { "depth": 3, "slug": "chainlinksdelay", "text": "Chain.Links.delay" }, { "depth": 3, "slug": "chainlinksdebounce", "text": "Chain.Links.debounce" }, { "depth": 2, "slug": "stopping-a-chain", "text": "Stopping a chain" }, { "depth": 3, "slug": "chainslinkstake", "text": "Chains.Links.take" }, { "depth": 3, "slug": "chainlinksduration", "text": "Chain.Links.duration" }], "source": "\n'Chains' are an ixfx way of working with iterable data. A chain is made up of _links_, each of which processes data in turn. A link is nothing more than a function which returns a generator. _Sources_ are things that produce data for links to process.\n\nChains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.\n\n# Creating chains\n\n## Chains.run\n\n`run()` is used when we have a source at the same time we're setting up the chain of processing.\n\nLets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.\n\n```js\n// Set up the chain\nconst xy = Chains.run(\n  // Start with a source: in this case, event data\n  Chains.From.event(window, `pointermove`),\n  // Transform takes data from the previous link/source\n  // and returns data for the next link.\n  // In this case, we just pluck out the x,y values\n  Chains.Links.transform(event => ({x:event.x,y:event.y}))\n);\n```\n\nThe return result of `run()` is a regular Javascript asynchronous generator, see below for how to use the data.\n\nA disadvantage of `run()` is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.\n\n## Chains.prepare\n\nIf you don't have a source ready, `prepare()` allows you to define the chain and call it with a source later.\n\n```js\n// Set up chain\nconst chain = Chains.prepare(\n Chains.Links.transform( v => Number.parseInt(v) ),\n Chains.Links.filter(v => v % 2 === 0)\n);\n\n// Use the chain with an array as a source\nconst ch = chain(Chains.From.array([1,2,3],100));\nfor (const value of ch) {\n  ...\n}\n```\n\nChains made with `prepare()` can be re-used with a different source:\n```js\nconst ch2 = chain(Chains.From.array([4,5,6],100));\n```\n\n## Chains.single\n\nChains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.\n\n```js\n// Create a chain that flattens values\nconst reduce = Chains.reduce(values => Math.max(...values));\n// Feed it a single input (an array), get a single output back:\nconst result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n```\n\n# Sources\n\n## Array\n\nItems from an array can be a source, reading them one at a time with a given interval.\n```js\nconst someArray= [1,2,3,4,5];\n// Read one item every 100ms\nconst c = Chains.From.array(someArray, 100);\n```\n\n## Events\n\nEvent data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.\n\n```js\nconst c = Chains.From.event(window, `pointermove`);\n```\n\nExample: Emits relative x,y coordinates\n```js\nconst xy = Chains.run(\n  Chains.From.event(window, `pointermove`),\n  Chains.Links.transform(event => ({\n    x:event.x/window.innerWidth,\n    y:event.y/window.innerHeight\n    }))\n);\n```\n\n## Timestamp\n\nGenerates the current time in milliseconds at a given interval.\n\n```js\n// Emits the time every second\nconst c = Chains.From.timestamp({ interval: 1000 });\n```\n\nBy default it runs forever, but you can use `loops` or `elapsed` options to limit the number of times it runs\n```js\n// Run 100 times\nconst c = Chains.From.timestamp({ interval: 1000, loops: 100 });\n// Run for one minute\nconst c = Chains.From.timestamp({ interval: 1000, elapsed: 60*1000 });\n```\n\n## Function\n\nRepeatedly calls a function, yielding its values.\n\n```js\n// Produces random values\nconst l = Chains.from.func(Math.random);\n```\n\nAn example:\n```js\nconst chain = Chains.chain(\n Chains.From.func(Math.random),\n // Take first 5 results\n Chains.cap(5)\n);\n```\n\n\n# Consuming data from chains\n\n## Iterating with for .. of\n\nThe return result of `run()` is a regular Javascript asynchronous generator. This means you can use a `for .. of` loop or step through it manually.\n\n```js\nfor await (const coord of xy) {\n  // Prints out the {x,y} value when a\n  // 'pointermove' happens.\n  console.log(coord);\n}\n// Execution does not continue\n```\n\nIn the above pattern, execution of code after the `for await` unless the chain ends. In this case, since the source is an event, it will never end.\n\nAn alternative means of access is using ixfx's `asCallback`, which, if you don't prefix it with `await`, continues execution.\n```js\nChains.asCallback(xy, coord => {\n  console.log(coord);\n});\n// Execution continues, even while\n// data gets printed\n```\n\nYou can also optionally provide a third parameter to be notified asynchronously when the chain is completed:\n```js\nChains.asCallback(chain, value => {\n  // do something with values\n}, () => {\n  // do something when 'chain' ends\n});\n```\n\n## Reading values\n\nThe `for..of` pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. `asValue` handles this, providing a function to read the latest value from the chain.\n\n```js\n// Set it up\nconst readChain = Chains.asValue(chain);\n...\n// Some point later, read the value\nconst currentValue = await readChain();\n```\n\nWhen initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.\n```js\nconst readChain = Chains.asValue(chain, {x:0.5,y:0.5});\n```\n\n## Accumulating\n\nAll data from a chain can be accumulated into an array:\n```js\nconst values = await Chains.asArray(chain);\n```\n\nIf the chain is infinite (never ends), be sure to provide some limits:\n```js\n// Stop after we have five items\nconst values = await asArray(chain, { limit: 5 });\n// Stop after 5 seconds has elapsed\nconst values = await asArray(chain, { elapsed: 5000 });\n```\n\n`asArray` returns a new array, and is meant to be used with `await` so execution only continues when the data is fully read.\n\nAlternatively you can add to an existing array over time using `addToArray`.\n```js\nconst data = []; // An array to add items to\nChains.addToArray(data, chain); // Add values from 'chain' into 'data'\n// Execution continues, with `data` growing as values are yielded from the chain\n```\n\n# Synchronising\n\nChains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.\n\n## Chains.combineLatestToArray\n\nMonitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or _undefined_ if not yet emitted.\n\n```js\n// Three sources\nconst sources = [ ch1, ch2, ch3 ];\n// 'combined' will be an async generator\nconst combined = Chains.combineLatestToArray(sources);\nfor await (const v of combined) {\n  // v will be an array [ value1, value2, value3 ],\n  // with indexes corresponding to `sources`\n}\n// Execution continues when one of the sources finishes.\n```\n\nThe tempo of this stream will be set by the fastest source stream. `syncToArray` in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.\n\nThere are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.\n\n## Chains.combineLatestToObject\n\nThis function is essentially the same as `combineLatestToArray()` however it returns an object of values rather than array.\n\n```js\nconst combined = Chains.combineLatestToObject({\n  a: ch1,\n  b: ch2,\n  c: ch3\n});\nfor await (const v of combined) {\n  // v will be an object: { a, b, c }\n  // where each value will be the value from the \n  // corresponding source\n}\n```\n\n## Chains.syncToArray\n\nWaits for all sources to produce a value, sending the combined results as an array. \n\nAfter sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast `combineToArray/combineToObject` have their pace set by the fastest source.\n\n```js\n// Three sources\nconst sources = [ ch1, ch2, ch3 ];\n// 'synced' will be an async generator\nconst synced = Chains.syncToArray(sources);\nfor await (const v of synced) {\n  // v will be an array of values, corresponding to\n  // the indexes of 'sources'\n}\n```\n\nAs soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.\n\n# Links\n\n_Links_ are the things you use when calling `Chains.run` or `Chains.prepare`. These are the little functions which work with data flowing through the chain, and pass it on to the next link.\n\nTypically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.\n\nHere's an overview of the in-built links\n\nMath functions\n* min, max, average, sum, tally\n\nFiltering\n* filter, drop\n* rank, rankArray\n  \nChanging the shape of values\n* chunk\n* reduce\n\nTiming of values\n* debounce, delay\n  \nStopping a chain\n* duration\n* take\n\n## Math\n### Chain.Links.min / max\n\nFor every input value, `min` and `max` will always emit the smallest or largest value seen so far.\n\n```js\nconst ch = Chains.run(\n  Chains.From.array([1,2,3,4]),\n  Chains.Links.min();\n)\n// Produces 1, 1, 1, 1\n```\n\nWorks with chains that output numbers or array of numbers. Non-numbers are skipped.\n\n### Chains.Links.average()\n\nTaking a numeric input (or array of numbers), `average` continuously returns a running average.\n\n```js\nChains.Links.average();\n```\n\nNon-numbers in the input stream are skipped.\n\n### Chains.Links.sum()\n\nTaking a numeric input (or array of numbers), `sum` returns the current total.\n\nNon-numbers in the input stream are skipped.\n\n### Chain.Links.tally\n\n`tally` throws away the input value and instead emits the total number of values produced.\n\nExample usage:\n```js\nconst ch = Chains.run(\n  Chains.From.timestamp({ interval: 100 }),\n  Chains.Links.tally()\n);\n\nfor await (const v of ch) {\n  // Produces: 1, 2, 3 ... every 100ms\n}\n```\n\n## Filtering\n### Chains.Links.filter\n\n`filter` only passes values for which the predicate function returns _true_.\n\n```js\n// Only allow even numbers to pass,\n// dropping all odd numbers\nChain.Links.filter(v => v % 2 === 0)\n```\n\n### Chain.Links.drop\n\n`drop` is the opposite of `filter`. Instead dropping values which the predicate function returns _true_\n\n```js\n// Drop all even numbers, \n// only allowing odd numbers to pass\nChain.Links.drop(v => v % 2 === 0)\n```\n\n### Chain.Links.rank / rankArray\n\n`rank` allows values to be scored using some function, emitting the 'best' value. `rankArray` is the same, but it works within a set of values.\n\nThe ranking function gets two parameters, `a` and `b`, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.\n\nEg, ranking objects based off a 'size' field:\n```js\nChains.Links.rank((a,b) => {\n  if (a.size > b.size) return `a`;\n  if (a.size < b.size) return `b`;\n  return `eq`\n})\n```\n\n`rank` has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.\n\nYou can change these, for example:\n```js\nChains.Links.rank(fn, { \n  emitEqualRanked: true, \n  emitRepeatHighest: true \n});\n```\n\n`rankArray` works instead with arrays as input values. By default, it behaves similarly to `rank`, but checks the contents of the array. If the `withinArrays` option is set to _true_, it will instead emit the highest value within each array, and not care about previous values.\n\n## Changing shape\n### Chains.Links.transform\n\nTakes an input value and returns an output value.\n\n```js\n// Eg. return a doubled version of the input value\nChains.Links.transform( v => v * 2 );\n```\n\nExample usage\n```js\nconst ch = Chains.run(Chains.From.array([1,2,3,4]),\n  Chains.Links.transform( v => v * 2)\n);\nfor await (const v of ch) {\n  // 2, 4, 6, 8\n}\n```\n\n### Chains.Links.reduce\n\n`reduce` assumes its input is an array, returning a single combined result using a function\n```js\n// Return the largest of the values\nChains.reduce(values => Math.max(...values));\n```\n\nExample usage\n```js\n// Create a chain that flattens values\nconst reduce = Chains.reduce(values => Math.max(...values));\n// Feed it a single input (an array), get a single output back:\nconst result = await Chains.single(reduce, [ 1, 2, 3]); // 3\n```\n\n### Chains.Links.chunk\n\nGiven a stream of values, `chunk` breaks it up into arrays of a given length.\n\nFor example, given a chunk size of 3:\n```js\nChains.Links.chunk(3);\n```\n\nIf the stream of input values is: `1, 2, 3, 4, 5, 6` we would get chunks of `[ 1, 2, 3], [ 4, 5, 6 ]`\n\nBy default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to `chunk` to _false_ (ie `Chains.Link.chunk(3, false)`) to instead throw away the under-sized chunk.\n\n## Timing of values\n### Chain.Links.delay\n\n`delay` changes the timing of the stream, allowing you to add delay before or after a value is yielded.\n\n```js\nChains.Links.delay({ before:1000 });\nChains.Links.delay({ after:1000 });\n```\n\nExample usage\n```js\nconst ch = Chains.run(Chains.From.event(document, `click`),\n  Chains.Links.delay({ before: 1000 });\n);\nfor await (const v of ch) {\n  // Runs 1s after a click\n}\n```\n\n### Chain.Links.debounce\n\nEnsures a minimum time between values. Values produced too quickly are dropped.\n\n```js\nChain.Links.debounce(100); // 100ms\n```\n\nExample usage:\n```js\nconst chain = Chains.run(\n // Produce values every 10ms for 350ms\n Chains.From.timestamp({ interval: 10, elapsed: 350 }),\n // Only let a value through every 100ms\n Chains.Links.debounce(100)\n);\n```\n\n## Stopping a chain\n### Chains.Links.take\n\nThis link will return the input value, but will break the chain after a certain number of values flow through it.\n\n```js\n// Stop after 5 results\nChains.Links.take(5);\n```\n\nExample usage\n```js\n// Handle five click events and then finish\nconst ch = Chains.run(Chains.From.event(document, `click`),\n  Chains.Links.take(5)\n)\n```\n\n\n### Chain.Links.duration\n\n`duration` will close a chain after a given interval has elapsed.\n\n```js\nChains.Links.duration(100); // 100ms\n```\n\n\n\n\n\n\n\n", "html": `<p>'Chains' are an ixfx way of working with iterable data. A chain is made up of <em>links</em>, each of which processes data in turn. A link is nothing more than a function which returns a generator. <em>Sources</em> are things that produce data for links to process.</p>
<p>Chains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.</p>
<h1 id="creating-chains">Creating chains</h1>
<h2 id="chainsrun">Chains.run</h2>
<p><code is:raw>run()</code> is used when we have a source at the same time we're setting up the chain of processing.</p>
<p>Lets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up the chain</span>
<span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  <span class="token comment">// Start with a source: in this case, event data</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// Transform takes data from the previous link/source</span>
  <span class="token comment">// and returns data for the next link.</span>
  <span class="token comment">// In this case, we just pluck out the x,y values</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>The return result of <code is:raw>run()</code> is a regular Javascript asynchronous generator, see below for how to use the data.</p>
<p>A disadvantage of <code is:raw>run()</code> is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.</p>
<h2 id="chainsprepare">Chains.prepare</h2>
<p>If you don't have a source ready, <code is:raw>prepare()</code> allows you to define the chain and call it with a source later.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set up chain</span>
<span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use the chain with an array as a source</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span></code></pre>
<p>Chains made with <code is:raw>prepare()</code> can be re-used with a different source:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch2 <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="chainssingle">Chains.single</h2>
<p>Chains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre>
<h1 id="sources">Sources</h1>
<h2 id="array">Array</h2>
<p>Items from an array can be a source, reading them one at a time with a given interval.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Read one item every 100ms</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>someArray<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="events">Events</h2>
<p>Event data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example: Emits relative x,y coordinates</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token operator">/</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token operator">/</span>window<span class="token punctuation">.</span>innerHeight
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="timestamp">Timestamp</h2>
<p>Generates the current time in milliseconds at a given interval.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Emits the time every second</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>By default it runs forever, but you can use <code is:raw>loops</code> or <code is:raw>elapsed</code> options to limit the number of times it runs</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Run 100 times</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">loops</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Run for one minute</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="function">Function</h2>
<p>Repeatedly calls a function, yielding its values.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Produces random values</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> Chains<span class="token punctuation">.</span>from<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>An example:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Take first 5 results</span>
 Chains<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h1 id="consuming-data-from-chains">Consuming data from chains</h1>
<h2 id="iterating-with-for--of">Iterating with for .. of</h2>
<p>The return result of <code is:raw>run()</code> is a regular Javascript asynchronous generator. This means you can use a <code is:raw>for .. of</code> loop or step through it manually.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> coord <span class="token keyword">of</span> xy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints out the {x,y} value when a</span>
  <span class="token comment">// 'pointermove' happens.</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution does not continue</span></code></pre>
<p>In the above pattern, execution of code after the <code is:raw>for await</code> unless the chain ends. In this case, since the source is an event, it will never end.</p>
<p>An alternative means of access is using ixfx's <code is:raw>asCallback</code>, which, if you don't prefix it with <code is:raw>await</code>, continues execution.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>xy<span class="token punctuation">,</span> <span class="token parameter">coord</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues, even while</span>
<span class="token comment">// data gets printed</span></code></pre>
<p>You can also optionally provide a third parameter to be notified asynchronously when the chain is completed:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with values</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something when 'chain' ends</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="reading-values">Reading values</h2>
<p>The <code is:raw>for..of</code> pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. <code is:raw>asValue</code> handles this, providing a function to read the latest value from the chain.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Set it up</span>
<span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token comment">// Some point later, read the value</span>
<span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>When initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="accumulating">Accumulating</h2>
<p>All data from a chain can be accumulated into an array:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If the chain is infinite (never ends), be sure to provide some limits:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Stop after we have five items</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Stop after 5 seconds has elapsed</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>asArray</code> returns a new array, and is meant to be used with <code is:raw>await</code> so execution only continues when the data is fully read.</p>
<p>Alternatively you can add to an existing array over time using <code is:raw>addToArray</code>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// An array to add items to</span>
Chains<span class="token punctuation">.</span><span class="token function">addToArray</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add values from 'chain' into 'data'</span>
<span class="token comment">// Execution continues, with \`data\` growing as values are yielded from the chain</span></code></pre>
<h1 id="synchronising">Synchronising</h1>
<p>Chains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.</p>
<h2 id="chainscombinelatesttoarray">Chains.combineLatestToArray</h2>
<p>Monitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or <em>undefined</em> if not yet emitted.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'combined' will be an async generator</span>
<span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array [ value1, value2, value3 ],</span>
  <span class="token comment">// with indexes corresponding to \`sources\`</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution continues when one of the sources finishes.</span></code></pre>
<p>The tempo of this stream will be set by the fastest source stream. <code is:raw>syncToArray</code> in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.</p>
<p>There are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.</p>
<h2 id="chainscombinelatesttoobject">Chains.combineLatestToObject</h2>
<p>This function is essentially the same as <code is:raw>combineLatestToArray()</code> however it returns an object of values rather than array.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> ch1<span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> ch2<span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> ch3
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an object: { a, b, c }</span>
  <span class="token comment">// where each value will be the value from the </span>
  <span class="token comment">// corresponding source</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="chainssynctoarray">Chains.syncToArray</h2>
<p>Waits for all sources to produce a value, sending the combined results as an array.</p>
<p>After sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast <code is:raw>combineToArray/combineToObject</code> have their pace set by the fastest source.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'synced' will be an async generator</span>
<span class="token keyword">const</span> synced <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">syncToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> synced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array of values, corresponding to</span>
  <span class="token comment">// the indexes of 'sources'</span>
<span class="token punctuation">}</span></code></pre>
<p>As soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.</p>
<h1 id="links">Links</h1>
<p><em>Links</em> are the things you use when calling <code is:raw>Chains.run</code> or <code is:raw>Chains.prepare</code>. These are the little functions which work with data flowing through the chain, and pass it on to the next link.</p>
<p>Typically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.</p>
<p>Here's an overview of the in-built links</p>
<p>Math functions</p>
<ul>
<li>min, max, average, sum, tally</li>
</ul>
<p>Filtering</p>
<ul>
<li>filter, drop</li>
<li>rank, rankArray</li>
</ul>
<p>Changing the shape of values</p>
<ul>
<li>chunk</li>
<li>reduce</li>
</ul>
<p>Timing of values</p>
<ul>
<li>debounce, delay</li>
</ul>
<p>Stopping a chain</p>
<ul>
<li>duration</li>
<li>take</li>
</ul>
<h2 id="math">Math</h2>
<h3 id="chainlinksmin--max">Chain.Links.min / max</h3>
<p>For every input value, <code is:raw>min</code> and <code is:raw>max</code> will always emit the smallest or largest value seen so far.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span>
<span class="token comment">// Produces 1, 1, 1, 1</span></code></pre>
<p>Works with chains that output numbers or array of numbers. Non-numbers are skipped.</p>
<h3 id="chainslinksaverage">Chains.Links.average()</h3>
<p>Taking a numeric input (or array of numbers), <code is:raw>average</code> continuously returns a running average.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Non-numbers in the input stream are skipped.</p>
<h3 id="chainslinkssum">Chains.Links.sum()</h3>
<p>Taking a numeric input (or array of numbers), <code is:raw>sum</code> returns the current total.</p>
<p>Non-numbers in the input stream are skipped.</p>
<h3 id="chainlinkstally">Chain.Links.tally</h3>
<p><code is:raw>tally</code> throws away the input value and instead emits the total number of values produced.</p>
<p>Example usage:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Produces: 1, 2, 3 ... every 100ms</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="filtering">Filtering</h2>
<h3 id="chainslinksfilter">Chains.Links.filter</h3>
<p><code is:raw>filter</code> only passes values for which the predicate function returns <em>true</em>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Only allow even numbers to pass,</span>
<span class="token comment">// dropping all odd numbers</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksdrop">Chain.Links.drop</h3>
<p><code is:raw>drop</code> is the opposite of <code is:raw>filter</code>. Instead dropping values which the predicate function returns <em>true</em></p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Drop all even numbers, </span>
<span class="token comment">// only allowing odd numbers to pass</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksrank--rankarray">Chain.Links.rank / rankArray</h3>
<p><code is:raw>rank</code> allows values to be scored using some function, emitting the 'best' value. <code is:raw>rankArray</code> is the same, but it works within a set of values.</p>
<p>The ranking function gets two parameters, <code is:raw>a</code> and <code is:raw>b</code>, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.</p>
<p>Eg, ranking objects based off a 'size' field:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">></span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eq</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p><code is:raw>rank</code> has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.</p>
<p>You can change these, for example:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">emitEqualRanked</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">emitRepeatHighest</span><span class="token operator">:</span> <span class="token boolean">true</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code is:raw>rankArray</code> works instead with arrays as input values. By default, it behaves similarly to <code is:raw>rank</code>, but checks the contents of the array. If the <code is:raw>withinArrays</code> option is set to <em>true</em>, it will instead emit the highest value within each array, and not care about previous values.</p>
<h2 id="changing-shape">Changing shape</h2>
<h3 id="chainslinkstransform">Chains.Links.transform</h3>
<p>Takes an input value and returns an output value.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Eg. return a doubled version of the input value</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2, 4, 6, 8</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="chainslinksreduce">Chains.Links.reduce</h3>
<p><code is:raw>reduce</code> assumes its input is an array, returning a single combined result using a function</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Return the largest of the values</span>
Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre>
<h3 id="chainslinkschunk">Chains.Links.chunk</h3>
<p>Given a stream of values, <code is:raw>chunk</code> breaks it up into arrays of a given length.</p>
<p>For example, given a chunk size of 3:</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>If the stream of input values is: <code is:raw>1, 2, 3, 4, 5, 6</code> we would get chunks of <code is:raw>[ 1, 2, 3], [ 4, 5, 6 ]</code></p>
<p>By default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to <code is:raw>chunk</code> to <em>false</em> (ie <code is:raw>Chains.Link.chunk(3, false)</code>) to instead throw away the under-sized chunk.</p>
<h2 id="timing-of-values">Timing of values</h2>
<h3 id="chainlinksdelay">Chain.Links.delay</h3>
<p><code is:raw>delay</code> changes the timing of the stream, allowing you to add delay before or after a value is yielded.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">after</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs 1s after a click</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="chainlinksdebounce">Chain.Links.debounce</h3>
<p>Ensures a minimum time between values. Values produced too quickly are dropped.</p>
<pre class="language-js"><code is:raw class="language-js">Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>
<p>Example usage:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
 <span class="token comment">// Produce values every 10ms for 350ms</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">350</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Only let a value through every 100ms</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="stopping-a-chain">Stopping a chain</h2>
<h3 id="chainslinkstake">Chains.Links.take</h3>
<p>This link will return the input value, but will break the chain after a certain number of values flow through it.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Stop after 5 results</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Example usage</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Handle five click events and then finish</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>
<h3 id="chainlinksduration">Chain.Links.duration</h3>
<p><code is:raw>duration</code> will close a chain after a given interval has elapsed.</p>
<pre class="language-js"><code is:raw class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>` } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<p>'Chains' are an ixfx way of working with iterable data. A chain is made up of <em>links</em>, each of which processes data in turn. A link is nothing more than a function which returns a generator. <em>Sources</em> are things that produce data for links to process.</p><p>Chains allow data flows to be encapsulated as generators with simple in-built semantics for consuming them. Other parts of your code don't need to know what happens within the chain, or what kind of data source it uses - it just sees it as an iterable object that yields values and potentially finishes.</p><h1 id="creating-chains">Creating chains</h1><h2 id="chainsrun">Chains.run</h2><p><code>run()</code> is used when we have a source at the same time we're setting up the chain of processing.</p><p>Lets say we want a stream of x,y values from the 'pointermove' event. In this case, we know the source in advance, and we can specify one or more links to process the data.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Set up the chain</span>
<span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  <span class="token comment">// Start with a source: in this case, event data</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// Transform takes data from the previous link/source</span>
  <span class="token comment">// and returns data for the next link.</span>
  <span class="token comment">// In this case, we just pluck out the x,y values</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The return result of <code>run()</code> is a regular Javascript asynchronous generator, see below for how to use the data.</p><p>A disadvantage of <code>run()</code> is that the source is 'baked-in' to the definition, and you can't reuse the chain with a different source.</p><h2 id="chainsprepare">Chains.prepare</h2><p>If you don't have a source ready, <code>prepare()</code> allows you to define the chain and call it with a source later.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Set up chain</span>
<span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use the chain with an array as a source</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span></code></pre><p>Chains made with <code>prepare()</code> can be re-used with a different source:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ch2 <span class="token operator">=</span> <span class="token function">chain</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="chainssingle">Chains.single</h2><p>Chains are built of the idea of iterable data sources - several bits of data. However, there are cases where you want to use a chain for single input and expect a single output.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre><h1 id="sources">Sources</h1><h2 id="array">Array</h2><p>Items from an array can be a source, reading them one at a time with a given interval.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> someArray<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Read one item every 100ms</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span>someArray<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="events">Events</h2><p>Event data can be a chain source. Specify the event target (eg a DOM element) and the name of the event.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Example: Emits relative x,y coordinates</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> xy <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span>event<span class="token punctuation">.</span>x<span class="token operator">/</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span>event<span class="token punctuation">.</span>y<span class="token operator">/</span>window<span class="token punctuation">.</span>innerHeight
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="timestamp">Timestamp</h2><p>Generates the current time in milliseconds at a given interval.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Emits the time every second</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>By default it runs forever, but you can use <code>loops</code> or <code>elapsed</code> options to limit the number of times it runs</p><pre class="language-js"><code class="language-js"><span class="token comment">// Run 100 times</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">loops</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Run for one minute</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="function">Function</h2><p>Repeatedly calls a function, yielding its values.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Produces random values</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> Chains<span class="token punctuation">.</span>from<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>An example:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Take first 5 results</span>
 Chains<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="consuming-data-from-chains">Consuming data from chains</h1><h2 id="iterating-with-for--of">Iterating with for .. of</h2><p>The return result of <code>run()</code> is a regular Javascript asynchronous generator. This means you can use a <code>for .. of</code> loop or step through it manually.</p><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> coord <span class="token keyword">of</span> xy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Prints out the {x,y} value when a</span>
  <span class="token comment">// 'pointermove' happens.</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution does not continue</span></code></pre><p>In the above pattern, execution of code after the <code>for await</code> unless the chain ends. In this case, since the source is an event, it will never end.</p><p>An alternative means of access is using ixfx's <code>asCallback</code>, which, if you don't prefix it with <code>await</code>, continues execution.</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>xy<span class="token punctuation">,</span> <span class="token parameter">coord</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution continues, even while</span>
<span class="token comment">// data gets printed</span></code></pre><p>You can also optionally provide a third parameter to be notified asynchronously when the chain is completed:</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span><span class="token function">asCallback</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with values</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something when 'chain' ends</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="reading-values">Reading values</h2><p>The <code>for..of</code> pattern is not always appropriate. In some cases you want to essentially read the value from the chain on demand. <code>asValue</code> handles this, providing a function to read the latest value from the chain.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Set it up</span>
<span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token comment">// Some point later, read the value</span>
<span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>When initialising, you can also provide an initial value. This is useful for chains where the source is based on an event that perhaps has not fired yet, but you still want a usable value when reading.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> readChain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">asValue</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="accumulating">Accumulating</h2><p>All data from a chain can be accumulated into an array:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If the chain is infinite (never ends), be sure to provide some limits:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Stop after we have five items</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Stop after 5 seconds has elapsed</span>
<span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asArray</span><span class="token punctuation">(</span>chain<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>asArray</code> returns a new array, and is meant to be used with <code>await</code> so execution only continues when the data is fully read.</p><p>Alternatively you can add to an existing array over time using <code>addToArray</code>.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// An array to add items to</span>
Chains<span class="token punctuation">.</span><span class="token function">addToArray</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add values from 'chain' into 'data'</span>
<span class="token comment">// Execution continues, with \`data\` growing as values are yielded from the chain</span></code></pre><h1 id="synchronising">Synchronising</h1><p>Chains are inherently asynchronous. If you're working with several, there might be a need to synchronise them in some manner.</p><h2 id="chainscombinelatesttoarray">Chains.combineLatestToArray</h2><p>Monitors two or more sources, storing values as they happen to an array. Whenever a new value is emitted, the whole array is sent out, containing current values from each source, or <em>undefined</em> if not yet emitted.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'combined' will be an async generator</span>
<span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array [ value1, value2, value3 ],</span>
  <span class="token comment">// with indexes corresponding to \`sources\`</span>
<span class="token punctuation">}</span>
<span class="token comment">// Execution continues when one of the sources finishes.</span></code></pre><p>The tempo of this stream will be set by the fastest source stream. <code>syncToArray</code> in contrast has a pace determined by slowest source, only sending when each source has produce a new value compared to last time.</p><p>There are a few options to determine what happens when a source completes. See the API docs for more information. By default as soon as one source finishes, the combined stream finishes.</p><h2 id="chainscombinelatesttoobject">Chains.combineLatestToObject</h2><p>This function is essentially the same as <code>combineLatestToArray()</code> however it returns an object of values rather than array.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> combined <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">combineLatestToObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> ch1<span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> ch2<span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> ch3
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> combined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an object: { a, b, c }</span>
  <span class="token comment">// where each value will be the value from the </span>
  <span class="token comment">// corresponding source</span>
<span class="token punctuation">}</span></code></pre><h2 id="chainssynctoarray">Chains.syncToArray</h2><p>Waits for all sources to produce a value, sending the combined results as an array.</p><p>After sending, it waits again for each source to send at least one value. This means that the pace of the combined result will be determined by the slowest source. In contrast <code>combineToArray/combineToObject</code> have their pace set by the fastest source.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Three sources</span>
<span class="token keyword">const</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span> ch1<span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> ch3 <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 'synced' will be an async generator</span>
<span class="token keyword">const</span> synced <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">syncToArray</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> synced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// v will be an array of values, corresponding to</span>
  <span class="token comment">// the indexes of 'sources'</span>
<span class="token punctuation">}</span></code></pre><p>As soon as one source finishes, the synchronised generator will finish. You can tweak the behaviour when sources end by providing options, documented here.</p><h1 id="links">Links</h1><p><em>Links</em> are the things you use when calling <code>Chains.run</code> or <code>Chains.prepare</code>. These are the little functions which work with data flowing through the chain, and pass it on to the next link.</p><p>Typically several links are used to make a chain. If you've only got one link, perhaps there is a simpler way to do it.</p><p>Here's an overview of the in-built links</p><p>Math functions</p><ul>
<li>min, max, average, sum, tally</li>
</ul><p>Filtering</p><ul>
<li>filter, drop</li>
<li>rank, rankArray</li>
</ul><p>Changing the shape of values</p><ul>
<li>chunk</li>
<li>reduce</li>
</ul><p>Timing of values</p><ul>
<li>debounce, delay</li>
</ul><p>Stopping a chain</p><ul>
<li>duration</li>
<li>take</li>
</ul><h2 id="math">Math</h2><h3 id="chainlinksmin--max">Chain.Links.min / max</h3><p>For every input value, <code>min</code> and <code>max</code> will always emit the smallest or largest value seen so far.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span>
<span class="token comment">// Produces 1, 1, 1, 1</span></code></pre><p>Works with chains that output numbers or array of numbers. Non-numbers are skipped.</p><h3 id="chainslinksaverage">Chains.Links.average()</h3><p>Taking a numeric input (or array of numbers), <code>average</code> continuously returns a running average.</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Non-numbers in the input stream are skipped.</p><h3 id="chainslinkssum">Chains.Links.sum()</h3><p>Taking a numeric input (or array of numbers), <code>sum</code> returns the current total.</p><p>Non-numbers in the input stream are skipped.</p><h3 id="chainlinkstally">Chain.Links.tally</h3><p><code>tally</code> throws away the input value and instead emits the total number of values produced.</p><p>Example usage:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
  Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">tally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Produces: 1, 2, 3 ... every 100ms</span>
<span class="token punctuation">}</span></code></pre><h2 id="filtering">Filtering</h2><h3 id="chainslinksfilter">Chains.Links.filter</h3><p><code>filter</code> only passes values for which the predicate function returns <em>true</em>.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Only allow even numbers to pass,</span>
<span class="token comment">// dropping all odd numbers</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="chainlinksdrop">Chain.Links.drop</h3><p><code>drop</code> is the opposite of <code>filter</code>. Instead dropping values which the predicate function returns <em>true</em></p><pre class="language-js"><code class="language-js"><span class="token comment">// Drop all even numbers, </span>
<span class="token comment">// only allowing odd numbers to pass</span>
Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="chainlinksrank--rankarray">Chain.Links.rank / rankArray</h3><p><code>rank</code> allows values to be scored using some function, emitting the 'best' value. <code>rankArray</code> is the same, but it works within a set of values.</p><p>The ranking function gets two parameters, <code>a</code> and <code>b</code>, and is expected to return a string value denoting which is the best, or 'eq' if they are equal.</p><p>Eg, ranking objects based off a 'size' field:</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">></span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eq</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>rank</code> has some options about when to emit a value downstream. By default, it won't emit a new value if it's equally ranked. And by default it won't emit a value until it 'beats' the last value.</p><p>You can change these, for example:</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">emitEqualRanked</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">emitRepeatHighest</span><span class="token operator">:</span> <span class="token boolean">true</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>rankArray</code> works instead with arrays as input values. By default, it behaves similarly to <code>rank</code>, but checks the contents of the array. If the <code>withinArrays</code> option is set to <em>true</em>, it will instead emit the highest value within each array, and not care about previous values.</p><h2 id="changing-shape">Changing shape</h2><h3 id="chainslinkstransform">Chains.Links.transform</h3><p>Takes an input value and returns an output value.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Eg. return a doubled version of the input value</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Example usage</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span> <span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2, 4, 6, 8</span>
<span class="token punctuation">}</span></code></pre><h3 id="chainslinksreduce">Chains.Links.reduce</h3><p><code>reduce</code> assumes its input is an array, returning a single combined result using a function</p><pre class="language-js"><code class="language-js"><span class="token comment">// Return the largest of the values</span>
Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Example usage</p><pre class="language-js"><code class="language-js"><span class="token comment">// Create a chain that flattens values</span>
<span class="token keyword">const</span> reduce <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Feed it a single input (an array), get a single output back:</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Chains<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span>reduce<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></code></pre><h3 id="chainslinkschunk">Chains.Links.chunk</h3><p>Given a stream of values, <code>chunk</code> breaks it up into arrays of a given length.</p><p>For example, given a chunk size of 3:</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If the stream of input values is: <code>1, 2, 3, 4, 5, 6</code> we would get chunks of <code>[ 1, 2, 3], [ 4, 5, 6 ]</code></p><p>By default, if the stream ends and a chunk is not complete, it is returned regardless. Set the second parameter to <code>chunk</code> to <em>false</em> (ie <code>Chains.Link.chunk(3, false)</code>) to instead throw away the under-sized chunk.</p><h2 id="timing-of-values">Timing of values</h2><h3 id="chainlinksdelay">Chain.Links.delay</h3><p><code>delay</code> changes the timing of the stream, allowing you to add delay before or after a value is yielded.</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">after</span><span class="token operator">:</span><span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Example usage</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">before</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs 1s after a click</span>
<span class="token punctuation">}</span></code></pre><h3 id="chainlinksdebounce">Chain.Links.debounce</h3><p>Ensures a minimum time between values. Values produced too quickly are dropped.</p><pre class="language-js"><code class="language-js">Chain<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre><p>Example usage:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> chain <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
 <span class="token comment">// Produce values every 10ms for 350ms</span>
 Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">elapsed</span><span class="token operator">:</span> <span class="token number">350</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token comment">// Only let a value through every 100ms</span>
 Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="stopping-a-chain">Stopping a chain</h2><h3 id="chainslinkstake">Chains.Links.take</h3><p>This link will return the input value, but will break the chain after a certain number of values flow through it.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Stop after 5 results</span>
Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Example usage</p><pre class="language-js"><code class="language-js"><span class="token comment">// Handle five click events and then finish</span>
<span class="token keyword">const</span> ch <span class="token operator">=</span> Chains<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Chains<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre><h3 id="chainlinksduration">Chain.Links.duration</h3><p><code>duration</code> will close a chain after a given interval has elapsed.</p><pre class="language-js"><code class="language-js">Chains<span class="token punctuation">.</span>Links<span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100ms</span></code></pre>` })}`;
});

export { $$metadata, $$Chains as default, frontmatter, metadata };
