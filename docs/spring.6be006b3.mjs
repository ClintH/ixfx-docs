import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

const metadata = { "headers": [{ "depth": 2, "slug": "springs", "text": "Springs" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n\n## Springs\n\nSomewhere between the ixfx [forces](../forces/) and [oscillators](../oscillator/) are springs.\n\n<demo-element style="height:40vh" title="Spring oscillator" src="/modulation/oscillator-spring/" />\n\nFor a typical use of a spring, use [`Oscillators.spring`](https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html).\n\nLike the other oscillators, it returns a [generator](../../gen/generator/). It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.\n\n```js\nimport { Oscillators } from "https://unpkg.com/ixfx/dist/modulation.js"\n\n// Init spring\nconst spring = Oscillators.spring();\n\n// Animation loop\nconst loop = () => {\n  // Yields relative values ~0...~1\n  //  or undefined when spring has stopped\n  const v = spring.next().value;\n\n  setTimeout(loop, 1);\n}\nloop();\n```\n\nEach time the loop function runs, `v` will have the value of the spring, or return _undefined_ if the spring has finished.\n\nThe value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.\n\n```js\n// Point where spring was sprung\nconst fromPoint = { x: 0, y: 0 };\n// Destination\nconst toPoint = { x: 1, y: 1 };\n\n// Interpolate to get an in-between point.\n// Since spring can overshoot 0..1, we pass in _true_ at\n// for interpolate to allow this.\nconst pos = Points.interpolate(v, fromPoint, toPoint, true);\n```\n\nThere are some options for `Oscillators.spring` for tweaking its behaviour.\n\n```js\nconst spring = Oscillators.spring({\n mass: 5,        // Weight of thing at end of spring\n damping: 10,    // Energy loss as we move\n stiffness: 100,\n velocity: 0.1   // Multiplier for velocity\n});\n```\n', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n<h2 id="springs">Springs</h2>\n<p>Somewhere between the ixfx <a href="../forces/">forces</a> and <a href="../oscillator/">oscillators</a> are springs.</p>\n<demo-element style="height:40vh" title="Spring oscillator" src="/modulation/oscillator-spring/" />\n<p>For a typical use of a spring, use <a href="https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html"><code is:raw>Oscillators.spring</code></a>.</p>\n<p>Like the other oscillators, it returns a <a href="../../gen/generator/">generator</a>. It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Oscillators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n\n<span class="token comment">// Init spring</span>\n<span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Animation loop</span>\n<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Yields relative values ~0...~1</span>\n  <span class="token comment">//  or undefined when spring has stopped</span>\n  <span class="token keyword">const</span> v <span class="token operator">=</span> spring<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Each time the loop function runs, <code is:raw>v</code> will have the value of the spring, or return <em>undefined</em> if the spring has finished.</p>\n<p>The value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Point where spring was sprung</span>\n<span class="token keyword">const</span> fromPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Destination</span>\n<span class="token keyword">const</span> toPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Interpolate to get an in-between point.</span>\n<span class="token comment">// Since spring can overshoot 0..1, we pass in _true_ at</span>\n<span class="token comment">// for interpolate to allow this.</span>\n<span class="token keyword">const</span> pos <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> fromPoint<span class="token punctuation">,</span> toPoint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>There are some options for <code is:raw>Oscillators.spring</code> for tweaking its behaviour.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">mass</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment">// Weight of thing at end of spring</span>\n <span class="token literal-property property">damping</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment">// Energy loss as we move</span>\n <span class="token literal-property property">stiffness</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n <span class="token literal-property property">velocity</span><span class="token operator">:</span> <span class="token number">0.1</span>   <span class="token comment">// Multiplier for velocity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' };
const frontmatter = { "title": "Springs", "astro": { "headers": [{ "depth": 2, "slug": "springs", "text": "Springs" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n\n## Springs\n\nSomewhere between the ixfx [forces](../forces/) and [oscillators](../oscillator/) are springs.\n\n<demo-element style="height:40vh" title="Spring oscillator" src="/modulation/oscillator-spring/" />\n\nFor a typical use of a spring, use [`Oscillators.spring`](https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html).\n\nLike the other oscillators, it returns a [generator](../../gen/generator/). It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.\n\n```js\nimport { Oscillators } from "https://unpkg.com/ixfx/dist/modulation.js"\n\n// Init spring\nconst spring = Oscillators.spring();\n\n// Animation loop\nconst loop = () => {\n  // Yields relative values ~0...~1\n  //  or undefined when spring has stopped\n  const v = spring.next().value;\n\n  setTimeout(loop, 1);\n}\nloop();\n```\n\nEach time the loop function runs, `v` will have the value of the spring, or return _undefined_ if the spring has finished.\n\nThe value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.\n\n```js\n// Point where spring was sprung\nconst fromPoint = { x: 0, y: 0 };\n// Destination\nconst toPoint = { x: 1, y: 1 };\n\n// Interpolate to get an in-between point.\n// Since spring can overshoot 0..1, we pass in _true_ at\n// for interpolate to allow this.\nconst pos = Points.interpolate(v, fromPoint, toPoint, true);\n```\n\nThere are some options for `Oscillators.spring` for tweaking its behaviour.\n\n```js\nconst spring = Oscillators.spring({\n mass: 5,        // Weight of thing at end of spring\n damping: 10,    // Energy loss as we move\n stiffness: 100,\n velocity: 0.1   // Multiplier for velocity\n});\n```\n', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n<h2 id="springs">Springs</h2>\n<p>Somewhere between the ixfx <a href="../forces/">forces</a> and <a href="../oscillator/">oscillators</a> are springs.</p>\n<demo-element style="height:40vh" title="Spring oscillator" src="/modulation/oscillator-spring/" />\n<p>For a typical use of a spring, use <a href="https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html"><code is:raw>Oscillators.spring</code></a>.</p>\n<p>Like the other oscillators, it returns a <a href="../../gen/generator/">generator</a>. It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Oscillators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n\n<span class="token comment">// Init spring</span>\n<span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Animation loop</span>\n<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Yields relative values ~0...~1</span>\n  <span class="token comment">//  or undefined when spring has stopped</span>\n  <span class="token keyword">const</span> v <span class="token operator">=</span> spring<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Each time the loop function runs, <code is:raw>v</code> will have the value of the spring, or return <em>undefined</em> if the spring has finished.</p>\n<p>The value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Point where spring was sprung</span>\n<span class="token keyword">const</span> fromPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Destination</span>\n<span class="token keyword">const</span> toPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Interpolate to get an in-between point.</span>\n<span class="token comment">// Since spring can overshoot 0..1, we pass in _true_ at</span>\n<span class="token comment">// for interpolate to allow this.</span>\n<span class="token keyword">const</span> pos <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> fromPoint<span class="token punctuation">,</span> toPoint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>There are some options for <code is:raw>Oscillators.spring</code> for tweaking its behaviour.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">mass</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment">// Weight of thing at end of spring</span>\n <span class="token literal-property property">damping</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment">// Energy loss as we move</span>\n <span class="token literal-property property">stiffness</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n <span class="token literal-property property">velocity</span><span class="token operator">:</span> <span class="token number">0.1</span>   <span class="token comment">// Multiplier for velocity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/modulation/spring.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/modulation/spring.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Spring = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Spring;
  const $$content = { "title": "Springs", "astro": { "headers": [{ "depth": 2, "slug": "springs", "text": "Springs" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n\n## Springs\n\nSomewhere between the ixfx [forces](../forces/) and [oscillators](../oscillator/) are springs.\n\n<demo-element style="height:40vh" title="Spring oscillator" src="/modulation/oscillator-spring/" />\n\nFor a typical use of a spring, use [`Oscillators.spring`](https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html).\n\nLike the other oscillators, it returns a [generator](../../gen/generator/). It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.\n\n```js\nimport { Oscillators } from "https://unpkg.com/ixfx/dist/modulation.js"\n\n// Init spring\nconst spring = Oscillators.spring();\n\n// Animation loop\nconst loop = () => {\n  // Yields relative values ~0...~1\n  //  or undefined when spring has stopped\n  const v = spring.next().value;\n\n  setTimeout(loop, 1);\n}\nloop();\n```\n\nEach time the loop function runs, `v` will have the value of the spring, or return _undefined_ if the spring has finished.\n\nThe value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.\n\n```js\n// Point where spring was sprung\nconst fromPoint = { x: 0, y: 0 };\n// Destination\nconst toPoint = { x: 1, y: 1 };\n\n// Interpolate to get an in-between point.\n// Since spring can overshoot 0..1, we pass in _true_ at\n// for interpolate to allow this.\nconst pos = Points.interpolate(v, fromPoint, toPoint, true);\n```\n\nThere are some options for `Oscillators.spring` for tweaking its behaviour.\n\n```js\nconst spring = Oscillators.spring({\n mass: 5,        // Weight of thing at end of spring\n damping: 10,    // Energy loss as we move\n stiffness: 100,\n velocity: 0.1   // Multiplier for velocity\n});\n```\n', "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>\n</ul>\n</div>\n<h2 id="springs">Springs</h2>\n<p>Somewhere between the ixfx <a href="../forces/">forces</a> and <a href="../oscillator/">oscillators</a> are springs.</p>\n<demo-element style="height:40vh" title="Spring oscillator" src="/modulation/oscillator-spring/" />\n<p>For a typical use of a spring, use <a href="https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html"><code is:raw>Oscillators.spring</code></a>.</p>\n<p>Like the other oscillators, it returns a <a href="../../gen/generator/">generator</a>. It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Oscillators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n\n<span class="token comment">// Init spring</span>\n<span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Animation loop</span>\n<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Yields relative values ~0...~1</span>\n  <span class="token comment">//  or undefined when spring has stopped</span>\n  <span class="token keyword">const</span> v <span class="token operator">=</span> spring<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Each time the loop function runs, <code is:raw>v</code> will have the value of the spring, or return <em>undefined</em> if the spring has finished.</p>\n<p>The value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Point where spring was sprung</span>\n<span class="token keyword">const</span> fromPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// Destination</span>\n<span class="token keyword">const</span> toPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Interpolate to get an in-between point.</span>\n<span class="token comment">// Since spring can overshoot 0..1, we pass in _true_ at</span>\n<span class="token comment">// for interpolate to allow this.</span>\n<span class="token keyword">const</span> pos <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> fromPoint<span class="token punctuation">,</span> toPoint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>There are some options for <code is:raw>Oscillators.spring</code> for tweaking its behaviour.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">mass</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment">// Weight of thing at end of spring</span>\n <span class="token literal-property property">damping</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment">// Energy loss as we move</span>\n <span class="token literal-property property">stiffness</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n <span class="token literal-property property">velocity</span><span class="token operator">:</span> <span class="token number">0.1</span>   <span class="token comment">// Multiplier for velocity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Modulation.Oscillators.html">Modulation.Oscillators module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>
<li><a href="https://fn-vis.pages.dev/1/#H4sIAHBW3mQAA3WSTU/DMAyG/0rkUyeVdkPiUjTuHNAkONIdQpttYc0HsQtFVf/7nHUf3WG5JLb8PrZf5bMH42oFBeBOegVD2oOV5ppITzfHP60MMaGtJi0bKHoIjiRpZ6GYp+C8rDT9Q7FgUSUbFi2GFGqFhFBwp0Z+KZbBuyPGkKZYEqORkYLRI8nI7kjxwXmuuHSJ050hH8cOV8w5vmE8XhjjQFPAylcT+eo0/N0hzttNEQ/T/nvtvarvA2BYc87VoxfRlZvV1myVNt4FEr1YYaWbRpILKAaxCc6IEnZEHos8b63fb7PKmVx3my6vNVLO3JbrmZR9YwmlrZxFEg4rsZzSMpR/yTxbzJ5Li4peLanwK5skmYnli+hLK4R3SG8KUW5VwvrMqo6SWcZVrYqyIRVP8/gQpwPsyO0nWh8A1vCT9lcCAAA=">fn-vis</a>: useful for seeing output values</li>
</ul>
</div><h2 id="springs">Springs</h2><p>Somewhere between the ixfx <a href="../forces/">forces</a> and <a href="../oscillator/">oscillators</a> are springs.</p>${renderComponent($$result, "demo-element", "demo-element", { "style": "height:40vh", "title": "Spring oscillator", "src": "/modulation/oscillator-spring/" })}<p>For a typical use of a spring, use <a href="https://clinth.github.io/ixfx/functions/Modulation.Oscillators.spring.html"><code>Oscillators.spring</code></a>.</p><p>Like the other oscillators, it returns a <a href="../../gen/generator/">generator</a>. It generally returns values between 0..1, however depending on its settings, it might over-shoot the ends, for example returning 1.1.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Oscillators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>

<span class="token comment">// Init spring</span>
<span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Animation loop</span>
<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Yields relative values ~0...~1</span>
  <span class="token comment">//  or undefined when spring has stopped</span>
  <span class="token keyword">const</span> v <span class="token operator">=</span> spring<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Each time the loop function runs, <code>v</code> will have the value of the spring, or return <em>undefined</em> if the spring has finished.</p><p>The value of the spring can be applied to anything. In the demo, it is used to calculate a position for the ring.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Point where spring was sprung</span>
<span class="token keyword">const</span> fromPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Destination</span>
<span class="token keyword">const</span> toPoint <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Interpolate to get an in-between point.</span>
<span class="token comment">// Since spring can overshoot 0..1, we pass in _true_ at</span>
<span class="token comment">// for interpolate to allow this.</span>
<span class="token keyword">const</span> pos <span class="token operator">=</span> Points<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> fromPoint<span class="token punctuation">,</span> toPoint<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>There are some options for <code>Oscillators.spring</code> for tweaking its behaviour.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> spring <span class="token operator">=</span> Oscillators<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">mass</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment">// Weight of thing at end of spring</span>
 <span class="token literal-property property">damping</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment">// Energy loss as we move</span>
 <span class="token literal-property property">stiffness</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
 <span class="token literal-property property">velocity</span><span class="token operator">:</span> <span class="token number">0.1</span>   <span class="token comment">// Multiplier for velocity</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>` })}`;
});

export { $$metadata, $$Spring as default, frontmatter, metadata };
