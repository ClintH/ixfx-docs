import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import { $ as $$module3 } from './chunks/FuncPlotElement.b0f9669c.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';
import 'lit/directives/class-map.js';
import './chunks/chunk-IYXXLC7L.d562e3d6.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "interpolator", "text": "Interpolator" }], "source": '\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>\n<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>\n</ul>\n</div>\n\nInterpolation (also known as _lerping_) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.\n\nA simple implementation looks like this:\n\n```js\n// Interpolate from a->b by amount (0..1)\nconst interpolate = (amount, a, b) => (1-amount) * a + amount * b;\n```\n\nIn ixfx it\'s found in the [Data](https://clinth.github.io/ixfx/modules/Data.html) module as [`interpolate`](https://clinth.github.io/ixfx/functions/Data.interpolate.html).\n\n```js\n// repl-pad\nimport { interpolate } from "https://unpkg.com/ixfx/dist/data.js";\n// Returns the value 50% between 200 and 400 (ie. 300)\ninterpolate(0.5, 200, 400);\n```\n\nixfx has custom interpolation for [Lines](../../types/geometry/line/#interpolation), [Points](../../types/geometry/point/#interpolation) and [Colour](../../types/colour/#interpolation)\n\n## Interpolator\n\nAs mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation \'amount\' value to set how quickly the target should be reached.\n\nUsing the `interpolate` function alone, we\'d have to keep track of current value, target value and the amount to interpolate by. \n\nTo simplify, there are two  _interpolators_ - [`interpolatorStepped`](https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html) and [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html) - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.\n\n```js\n// Step from 0->1 in increments of 0.10\nconst value = interpolatorStepped(0.1);\n\nvalue(); // First time will be 0\nvalue(); // Second time will be 0.1\n...etc\nvalue(); // Last time ought to be 1\n```\n\nLike `interpolate` you can use custom start and points:\n```js\n// Step from 100->200 in increments of 0.10\nconst value = interpolateStepped(0.1, 100, 200);\n```\n\nWhen interpolation has completed, the function will just keep returning the final value.\n\nThe stepped version increments each time it is called. This means that the rate by which you call it determines how quickly\nthe range completes. \n\nAlternatively, use [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html). Rather than an amount to increment by, the first parameter is the time to progress through the range.\n\n```js\n// Step from 0->1 over one minute\nconst value = interpolatorInterval({ mins: 1});\n// Step from 125->678 over 1000 milliseconds.\nconst value = interpolatorInterval(1000, 125, 678);\n```\n\nIn practice, this is how an interpolator might be used:\n\n```js\nconst state = {\n  // Start saturation with an interval of 1ms,\n  // meaning the value will be 100%\n  saturation: interpolatorInterval(1)\n}\n\nconst useState = () => {\n  // Set background based on interpolated saturation value\n  document.body.backgroundColor = `hsl(200, ${Math.floor(state.saturation()*100)}, 50%)`\n}\n\nconst loop = () => {\n  useState();\n  window.requestAnimationFrame(loop);\n}\n\nconst setup = () => {\n  // When we click, restart interpolation from 0..1\n  document.addEventListener(`click`, () => {\n    state = {\n      ...state,\n      saturation: interpolatorInterval({ secs: 20 })\n    }\n  });\n  loop();\n}\nsetup();\n```\n\n[See this pattern on Glitch](https://glitch.com/edit/#!/ixfx-interpolate-basics)', "html": `<script type="module" hoist>
  import '/src/components/ReplPad';
<\/script>
<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>
<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>
</ul>
</div>
<p>Interpolation (also known as <em>lerping</em>) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.</p>
<p>A simple implementation looks like this:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Interpolate from a->b by amount (0..1)</span>
<span class="token keyword">const</span> <span class="token function-variable function">interpolate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>amount<span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> amount <span class="token operator">*</span> b<span class="token punctuation">;</span></code></pre>
<p>In ixfx it's found in the <a href="https://clinth.github.io/ixfx/modules/Data.html">Data</a> module as <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html"><code is:raw>interpolate</code></a>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interpolate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span><span class="token punctuation">;</span>
<span class="token comment">// Returns the value 50% between 200 and 400 (ie. 300)</span>
<span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>ixfx has custom interpolation for <a href="../../types/geometry/line/#interpolation">Lines</a>, <a href="../../types/geometry/point/#interpolation">Points</a> and <a href="../../types/colour/#interpolation">Colour</a></p>
<h2 id="interpolator">Interpolator</h2>
<p>As mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation 'amount' value to set how quickly the target should be reached.</p>
<p>Using the <code is:raw>interpolate</code> function alone, we'd have to keep track of current value, target value and the amount to interpolate by.</p>
<p>To simplify, there are two  <em>interpolators</em> - <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html"><code is:raw>interpolatorStepped</code></a> and <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code is:raw>interpolatorInterval</code></a> - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 0->1 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First time will be 0</span>
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Second time will be 0.1</span>
<span class="token operator">...</span>etc
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Last time ought to be 1</span></code></pre>
<p>Like <code is:raw>interpolate</code> you can use custom start and points:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 100->200 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolateStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>When interpolation has completed, the function will just keep returning the final value.</p>
<p>The stepped version increments each time it is called. This means that the rate by which you call it determines how quickly
the range completes.</p>
<p>Alternatively, use <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code is:raw>interpolatorInterval</code></a>. Rather than an amount to increment by, the first parameter is the time to progress through the range.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 0->1 over one minute</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Step from 125->678 over 1000 milliseconds.</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In practice, this is how an interpolator might be used:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Start saturation with an interval of 1ms,</span>
  <span class="token comment">// meaning the value will be 100%</span>
  <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">useState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Set background based on interpolated saturation value</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hsl(200, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 50%)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">setup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// When we click, restart interpolation from 0..1</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">See this pattern on Glitch</a></p>` };
const frontmatter = { "title": "Interpolation", "astro": { "headers": [{ "depth": 2, "slug": "interpolator", "text": "Interpolator" }], "source": '\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>\n<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>\n</ul>\n</div>\n\nInterpolation (also known as _lerping_) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.\n\nA simple implementation looks like this:\n\n```js\n// Interpolate from a->b by amount (0..1)\nconst interpolate = (amount, a, b) => (1-amount) * a + amount * b;\n```\n\nIn ixfx it\'s found in the [Data](https://clinth.github.io/ixfx/modules/Data.html) module as [`interpolate`](https://clinth.github.io/ixfx/functions/Data.interpolate.html).\n\n```js\n// repl-pad\nimport { interpolate } from "https://unpkg.com/ixfx/dist/data.js";\n// Returns the value 50% between 200 and 400 (ie. 300)\ninterpolate(0.5, 200, 400);\n```\n\nixfx has custom interpolation for [Lines](../../types/geometry/line/#interpolation), [Points](../../types/geometry/point/#interpolation) and [Colour](../../types/colour/#interpolation)\n\n## Interpolator\n\nAs mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation \'amount\' value to set how quickly the target should be reached.\n\nUsing the `interpolate` function alone, we\'d have to keep track of current value, target value and the amount to interpolate by. \n\nTo simplify, there are two  _interpolators_ - [`interpolatorStepped`](https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html) and [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html) - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.\n\n```js\n// Step from 0->1 in increments of 0.10\nconst value = interpolatorStepped(0.1);\n\nvalue(); // First time will be 0\nvalue(); // Second time will be 0.1\n...etc\nvalue(); // Last time ought to be 1\n```\n\nLike `interpolate` you can use custom start and points:\n```js\n// Step from 100->200 in increments of 0.10\nconst value = interpolateStepped(0.1, 100, 200);\n```\n\nWhen interpolation has completed, the function will just keep returning the final value.\n\nThe stepped version increments each time it is called. This means that the rate by which you call it determines how quickly\nthe range completes. \n\nAlternatively, use [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html). Rather than an amount to increment by, the first parameter is the time to progress through the range.\n\n```js\n// Step from 0->1 over one minute\nconst value = interpolatorInterval({ mins: 1});\n// Step from 125->678 over 1000 milliseconds.\nconst value = interpolatorInterval(1000, 125, 678);\n```\n\nIn practice, this is how an interpolator might be used:\n\n```js\nconst state = {\n  // Start saturation with an interval of 1ms,\n  // meaning the value will be 100%\n  saturation: interpolatorInterval(1)\n}\n\nconst useState = () => {\n  // Set background based on interpolated saturation value\n  document.body.backgroundColor = `hsl(200, ${Math.floor(state.saturation()*100)}, 50%)`\n}\n\nconst loop = () => {\n  useState();\n  window.requestAnimationFrame(loop);\n}\n\nconst setup = () => {\n  // When we click, restart interpolation from 0..1\n  document.addEventListener(`click`, () => {\n    state = {\n      ...state,\n      saturation: interpolatorInterval({ secs: 20 })\n    }\n  });\n  loop();\n}\nsetup();\n```\n\n[See this pattern on Glitch](https://glitch.com/edit/#!/ixfx-interpolate-basics)', "html": `<script type="module" hoist>
  import '/src/components/ReplPad';
<\/script>
<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>
<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>
</ul>
</div>
<p>Interpolation (also known as <em>lerping</em>) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.</p>
<p>A simple implementation looks like this:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Interpolate from a->b by amount (0..1)</span>
<span class="token keyword">const</span> <span class="token function-variable function">interpolate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>amount<span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> amount <span class="token operator">*</span> b<span class="token punctuation">;</span></code></pre>
<p>In ixfx it's found in the <a href="https://clinth.github.io/ixfx/modules/Data.html">Data</a> module as <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html"><code is:raw>interpolate</code></a>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interpolate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span><span class="token punctuation">;</span>
<span class="token comment">// Returns the value 50% between 200 and 400 (ie. 300)</span>
<span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>ixfx has custom interpolation for <a href="../../types/geometry/line/#interpolation">Lines</a>, <a href="../../types/geometry/point/#interpolation">Points</a> and <a href="../../types/colour/#interpolation">Colour</a></p>
<h2 id="interpolator">Interpolator</h2>
<p>As mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation 'amount' value to set how quickly the target should be reached.</p>
<p>Using the <code is:raw>interpolate</code> function alone, we'd have to keep track of current value, target value and the amount to interpolate by.</p>
<p>To simplify, there are two  <em>interpolators</em> - <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html"><code is:raw>interpolatorStepped</code></a> and <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code is:raw>interpolatorInterval</code></a> - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 0->1 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First time will be 0</span>
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Second time will be 0.1</span>
<span class="token operator">...</span>etc
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Last time ought to be 1</span></code></pre>
<p>Like <code is:raw>interpolate</code> you can use custom start and points:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 100->200 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolateStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>When interpolation has completed, the function will just keep returning the final value.</p>
<p>The stepped version increments each time it is called. This means that the rate by which you call it determines how quickly
the range completes.</p>
<p>Alternatively, use <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code is:raw>interpolatorInterval</code></a>. Rather than an amount to increment by, the first parameter is the time to progress through the range.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 0->1 over one minute</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Step from 125->678 over 1000 milliseconds.</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In practice, this is how an interpolator might be used:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Start saturation with an interval of 1ms,</span>
  <span class="token comment">// meaning the value will be 100%</span>
  <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">useState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Set background based on interpolated saturation value</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hsl(200, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 50%)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">setup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// When we click, restart interpolation from 0..1</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">See this pattern on Glitch</a></p>` } };
const $$metadata = createMetadata("/src/pages/modulation/interpolate.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "/src/components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "/src/components/FuncPlotElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
  import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/modulation/interpolate.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Interpolate = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Interpolate;
  const $$content = { "title": "Interpolation", "astro": { "headers": [{ "depth": 2, "slug": "interpolator", "text": "Interpolator" }], "source": '\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>\n<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>\n</ul>\n</div>\n\nInterpolation (also known as _lerping_) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.\n\nA simple implementation looks like this:\n\n```js\n// Interpolate from a->b by amount (0..1)\nconst interpolate = (amount, a, b) => (1-amount) * a + amount * b;\n```\n\nIn ixfx it\'s found in the [Data](https://clinth.github.io/ixfx/modules/Data.html) module as [`interpolate`](https://clinth.github.io/ixfx/functions/Data.interpolate.html).\n\n```js\n// repl-pad\nimport { interpolate } from "https://unpkg.com/ixfx/dist/data.js";\n// Returns the value 50% between 200 and 400 (ie. 300)\ninterpolate(0.5, 200, 400);\n```\n\nixfx has custom interpolation for [Lines](../../types/geometry/line/#interpolation), [Points](../../types/geometry/point/#interpolation) and [Colour](../../types/colour/#interpolation)\n\n## Interpolator\n\nAs mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation \'amount\' value to set how quickly the target should be reached.\n\nUsing the `interpolate` function alone, we\'d have to keep track of current value, target value and the amount to interpolate by. \n\nTo simplify, there are two  _interpolators_ - [`interpolatorStepped`](https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html) and [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html) - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.\n\n```js\n// Step from 0->1 in increments of 0.10\nconst value = interpolatorStepped(0.1);\n\nvalue(); // First time will be 0\nvalue(); // Second time will be 0.1\n...etc\nvalue(); // Last time ought to be 1\n```\n\nLike `interpolate` you can use custom start and points:\n```js\n// Step from 100->200 in increments of 0.10\nconst value = interpolateStepped(0.1, 100, 200);\n```\n\nWhen interpolation has completed, the function will just keep returning the final value.\n\nThe stepped version increments each time it is called. This means that the rate by which you call it determines how quickly\nthe range completes. \n\nAlternatively, use [`interpolatorInterval`](https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html). Rather than an amount to increment by, the first parameter is the time to progress through the range.\n\n```js\n// Step from 0->1 over one minute\nconst value = interpolatorInterval({ mins: 1});\n// Step from 125->678 over 1000 milliseconds.\nconst value = interpolatorInterval(1000, 125, 678);\n```\n\nIn practice, this is how an interpolator might be used:\n\n```js\nconst state = {\n  // Start saturation with an interval of 1ms,\n  // meaning the value will be 100%\n  saturation: interpolatorInterval(1)\n}\n\nconst useState = () => {\n  // Set background based on interpolated saturation value\n  document.body.backgroundColor = `hsl(200, ${Math.floor(state.saturation()*100)}, 50%)`\n}\n\nconst loop = () => {\n  useState();\n  window.requestAnimationFrame(loop);\n}\n\nconst setup = () => {\n  // When we click, restart interpolation from 0..1\n  document.addEventListener(`click`, () => {\n    state = {\n      ...state,\n      saturation: interpolatorInterval({ secs: 20 })\n    }\n  });\n  loop();\n}\nsetup();\n```\n\n[See this pattern on Glitch](https://glitch.com/edit/#!/ixfx-interpolate-basics)', "html": `<script type="module" hoist>
  import '/src/components/ReplPad';
<\/script>
<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>
<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>
</ul>
</div>
<p>Interpolation (also known as <em>lerping</em>) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.</p>
<p>A simple implementation looks like this:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Interpolate from a->b by amount (0..1)</span>
<span class="token keyword">const</span> <span class="token function-variable function">interpolate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>amount<span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> amount <span class="token operator">*</span> b<span class="token punctuation">;</span></code></pre>
<p>In ixfx it's found in the <a href="https://clinth.github.io/ixfx/modules/Data.html">Data</a> module as <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html"><code is:raw>interpolate</code></a>.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interpolate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span><span class="token punctuation">;</span>
<span class="token comment">// Returns the value 50% between 200 and 400 (ie. 300)</span>
<span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>ixfx has custom interpolation for <a href="../../types/geometry/line/#interpolation">Lines</a>, <a href="../../types/geometry/point/#interpolation">Points</a> and <a href="../../types/colour/#interpolation">Colour</a></p>
<h2 id="interpolator">Interpolator</h2>
<p>As mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation 'amount' value to set how quickly the target should be reached.</p>
<p>Using the <code is:raw>interpolate</code> function alone, we'd have to keep track of current value, target value and the amount to interpolate by.</p>
<p>To simplify, there are two  <em>interpolators</em> - <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html"><code is:raw>interpolatorStepped</code></a> and <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code is:raw>interpolatorInterval</code></a> - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 0->1 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First time will be 0</span>
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Second time will be 0.1</span>
<span class="token operator">...</span>etc
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Last time ought to be 1</span></code></pre>
<p>Like <code is:raw>interpolate</code> you can use custom start and points:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 100->200 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolateStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>When interpolation has completed, the function will just keep returning the final value.</p>
<p>The stepped version increments each time it is called. This means that the rate by which you call it determines how quickly
the range completes.</p>
<p>Alternatively, use <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code is:raw>interpolatorInterval</code></a>. Rather than an amount to increment by, the first parameter is the time to progress through the range.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Step from 0->1 over one minute</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Step from 125->678 over 1000 milliseconds.</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In practice, this is how an interpolator might be used:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Start saturation with an interval of 1ms,</span>
  <span class="token comment">// meaning the value will be 100%</span>
  <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">useState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Set background based on interpolated saturation value</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hsl(200, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 50%)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">setup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// When we click, restart interpolation from 0..1</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">See this pattern on Glitch</a></p>` } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html">Interpolate function</a></li>
<li>Demo: <a href="https://clinth.github.io/ixfx-demos/geometry/point-interpolate/">Points.interpolate</a>, <a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">Glitch demo</a>
</li></ul>
</div><p>Interpolation (also known as <em>lerping</em>) allows the blending between two values. Where it really shines is when it is used over time to progressively reach some target value.</p><p>A simple implementation looks like this:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Interpolate from a->b by amount (0..1)</span>
<span class="token keyword">const</span> <span class="token function-variable function">interpolate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">amount<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>amount<span class="token punctuation">)</span> <span class="token operator">*</span> a <span class="token operator">+</span> amount <span class="token operator">*</span> b<span class="token punctuation">;</span></code></pre><p>In ixfx it's found in the <a href="https://clinth.github.io/ixfx/modules/Data.html">Data</a> module as <a href="https://clinth.github.io/ixfx/functions/Data.interpolate.html"><code>interpolate</code></a>.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> interpolate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/data.js"</span><span class="token punctuation">;</span>
<span class="token comment">// Returns the value 50% between 200 and 400 (ie. 300)</span>
<span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ixfx has custom interpolation for <a href="../../types/geometry/line/#interpolation">Lines</a>, <a href="../../types/geometry/point/#interpolation">Points</a> and <a href="../../types/colour/#interpolation">Colour</a></p><h2 id="interpolator">Interpolator</h2><p>As mentioned in the introduction, interpolation is very often applied in an animation loop, slowly nudging a value to some target value. We adjust the interpolation 'amount' value to set how quickly the target should be reached.</p><p>Using the <code>interpolate</code> function alone, we'd have to keep track of current value, target value and the amount to interpolate by.</p><p>To simplify, there are two  <em>interpolators</em> - <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorStepped.html"><code>interpolatorStepped</code></a> and <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code>interpolatorInterval</code></a> - which help by wrapping all this up. They keep track of interpolation progress and return a function which simply yields the current value.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Step from 0->1 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// First time will be 0</span>
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Second time will be 0.1</span>
<span class="token operator">...</span>etc
<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Last time ought to be 1</span></code></pre><p>Like <code>interpolate</code> you can use custom start and points:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Step from 100->200 in increments of 0.10</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolateStepped</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>When interpolation has completed, the function will just keep returning the final value.</p><p>The stepped version increments each time it is called. This means that the rate by which you call it determines how quickly
the range completes.</p><p>Alternatively, use <a href="https://clinth.github.io/ixfx/functions/Data.interpolatorInterval.html"><code>interpolatorInterval</code></a>. Rather than an amount to increment by, the first parameter is the time to progress through the range.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Step from 0->1 over one minute</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Step from 125->678 over 1000 milliseconds.</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">678</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In practice, this is how an interpolator might be used:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Start saturation with an interval of 1ms,</span>
  <span class="token comment">// meaning the value will be 100%</span>
  <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">useState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Set background based on interpolated saturation value</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hsl(200, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 50%)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">setup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// When we click, restart interpolation from 0..1</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token literal-property property">saturation</span><span class="token operator">:</span> <span class="token function">interpolatorInterval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://glitch.com/edit/#!/ixfx-interpolate-basics">See this pattern on Glitch</a></p>` })}`;
});

export { $$metadata, $$Interpolate as default, frontmatter, metadata };
