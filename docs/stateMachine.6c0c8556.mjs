import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import $$StateMachinePlay, { $ as $$module3 } from './StateMachinePlay.fba4d668.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "machine-definition", "text": "Machine definition" }, { "depth": 2, "slug": "why", "text": "Why?" }, { "depth": 2, "slug": "playground", "text": "Playground" }, { "depth": 2, "slug": "simple-usage", "text": "Simple usage" }, { "depth": 2, "slug": "class-based-usage", "text": "Class-based usage" }, { "depth": 2, "slug": "simple-machines", "text": "Simple machines" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n\nA _state machine_ allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It\'s up to you to \'drive\' the machine, telling it when to transition.\n\nState machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or _null_ if no further changes are possible.\n\n## Machine definition\n\nAn example of a simple state machine is a light switch. It has two states: _on_ and _off_. When the light is _on_, the only other state is _off_. And vice-versa:\n\n```js\n{\n  on: "off",\n  off: "on"\n}\n```\n\nWith this machine definition, it would be illegal to have a state `dimmed`, or to turn it `off` when it is already `off`. In this case, the machine never reaches a final state, it can always oscillate between `on` / `off`. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.\n\nIt\'s possible to have several possible next states by using a string array:\n\n```js\n{\n  on: ["off", "half_bright"],\n  half_bright: ["on", "off"],\n  off: "on"\n}\n```\n\nThe example below is intended to start with `plain` bread, with a few ways of getting to the eventual final state of `sprinkled_on_soup` or `eaten`. Once a machine is in its final state, it cannot change to another state unless it is _reset_.\n\n```js\n{\n  plain: ["toasted", "buttered", "eaten"],\n  toasted: ["buttered", "eaten", "diced"],\n  buttered: ["eaten", "marmaladed"],\n  marmaladed: "eaten",\n  diced: "sprinkled_on_soup",\n  sprinkled_on_soup: null,\n  eaten: null\n}\n```\n\n## Why?\n\nBehaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.\n\nA state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.\n\n## Playground\n\nTry out some state machines in this playground. \n\n1. Edit the description or choose a demo\n2. Click _Use description_ to load it have it checked for errors.\n3. If successful, you can see available states. Select a state and then \'Change state\'\n\n(Note that properties are enclosed in " marks here because it\'s represented as JSON)\n\n<StateMachinePlay />\n\n## Simple usage\n\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n\nA simple way of using the state machine is the functional, immutable approach. Create the machine with its _description_ and _initial state_:\n\n```js\nconst machine = StateMachine.init({\n  on: "off",\n  off: "on"\n}, "on");\n```\n\nThe machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or `null` if it is a final state.\n\nThe following example has four possible states (`wakeup, sleep, coffee, breakfast, bike`). `sleep` can only transition to the `wakeup` state, while `wakeup` can transition to either `coffee` or `breakfast`. \n\nUse _null_ to signify the final state. Multiple states can terminate the machine if desired.\n\n```js\n// repl-pad#1\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\n\nconst description = { \n sleep: `wakeup`,\n wakeup: [`coffee`, `breakfast`],\n coffee: `bike`,\n breakfast: `bike`,\n bike: null\n}\nlet sm = StateMachine.init(description, `sleep`);\n```\n\n`StateMachine.init` returns [`MachineState`](https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html) which captures the definition of the machine and its current state:\n\n```js\n// repl-pad#1\n// Current state\nsm.value; // eg. \'bike\'\n// List of unique states visited\nsm.visited; // eg. [\'sleep\', \'wakeup\']\n// Original machine definition\nsm.machine; \n```\n\nTo attempt to change state, use [`StateMachine.to`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html)\n\n```js\n// repl-pad#1\n// Transition existing machine to state \'wakeup\'\nsm = StateMachine.to(sm, \'wakeup\');\nsm.value; // \'wakeup\'\n```\n\nIf this is a legal transition, you\'ll get a new `MachineState` object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.\n\nHere are some helper functions:\n```js\n// repl-pad#1\n// String array of possible next states\nStateMachine.possible(sm);\n\n// Returns _true_ if state machine cannot transition further\nStateMachine.done(sm);\n\n// Try to automatically move to next state\nsm = StateMachine.next(sm);\n```\n\n## Class-based usage\n\nixfx has a class [`StateMachine.WithEvents`](https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html) which wraps the functional implementation described above and also provides events for listening for event changes.\n\nThe same format is used to define possible transitions. Now there\'s an mutable object, so `const` can be used:\n\n```js\n// repl-pad#2\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\nconst description = { \n sleep: `wakeup`,\n wakeup: [`coffee`, `breakfast`],\n coffee: `bike`,\n breakfast: `bike`,\n bike: null\n}\nconst sm = new StateMachine.WithEvents(description, { initial: "sleep" });\n```\n\nChange the state by name:\n\n```js\n// repl-pad#2\nsm.state = `wakeup`\n```\n\nIn some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.\n\n```js\n// repl-pad#2\nsm.next();\n```\n\nReset the machine back to its initial state with `reset()`. This is the only way to continue after reaching the final state.\n\n```js\n// repl-pad#2\nsm.reset();\n```\n\nCheck status\n\n```js\nif (sm.state === `coffee`) ...\nif (sm.isDone) ...\n```\n\nThe `change` event is fired whenever state changes, and `stop` when the machine reaches a final state.\n\n```js\nsm.addEventListener(`change`, (evt) => {\n console.log(`State change from ${evt.priorState} -> ${evt.newState}`);\n\n // Prints for example:\n // State change from wakeup -> breakfast\n});\n\nsm.addEventListener(`stop`, (evt) => {\n console.log(`Machine has finished in state: ${evt.newState}`);\n});\n```\n\n## Simple machines\n\n[`StateMachine.fromList`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html) creates transitions that steps through a series of states and then terminates.\n\n```js\n// repl-pad#3\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\n// Machine that can go: init -> one -> two -> three -> [end]\nconst sm1 = StateMachine.init(StateMachine.fromList(`init`, `one`, `two`, `three`));\n```\n\nOnce in the \'three\' state, will be considered _done_, since there is no possible transition from there.\n\n[`StateMachine.fromListBidirectional`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html) is the same idea, but allow back-and-forth between states.\n\n```js\n// repl-pad#3\n// Machine that can go: init <-> one <-> two <-> three\nconst sm2 = StateMachine.init(StateMachine.fromListBidirectional(`init`,`one`, `two`, `three`));\n```\n\nIn the above example, `sm2` will never be _done_, because it\'s always possible for it to transition to some state.\n', "html": '<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n<p>A <em>state machine</em> allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It\'s up to you to \'drive\' the machine, telling it when to transition.</p>\n<p>State machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or <em>null</em> if no further changes are possible.</p>\n<h2 id="machine-definition">Machine definition</h2>\n<p>An example of a simple state machine is a light switch. It has two states: <em>on</em> and <em>off</em>. When the light is <em>on</em>, the only other state is <em>off</em>. And vice-versa:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span></code></pre>\n<p>With this machine definition, it would be illegal to have a state <code is:raw>dimmed</code>, or to turn it <code is:raw>off</code> when it is already <code is:raw>off</code>. In this case, the machine never reaches a final state, it can always oscillate between <code is:raw>on</code> / <code is:raw>off</code>. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.</p>\n<p>It\'s possible to have several possible next states by using a string array:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"off"</span><span class="token punctuation">,</span> <span class="token string">"half_bright"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">half_bright</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"on"</span><span class="token punctuation">,</span> <span class="token string">"off"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span></code></pre>\n<p>The example below is intended to start with <code is:raw>plain</code> bread, with a few ways of getting to the eventual final state of <code is:raw>sprinkled_on_soup</code> or <code is:raw>eaten</code>. Once a machine is in its final state, it cannot change to another state unless it is <em>reset</em>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">plain</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"toasted"</span><span class="token punctuation">,</span> <span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">toasted</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"diced"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">buttered</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"marmaladed"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">marmaladed</span><span class="token operator">:</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">diced</span><span class="token operator">:</span> <span class="token string">"sprinkled_on_soup"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">sprinkled_on_soup</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">eaten</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="why">Why?</h2>\n<p>Behaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.</p>\n<p>A state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.</p>\n<h2 id="playground">Playground</h2>\n<p>Try out some state machines in this playground.</p>\n<ol>\n<li>Edit the description or choose a demo</li>\n<li>Click <em>Use description</em> to load it have it checked for errors.</li>\n<li>If successful, you can see available states. Select a state and then \'Change state\'</li>\n</ol>\n<p>(Note that properties are enclosed in " marks here because it\'s represented as JSON)</p>\n<StateMachinePlay />\n<h2 id="simple-usage">Simple usage</h2>\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n<p>A simple way of using the state machine is the functional, immutable approach. Create the machine with its <em>description</em> and <em>initial state</em>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> machine <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or <code is:raw>null</code> if it is a final state.</p>\n<p>The following example has four possible states (<code is:raw>wakeup, sleep, coffee, breakfast, bike</code>). <code is:raw>sleep</code> can only transition to the <code is:raw>wakeup</code> state, while <code is:raw>wakeup</code> can transition to either <code is:raw>coffee</code> or <code is:raw>breakfast</code>.</p>\n<p>Use <em>null</em> to signify the final state. Multiple states can terminate the machine if desired.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> \n <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">breakfast</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> sm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sleep</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>StateMachine.init</code> returns <a href="https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html"><code is:raw>MachineState</code></a> which captures the definition of the machine and its current state:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Current state</span>\nsm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// eg. \'bike\'</span>\n<span class="token comment">// List of unique states visited</span>\nsm<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// eg. [\'sleep\', \'wakeup\']</span>\n<span class="token comment">// Original machine definition</span>\nsm<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> </code></pre>\n<p>To attempt to change state, use <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html"><code is:raw>StateMachine.to</code></a></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Transition existing machine to state \'wakeup\'</span>\nsm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> <span class="token string">\'wakeup\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// \'wakeup\'</span></code></pre>\n<p>If this is a legal transition, you\'ll get a new <code is:raw>MachineState</code> object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.</p>\n<p>Here are some helper functions:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// String array of possible next states</span>\nStateMachine<span class="token punctuation">.</span><span class="token function">possible</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns _true_ if state machine cannot transition further</span>\nStateMachine<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Try to automatically move to next state</span>\nsm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="class-based-usage">Class-based usage</h2>\n<p>ixfx has a class <a href="https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html"><code is:raw>StateMachine.WithEvents</code></a> which wraps the functional implementation described above and also provides events for listening for event changes.</p>\n<p>The same format is used to define possible transitions. Now there\'s an mutable object, so <code is:raw>const</code> can be used:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> \n <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">breakfast</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateMachine<span class="token punctuation">.</span>WithEvents</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">initial</span><span class="token operator">:</span> <span class="token string">"sleep"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Change the state by name:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span></code></pre>\n<p>In some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Reset the machine back to its initial state with <code is:raw>reset()</code>. This is the only way to continue after reaching the final state.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Check status</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">...</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p>The <code is:raw>change</code> event is fired whenever state changes, and <code is:raw>stop</code> when the machine reaches a final state.</p>\n<pre class="language-js"><code is:raw class="language-js">sm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">change</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">State change from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token comment">// Prints for example:</span>\n <span class="token comment">// State change from wakeup -> breakfast</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stop</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Machine has finished in state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="simple-machines">Simple machines</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html"><code is:raw>StateMachine.fromList</code></a> creates transitions that steps through a series of states and then terminates.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Machine that can go: init -> one -> two -> three -> [end]</span>\n<span class="token keyword">const</span> sm1 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromList</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">one</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">two</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">three</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Once in the \'three\' state, will be considered <em>done</em>, since there is no possible transition from there.</p>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html"><code is:raw>StateMachine.fromListBidirectional</code></a> is the same idea, but allow back-and-forth between states.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token comment">// Machine that can go: init &lt;-> one &lt;-> two &lt;-> three</span>\n<span class="token keyword">const</span> sm2 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromListBidirectional</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">one</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">two</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">three</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the above example, <code is:raw>sm2</code> will never be <em>done</em>, because it\'s always possible for it to transition to some state.</p>' };
const frontmatter = { "title": "State Machine", "astro": { "headers": [{ "depth": 2, "slug": "machine-definition", "text": "Machine definition" }, { "depth": 2, "slug": "why", "text": "Why?" }, { "depth": 2, "slug": "playground", "text": "Playground" }, { "depth": 2, "slug": "simple-usage", "text": "Simple usage" }, { "depth": 2, "slug": "class-based-usage", "text": "Class-based usage" }, { "depth": 2, "slug": "simple-machines", "text": "Simple machines" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n\nA _state machine_ allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It\'s up to you to \'drive\' the machine, telling it when to transition.\n\nState machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or _null_ if no further changes are possible.\n\n## Machine definition\n\nAn example of a simple state machine is a light switch. It has two states: _on_ and _off_. When the light is _on_, the only other state is _off_. And vice-versa:\n\n```js\n{\n  on: "off",\n  off: "on"\n}\n```\n\nWith this machine definition, it would be illegal to have a state `dimmed`, or to turn it `off` when it is already `off`. In this case, the machine never reaches a final state, it can always oscillate between `on` / `off`. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.\n\nIt\'s possible to have several possible next states by using a string array:\n\n```js\n{\n  on: ["off", "half_bright"],\n  half_bright: ["on", "off"],\n  off: "on"\n}\n```\n\nThe example below is intended to start with `plain` bread, with a few ways of getting to the eventual final state of `sprinkled_on_soup` or `eaten`. Once a machine is in its final state, it cannot change to another state unless it is _reset_.\n\n```js\n{\n  plain: ["toasted", "buttered", "eaten"],\n  toasted: ["buttered", "eaten", "diced"],\n  buttered: ["eaten", "marmaladed"],\n  marmaladed: "eaten",\n  diced: "sprinkled_on_soup",\n  sprinkled_on_soup: null,\n  eaten: null\n}\n```\n\n## Why?\n\nBehaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.\n\nA state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.\n\n## Playground\n\nTry out some state machines in this playground. \n\n1. Edit the description or choose a demo\n2. Click _Use description_ to load it have it checked for errors.\n3. If successful, you can see available states. Select a state and then \'Change state\'\n\n(Note that properties are enclosed in " marks here because it\'s represented as JSON)\n\n<StateMachinePlay />\n\n## Simple usage\n\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n\nA simple way of using the state machine is the functional, immutable approach. Create the machine with its _description_ and _initial state_:\n\n```js\nconst machine = StateMachine.init({\n  on: "off",\n  off: "on"\n}, "on");\n```\n\nThe machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or `null` if it is a final state.\n\nThe following example has four possible states (`wakeup, sleep, coffee, breakfast, bike`). `sleep` can only transition to the `wakeup` state, while `wakeup` can transition to either `coffee` or `breakfast`. \n\nUse _null_ to signify the final state. Multiple states can terminate the machine if desired.\n\n```js\n// repl-pad#1\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\n\nconst description = { \n sleep: `wakeup`,\n wakeup: [`coffee`, `breakfast`],\n coffee: `bike`,\n breakfast: `bike`,\n bike: null\n}\nlet sm = StateMachine.init(description, `sleep`);\n```\n\n`StateMachine.init` returns [`MachineState`](https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html) which captures the definition of the machine and its current state:\n\n```js\n// repl-pad#1\n// Current state\nsm.value; // eg. \'bike\'\n// List of unique states visited\nsm.visited; // eg. [\'sleep\', \'wakeup\']\n// Original machine definition\nsm.machine; \n```\n\nTo attempt to change state, use [`StateMachine.to`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html)\n\n```js\n// repl-pad#1\n// Transition existing machine to state \'wakeup\'\nsm = StateMachine.to(sm, \'wakeup\');\nsm.value; // \'wakeup\'\n```\n\nIf this is a legal transition, you\'ll get a new `MachineState` object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.\n\nHere are some helper functions:\n```js\n// repl-pad#1\n// String array of possible next states\nStateMachine.possible(sm);\n\n// Returns _true_ if state machine cannot transition further\nStateMachine.done(sm);\n\n// Try to automatically move to next state\nsm = StateMachine.next(sm);\n```\n\n## Class-based usage\n\nixfx has a class [`StateMachine.WithEvents`](https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html) which wraps the functional implementation described above and also provides events for listening for event changes.\n\nThe same format is used to define possible transitions. Now there\'s an mutable object, so `const` can be used:\n\n```js\n// repl-pad#2\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\nconst description = { \n sleep: `wakeup`,\n wakeup: [`coffee`, `breakfast`],\n coffee: `bike`,\n breakfast: `bike`,\n bike: null\n}\nconst sm = new StateMachine.WithEvents(description, { initial: "sleep" });\n```\n\nChange the state by name:\n\n```js\n// repl-pad#2\nsm.state = `wakeup`\n```\n\nIn some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.\n\n```js\n// repl-pad#2\nsm.next();\n```\n\nReset the machine back to its initial state with `reset()`. This is the only way to continue after reaching the final state.\n\n```js\n// repl-pad#2\nsm.reset();\n```\n\nCheck status\n\n```js\nif (sm.state === `coffee`) ...\nif (sm.isDone) ...\n```\n\nThe `change` event is fired whenever state changes, and `stop` when the machine reaches a final state.\n\n```js\nsm.addEventListener(`change`, (evt) => {\n console.log(`State change from ${evt.priorState} -> ${evt.newState}`);\n\n // Prints for example:\n // State change from wakeup -> breakfast\n});\n\nsm.addEventListener(`stop`, (evt) => {\n console.log(`Machine has finished in state: ${evt.newState}`);\n});\n```\n\n## Simple machines\n\n[`StateMachine.fromList`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html) creates transitions that steps through a series of states and then terminates.\n\n```js\n// repl-pad#3\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\n// Machine that can go: init -> one -> two -> three -> [end]\nconst sm1 = StateMachine.init(StateMachine.fromList(`init`, `one`, `two`, `three`));\n```\n\nOnce in the \'three\' state, will be considered _done_, since there is no possible transition from there.\n\n[`StateMachine.fromListBidirectional`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html) is the same idea, but allow back-and-forth between states.\n\n```js\n// repl-pad#3\n// Machine that can go: init <-> one <-> two <-> three\nconst sm2 = StateMachine.init(StateMachine.fromListBidirectional(`init`,`one`, `two`, `three`));\n```\n\nIn the above example, `sm2` will never be _done_, because it\'s always possible for it to transition to some state.\n', "html": '<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n<p>A <em>state machine</em> allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It\'s up to you to \'drive\' the machine, telling it when to transition.</p>\n<p>State machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or <em>null</em> if no further changes are possible.</p>\n<h2 id="machine-definition">Machine definition</h2>\n<p>An example of a simple state machine is a light switch. It has two states: <em>on</em> and <em>off</em>. When the light is <em>on</em>, the only other state is <em>off</em>. And vice-versa:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span></code></pre>\n<p>With this machine definition, it would be illegal to have a state <code is:raw>dimmed</code>, or to turn it <code is:raw>off</code> when it is already <code is:raw>off</code>. In this case, the machine never reaches a final state, it can always oscillate between <code is:raw>on</code> / <code is:raw>off</code>. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.</p>\n<p>It\'s possible to have several possible next states by using a string array:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"off"</span><span class="token punctuation">,</span> <span class="token string">"half_bright"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">half_bright</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"on"</span><span class="token punctuation">,</span> <span class="token string">"off"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span></code></pre>\n<p>The example below is intended to start with <code is:raw>plain</code> bread, with a few ways of getting to the eventual final state of <code is:raw>sprinkled_on_soup</code> or <code is:raw>eaten</code>. Once a machine is in its final state, it cannot change to another state unless it is <em>reset</em>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">plain</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"toasted"</span><span class="token punctuation">,</span> <span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">toasted</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"diced"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">buttered</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"marmaladed"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">marmaladed</span><span class="token operator">:</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">diced</span><span class="token operator">:</span> <span class="token string">"sprinkled_on_soup"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">sprinkled_on_soup</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">eaten</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="why">Why?</h2>\n<p>Behaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.</p>\n<p>A state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.</p>\n<h2 id="playground">Playground</h2>\n<p>Try out some state machines in this playground.</p>\n<ol>\n<li>Edit the description or choose a demo</li>\n<li>Click <em>Use description</em> to load it have it checked for errors.</li>\n<li>If successful, you can see available states. Select a state and then \'Change state\'</li>\n</ol>\n<p>(Note that properties are enclosed in " marks here because it\'s represented as JSON)</p>\n<StateMachinePlay />\n<h2 id="simple-usage">Simple usage</h2>\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n<p>A simple way of using the state machine is the functional, immutable approach. Create the machine with its <em>description</em> and <em>initial state</em>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> machine <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or <code is:raw>null</code> if it is a final state.</p>\n<p>The following example has four possible states (<code is:raw>wakeup, sleep, coffee, breakfast, bike</code>). <code is:raw>sleep</code> can only transition to the <code is:raw>wakeup</code> state, while <code is:raw>wakeup</code> can transition to either <code is:raw>coffee</code> or <code is:raw>breakfast</code>.</p>\n<p>Use <em>null</em> to signify the final state. Multiple states can terminate the machine if desired.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> \n <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">breakfast</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> sm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sleep</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>StateMachine.init</code> returns <a href="https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html"><code is:raw>MachineState</code></a> which captures the definition of the machine and its current state:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Current state</span>\nsm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// eg. \'bike\'</span>\n<span class="token comment">// List of unique states visited</span>\nsm<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// eg. [\'sleep\', \'wakeup\']</span>\n<span class="token comment">// Original machine definition</span>\nsm<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> </code></pre>\n<p>To attempt to change state, use <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html"><code is:raw>StateMachine.to</code></a></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Transition existing machine to state \'wakeup\'</span>\nsm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> <span class="token string">\'wakeup\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// \'wakeup\'</span></code></pre>\n<p>If this is a legal transition, you\'ll get a new <code is:raw>MachineState</code> object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.</p>\n<p>Here are some helper functions:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// String array of possible next states</span>\nStateMachine<span class="token punctuation">.</span><span class="token function">possible</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns _true_ if state machine cannot transition further</span>\nStateMachine<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Try to automatically move to next state</span>\nsm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="class-based-usage">Class-based usage</h2>\n<p>ixfx has a class <a href="https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html"><code is:raw>StateMachine.WithEvents</code></a> which wraps the functional implementation described above and also provides events for listening for event changes.</p>\n<p>The same format is used to define possible transitions. Now there\'s an mutable object, so <code is:raw>const</code> can be used:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> \n <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">breakfast</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateMachine<span class="token punctuation">.</span>WithEvents</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">initial</span><span class="token operator">:</span> <span class="token string">"sleep"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Change the state by name:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span></code></pre>\n<p>In some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Reset the machine back to its initial state with <code is:raw>reset()</code>. This is the only way to continue after reaching the final state.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Check status</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">...</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p>The <code is:raw>change</code> event is fired whenever state changes, and <code is:raw>stop</code> when the machine reaches a final state.</p>\n<pre class="language-js"><code is:raw class="language-js">sm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">change</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">State change from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token comment">// Prints for example:</span>\n <span class="token comment">// State change from wakeup -> breakfast</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stop</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Machine has finished in state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="simple-machines">Simple machines</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html"><code is:raw>StateMachine.fromList</code></a> creates transitions that steps through a series of states and then terminates.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Machine that can go: init -> one -> two -> three -> [end]</span>\n<span class="token keyword">const</span> sm1 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromList</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">one</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">two</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">three</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Once in the \'three\' state, will be considered <em>done</em>, since there is no possible transition from there.</p>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html"><code is:raw>StateMachine.fromListBidirectional</code></a> is the same idea, but allow back-and-forth between states.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token comment">// Machine that can go: init &lt;-> one &lt;-> two &lt;-> three</span>\n<span class="token keyword">const</span> sm2 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromListBidirectional</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">one</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">two</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">three</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the above example, <code is:raw>sm2</code> will never be <em>done</em>, because it\'s always possible for it to transition to some state.</p>' } };
const $$metadata = createMetadata("/src/pages/flow/stateMachine.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "/src/components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "./StateMachinePlay.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/flow/stateMachine.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$StateMachine = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$StateMachine;
  const $$content = { "title": "State Machine", "astro": { "headers": [{ "depth": 2, "slug": "machine-definition", "text": "Machine definition" }, { "depth": 2, "slug": "why", "text": "Why?" }, { "depth": 2, "slug": "playground", "text": "Playground" }, { "depth": 2, "slug": "simple-usage", "text": "Simple usage" }, { "depth": 2, "slug": "class-based-usage", "text": "Class-based usage" }, { "depth": 2, "slug": "simple-machines", "text": "Simple machines" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n\nA _state machine_ allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It\'s up to you to \'drive\' the machine, telling it when to transition.\n\nState machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or _null_ if no further changes are possible.\n\n## Machine definition\n\nAn example of a simple state machine is a light switch. It has two states: _on_ and _off_. When the light is _on_, the only other state is _off_. And vice-versa:\n\n```js\n{\n  on: "off",\n  off: "on"\n}\n```\n\nWith this machine definition, it would be illegal to have a state `dimmed`, or to turn it `off` when it is already `off`. In this case, the machine never reaches a final state, it can always oscillate between `on` / `off`. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.\n\nIt\'s possible to have several possible next states by using a string array:\n\n```js\n{\n  on: ["off", "half_bright"],\n  half_bright: ["on", "off"],\n  off: "on"\n}\n```\n\nThe example below is intended to start with `plain` bread, with a few ways of getting to the eventual final state of `sprinkled_on_soup` or `eaten`. Once a machine is in its final state, it cannot change to another state unless it is _reset_.\n\n```js\n{\n  plain: ["toasted", "buttered", "eaten"],\n  toasted: ["buttered", "eaten", "diced"],\n  buttered: ["eaten", "marmaladed"],\n  marmaladed: "eaten",\n  diced: "sprinkled_on_soup",\n  sprinkled_on_soup: null,\n  eaten: null\n}\n```\n\n## Why?\n\nBehaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.\n\nA state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.\n\n## Playground\n\nTry out some state machines in this playground. \n\n1. Edit the description or choose a demo\n2. Click _Use description_ to load it have it checked for errors.\n3. If successful, you can see available states. Select a state and then \'Change state\'\n\n(Note that properties are enclosed in " marks here because it\'s represented as JSON)\n\n<StateMachinePlay />\n\n## Simple usage\n\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n\nA simple way of using the state machine is the functional, immutable approach. Create the machine with its _description_ and _initial state_:\n\n```js\nconst machine = StateMachine.init({\n  on: "off",\n  off: "on"\n}, "on");\n```\n\nThe machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or `null` if it is a final state.\n\nThe following example has four possible states (`wakeup, sleep, coffee, breakfast, bike`). `sleep` can only transition to the `wakeup` state, while `wakeup` can transition to either `coffee` or `breakfast`. \n\nUse _null_ to signify the final state. Multiple states can terminate the machine if desired.\n\n```js\n// repl-pad#1\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\n\nconst description = { \n sleep: `wakeup`,\n wakeup: [`coffee`, `breakfast`],\n coffee: `bike`,\n breakfast: `bike`,\n bike: null\n}\nlet sm = StateMachine.init(description, `sleep`);\n```\n\n`StateMachine.init` returns [`MachineState`](https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html) which captures the definition of the machine and its current state:\n\n```js\n// repl-pad#1\n// Current state\nsm.value; // eg. \'bike\'\n// List of unique states visited\nsm.visited; // eg. [\'sleep\', \'wakeup\']\n// Original machine definition\nsm.machine; \n```\n\nTo attempt to change state, use [`StateMachine.to`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html)\n\n```js\n// repl-pad#1\n// Transition existing machine to state \'wakeup\'\nsm = StateMachine.to(sm, \'wakeup\');\nsm.value; // \'wakeup\'\n```\n\nIf this is a legal transition, you\'ll get a new `MachineState` object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.\n\nHere are some helper functions:\n```js\n// repl-pad#1\n// String array of possible next states\nStateMachine.possible(sm);\n\n// Returns _true_ if state machine cannot transition further\nStateMachine.done(sm);\n\n// Try to automatically move to next state\nsm = StateMachine.next(sm);\n```\n\n## Class-based usage\n\nixfx has a class [`StateMachine.WithEvents`](https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html) which wraps the functional implementation described above and also provides events for listening for event changes.\n\nThe same format is used to define possible transitions. Now there\'s an mutable object, so `const` can be used:\n\n```js\n// repl-pad#2\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\nconst description = { \n sleep: `wakeup`,\n wakeup: [`coffee`, `breakfast`],\n coffee: `bike`,\n breakfast: `bike`,\n bike: null\n}\nconst sm = new StateMachine.WithEvents(description, { initial: "sleep" });\n```\n\nChange the state by name:\n\n```js\n// repl-pad#2\nsm.state = `wakeup`\n```\n\nIn some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.\n\n```js\n// repl-pad#2\nsm.next();\n```\n\nReset the machine back to its initial state with `reset()`. This is the only way to continue after reaching the final state.\n\n```js\n// repl-pad#2\nsm.reset();\n```\n\nCheck status\n\n```js\nif (sm.state === `coffee`) ...\nif (sm.isDone) ...\n```\n\nThe `change` event is fired whenever state changes, and `stop` when the machine reaches a final state.\n\n```js\nsm.addEventListener(`change`, (evt) => {\n console.log(`State change from ${evt.priorState} -> ${evt.newState}`);\n\n // Prints for example:\n // State change from wakeup -> breakfast\n});\n\nsm.addEventListener(`stop`, (evt) => {\n console.log(`Machine has finished in state: ${evt.newState}`);\n});\n```\n\n## Simple machines\n\n[`StateMachine.fromList`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html) creates transitions that steps through a series of states and then terminates.\n\n```js\n// repl-pad#3\nimport { StateMachine } from "https://unpkg.com/ixfx/dist/flow.js"\n// Machine that can go: init -> one -> two -> three -> [end]\nconst sm1 = StateMachine.init(StateMachine.fromList(`init`, `one`, `two`, `three`));\n```\n\nOnce in the \'three\' state, will be considered _done_, since there is no possible transition from there.\n\n[`StateMachine.fromListBidirectional`](https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html) is the same idea, but allow back-and-forth between states.\n\n```js\n// repl-pad#3\n// Machine that can go: init <-> one <-> two <-> three\nconst sm2 = StateMachine.init(StateMachine.fromListBidirectional(`init`,`one`, `two`, `three`));\n```\n\nIn the above example, `sm2` will never be _done_, because it\'s always possible for it to transition to some state.\n', "html": '<script type="module" hoist>\nimport \'/src/components/ReplPad\';\n<\/script>\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n<p>A <em>state machine</em> allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It\'s up to you to \'drive\' the machine, telling it when to transition.</p>\n<p>State machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or <em>null</em> if no further changes are possible.</p>\n<h2 id="machine-definition">Machine definition</h2>\n<p>An example of a simple state machine is a light switch. It has two states: <em>on</em> and <em>off</em>. When the light is <em>on</em>, the only other state is <em>off</em>. And vice-versa:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span></code></pre>\n<p>With this machine definition, it would be illegal to have a state <code is:raw>dimmed</code>, or to turn it <code is:raw>off</code> when it is already <code is:raw>off</code>. In this case, the machine never reaches a final state, it can always oscillate between <code is:raw>on</code> / <code is:raw>off</code>. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.</p>\n<p>It\'s possible to have several possible next states by using a string array:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"off"</span><span class="token punctuation">,</span> <span class="token string">"half_bright"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">half_bright</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"on"</span><span class="token punctuation">,</span> <span class="token string">"off"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span></code></pre>\n<p>The example below is intended to start with <code is:raw>plain</code> bread, with a few ways of getting to the eventual final state of <code is:raw>sprinkled_on_soup</code> or <code is:raw>eaten</code>. Once a machine is in its final state, it cannot change to another state unless it is <em>reset</em>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">plain</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"toasted"</span><span class="token punctuation">,</span> <span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">toasted</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"diced"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">buttered</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"marmaladed"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">marmaladed</span><span class="token operator">:</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">diced</span><span class="token operator">:</span> <span class="token string">"sprinkled_on_soup"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">sprinkled_on_soup</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">eaten</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="why">Why?</h2>\n<p>Behaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.</p>\n<p>A state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.</p>\n<h2 id="playground">Playground</h2>\n<p>Try out some state machines in this playground.</p>\n<ol>\n<li>Edit the description or choose a demo</li>\n<li>Click <em>Use description</em> to load it have it checked for errors.</li>\n<li>If successful, you can see available states. Select a state and then \'Change state\'</li>\n</ol>\n<p>(Note that properties are enclosed in " marks here because it\'s represented as JSON)</p>\n<StateMachinePlay />\n<h2 id="simple-usage">Simple usage</h2>\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>\n</ul></div>\n<p>A simple way of using the state machine is the functional, immutable approach. Create the machine with its <em>description</em> and <em>initial state</em>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> machine <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or <code is:raw>null</code> if it is a final state.</p>\n<p>The following example has four possible states (<code is:raw>wakeup, sleep, coffee, breakfast, bike</code>). <code is:raw>sleep</code> can only transition to the <code is:raw>wakeup</code> state, while <code is:raw>wakeup</code> can transition to either <code is:raw>coffee</code> or <code is:raw>breakfast</code>.</p>\n<p>Use <em>null</em> to signify the final state. Multiple states can terminate the machine if desired.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> \n <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">breakfast</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> sm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sleep</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>StateMachine.init</code> returns <a href="https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html"><code is:raw>MachineState</code></a> which captures the definition of the machine and its current state:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Current state</span>\nsm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// eg. \'bike\'</span>\n<span class="token comment">// List of unique states visited</span>\nsm<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// eg. [\'sleep\', \'wakeup\']</span>\n<span class="token comment">// Original machine definition</span>\nsm<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> </code></pre>\n<p>To attempt to change state, use <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html"><code is:raw>StateMachine.to</code></a></p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// Transition existing machine to state \'wakeup\'</span>\nsm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> <span class="token string">\'wakeup\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// \'wakeup\'</span></code></pre>\n<p>If this is a legal transition, you\'ll get a new <code is:raw>MachineState</code> object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.</p>\n<p>Here are some helper functions:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token comment">// String array of possible next states</span>\nStateMachine<span class="token punctuation">.</span><span class="token function">possible</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns _true_ if state machine cannot transition further</span>\nStateMachine<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Try to automatically move to next state</span>\nsm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="class-based-usage">Class-based usage</h2>\n<p>ixfx has a class <a href="https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html"><code is:raw>StateMachine.WithEvents</code></a> which wraps the functional implementation described above and also provides events for listening for event changes.</p>\n<p>The same format is used to define possible transitions. Now there\'s an mutable object, so <code is:raw>const</code> can be used:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> \n <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">breakfast</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bike</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateMachine<span class="token punctuation">.</span>WithEvents</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">initial</span><span class="token operator">:</span> <span class="token string">"sleep"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Change the state by name:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wakeup</span><span class="token template-punctuation string">`</span></span></code></pre>\n<p>In some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Reset the machine back to its initial state with <code is:raw>reset()</code>. This is the only way to continue after reaching the final state.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#2</span>\nsm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Check status</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coffee</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">...</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre>\n<p>The <code is:raw>change</code> event is fired whenever state changes, and <code is:raw>stop</code> when the machine reaches a final state.</p>\n<pre class="language-js"><code is:raw class="language-js">sm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">change</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">State change from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n <span class="token comment">// Prints for example:</span>\n <span class="token comment">// State change from wakeup -> breakfast</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stop</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Machine has finished in state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="simple-machines">Simple machines</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html"><code is:raw>StateMachine.fromList</code></a> creates transitions that steps through a series of states and then terminates.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Machine that can go: init -> one -> two -> three -> [end]</span>\n<span class="token keyword">const</span> sm1 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromList</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">one</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">two</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">three</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Once in the \'three\' state, will be considered <em>done</em>, since there is no possible transition from there.</p>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html"><code is:raw>StateMachine.fromListBidirectional</code></a> is the same idea, but allow back-and-forth between states.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#3</span>\n<span class="token comment">// Machine that can go: init &lt;-> one &lt;-> two &lt;-> three</span>\n<span class="token keyword">const</span> sm2 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromListBidirectional</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">one</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">two</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">three</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the above example, <code is:raw>sm2</code> will never be <em>done</em>, because it\'s always possible for it to transition to some state.</p>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>
</li></ul></div><p>A <em>state machine</em> allows for a controlled change from one state to another. It sets up a well-defined set of possible states and what transitions are possible between them. It's up to you to 'drive' the machine, telling it when to transition.</p><p>State machines are defined with a plain object. Properties list of possible states, with values being what state(s) that are possible to change to, or <em>null</em> if no further changes are possible.</p><h2 id="machine-definition">Machine definition</h2><p>An example of a simple state machine is a light switch. It has two states: <em>on</em> and <em>off</em>. When the light is <em>on</em>, the only other state is <em>off</em>. And vice-versa:</p><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>
<span class="token punctuation">}</span></code></pre><p>With this machine definition, it would be illegal to have a state <code>dimmed</code>, or to turn it <code>off</code> when it is already <code>off</code>. In this case, the machine never reaches a final state, it can always oscillate between <code>on</code> / <code>off</code>. Note too that we can automatically and reliably advance the state of the machine, because each state indicates what follows.</p><p>It's possible to have several possible next states by using a string array:</p><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"off"</span><span class="token punctuation">,</span> <span class="token string">"half_bright"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">half_bright</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"on"</span><span class="token punctuation">,</span> <span class="token string">"off"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>
<span class="token punctuation">}</span></code></pre><p>The example below is intended to start with <code>plain</code> bread, with a few ways of getting to the eventual final state of <code>sprinkled_on_soup</code> or <code>eaten</code>. Once a machine is in its final state, it cannot change to another state unless it is <em>reset</em>.</p><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token literal-property property">plain</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"toasted"</span><span class="token punctuation">,</span> <span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">toasted</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"buttered"</span><span class="token punctuation">,</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"diced"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">buttered</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eaten"</span><span class="token punctuation">,</span> <span class="token string">"marmaladed"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">marmaladed</span><span class="token operator">:</span> <span class="token string">"eaten"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">diced</span><span class="token operator">:</span> <span class="token string">"sprinkled_on_soup"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sprinkled_on_soup</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">eaten</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span></code></pre><h2 id="why">Why?</h2><p>Behaving according to a current state is a common pattern in programming interactivity. This is often solved by using different variables track state. A downside is that you have to be mindful what variables or conditions alter state as well as when and where to enforce rules about state changes.</p><p>A state machine therefore can help you catch errors and makes coding simpler when you know there are a fixed number of well-defined states to handle, and they are only activated according to a logic you have defined.</p><h2 id="playground">Playground</h2><p>Try out some state machines in this playground.</p><ol>
<li>Edit the description or choose a demo</li>
<li>Click <em>Use description</em> to load it have it checked for errors.</li>
<li>If successful, you can see available states. Select a state and then 'Change state'</li>
</ol><p>(Note that properties are enclosed in " marks here because it's represented as JSON)</p>${renderComponent($$result, "StateMachinePlay", $$StateMachinePlay, {})}<h2 id="simple-usage">Simple usage</h2><div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.StateMachine.html">StateMachine</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
<li>Starter: <a href="https://github.com/ClintH/ixfx-demos/tree/main/flow/statemachine-starter">GitHub</a>, <a href="https://glitch.com/edit/#!/ixfx-starter-statemachine">Glitch</a>
</li></ul></div><p>A simple way of using the state machine is the functional, immutable approach. Create the machine with its <em>description</em> and <em>initial state</em>:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> machine <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token string">"on"</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The machine description is a simple object that 1) lists all possible states (as its top-level properties), and 2) for each state, what other state(s) can be transitioned to, or <code>null</code> if it is a final state.</p><p>The following example has four possible states (<code>wakeup, sleep, coffee, breakfast, bike</code>). <code>sleep</code> can only transition to the <code>wakeup</code> state, while <code>wakeup</code> can transition to either <code>coffee</code> or <code>breakfast</code>.</p><p>Use <em>null</em> to signify the final state. Multiple states can terminate the machine if desired.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wakeup</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
 <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">coffee</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">breakfast</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bike</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
 <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bike</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
 <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> sm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">sleep</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>StateMachine.init</code> returns <a href="https://clinth.github.io/ixfx/types/Flow.StateMachine.MachineState.html"><code>MachineState</code></a> which captures the definition of the machine and its current state:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token comment">// Current state</span>
sm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// eg. 'bike'</span>
<span class="token comment">// List of unique states visited</span>
sm<span class="token punctuation">.</span>visited<span class="token punctuation">;</span> <span class="token comment">// eg. ['sleep', 'wakeup']</span>
<span class="token comment">// Original machine definition</span>
sm<span class="token punctuation">.</span>machine<span class="token punctuation">;</span> </code></pre><p>To attempt to change state, use <a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.to.html"><code>StateMachine.to</code></a></p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token comment">// Transition existing machine to state 'wakeup'</span>
sm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>sm<span class="token punctuation">,</span> <span class="token string">'wakeup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sm<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 'wakeup'</span></code></pre><p>If this is a legal transition, you'll get a new <code>MachineState</code> object. If not, an exception will be thrown. Note that the state is immutable - a transition results in a new object.</p><p>Here are some helper functions:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token comment">// String array of possible next states</span>
StateMachine<span class="token punctuation">.</span><span class="token function">possible</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns _true_ if state machine cannot transition further</span>
StateMachine<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Try to automatically move to next state</span>
sm <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>sm<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="class-based-usage">Class-based usage</h2><p>ixfx has a class <a href="https://clinth.github.io/ixfx/classes/Flow.StateMachine.WithEvents.html"><code>StateMachine.WithEvents</code></a> which wraps the functional implementation described above and also provides events for listening for event changes.</p><p>The same format is used to define possible transitions. Now there's an mutable object, so <code>const</code> can be used:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#2</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">const</span> description <span class="token operator">=</span> <span class="token punctuation">{</span> 
 <span class="token literal-property property">sleep</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wakeup</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
 <span class="token literal-property property">wakeup</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">coffee</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">breakfast</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token literal-property property">coffee</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bike</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
 <span class="token literal-property property">breakfast</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bike</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
 <span class="token literal-property property">bike</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> sm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateMachine<span class="token punctuation">.</span>WithEvents</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">initial</span><span class="token operator">:</span> <span class="token string">"sleep"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Change the state by name:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#2</span>
sm<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wakeup</span><span class="token template-punctuation string">\`</span></span></code></pre><p>In some cases, you might want to ask the machine to transition to its next possible state, regardless of its current state. If multiple states are possible, it will use the first one.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#2</span>
sm<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Reset the machine back to its initial state with <code>reset()</code>. This is the only way to continue after reaching the final state.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#2</span>
sm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Check status</p><pre class="language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">coffee</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sm<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token operator">...</span></code></pre><p>The <code>change</code> event is fired whenever state changes, and <code>stop</code> when the machine reaches a final state.</p><pre class="language-js"><code class="language-js">sm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">change</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">State change from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// Prints for example:</span>
 <span class="token comment">// State change from wakeup -> breakfast</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stop</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Machine has finished in state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="simple-machines">Simple machines</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromList.html"><code>StateMachine.fromList</code></a> creates transitions that steps through a series of states and then terminates.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#3</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> StateMachine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Machine that can go: init -> one -> two -> three -> [end]</span>
<span class="token keyword">const</span> sm1 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromList</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">init</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">one</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">two</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">three</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Once in the 'three' state, will be considered <em>done</em>, since there is no possible transition from there.</p><p><a href="https://clinth.github.io/ixfx/functions/Flow.StateMachine.fromListBidirectional.html"><code>StateMachine.fromListBidirectional</code></a> is the same idea, but allow back-and-forth between states.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#3</span>
<span class="token comment">// Machine that can go: init &lt;-> one &lt;-> two &lt;-> three</span>
<span class="token keyword">const</span> sm2 <span class="token operator">=</span> StateMachine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>StateMachine<span class="token punctuation">.</span><span class="token function">fromListBidirectional</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">init</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">one</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">two</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">three</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the above example, <code>sm2</code> will never be <em>done</em>, because it's always possible for it to transition to some state.</p>` })}`;
});

export { $$metadata, $$StateMachine as default, frontmatter, metadata };
