import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

const metadata = { "headers": [{ "depth": 2, "slug": "basics", "text": "Basics" }, { "depth": 2, "slug": "iterating", "text": "Iterating" }, { "depth": 2, "slug": "additional-properties", "text": "Additional properties" }, { "depth": 2, "slug": "capacity-limiting", "text": "Capacity limiting" }], "source": '\n[API Docs: Stacks](https://clinth.github.io/ixfx/modules/Collections.Stacks.html)\n\nA stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.\n\nIn other words, it is LIFO (last in, first out). If you want first-in first out, see [Queue](../queue/).\n\nThe default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a _new_ stack. A stack instance itself never changes.\n\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPush">Push</button>\n  <button id="btnPop">Pop</button>\n</div>\n<div class="centered toolbar">\n  <div id="peek"></div>\n</div>\n<div id="vis"></div>\n\n\n## Basics\n\n`push` and `pop` are the main means of interacting with a stack.\n\n```js\nimport {Stacks} from "https://unpkg.com/ixfx/collections.js"\n\n// Initialise\nlet s = Stacks.immutable();\n\n// Items are pushed in order from start, so `c`\n// is on the "top" of the stack now.\ns = s.push(`a`, `b`, `c`);\n\n// Yields `c`\ns.peek;\n\n// Return a new stack with top-most item removed\ns = s.pop();\n```\n\n## Iterating\n\nFor the most part, you\'re meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.\n\nThat said, there are ways of iterating:\n\n```js\n// Iterate from bottom-to-top of stack\ns.forEach(item => {\n  // do something with item\n})\n\n// Iterate from top-to-bottom of stack\ns.forEachFromTop(item => {\n  // do something with item\n});\n```\n\n## Additional properties\n\n```js\n// True if stack is empty\ns.isEmpty;\n\n// How many items in stack\ns.length;\n\n// Returns the underlying array\n// used by the stack. Be careful not to\n// modify or it may break the stack semantics\ns.data;\n```\n\n## Capacity limiting\n\nWhen creating the stack, it\'s possible to set a capacity limit. This can be useful to avoid a _backlog_ of data. For example, if you\'re processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don\'t really care about older things any longer.\n\n```js\nlet q = Stacks.immutable({capacity: 5, discardPolicy: `newer`});\n```\n\nThe `capacity` naturally sets the total number of items the stack will store. The `discardPolicy` determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is _pushed_.\n\nValues for `discardPolicy` are:\n* `older`: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away\n* `newer`: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away\n* `additions`: Does not change the existing items, but rather throws away items that are being _pushed_. \n\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackDiscardVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPushDiscard">Push</button>\n  <button id="btnPopDiscard">Pop</button>\n  <label for="selDiscard" style="align-self: center">Capacity 3.<br /> Discard policy</label>\n  <select id="selDiscard">\n    <option value="older">older</option>\n    <option value="newer">newer</option>\n    <option value="additions">additions</option>\n  </select>\n</div>\n<div class="centered toolbar">\n  <div id="peekDiscard"></div>\n</div>\n<div id="visDiscard"></div>', "html": '<p><a href="https://clinth.github.io/ixfx/modules/Collections.Stacks.html">API Docs: Stacks</a></p>\n<p>A stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.</p>\n<p>In other words, it is LIFO (last in, first out). If you want first-in first out, see <a href="../queue/">Queue</a>.</p>\n<p>The default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a <em>new</em> stack. A stack instance itself never changes.</p>\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPush">Push</button>\n  <button id="btnPop">Pop</button>\n</div>\n<div class="centered toolbar">\n  <div id="peek"></div>\n</div>\n<div id="vis"></div>\n<h2 id="basics">Basics</h2>\n<p><code is:raw>push</code> and <code is:raw>pop</code> are the main means of interacting with a stack.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>Stacks<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/collections.js"</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Items are pushed in order from start, so `c`</span>\n<span class="token comment">// is on the "top" of the stack now.</span>\ns <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">b</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields `c`</span>\ns<span class="token punctuation">.</span>peek<span class="token punctuation">;</span>\n\n<span class="token comment">// Return a new stack with top-most item removed</span>\ns <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="iterating">Iterating</h2>\n<p>For the most part, you\'re meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.</p>\n<p>That said, there are ways of iterating:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Iterate from bottom-to-top of stack</span>\ns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Iterate from top-to-bottom of stack</span>\ns<span class="token punctuation">.</span><span class="token function">forEachFromTop</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="additional-properties">Additional properties</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// True if stack is empty</span>\ns<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>\n\n<span class="token comment">// How many items in stack</span>\ns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n<span class="token comment">// Returns the underlying array</span>\n<span class="token comment">// used by the stack. Be careful not to</span>\n<span class="token comment">// modify or it may break the stack semantics</span>\ns<span class="token punctuation">.</span>data<span class="token punctuation">;</span></code></pre>\n<h2 id="capacity-limiting">Capacity limiting</h2>\n<p>When creating the stack, it\'s possible to set a capacity limit. This can be useful to avoid a <em>backlog</em> of data. For example, if you\'re processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don\'t really care about older things any longer.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">let</span> q <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">discardPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">newer</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The <code is:raw>capacity</code> naturally sets the total number of items the stack will store. The <code is:raw>discardPolicy</code> determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is <em>pushed</em>.</p>\n<p>Values for <code is:raw>discardPolicy</code> are:</p>\n<ul>\n<li><code is:raw>older</code>: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away</li>\n<li><code is:raw>newer</code>: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away</li>\n<li><code is:raw>additions</code>: Does not change the existing items, but rather throws away items that are being <em>pushed</em>.</li>\n</ul>\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackDiscardVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPushDiscard">Push</button>\n  <button id="btnPopDiscard">Pop</button>\n  <label for="selDiscard" style="align-self: center">Capacity 3.<br /> Discard policy</label>\n  <select id="selDiscard">\n    <option value="older">older</option>\n    <option value="newer">newer</option>\n    <option value="additions">additions</option>\n  </select>\n</div>\n<div class="centered toolbar">\n  <div id="peekDiscard"></div>\n</div>\n<div id="visDiscard"></div>' };
const frontmatter = { "title": "Stack", "astro": { "headers": [{ "depth": 2, "slug": "basics", "text": "Basics" }, { "depth": 2, "slug": "iterating", "text": "Iterating" }, { "depth": 2, "slug": "additional-properties", "text": "Additional properties" }, { "depth": 2, "slug": "capacity-limiting", "text": "Capacity limiting" }], "source": '\n[API Docs: Stacks](https://clinth.github.io/ixfx/modules/Collections.Stacks.html)\n\nA stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.\n\nIn other words, it is LIFO (last in, first out). If you want first-in first out, see [Queue](../queue/).\n\nThe default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a _new_ stack. A stack instance itself never changes.\n\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPush">Push</button>\n  <button id="btnPop">Pop</button>\n</div>\n<div class="centered toolbar">\n  <div id="peek"></div>\n</div>\n<div id="vis"></div>\n\n\n## Basics\n\n`push` and `pop` are the main means of interacting with a stack.\n\n```js\nimport {Stacks} from "https://unpkg.com/ixfx/collections.js"\n\n// Initialise\nlet s = Stacks.immutable();\n\n// Items are pushed in order from start, so `c`\n// is on the "top" of the stack now.\ns = s.push(`a`, `b`, `c`);\n\n// Yields `c`\ns.peek;\n\n// Return a new stack with top-most item removed\ns = s.pop();\n```\n\n## Iterating\n\nFor the most part, you\'re meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.\n\nThat said, there are ways of iterating:\n\n```js\n// Iterate from bottom-to-top of stack\ns.forEach(item => {\n  // do something with item\n})\n\n// Iterate from top-to-bottom of stack\ns.forEachFromTop(item => {\n  // do something with item\n});\n```\n\n## Additional properties\n\n```js\n// True if stack is empty\ns.isEmpty;\n\n// How many items in stack\ns.length;\n\n// Returns the underlying array\n// used by the stack. Be careful not to\n// modify or it may break the stack semantics\ns.data;\n```\n\n## Capacity limiting\n\nWhen creating the stack, it\'s possible to set a capacity limit. This can be useful to avoid a _backlog_ of data. For example, if you\'re processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don\'t really care about older things any longer.\n\n```js\nlet q = Stacks.immutable({capacity: 5, discardPolicy: `newer`});\n```\n\nThe `capacity` naturally sets the total number of items the stack will store. The `discardPolicy` determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is _pushed_.\n\nValues for `discardPolicy` are:\n* `older`: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away\n* `newer`: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away\n* `additions`: Does not change the existing items, but rather throws away items that are being _pushed_. \n\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackDiscardVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPushDiscard">Push</button>\n  <button id="btnPopDiscard">Pop</button>\n  <label for="selDiscard" style="align-self: center">Capacity 3.<br /> Discard policy</label>\n  <select id="selDiscard">\n    <option value="older">older</option>\n    <option value="newer">newer</option>\n    <option value="additions">additions</option>\n  </select>\n</div>\n<div class="centered toolbar">\n  <div id="peekDiscard"></div>\n</div>\n<div id="visDiscard"></div>', "html": '<p><a href="https://clinth.github.io/ixfx/modules/Collections.Stacks.html">API Docs: Stacks</a></p>\n<p>A stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.</p>\n<p>In other words, it is LIFO (last in, first out). If you want first-in first out, see <a href="../queue/">Queue</a>.</p>\n<p>The default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a <em>new</em> stack. A stack instance itself never changes.</p>\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPush">Push</button>\n  <button id="btnPop">Pop</button>\n</div>\n<div class="centered toolbar">\n  <div id="peek"></div>\n</div>\n<div id="vis"></div>\n<h2 id="basics">Basics</h2>\n<p><code is:raw>push</code> and <code is:raw>pop</code> are the main means of interacting with a stack.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>Stacks<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/collections.js"</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Items are pushed in order from start, so `c`</span>\n<span class="token comment">// is on the "top" of the stack now.</span>\ns <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">b</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields `c`</span>\ns<span class="token punctuation">.</span>peek<span class="token punctuation">;</span>\n\n<span class="token comment">// Return a new stack with top-most item removed</span>\ns <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="iterating">Iterating</h2>\n<p>For the most part, you\'re meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.</p>\n<p>That said, there are ways of iterating:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Iterate from bottom-to-top of stack</span>\ns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Iterate from top-to-bottom of stack</span>\ns<span class="token punctuation">.</span><span class="token function">forEachFromTop</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="additional-properties">Additional properties</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// True if stack is empty</span>\ns<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>\n\n<span class="token comment">// How many items in stack</span>\ns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n<span class="token comment">// Returns the underlying array</span>\n<span class="token comment">// used by the stack. Be careful not to</span>\n<span class="token comment">// modify or it may break the stack semantics</span>\ns<span class="token punctuation">.</span>data<span class="token punctuation">;</span></code></pre>\n<h2 id="capacity-limiting">Capacity limiting</h2>\n<p>When creating the stack, it\'s possible to set a capacity limit. This can be useful to avoid a <em>backlog</em> of data. For example, if you\'re processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don\'t really care about older things any longer.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">let</span> q <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">discardPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">newer</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The <code is:raw>capacity</code> naturally sets the total number of items the stack will store. The <code is:raw>discardPolicy</code> determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is <em>pushed</em>.</p>\n<p>Values for <code is:raw>discardPolicy</code> are:</p>\n<ul>\n<li><code is:raw>older</code>: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away</li>\n<li><code is:raw>newer</code>: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away</li>\n<li><code is:raw>additions</code>: Does not change the existing items, but rather throws away items that are being <em>pushed</em>.</li>\n</ul>\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackDiscardVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPushDiscard">Push</button>\n  <button id="btnPopDiscard">Pop</button>\n  <label for="selDiscard" style="align-self: center">Capacity 3.<br /> Discard policy</label>\n  <select id="selDiscard">\n    <option value="older">older</option>\n    <option value="newer">newer</option>\n    <option value="additions">additions</option>\n  </select>\n</div>\n<div class="centered toolbar">\n  <div id="peekDiscard"></div>\n</div>\n<div id="visDiscard"></div>' } };
const $$metadata = createMetadata("/src/pages/data/collections/stack.md", { modules: [{ module: $$module1, specifier: "../../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
import '/src/components/data/collections/ArrayVisElement';
import '/src/components/data/collections/StackDiscardVis';
` }, { type: "inline", value: `
import '/src/components/data/collections/ArrayVisElement';
import '/src/components/data/collections/StackVis';
` }] });
const $$Astro = createAstro("/src/pages/data/collections/stack.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Stack = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Stack;
  const $$content = { "title": "Stack", "astro": { "headers": [{ "depth": 2, "slug": "basics", "text": "Basics" }, { "depth": 2, "slug": "iterating", "text": "Iterating" }, { "depth": 2, "slug": "additional-properties", "text": "Additional properties" }, { "depth": 2, "slug": "capacity-limiting", "text": "Capacity limiting" }], "source": '\n[API Docs: Stacks](https://clinth.github.io/ixfx/modules/Collections.Stacks.html)\n\nA stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.\n\nIn other words, it is LIFO (last in, first out). If you want first-in first out, see [Queue](../queue/).\n\nThe default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a _new_ stack. A stack instance itself never changes.\n\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPush">Push</button>\n  <button id="btnPop">Pop</button>\n</div>\n<div class="centered toolbar">\n  <div id="peek"></div>\n</div>\n<div id="vis"></div>\n\n\n## Basics\n\n`push` and `pop` are the main means of interacting with a stack.\n\n```js\nimport {Stacks} from "https://unpkg.com/ixfx/collections.js"\n\n// Initialise\nlet s = Stacks.immutable();\n\n// Items are pushed in order from start, so `c`\n// is on the "top" of the stack now.\ns = s.push(`a`, `b`, `c`);\n\n// Yields `c`\ns.peek;\n\n// Return a new stack with top-most item removed\ns = s.pop();\n```\n\n## Iterating\n\nFor the most part, you\'re meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.\n\nThat said, there are ways of iterating:\n\n```js\n// Iterate from bottom-to-top of stack\ns.forEach(item => {\n  // do something with item\n})\n\n// Iterate from top-to-bottom of stack\ns.forEachFromTop(item => {\n  // do something with item\n});\n```\n\n## Additional properties\n\n```js\n// True if stack is empty\ns.isEmpty;\n\n// How many items in stack\ns.length;\n\n// Returns the underlying array\n// used by the stack. Be careful not to\n// modify or it may break the stack semantics\ns.data;\n```\n\n## Capacity limiting\n\nWhen creating the stack, it\'s possible to set a capacity limit. This can be useful to avoid a _backlog_ of data. For example, if you\'re processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don\'t really care about older things any longer.\n\n```js\nlet q = Stacks.immutable({capacity: 5, discardPolicy: `newer`});\n```\n\nThe `capacity` naturally sets the total number of items the stack will store. The `discardPolicy` determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is _pushed_.\n\nValues for `discardPolicy` are:\n* `older`: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away\n* `newer`: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away\n* `additions`: Does not change the existing items, but rather throws away items that are being _pushed_. \n\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackDiscardVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPushDiscard">Push</button>\n  <button id="btnPopDiscard">Pop</button>\n  <label for="selDiscard" style="align-self: center">Capacity 3.<br /> Discard policy</label>\n  <select id="selDiscard">\n    <option value="older">older</option>\n    <option value="newer">newer</option>\n    <option value="additions">additions</option>\n  </select>\n</div>\n<div class="centered toolbar">\n  <div id="peekDiscard"></div>\n</div>\n<div id="visDiscard"></div>', "html": '<p><a href="https://clinth.github.io/ixfx/modules/Collections.Stacks.html">API Docs: Stacks</a></p>\n<p>A stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.</p>\n<p>In other words, it is LIFO (last in, first out). If you want first-in first out, see <a href="../queue/">Queue</a>.</p>\n<p>The default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a <em>new</em> stack. A stack instance itself never changes.</p>\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPush">Push</button>\n  <button id="btnPop">Pop</button>\n</div>\n<div class="centered toolbar">\n  <div id="peek"></div>\n</div>\n<div id="vis"></div>\n<h2 id="basics">Basics</h2>\n<p><code is:raw>push</code> and <code is:raw>pop</code> are the main means of interacting with a stack.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>Stacks<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/collections.js"</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">let</span> s <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Items are pushed in order from start, so `c`</span>\n<span class="token comment">// is on the "top" of the stack now.</span>\ns <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">b</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields `c`</span>\ns<span class="token punctuation">.</span>peek<span class="token punctuation">;</span>\n\n<span class="token comment">// Return a new stack with top-most item removed</span>\ns <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="iterating">Iterating</h2>\n<p>For the most part, you\'re meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.</p>\n<p>That said, there are ways of iterating:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Iterate from bottom-to-top of stack</span>\ns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Iterate from top-to-bottom of stack</span>\ns<span class="token punctuation">.</span><span class="token function">forEachFromTop</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with item</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="additional-properties">Additional properties</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// True if stack is empty</span>\ns<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>\n\n<span class="token comment">// How many items in stack</span>\ns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n<span class="token comment">// Returns the underlying array</span>\n<span class="token comment">// used by the stack. Be careful not to</span>\n<span class="token comment">// modify or it may break the stack semantics</span>\ns<span class="token punctuation">.</span>data<span class="token punctuation">;</span></code></pre>\n<h2 id="capacity-limiting">Capacity limiting</h2>\n<p>When creating the stack, it\'s possible to set a capacity limit. This can be useful to avoid a <em>backlog</em> of data. For example, if you\'re processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don\'t really care about older things any longer.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">let</span> q <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">discardPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">newer</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The <code is:raw>capacity</code> naturally sets the total number of items the stack will store. The <code is:raw>discardPolicy</code> determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is <em>pushed</em>.</p>\n<p>Values for <code is:raw>discardPolicy</code> are:</p>\n<ul>\n<li><code is:raw>older</code>: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away</li>\n<li><code is:raw>newer</code>: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away</li>\n<li><code is:raw>additions</code>: Does not change the existing items, but rather throws away items that are being <em>pushed</em>.</li>\n</ul>\n<script type="module" hoist>\nimport \'/src/components/data/collections/ArrayVisElement\';\nimport \'/src/components/data/collections/StackDiscardVis\';\n<\/script>\n<div class="centered toolbar">\n  <button id="btnPushDiscard">Push</button>\n  <button id="btnPopDiscard">Pop</button>\n  <label for="selDiscard" style="align-self: center">Capacity 3.<br /> Discard policy</label>\n  <select id="selDiscard">\n    <option value="older">older</option>\n    <option value="newer">newer</option>\n    <option value="additions">additions</option>\n  </select>\n</div>\n<div class="centered toolbar">\n  <div id="peekDiscard"></div>\n</div>\n<div id="visDiscard"></div>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/data/collections/ArrayVisElement';
import '/src/components/data/collections/StackDiscardVis';` },
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/data/collections/ArrayVisElement';
import '/src/components/data/collections/StackVis';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<p><a href="https://clinth.github.io/ixfx/modules/Collections.Stacks.html">API Docs: Stacks</a></p><p>A stack stores items like a stack of plates. Items added get put on the top, and if you want to grab an item, you can only see, and grab from the top. This is useful if newer things have priority.</p><p>In other words, it is LIFO (last in, first out). If you want first-in first out, see <a href="../queue/">Queue</a>.</p><p>The default implementation in ixfx is immutable, meaning that every operation that changes the stack returns a <em>new</em> stack. A stack instance itself never changes.</p><div class="centered toolbar">
  <button id="btnPush">Push</button>
  <button id="btnPop">Pop</button>
</div><div class="centered toolbar">
  <div id="peek"></div>
</div><div id="vis"></div><h2 id="basics">Basics</h2><p><code>push</code> and <code>pop</code> are the main means of interacting with a stack.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>Stacks<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/collections.js"</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Items are pushed in order from start, so \`c\`</span>
<span class="token comment">// is on the "top" of the stack now.</span>
s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">a</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">b</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">c</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Yields \`c\`</span>
s<span class="token punctuation">.</span>peek<span class="token punctuation">;</span>

<span class="token comment">// Return a new stack with top-most item removed</span>
s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="iterating">Iterating</h2><p>For the most part, you're meant to just access the top-most item of a stack. If you find yourself needing to dig through a stack, it may not be the right data structure.</p><p>That said, there are ways of iterating:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Iterate from bottom-to-top of stack</span>
s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with item</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Iterate from top-to-bottom of stack</span>
s<span class="token punctuation">.</span><span class="token function">forEachFromTop</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with item</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="additional-properties">Additional properties</h2><pre class="language-js"><code class="language-js"><span class="token comment">// True if stack is empty</span>
s<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>

<span class="token comment">// How many items in stack</span>
s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

<span class="token comment">// Returns the underlying array</span>
<span class="token comment">// used by the stack. Be careful not to</span>
<span class="token comment">// modify or it may break the stack semantics</span>
s<span class="token punctuation">.</span>data<span class="token punctuation">;</span></code></pre><h2 id="capacity-limiting">Capacity limiting</h2><p>When creating the stack, it's possible to set a capacity limit. This can be useful to avoid a <em>backlog</em> of data. For example, if you're processing a queue of pressure-sensor data, if a burst of new data comes in you would rather process the freshest data first, you don't really care about older things any longer.</p><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> q <span class="token operator">=</span> Stacks<span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">capacity</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">discardPolicy</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">newer</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The <code>capacity</code> naturally sets the total number of items the stack will store. The <code>discardPolicy</code> determines how the size is maintained when the capacity limit is hit. This logic runs whenever something is <em>pushed</em>.</p><p>Values for <code>discardPolicy</code> are:</p><ul>
<li><code>older</code>: Removes existing items from the bottom of the stack to make room for additions. Ie. the oldest items are thrown away</li>
<li><code>newer</code>: Removes existing items from the top of the stack to make room for additions. Ie. the newest items are thrown away</li>
<li><code>additions</code>: Does not change the existing items, but rather throws away items that are being <em>pushed</em>.</li>
</ul><div class="centered toolbar">
  <button id="btnPushDiscard">Push</button>
  <button id="btnPopDiscard">Pop</button>
  <label for="selDiscard" style="align-self: center">Capacity 3.<br> Discard policy</label>
  <select id="selDiscard">
    <option value="older">older</option>
    <option value="newer">newer</option>
    <option value="additions">additions</option>
  </select>
</div><div class="centered toolbar">
  <div id="peekDiscard"></div>
</div><div id="visDiscard"></div>` })}`;
});

export { $$metadata, $$Stack as default, frontmatter, metadata };
