import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

const metadata = { "headers": [{ "depth": 2, "slug": "enumerating", "text": "Enumerating" }, { "depth": 2, "slug": "accessing-items", "text": "Accessing items" }, { "depth": 3, "slug": "cycle", "text": "Cycle" }, { "depth": 2, "slug": "finding", "text": "Finding" }, { "depth": 2, "slug": "ordering", "text": "Ordering" }, { "depth": 2, "slug": "filtering", "text": "Filtering" }, { "depth": 2, "slug": "grouping", "text": "Grouping" }, { "depth": 2, "slug": "numeric-arrays", "text": "Numeric arrays" }, { "depth": 3, "slug": "ranges", "text": "Ranges" }, { "depth": 3, "slug": "averages", "text": "Averages" }, { "depth": 3, "slug": "weighting", "text": "Weighting" }, { "depth": 2, "slug": "more-functions", "text": "More functions" }], "source": "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html\">Collections.Arrays module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n## Enumerating\n\nJS's `for of` can be used to enumerate over items in an array:\n\n```js\nfor (const value of someArray) {\n  // Do something with value \n}\n```\n\nAnother classic approach you'll see is a `for` loop. This is only useful if you're concerned with the indexes of the items. Most of the time we aren't, which is why the style above is preferred. \n\n```js\n// Classic 'for' loop\nfor (let i=0;i<someArray.length;i++) {\n  const item = someArray[i]; // access by index\n  console.log(`${i}. ${someArray[i]}`);\n}\n```\n\nAnother benefit of the `for of` loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: [Generators](../../gen/generator/)\n\n## Accessing items\n\nArray items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a `length` property which returns how many items it contains.\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\n\n// Get the second item, which has an index of 1\nconst second = someArray[1]; \n\n// Get the last item (length is three, but indexes start at zero, so we have to -1)\nconst last = someArray[someArray.length-1];\n\nconst first = someArray[0];\n```\n\nIt also works to use `at`, which has the benefit of being able to work backwards:\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\nconst second = someArray.at(1);\n\n// Get one item back from start, ie the last item:\nconst last = someArray.at(-1);\nconst first = someArray.at(0);\n```\n\nixfx has some functions for randomly choosing items or indexes from an array: [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) returns a random element from an array, [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) returns a random index.\n\n```js\n// repl-pad\nimport {randomElement, randomIndex} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Return a random string: apples, oranges or pears\nrandomElement([`apples`, `oranges`, `pears`]);\n\n// Return a random index: 0, 1 or 2\nrandomIndex([`apples`, `oranges`, `pears`]);\n```\n\n[`weightedInteger`](https://clinth.github.io/ixfx/functions/Random.weightedInteger.html) can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.\n\n```js\nimport {weightedInteger} from 'https://unpkg.com/ixfx/dist/random.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n// Define a function to produce the random numbers we want\nconst rand = () => weightedInteger({ max: a.length, easing: `quadIn` });\n// Use function to access an item in array\na[rand()];\n```\n\n### Cycle\n\n[`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) allows traversing an array with function calls. It's useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.\n\n```js\nimport { cycle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst c = cycle([`apples`,`oranges`,`pears`]);\nc.current; // 'apples'\nc.next(); // `oranges`\nc.next(); // `pears`\nc.next(); // `apples'\nc.select(1); // 'oranges'\nc.select(`pears`); // 'pears'\n```\n\n## Finding\n\nJS's [`some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) yields _true_ if at least one item in the array matches the provided function.\n\nFor example, if you want to check if there is a green fruit in a list of fruits:\n\n```js\nconst fruits = [\n  {colour: `red`, name: `grape`},\n  {colour: `green`, name: `granny-smith`}\n];\n\n// isFound will be true or false\nconst isFound = fruits.some(v => {\n  return (v.colour === `green`)\n});\n```\n\nJS's [`includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) returns true if the specified value is found in an array.\n\n```js\nconst favColours = [ `red`, `green`, `yellow`];\nif (favColours.includes(`red`)) {\n  // Red is in the favourite colours...\n}\n\n// Note that favColours.includes(`RED`) would return false\n```\n\nWhen using `includes` to check for objects, be mindful that it compares them by _reference_ not _value_. \n\n```js\n// Returns false, because although object value exists in array,\n// this *particular* object does not:\nconst isFound = fruits.includes({colour: `red`, name: `grape`});\n```\n\nJS's [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) function is similar, but it returns the first matching item instead of just true/false. \n\n```js\nconst firstGreenFruit = fruits.find(v => {\n  return (v.colour === `green`);\n});\n\n// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}\n```\n\nIf no matching items were found, `undefined` is returned.\n\n```js\nconst firstPurpleFruit = fruits.find(v v=> v.colour === `purple`); // note simplified arrow function syntax\nif (firstPurpleFruit === undefined) {\n  console.log(`Not found`);\n} else {\n  console.log(`Found: ${firstPurpleFruit.name}`); // Print name of found fruit\n}\n```\n\n\n## Ordering\n\n```js\n// Ordering and enumerating:\nsomeArray.sort();     // Simple sort\nsomeArray.reverse();  // Reverse order\n```\n\nixfx's [`shuffle`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle) randomises the ordering of an array.\n\n```js\n// repl-pad#1\nimport { shuffle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n\n// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];\nconst b = shuffle(a);\n```\n\nOnce shuffled, you can then iterate over the array as normal:\n\n```js\n// repl-pad#1\nconst c = [1,2,3,4,5,6,7,8,9,10];\n\n// Prints items from array in random order\nfor (const value of shuffle(c)) {\n  console.log(value);\n}\n```\n\n## Filtering\n\n[`without`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without) returns a copy of an array without values equal to `v`. In the case of objects, references are compared.\n\n```js\n// repl-pad\nimport { without } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [1,2,3,1,2,3];\n// Yields: [1,3,1,3]\nwithout(data, 2);\n```\n\nJS's in built [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) function all items which pass the provided function:\n\n```js\nconst data = [1,2,3,1,2,3];\nconst filtered = data.filter(d => d > 2); // Return true if value is greater than 2\n// [3, 3]\n```\n\nixfx has [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) which captures items on either side of the filter function.\n```js\nimport { filterAB } from \"https://unpkg.com/ixfx/dist/arrays.js\";\nconst data = [1,2,3,1,2,3]\nconst [matching,nonMatching] = filterAB(data, d => d > 2);\n// matching: [ 3, 3]\n// nonMatching: [ 1, 2, 1, 2]\n```\n\n[`until`](https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html) returns all items in an array until the provided predicate returns false.\n\n```js\n// repl-pad\nimport { until } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Callback gets current value, and needs to return:\n// [true/false, accumulated value]\n// In this case, we return [true,0] if v === 3\nconst v = Arrays.until([1,2,3,4,5], v => [v === 3, 0]);\n\n```\n\nRemove a random element from an array with [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html). It doesn't modify the array, but returns the randomly selected item and a new array without it.\n\n\n```js\n// repl-pad\nimport {randomPluck} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Remove a random element\nconst r = randomPluck([`apples`, `oranges`, `pears`]);\nr.value; // A random value\nr.array; // A copy of the array with the random value removed\n```\n\n## Grouping\n\n[`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) allows you to group an array by some generated key.\n\n```js\n// repl-pad\nimport { groupBy } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [\n { age: 39, city: `London` }\n { age: 14, city: `Copenhagen` }\n { age: 23, city: `Stockholm` }\n { age: 56, city: `London` }\n];\nconst map = groupBy(data, item => data.city); \n```\n\nThis will yield:\n\n```js\n{\n  London: [\n    { age: 39, city: `London` }, \n    { age: 56, city: `London` }\n  ],\n  Stockhom: [\n    { age: 23, city: `Stockholm` }\n  ],\n  Copenhagen: [\n    { age: 14, city: `Copenhagen` }\n  ]\n}\n```\n\n## Numeric arrays\n\nIf you have an array of numbers, ixfx has some functions for common needs.\n\nOverview: \n* average, min, max, total or minMaxAvg to calculate all\n* averageWeighted\n* dotProduct\n* weight\n  \n### Ranges\n\n```js\n// repl-pad\nimport { max,min,average, minMaxAvg } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\nconst data = [1,2,3];\n// Compute max, min, avg:\nmax(...data); // 3\nmin(...data); // 1\naverage(...data); //\n\n// Or compute them all at once:\nminMaxAvg(...data);\n// Yields: {min: 1, max: 3, avg:, total: 6}\n```\n\n### Averages\n\n```js\n// repl-pad\nimport { average } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Compute an average of all provided values\naverage(1, 1.4, 0.9, 0.1);  // 0.85\n\n// Compute average of an array\nconst data = [1,2,3,4,5];\naverage(...data);           // 3\n```\n\n[`averageWeighted`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted) applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).\n\n```js\n// repl-pad\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\nimport { averageWeighted } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Using an ixfx easing function to weight elements.\n// Gaussian function weights middle elements highest, skewing the average\nconst v = averageWeighted([10,2,3,4,10], Easings.gaussian());\n// Yields: 3.6, while regular `average` yields 5.8\n```\n\n### Weighting\n\n`weight` applies a function (probably an [easing function](../../modulation/easing/)) to some data.\n\n```js\n// repl-pad\n\nimport { weight } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n\n// Weighs an input array of 1s\nweight([1,1,1,1,1,1], Easings.gaussian());\n\n// Yields:\n// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n```\n\n## More functions\n\nComparing arrays\n* [`compareValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html) - for array _x_ and _y_, identify items common in both, or exclusively in _x_ or _y_\n* [`compareValuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html) - returns _true_ if both arrays contain the same set of items, regardless of position.\n* [`additionalValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html) - yield all values not contained in a base array\n* [`intersection`](https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html) - return values contained in both _x_ and _y_ arrays\n* [`unique`](https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html) - combines values of arrays, only keeping unique values\n  \nRandomisation\n* [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) - random index\n* [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) - random value\n* [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html) - remove random value\n* [`shuffle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html) - randomise order\n\nFinding/accessing\n* [`contains`](https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html) - returns _true_ if array contains all provided items\n* [`containsDuplicateValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html) - returns _true_ if any duplicate _values_ are found in source array.\n* [`containsDuplicateInstances`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html) - returns _true_ if any duplicate _instances_ are found in source array.\n* [`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) - cycle through contents\n* [`filterBetween`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html) - return elements of array that match predicate _and_ are within a given start and end index\n* [`sample`](https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html) - sub-sample an array\n* [`valuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html) - returns _true_ if all values in array are identical\n* [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.\n\n\nChanging the shape of an array\n* [`ensureLength`](https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html) - Pad out or truncate an array so it matches a target length\n* [`chunks`](https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html) - break up an array into chunks of a given size\n* [`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) - Groups data by a function\n* [`interleave`](https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html) - combines the values of several arrays by interleaving values\n* [`remove`](https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html) - remove an element by index\n* [`without`](https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html) - return an array without a given value\n* [`zip`](https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html) - combine elements of arrays based on their index", "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html">Collections.Arrays module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<h2 id="enumerating">Enumerating</h2>\n<p>JS\'s <code is:raw>for of</code> can be used to enumerate over items in an array:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> someArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with value </span>\n<span class="token punctuation">}</span></code></pre>\n<p>Another classic approach you\'ll see is a <code is:raw>for</code> loop. This is only useful if you\'re concerned with the indexes of the items. Most of the time we aren\'t, which is why the style above is preferred.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Classic \'for\' loop</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>someArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> item <span class="token operator">=</span> someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// access by index</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Another benefit of the <code is:raw>for of</code> loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: <a href="../../gen/generator/">Generators</a></p>\n<h2 id="accessing-items">Accessing items</h2>\n<p>Array items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a <code is:raw>length</code> property which returns how many items it contains.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the second item, which has an index of 1</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n\n<span class="token comment">// Get the last item (length is three, but indexes start at zero, so we have to -1)</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">[</span>someArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<p>It also works to use <code is:raw>at</code>, which has the benefit of being able to work backwards:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get one item back from start, ie the last item:</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>ixfx has some functions for randomly choosing items or indexes from an array: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code is:raw>randomElement</code></a> returns a random element from an array, <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code is:raw>randomIndex</code></a> returns a random index.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>randomElement<span class="token punctuation">,</span> randomIndex<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Return a random string: apples, oranges or pears</span>\n<span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Return a random index: 0, 1 or 2</span>\n<span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Random.weightedInteger.html"><code is:raw>weightedInteger</code></a> can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>weightedInteger<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/random.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">melons</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Define a function to produce the random numbers we want</span>\n<span class="token keyword">const</span> <span class="token function-variable function">rand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">weightedInteger</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token literal-property property">easing</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">quadIn</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Use function to access an item in array</span>\na<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cycle">Cycle</h3>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code is:raw>cycle</code></a> allows traversing an array with function calls. It\'s useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> cycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nc<span class="token punctuation">.</span>current<span class="token punctuation">;</span> <span class="token comment">// \'apples\'</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `oranges`</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `pears`</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `apples\'</span>\nc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'oranges\'</span>\nc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'pears\'</span></code></pre>\n<h2 id="finding">Finding</h2>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"><code is:raw>some</code></a> yields <em>true</em> if at least one item in the array matches the provided function.</p>\n<p>For example, if you want to check if there is a green fruit in a list of fruits:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grape</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">granny-smith</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// isFound will be true or false</span>\n<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code is:raw>includes</code></a> returns true if the specified value is found in an array.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> favColours <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yellow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>favColours<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Red is in the favourite colours...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Note that favColours.includes(`RED`) would return false</span></code></pre>\n<p>When using <code is:raw>includes</code> to check for objects, be mindful that it compares them by <em>reference</em> not <em>value</em>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Returns false, because although object value exists in array,</span>\n<span class="token comment">// this *particular* object does not:</span>\n<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grape</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"><code is:raw>find</code></a> function is similar, but it returns the first matching item instead of just true/false.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> firstGreenFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}</span></code></pre>\n<p>If no matching items were found, <code is:raw>undefined</code> is returned.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> firstPurpleFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v <span class="token parameter">v</span><span class="token operator">=></span> v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">purple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// note simplified arrow function syntax</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>firstPurpleFruit <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstPurpleFruit<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print name of found fruit</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="ordering">Ordering</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Ordering and enumerating:</span>\nsomeArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Simple sort</span>\nsomeArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Reverse order</span></code></pre>\n<p>ixfx\'s <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle"><code is:raw>shuffle</code></a> randomises the ordering of an array.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shuffle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">melons</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Once shuffled, you can then iterate over the array as normal:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Prints items from array in random order</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="filtering">Filtering</h2>\n<p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without"><code is:raw>without</code></a> returns a copy of an array without values equal to <code is:raw>v</code>. In the case of objects, references are compared.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> without <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: [1,3,1,3]</span>\n<span class="token function">without</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s in built <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code is:raw>filter</code></a> function all items which pass the provided function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> filtered <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return true if value is greater than 2</span>\n<span class="token comment">// [3, 3]</span></code></pre>\n<p>ixfx has <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code is:raw>filterAB</code></a> which captures items on either side of the filter function.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> filterAB <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>matching<span class="token punctuation">,</span>nonMatching<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterAB</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// matching: [ 3, 3]</span>\n<span class="token comment">// nonMatching: [ 1, 2, 1, 2]</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html"><code is:raw>until</code></a> returns all items in an array until the provided predicate returns false.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> until <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Callback gets current value, and needs to return:</span>\n<span class="token comment">// [true/false, accumulated value]</span>\n<span class="token comment">// In this case, we return [true,0] if v === 3</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Remove a random element from an array with <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code is:raw>randomPluck</code></a>. It doesn\'t modify the array, but returns the randomly selected item and a new array without it.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>randomPluck<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Remove a random element</span>\n<span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">randomPluck</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nr<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// A random value</span>\nr<span class="token punctuation">.</span>array<span class="token punctuation">;</span> <span class="token comment">// A copy of the array with the random value removed</span></code></pre>\n<h2 id="grouping">Grouping</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code is:raw>groupBy</code></a> allows you to group an array by some generated key.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> groupBy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>This will yield:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">London</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">Stockhom</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">Copenhagen</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="numeric-arrays">Numeric arrays</h2>\n<p>If you have an array of numbers, ixfx has some functions for common needs.</p>\n<p>Overview:</p>\n<ul>\n<li>average, min, max, total or minMaxAvg to calculate all</li>\n<li>averageWeighted</li>\n<li>dotProduct</li>\n<li>weight</li>\n</ul>\n<h3 id="ranges">Ranges</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>average<span class="token punctuation">,</span> minMaxAvg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Compute max, min, avg:</span>\n<span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>\n\n<span class="token comment">// Or compute them all at once:</span>\n<span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: {min: 1, max: 3, avg:, total: 6}</span></code></pre>\n<h3 id="averages">Averages</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> average <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Compute an average of all provided values</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.85</span>\n\n<span class="token comment">// Compute average of an array</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 3</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted"><code is:raw>averageWeighted</code></a> applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> averageWeighted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Using an ixfx easing function to weight elements.</span>\n<span class="token comment">// Gaussian function weights middle elements highest, skewing the average</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">averageWeighted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: 3.6, while regular `average` yields 5.8</span></code></pre>\n<h3 id="weighting">Weighting</h3>\n<p><code is:raw>weight</code> applies a function (probably an <a href="../../modulation/easing/">easing function</a>) to some data.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> weight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n\n<span class="token comment">// Weighs an input array of 1s</span>\n<span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields:</span>\n<span class="token comment">// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]</span></code></pre>\n<h2 id="more-functions">More functions</h2>\n<p>Comparing arrays</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html"><code is:raw>compareValues</code></a> - for array <em>x</em> and <em>y</em>, identify items common in both, or exclusively in <em>x</em> or <em>y</em></li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html"><code is:raw>compareValuesEqual</code></a> - returns <em>true</em> if both arrays contain the same set of items, regardless of position.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html"><code is:raw>additionalValues</code></a> - yield all values not contained in a base array</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html"><code is:raw>intersection</code></a> - return values contained in both <em>x</em> and <em>y</em> arrays</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html"><code is:raw>unique</code></a> - combines values of arrays, only keeping unique values</li>\n</ul>\n<p>Randomisation</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code is:raw>randomIndex</code></a> - random index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code is:raw>randomElement</code></a> - random value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code is:raw>randomPluck</code></a> - remove random value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html"><code is:raw>shuffle</code></a> - randomise order</li>\n</ul>\n<p>Finding/accessing</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html"><code is:raw>contains</code></a> - returns <em>true</em> if array contains all provided items</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html"><code is:raw>containsDuplicateValues</code></a> - returns <em>true</em> if any duplicate <em>values</em> are found in source array.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html"><code is:raw>containsDuplicateInstances</code></a> - returns <em>true</em> if any duplicate <em>instances</em> are found in source array.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code is:raw>cycle</code></a> - cycle through contents</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html"><code is:raw>filterBetween</code></a> - return elements of array that match predicate <em>and</em> are within a given start and end index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html"><code is:raw>sample</code></a> - sub-sample an array</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html"><code is:raw>valuesEqual</code></a> - returns <em>true</em> if all values in array are identical</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code is:raw>filterAB</code></a> - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.</li>\n</ul>\n<p>Changing the shape of an array</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html"><code is:raw>ensureLength</code></a> - Pad out or truncate an array so it matches a target length</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html"><code is:raw>chunks</code></a> - break up an array into chunks of a given size</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code is:raw>groupBy</code></a> - Groups data by a function</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html"><code is:raw>interleave</code></a> - combines the values of several arrays by interleaving values</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html"><code is:raw>remove</code></a> - remove an element by index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html"><code is:raw>without</code></a> - return an array without a given value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html"><code is:raw>zip</code></a> - combine elements of arrays based on their index</li>\n</ul>' };
const frontmatter = { "title": "Arrays", "astro": { "headers": [{ "depth": 2, "slug": "enumerating", "text": "Enumerating" }, { "depth": 2, "slug": "accessing-items", "text": "Accessing items" }, { "depth": 3, "slug": "cycle", "text": "Cycle" }, { "depth": 2, "slug": "finding", "text": "Finding" }, { "depth": 2, "slug": "ordering", "text": "Ordering" }, { "depth": 2, "slug": "filtering", "text": "Filtering" }, { "depth": 2, "slug": "grouping", "text": "Grouping" }, { "depth": 2, "slug": "numeric-arrays", "text": "Numeric arrays" }, { "depth": 3, "slug": "ranges", "text": "Ranges" }, { "depth": 3, "slug": "averages", "text": "Averages" }, { "depth": 3, "slug": "weighting", "text": "Weighting" }, { "depth": 2, "slug": "more-functions", "text": "More functions" }], "source": "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html\">Collections.Arrays module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n## Enumerating\n\nJS's `for of` can be used to enumerate over items in an array:\n\n```js\nfor (const value of someArray) {\n  // Do something with value \n}\n```\n\nAnother classic approach you'll see is a `for` loop. This is only useful if you're concerned with the indexes of the items. Most of the time we aren't, which is why the style above is preferred. \n\n```js\n// Classic 'for' loop\nfor (let i=0;i<someArray.length;i++) {\n  const item = someArray[i]; // access by index\n  console.log(`${i}. ${someArray[i]}`);\n}\n```\n\nAnother benefit of the `for of` loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: [Generators](../../gen/generator/)\n\n## Accessing items\n\nArray items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a `length` property which returns how many items it contains.\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\n\n// Get the second item, which has an index of 1\nconst second = someArray[1]; \n\n// Get the last item (length is three, but indexes start at zero, so we have to -1)\nconst last = someArray[someArray.length-1];\n\nconst first = someArray[0];\n```\n\nIt also works to use `at`, which has the benefit of being able to work backwards:\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\nconst second = someArray.at(1);\n\n// Get one item back from start, ie the last item:\nconst last = someArray.at(-1);\nconst first = someArray.at(0);\n```\n\nixfx has some functions for randomly choosing items or indexes from an array: [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) returns a random element from an array, [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) returns a random index.\n\n```js\n// repl-pad\nimport {randomElement, randomIndex} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Return a random string: apples, oranges or pears\nrandomElement([`apples`, `oranges`, `pears`]);\n\n// Return a random index: 0, 1 or 2\nrandomIndex([`apples`, `oranges`, `pears`]);\n```\n\n[`weightedInteger`](https://clinth.github.io/ixfx/functions/Random.weightedInteger.html) can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.\n\n```js\nimport {weightedInteger} from 'https://unpkg.com/ixfx/dist/random.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n// Define a function to produce the random numbers we want\nconst rand = () => weightedInteger({ max: a.length, easing: `quadIn` });\n// Use function to access an item in array\na[rand()];\n```\n\n### Cycle\n\n[`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) allows traversing an array with function calls. It's useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.\n\n```js\nimport { cycle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst c = cycle([`apples`,`oranges`,`pears`]);\nc.current; // 'apples'\nc.next(); // `oranges`\nc.next(); // `pears`\nc.next(); // `apples'\nc.select(1); // 'oranges'\nc.select(`pears`); // 'pears'\n```\n\n## Finding\n\nJS's [`some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) yields _true_ if at least one item in the array matches the provided function.\n\nFor example, if you want to check if there is a green fruit in a list of fruits:\n\n```js\nconst fruits = [\n  {colour: `red`, name: `grape`},\n  {colour: `green`, name: `granny-smith`}\n];\n\n// isFound will be true or false\nconst isFound = fruits.some(v => {\n  return (v.colour === `green`)\n});\n```\n\nJS's [`includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) returns true if the specified value is found in an array.\n\n```js\nconst favColours = [ `red`, `green`, `yellow`];\nif (favColours.includes(`red`)) {\n  // Red is in the favourite colours...\n}\n\n// Note that favColours.includes(`RED`) would return false\n```\n\nWhen using `includes` to check for objects, be mindful that it compares them by _reference_ not _value_. \n\n```js\n// Returns false, because although object value exists in array,\n// this *particular* object does not:\nconst isFound = fruits.includes({colour: `red`, name: `grape`});\n```\n\nJS's [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) function is similar, but it returns the first matching item instead of just true/false. \n\n```js\nconst firstGreenFruit = fruits.find(v => {\n  return (v.colour === `green`);\n});\n\n// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}\n```\n\nIf no matching items were found, `undefined` is returned.\n\n```js\nconst firstPurpleFruit = fruits.find(v v=> v.colour === `purple`); // note simplified arrow function syntax\nif (firstPurpleFruit === undefined) {\n  console.log(`Not found`);\n} else {\n  console.log(`Found: ${firstPurpleFruit.name}`); // Print name of found fruit\n}\n```\n\n\n## Ordering\n\n```js\n// Ordering and enumerating:\nsomeArray.sort();     // Simple sort\nsomeArray.reverse();  // Reverse order\n```\n\nixfx's [`shuffle`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle) randomises the ordering of an array.\n\n```js\n// repl-pad#1\nimport { shuffle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n\n// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];\nconst b = shuffle(a);\n```\n\nOnce shuffled, you can then iterate over the array as normal:\n\n```js\n// repl-pad#1\nconst c = [1,2,3,4,5,6,7,8,9,10];\n\n// Prints items from array in random order\nfor (const value of shuffle(c)) {\n  console.log(value);\n}\n```\n\n## Filtering\n\n[`without`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without) returns a copy of an array without values equal to `v`. In the case of objects, references are compared.\n\n```js\n// repl-pad\nimport { without } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [1,2,3,1,2,3];\n// Yields: [1,3,1,3]\nwithout(data, 2);\n```\n\nJS's in built [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) function all items which pass the provided function:\n\n```js\nconst data = [1,2,3,1,2,3];\nconst filtered = data.filter(d => d > 2); // Return true if value is greater than 2\n// [3, 3]\n```\n\nixfx has [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) which captures items on either side of the filter function.\n```js\nimport { filterAB } from \"https://unpkg.com/ixfx/dist/arrays.js\";\nconst data = [1,2,3,1,2,3]\nconst [matching,nonMatching] = filterAB(data, d => d > 2);\n// matching: [ 3, 3]\n// nonMatching: [ 1, 2, 1, 2]\n```\n\n[`until`](https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html) returns all items in an array until the provided predicate returns false.\n\n```js\n// repl-pad\nimport { until } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Callback gets current value, and needs to return:\n// [true/false, accumulated value]\n// In this case, we return [true,0] if v === 3\nconst v = Arrays.until([1,2,3,4,5], v => [v === 3, 0]);\n\n```\n\nRemove a random element from an array with [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html). It doesn't modify the array, but returns the randomly selected item and a new array without it.\n\n\n```js\n// repl-pad\nimport {randomPluck} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Remove a random element\nconst r = randomPluck([`apples`, `oranges`, `pears`]);\nr.value; // A random value\nr.array; // A copy of the array with the random value removed\n```\n\n## Grouping\n\n[`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) allows you to group an array by some generated key.\n\n```js\n// repl-pad\nimport { groupBy } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [\n { age: 39, city: `London` }\n { age: 14, city: `Copenhagen` }\n { age: 23, city: `Stockholm` }\n { age: 56, city: `London` }\n];\nconst map = groupBy(data, item => data.city); \n```\n\nThis will yield:\n\n```js\n{\n  London: [\n    { age: 39, city: `London` }, \n    { age: 56, city: `London` }\n  ],\n  Stockhom: [\n    { age: 23, city: `Stockholm` }\n  ],\n  Copenhagen: [\n    { age: 14, city: `Copenhagen` }\n  ]\n}\n```\n\n## Numeric arrays\n\nIf you have an array of numbers, ixfx has some functions for common needs.\n\nOverview: \n* average, min, max, total or minMaxAvg to calculate all\n* averageWeighted\n* dotProduct\n* weight\n  \n### Ranges\n\n```js\n// repl-pad\nimport { max,min,average, minMaxAvg } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\nconst data = [1,2,3];\n// Compute max, min, avg:\nmax(...data); // 3\nmin(...data); // 1\naverage(...data); //\n\n// Or compute them all at once:\nminMaxAvg(...data);\n// Yields: {min: 1, max: 3, avg:, total: 6}\n```\n\n### Averages\n\n```js\n// repl-pad\nimport { average } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Compute an average of all provided values\naverage(1, 1.4, 0.9, 0.1);  // 0.85\n\n// Compute average of an array\nconst data = [1,2,3,4,5];\naverage(...data);           // 3\n```\n\n[`averageWeighted`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted) applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).\n\n```js\n// repl-pad\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\nimport { averageWeighted } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Using an ixfx easing function to weight elements.\n// Gaussian function weights middle elements highest, skewing the average\nconst v = averageWeighted([10,2,3,4,10], Easings.gaussian());\n// Yields: 3.6, while regular `average` yields 5.8\n```\n\n### Weighting\n\n`weight` applies a function (probably an [easing function](../../modulation/easing/)) to some data.\n\n```js\n// repl-pad\n\nimport { weight } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n\n// Weighs an input array of 1s\nweight([1,1,1,1,1,1], Easings.gaussian());\n\n// Yields:\n// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n```\n\n## More functions\n\nComparing arrays\n* [`compareValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html) - for array _x_ and _y_, identify items common in both, or exclusively in _x_ or _y_\n* [`compareValuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html) - returns _true_ if both arrays contain the same set of items, regardless of position.\n* [`additionalValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html) - yield all values not contained in a base array\n* [`intersection`](https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html) - return values contained in both _x_ and _y_ arrays\n* [`unique`](https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html) - combines values of arrays, only keeping unique values\n  \nRandomisation\n* [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) - random index\n* [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) - random value\n* [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html) - remove random value\n* [`shuffle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html) - randomise order\n\nFinding/accessing\n* [`contains`](https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html) - returns _true_ if array contains all provided items\n* [`containsDuplicateValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html) - returns _true_ if any duplicate _values_ are found in source array.\n* [`containsDuplicateInstances`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html) - returns _true_ if any duplicate _instances_ are found in source array.\n* [`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) - cycle through contents\n* [`filterBetween`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html) - return elements of array that match predicate _and_ are within a given start and end index\n* [`sample`](https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html) - sub-sample an array\n* [`valuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html) - returns _true_ if all values in array are identical\n* [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.\n\n\nChanging the shape of an array\n* [`ensureLength`](https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html) - Pad out or truncate an array so it matches a target length\n* [`chunks`](https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html) - break up an array into chunks of a given size\n* [`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) - Groups data by a function\n* [`interleave`](https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html) - combines the values of several arrays by interleaving values\n* [`remove`](https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html) - remove an element by index\n* [`without`](https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html) - return an array without a given value\n* [`zip`](https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html) - combine elements of arrays based on their index", "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html">Collections.Arrays module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<h2 id="enumerating">Enumerating</h2>\n<p>JS\'s <code is:raw>for of</code> can be used to enumerate over items in an array:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> someArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with value </span>\n<span class="token punctuation">}</span></code></pre>\n<p>Another classic approach you\'ll see is a <code is:raw>for</code> loop. This is only useful if you\'re concerned with the indexes of the items. Most of the time we aren\'t, which is why the style above is preferred.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Classic \'for\' loop</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>someArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> item <span class="token operator">=</span> someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// access by index</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Another benefit of the <code is:raw>for of</code> loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: <a href="../../gen/generator/">Generators</a></p>\n<h2 id="accessing-items">Accessing items</h2>\n<p>Array items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a <code is:raw>length</code> property which returns how many items it contains.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the second item, which has an index of 1</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n\n<span class="token comment">// Get the last item (length is three, but indexes start at zero, so we have to -1)</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">[</span>someArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<p>It also works to use <code is:raw>at</code>, which has the benefit of being able to work backwards:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get one item back from start, ie the last item:</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>ixfx has some functions for randomly choosing items or indexes from an array: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code is:raw>randomElement</code></a> returns a random element from an array, <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code is:raw>randomIndex</code></a> returns a random index.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>randomElement<span class="token punctuation">,</span> randomIndex<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Return a random string: apples, oranges or pears</span>\n<span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Return a random index: 0, 1 or 2</span>\n<span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Random.weightedInteger.html"><code is:raw>weightedInteger</code></a> can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>weightedInteger<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/random.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">melons</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Define a function to produce the random numbers we want</span>\n<span class="token keyword">const</span> <span class="token function-variable function">rand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">weightedInteger</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token literal-property property">easing</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">quadIn</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Use function to access an item in array</span>\na<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cycle">Cycle</h3>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code is:raw>cycle</code></a> allows traversing an array with function calls. It\'s useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> cycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nc<span class="token punctuation">.</span>current<span class="token punctuation">;</span> <span class="token comment">// \'apples\'</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `oranges`</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `pears`</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `apples\'</span>\nc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'oranges\'</span>\nc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'pears\'</span></code></pre>\n<h2 id="finding">Finding</h2>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"><code is:raw>some</code></a> yields <em>true</em> if at least one item in the array matches the provided function.</p>\n<p>For example, if you want to check if there is a green fruit in a list of fruits:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grape</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">granny-smith</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// isFound will be true or false</span>\n<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code is:raw>includes</code></a> returns true if the specified value is found in an array.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> favColours <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yellow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>favColours<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Red is in the favourite colours...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Note that favColours.includes(`RED`) would return false</span></code></pre>\n<p>When using <code is:raw>includes</code> to check for objects, be mindful that it compares them by <em>reference</em> not <em>value</em>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Returns false, because although object value exists in array,</span>\n<span class="token comment">// this *particular* object does not:</span>\n<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grape</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"><code is:raw>find</code></a> function is similar, but it returns the first matching item instead of just true/false.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> firstGreenFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}</span></code></pre>\n<p>If no matching items were found, <code is:raw>undefined</code> is returned.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> firstPurpleFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v <span class="token parameter">v</span><span class="token operator">=></span> v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">purple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// note simplified arrow function syntax</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>firstPurpleFruit <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstPurpleFruit<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print name of found fruit</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="ordering">Ordering</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Ordering and enumerating:</span>\nsomeArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Simple sort</span>\nsomeArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Reverse order</span></code></pre>\n<p>ixfx\'s <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle"><code is:raw>shuffle</code></a> randomises the ordering of an array.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shuffle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">melons</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Once shuffled, you can then iterate over the array as normal:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Prints items from array in random order</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="filtering">Filtering</h2>\n<p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without"><code is:raw>without</code></a> returns a copy of an array without values equal to <code is:raw>v</code>. In the case of objects, references are compared.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> without <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: [1,3,1,3]</span>\n<span class="token function">without</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s in built <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code is:raw>filter</code></a> function all items which pass the provided function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> filtered <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return true if value is greater than 2</span>\n<span class="token comment">// [3, 3]</span></code></pre>\n<p>ixfx has <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code is:raw>filterAB</code></a> which captures items on either side of the filter function.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> filterAB <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>matching<span class="token punctuation">,</span>nonMatching<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterAB</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// matching: [ 3, 3]</span>\n<span class="token comment">// nonMatching: [ 1, 2, 1, 2]</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html"><code is:raw>until</code></a> returns all items in an array until the provided predicate returns false.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> until <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Callback gets current value, and needs to return:</span>\n<span class="token comment">// [true/false, accumulated value]</span>\n<span class="token comment">// In this case, we return [true,0] if v === 3</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Remove a random element from an array with <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code is:raw>randomPluck</code></a>. It doesn\'t modify the array, but returns the randomly selected item and a new array without it.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>randomPluck<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Remove a random element</span>\n<span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">randomPluck</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nr<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// A random value</span>\nr<span class="token punctuation">.</span>array<span class="token punctuation">;</span> <span class="token comment">// A copy of the array with the random value removed</span></code></pre>\n<h2 id="grouping">Grouping</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code is:raw>groupBy</code></a> allows you to group an array by some generated key.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> groupBy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>This will yield:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">London</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">Stockhom</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">Copenhagen</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="numeric-arrays">Numeric arrays</h2>\n<p>If you have an array of numbers, ixfx has some functions for common needs.</p>\n<p>Overview:</p>\n<ul>\n<li>average, min, max, total or minMaxAvg to calculate all</li>\n<li>averageWeighted</li>\n<li>dotProduct</li>\n<li>weight</li>\n</ul>\n<h3 id="ranges">Ranges</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>average<span class="token punctuation">,</span> minMaxAvg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Compute max, min, avg:</span>\n<span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>\n\n<span class="token comment">// Or compute them all at once:</span>\n<span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: {min: 1, max: 3, avg:, total: 6}</span></code></pre>\n<h3 id="averages">Averages</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> average <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Compute an average of all provided values</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.85</span>\n\n<span class="token comment">// Compute average of an array</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 3</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted"><code is:raw>averageWeighted</code></a> applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> averageWeighted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Using an ixfx easing function to weight elements.</span>\n<span class="token comment">// Gaussian function weights middle elements highest, skewing the average</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">averageWeighted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: 3.6, while regular `average` yields 5.8</span></code></pre>\n<h3 id="weighting">Weighting</h3>\n<p><code is:raw>weight</code> applies a function (probably an <a href="../../modulation/easing/">easing function</a>) to some data.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> weight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n\n<span class="token comment">// Weighs an input array of 1s</span>\n<span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields:</span>\n<span class="token comment">// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]</span></code></pre>\n<h2 id="more-functions">More functions</h2>\n<p>Comparing arrays</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html"><code is:raw>compareValues</code></a> - for array <em>x</em> and <em>y</em>, identify items common in both, or exclusively in <em>x</em> or <em>y</em></li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html"><code is:raw>compareValuesEqual</code></a> - returns <em>true</em> if both arrays contain the same set of items, regardless of position.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html"><code is:raw>additionalValues</code></a> - yield all values not contained in a base array</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html"><code is:raw>intersection</code></a> - return values contained in both <em>x</em> and <em>y</em> arrays</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html"><code is:raw>unique</code></a> - combines values of arrays, only keeping unique values</li>\n</ul>\n<p>Randomisation</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code is:raw>randomIndex</code></a> - random index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code is:raw>randomElement</code></a> - random value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code is:raw>randomPluck</code></a> - remove random value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html"><code is:raw>shuffle</code></a> - randomise order</li>\n</ul>\n<p>Finding/accessing</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html"><code is:raw>contains</code></a> - returns <em>true</em> if array contains all provided items</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html"><code is:raw>containsDuplicateValues</code></a> - returns <em>true</em> if any duplicate <em>values</em> are found in source array.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html"><code is:raw>containsDuplicateInstances</code></a> - returns <em>true</em> if any duplicate <em>instances</em> are found in source array.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code is:raw>cycle</code></a> - cycle through contents</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html"><code is:raw>filterBetween</code></a> - return elements of array that match predicate <em>and</em> are within a given start and end index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html"><code is:raw>sample</code></a> - sub-sample an array</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html"><code is:raw>valuesEqual</code></a> - returns <em>true</em> if all values in array are identical</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code is:raw>filterAB</code></a> - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.</li>\n</ul>\n<p>Changing the shape of an array</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html"><code is:raw>ensureLength</code></a> - Pad out or truncate an array so it matches a target length</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html"><code is:raw>chunks</code></a> - break up an array into chunks of a given size</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code is:raw>groupBy</code></a> - Groups data by a function</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html"><code is:raw>interleave</code></a> - combines the values of several arrays by interleaving values</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html"><code is:raw>remove</code></a> - remove an element by index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html"><code is:raw>without</code></a> - return an array without a given value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html"><code is:raw>zip</code></a> - combine elements of arrays based on their index</li>\n</ul>' } };
const $$metadata = createMetadata("/src/pages/data/arrays.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
  import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/data/arrays.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Arrays = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Arrays;
  const $$content = { "title": "Arrays", "astro": { "headers": [{ "depth": 2, "slug": "enumerating", "text": "Enumerating" }, { "depth": 2, "slug": "accessing-items", "text": "Accessing items" }, { "depth": 3, "slug": "cycle", "text": "Cycle" }, { "depth": 2, "slug": "finding", "text": "Finding" }, { "depth": 2, "slug": "ordering", "text": "Ordering" }, { "depth": 2, "slug": "filtering", "text": "Filtering" }, { "depth": 2, "slug": "grouping", "text": "Grouping" }, { "depth": 2, "slug": "numeric-arrays", "text": "Numeric arrays" }, { "depth": 3, "slug": "ranges", "text": "Ranges" }, { "depth": 3, "slug": "averages", "text": "Averages" }, { "depth": 3, "slug": "weighting", "text": "Weighting" }, { "depth": 2, "slug": "more-functions", "text": "More functions" }], "source": "\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Collections.Arrays.html\">Collections.Arrays module</a></li>\n<li>Parent <a href=\"https://clinth.github.io/ixfx/modules/Collections.html\">Collections module</a></li>\n</div>\n\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n## Enumerating\n\nJS's `for of` can be used to enumerate over items in an array:\n\n```js\nfor (const value of someArray) {\n  // Do something with value \n}\n```\n\nAnother classic approach you'll see is a `for` loop. This is only useful if you're concerned with the indexes of the items. Most of the time we aren't, which is why the style above is preferred. \n\n```js\n// Classic 'for' loop\nfor (let i=0;i<someArray.length;i++) {\n  const item = someArray[i]; // access by index\n  console.log(`${i}. ${someArray[i]}`);\n}\n```\n\nAnother benefit of the `for of` loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: [Generators](../../gen/generator/)\n\n## Accessing items\n\nArray items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a `length` property which returns how many items it contains.\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\n\n// Get the second item, which has an index of 1\nconst second = someArray[1]; \n\n// Get the last item (length is three, but indexes start at zero, so we have to -1)\nconst last = someArray[someArray.length-1];\n\nconst first = someArray[0];\n```\n\nIt also works to use `at`, which has the benefit of being able to work backwards:\n\n```js\nconst someArray = [`apples`, `oranges`, `bananas`];\nconst second = someArray.at(1);\n\n// Get one item back from start, ie the last item:\nconst last = someArray.at(-1);\nconst first = someArray.at(0);\n```\n\nixfx has some functions for randomly choosing items or indexes from an array: [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) returns a random element from an array, [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) returns a random index.\n\n```js\n// repl-pad\nimport {randomElement, randomIndex} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Return a random string: apples, oranges or pears\nrandomElement([`apples`, `oranges`, `pears`]);\n\n// Return a random index: 0, 1 or 2\nrandomIndex([`apples`, `oranges`, `pears`]);\n```\n\n[`weightedInteger`](https://clinth.github.io/ixfx/functions/Random.weightedInteger.html) can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.\n\n```js\nimport {weightedInteger} from 'https://unpkg.com/ixfx/dist/random.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n// Define a function to produce the random numbers we want\nconst rand = () => weightedInteger({ max: a.length, easing: `quadIn` });\n// Use function to access an item in array\na[rand()];\n```\n\n### Cycle\n\n[`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) allows traversing an array with function calls. It's useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.\n\n```js\nimport { cycle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst c = cycle([`apples`,`oranges`,`pears`]);\nc.current; // 'apples'\nc.next(); // `oranges`\nc.next(); // `pears`\nc.next(); // `apples'\nc.select(1); // 'oranges'\nc.select(`pears`); // 'pears'\n```\n\n## Finding\n\nJS's [`some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) yields _true_ if at least one item in the array matches the provided function.\n\nFor example, if you want to check if there is a green fruit in a list of fruits:\n\n```js\nconst fruits = [\n  {colour: `red`, name: `grape`},\n  {colour: `green`, name: `granny-smith`}\n];\n\n// isFound will be true or false\nconst isFound = fruits.some(v => {\n  return (v.colour === `green`)\n});\n```\n\nJS's [`includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) returns true if the specified value is found in an array.\n\n```js\nconst favColours = [ `red`, `green`, `yellow`];\nif (favColours.includes(`red`)) {\n  // Red is in the favourite colours...\n}\n\n// Note that favColours.includes(`RED`) would return false\n```\n\nWhen using `includes` to check for objects, be mindful that it compares them by _reference_ not _value_. \n\n```js\n// Returns false, because although object value exists in array,\n// this *particular* object does not:\nconst isFound = fruits.includes({colour: `red`, name: `grape`});\n```\n\nJS's [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) function is similar, but it returns the first matching item instead of just true/false. \n\n```js\nconst firstGreenFruit = fruits.find(v => {\n  return (v.colour === `green`);\n});\n\n// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}\n```\n\nIf no matching items were found, `undefined` is returned.\n\n```js\nconst firstPurpleFruit = fruits.find(v v=> v.colour === `purple`); // note simplified arrow function syntax\nif (firstPurpleFruit === undefined) {\n  console.log(`Not found`);\n} else {\n  console.log(`Found: ${firstPurpleFruit.name}`); // Print name of found fruit\n}\n```\n\n\n## Ordering\n\n```js\n// Ordering and enumerating:\nsomeArray.sort();     // Simple sort\nsomeArray.reverse();  // Reverse order\n```\n\nixfx's [`shuffle`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle) randomises the ordering of an array.\n\n```js\n// repl-pad#1\nimport { shuffle } from 'https://unpkg.com/ixfx/dist/arrays.js';\nconst a = [`apples`, `oranges`, `melons`, `bananas`];\n\n// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];\nconst b = shuffle(a);\n```\n\nOnce shuffled, you can then iterate over the array as normal:\n\n```js\n// repl-pad#1\nconst c = [1,2,3,4,5,6,7,8,9,10];\n\n// Prints items from array in random order\nfor (const value of shuffle(c)) {\n  console.log(value);\n}\n```\n\n## Filtering\n\n[`without`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without) returns a copy of an array without values equal to `v`. In the case of objects, references are compared.\n\n```js\n// repl-pad\nimport { without } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [1,2,3,1,2,3];\n// Yields: [1,3,1,3]\nwithout(data, 2);\n```\n\nJS's in built [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) function all items which pass the provided function:\n\n```js\nconst data = [1,2,3,1,2,3];\nconst filtered = data.filter(d => d > 2); // Return true if value is greater than 2\n// [3, 3]\n```\n\nixfx has [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) which captures items on either side of the filter function.\n```js\nimport { filterAB } from \"https://unpkg.com/ixfx/dist/arrays.js\";\nconst data = [1,2,3,1,2,3]\nconst [matching,nonMatching] = filterAB(data, d => d > 2);\n// matching: [ 3, 3]\n// nonMatching: [ 1, 2, 1, 2]\n```\n\n[`until`](https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html) returns all items in an array until the provided predicate returns false.\n\n```js\n// repl-pad\nimport { until } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Callback gets current value, and needs to return:\n// [true/false, accumulated value]\n// In this case, we return [true,0] if v === 3\nconst v = Arrays.until([1,2,3,4,5], v => [v === 3, 0]);\n\n```\n\nRemove a random element from an array with [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html). It doesn't modify the array, but returns the randomly selected item and a new array without it.\n\n\n```js\n// repl-pad\nimport {randomPluck} from 'https://unpkg.com/ixfx/dist/arrays.js';\n\n// Remove a random element\nconst r = randomPluck([`apples`, `oranges`, `pears`]);\nr.value; // A random value\nr.array; // A copy of the array with the random value removed\n```\n\n## Grouping\n\n[`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) allows you to group an array by some generated key.\n\n```js\n// repl-pad\nimport { groupBy } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nconst data = [\n { age: 39, city: `London` }\n { age: 14, city: `Copenhagen` }\n { age: 23, city: `Stockholm` }\n { age: 56, city: `London` }\n];\nconst map = groupBy(data, item => data.city); \n```\n\nThis will yield:\n\n```js\n{\n  London: [\n    { age: 39, city: `London` }, \n    { age: 56, city: `London` }\n  ],\n  Stockhom: [\n    { age: 23, city: `Stockholm` }\n  ],\n  Copenhagen: [\n    { age: 14, city: `Copenhagen` }\n  ]\n}\n```\n\n## Numeric arrays\n\nIf you have an array of numbers, ixfx has some functions for common needs.\n\nOverview: \n* average, min, max, total or minMaxAvg to calculate all\n* averageWeighted\n* dotProduct\n* weight\n  \n### Ranges\n\n```js\n// repl-pad\nimport { max,min,average, minMaxAvg } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\nconst data = [1,2,3];\n// Compute max, min, avg:\nmax(...data); // 3\nmin(...data); // 1\naverage(...data); //\n\n// Or compute them all at once:\nminMaxAvg(...data);\n// Yields: {min: 1, max: 3, avg:, total: 6}\n```\n\n### Averages\n\n```js\n// repl-pad\nimport { average } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Compute an average of all provided values\naverage(1, 1.4, 0.9, 0.1);  // 0.85\n\n// Compute average of an array\nconst data = [1,2,3,4,5];\naverage(...data);           // 3\n```\n\n[`averageWeighted`](https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted) applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).\n\n```js\n// repl-pad\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\nimport { averageWeighted } from \"https://unpkg.com/ixfx/dist/arrays.js\"\n\n// Using an ixfx easing function to weight elements.\n// Gaussian function weights middle elements highest, skewing the average\nconst v = averageWeighted([10,2,3,4,10], Easings.gaussian());\n// Yields: 3.6, while regular `average` yields 5.8\n```\n\n### Weighting\n\n`weight` applies a function (probably an [easing function](../../modulation/easing/)) to some data.\n\n```js\n// repl-pad\n\nimport { weight } from \"https://unpkg.com/ixfx/dist/arrays.js\"\nimport { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n\n// Weighs an input array of 1s\nweight([1,1,1,1,1,1], Easings.gaussian());\n\n// Yields:\n// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n```\n\n## More functions\n\nComparing arrays\n* [`compareValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html) - for array _x_ and _y_, identify items common in both, or exclusively in _x_ or _y_\n* [`compareValuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html) - returns _true_ if both arrays contain the same set of items, regardless of position.\n* [`additionalValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html) - yield all values not contained in a base array\n* [`intersection`](https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html) - return values contained in both _x_ and _y_ arrays\n* [`unique`](https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html) - combines values of arrays, only keeping unique values\n  \nRandomisation\n* [`randomIndex`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html) - random index\n* [`randomElement`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html) - random value\n* [`randomPluck`](https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html) - remove random value\n* [`shuffle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html) - randomise order\n\nFinding/accessing\n* [`contains`](https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html) - returns _true_ if array contains all provided items\n* [`containsDuplicateValues`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html) - returns _true_ if any duplicate _values_ are found in source array.\n* [`containsDuplicateInstances`](https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html) - returns _true_ if any duplicate _instances_ are found in source array.\n* [`cycle`](https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html) - cycle through contents\n* [`filterBetween`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html) - return elements of array that match predicate _and_ are within a given start and end index\n* [`sample`](https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html) - sub-sample an array\n* [`valuesEqual`](https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html) - returns _true_ if all values in array are identical\n* [`filterAB`](https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html) - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.\n\n\nChanging the shape of an array\n* [`ensureLength`](https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html) - Pad out or truncate an array so it matches a target length\n* [`chunks`](https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html) - break up an array into chunks of a given size\n* [`groupBy`](https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html) - Groups data by a function\n* [`interleave`](https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html) - combines the values of several arrays by interleaving values\n* [`remove`](https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html) - remove an element by index\n* [`without`](https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html) - return an array without a given value\n* [`zip`](https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html) - combine elements of arrays based on their index", "html": '<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html">Collections.Arrays module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>\n</div>\n<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<h2 id="enumerating">Enumerating</h2>\n<p>JS\'s <code is:raw>for of</code> can be used to enumerate over items in an array:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> someArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with value </span>\n<span class="token punctuation">}</span></code></pre>\n<p>Another classic approach you\'ll see is a <code is:raw>for</code> loop. This is only useful if you\'re concerned with the indexes of the items. Most of the time we aren\'t, which is why the style above is preferred.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Classic \'for\' loop</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>someArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> item <span class="token operator">=</span> someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// access by index</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Another benefit of the <code is:raw>for of</code> loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: <a href="../../gen/generator/">Generators</a></p>\n<h2 id="accessing-items">Accessing items</h2>\n<p>Array items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a <code is:raw>length</code> property which returns how many items it contains.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get the second item, which has an index of 1</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n\n<span class="token comment">// Get the last item (length is three, but indexes start at zero, so we have to -1)</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">[</span>someArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<p>It also works to use <code is:raw>at</code>, which has the benefit of being able to work backwards:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get one item back from start, ie the last item:</span>\n<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>ixfx has some functions for randomly choosing items or indexes from an array: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code is:raw>randomElement</code></a> returns a random element from an array, <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code is:raw>randomIndex</code></a> returns a random index.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>randomElement<span class="token punctuation">,</span> randomIndex<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Return a random string: apples, oranges or pears</span>\n<span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Return a random index: 0, 1 or 2</span>\n<span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Random.weightedInteger.html"><code is:raw>weightedInteger</code></a> can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>weightedInteger<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/random.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">melons</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Define a function to produce the random numbers we want</span>\n<span class="token keyword">const</span> <span class="token function-variable function">rand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">weightedInteger</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token literal-property property">easing</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">quadIn</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Use function to access an item in array</span>\na<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n<h3 id="cycle">Cycle</h3>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code is:raw>cycle</code></a> allows traversing an array with function calls. It\'s useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> cycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nc<span class="token punctuation">.</span>current<span class="token punctuation">;</span> <span class="token comment">// \'apples\'</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `oranges`</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `pears`</span>\nc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// `apples\'</span>\nc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'oranges\'</span>\nc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'pears\'</span></code></pre>\n<h2 id="finding">Finding</h2>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"><code is:raw>some</code></a> yields <em>true</em> if at least one item in the array matches the provided function.</p>\n<p>For example, if you want to check if there is a green fruit in a list of fruits:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grape</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">granny-smith</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// isFound will be true or false</span>\n<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code is:raw>includes</code></a> returns true if the specified value is found in an array.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> favColours <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">yellow</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>favColours<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Red is in the favourite colours...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Note that favColours.includes(`RED`) would return false</span></code></pre>\n<p>When using <code is:raw>includes</code> to check for objects, be mindful that it compares them by <em>reference</em> not <em>value</em>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Returns false, because although object value exists in array,</span>\n<span class="token comment">// this *particular* object does not:</span>\n<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">grape</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"><code is:raw>find</code></a> function is similar, but it returns the first matching item instead of just true/false.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> firstGreenFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">green</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// firstGreenFruit will be: {colour: `green`, name: `granny-smith`}</span></code></pre>\n<p>If no matching items were found, <code is:raw>undefined</code> is returned.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> firstPurpleFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v <span class="token parameter">v</span><span class="token operator">=></span> v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">purple</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// note simplified arrow function syntax</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>firstPurpleFruit <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not found</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstPurpleFruit<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print name of found fruit</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="ordering">Ordering</h2>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Ordering and enumerating:</span>\nsomeArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Simple sort</span>\nsomeArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Reverse order</span></code></pre>\n<p>ixfx\'s <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle"><code is:raw>shuffle</code></a> randomises the ordering of an array.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> shuffle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">melons</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bananas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields a randomly ordered version, eg: [`melons`,`apples`,`bananas`,`oranges`];</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Once shuffled, you can then iterate over the array as normal:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad#1</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Prints items from array in random order</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="filtering">Filtering</h2>\n<p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without"><code is:raw>without</code></a> returns a copy of an array without values equal to <code is:raw>v</code>. In the case of objects, references are compared.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> without <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: [1,3,1,3]</span>\n<span class="token function">without</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>JS\'s in built <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code is:raw>filter</code></a> function all items which pass the provided function:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> filtered <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return true if value is greater than 2</span>\n<span class="token comment">// [3, 3]</span></code></pre>\n<p>ixfx has <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code is:raw>filterAB</code></a> which captures items on either side of the filter function.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> filterAB <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>matching<span class="token punctuation">,</span>nonMatching<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterAB</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// matching: [ 3, 3]</span>\n<span class="token comment">// nonMatching: [ 1, 2, 1, 2]</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html"><code is:raw>until</code></a> returns all items in an array until the provided predicate returns false.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> until <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Callback gets current value, and needs to return:</span>\n<span class="token comment">// [true/false, accumulated value]</span>\n<span class="token comment">// In this case, we return [true,0] if v === 3</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Remove a random element from an array with <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code is:raw>randomPluck</code></a>. It doesn\'t modify the array, but returns the randomly selected item and a new array without it.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>randomPluck<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/arrays.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Remove a random element</span>\n<span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">randomPluck</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">apples</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">oranges</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pears</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nr<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// A random value</span>\nr<span class="token punctuation">.</span>array<span class="token punctuation">;</span> <span class="token comment">// A copy of the array with the random value removed</span></code></pre>\n<h2 id="grouping">Grouping</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code is:raw>groupBy</code></a> allows you to group an array by some generated key.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> groupBy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>This will yield:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token punctuation">{</span>\n  <span class="token literal-property property">London</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">London</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">Stockhom</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">Copenhagen</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="numeric-arrays">Numeric arrays</h2>\n<p>If you have an array of numbers, ixfx has some functions for common needs.</p>\n<p>Overview:</p>\n<ul>\n<li>average, min, max, total or minMaxAvg to calculate all</li>\n<li>averageWeighted</li>\n<li>dotProduct</li>\n<li>weight</li>\n</ul>\n<h3 id="ranges">Ranges</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>average<span class="token punctuation">,</span> minMaxAvg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// Compute max, min, avg:</span>\n<span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>\n\n<span class="token comment">// Or compute them all at once:</span>\n<span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: {min: 1, max: 3, avg:, total: 6}</span></code></pre>\n<h3 id="averages">Averages</h3>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> average <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Compute an average of all provided values</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.85</span>\n\n<span class="token comment">// Compute average of an array</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 3</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted"><code is:raw>averageWeighted</code></a> applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> averageWeighted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n\n<span class="token comment">// Using an ixfx easing function to weight elements.</span>\n<span class="token comment">// Gaussian function weights middle elements highest, skewing the average</span>\n<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">averageWeighted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Yields: 3.6, while regular `average` yields 5.8</span></code></pre>\n<h3 id="weighting">Weighting</h3>\n<p><code is:raw>weight</code> applies a function (probably an <a href="../../modulation/easing/">easing function</a>) to some data.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> weight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>\n\n<span class="token comment">// Weighs an input array of 1s</span>\n<span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields:</span>\n<span class="token comment">// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]</span></code></pre>\n<h2 id="more-functions">More functions</h2>\n<p>Comparing arrays</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html"><code is:raw>compareValues</code></a> - for array <em>x</em> and <em>y</em>, identify items common in both, or exclusively in <em>x</em> or <em>y</em></li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html"><code is:raw>compareValuesEqual</code></a> - returns <em>true</em> if both arrays contain the same set of items, regardless of position.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html"><code is:raw>additionalValues</code></a> - yield all values not contained in a base array</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html"><code is:raw>intersection</code></a> - return values contained in both <em>x</em> and <em>y</em> arrays</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html"><code is:raw>unique</code></a> - combines values of arrays, only keeping unique values</li>\n</ul>\n<p>Randomisation</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code is:raw>randomIndex</code></a> - random index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code is:raw>randomElement</code></a> - random value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code is:raw>randomPluck</code></a> - remove random value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html"><code is:raw>shuffle</code></a> - randomise order</li>\n</ul>\n<p>Finding/accessing</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html"><code is:raw>contains</code></a> - returns <em>true</em> if array contains all provided items</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html"><code is:raw>containsDuplicateValues</code></a> - returns <em>true</em> if any duplicate <em>values</em> are found in source array.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html"><code is:raw>containsDuplicateInstances</code></a> - returns <em>true</em> if any duplicate <em>instances</em> are found in source array.</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code is:raw>cycle</code></a> - cycle through contents</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html"><code is:raw>filterBetween</code></a> - return elements of array that match predicate <em>and</em> are within a given start and end index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html"><code is:raw>sample</code></a> - sub-sample an array</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html"><code is:raw>valuesEqual</code></a> - returns <em>true</em> if all values in array are identical</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code is:raw>filterAB</code></a> - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.</li>\n</ul>\n<p>Changing the shape of an array</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html"><code is:raw>ensureLength</code></a> - Pad out or truncate an array so it matches a target length</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html"><code is:raw>chunks</code></a> - break up an array into chunks of a given size</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code is:raw>groupBy</code></a> - Groups data by a function</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html"><code is:raw>interleave</code></a> - combines the values of several arrays by interleaving values</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html"><code is:raw>remove</code></a> - remove an element by index</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html"><code is:raw>without</code></a> - return an array without a given value</li>\n<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html"><code is:raw>zip</code></a> - combine elements of arrays based on their index</li>\n</ul>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html">Collections.Arrays module</a></li>
<li>Parent <a href="https://clinth.github.io/ixfx/modules/Collections.html">Collections module</a></li>
</ul></div><h2 id="enumerating">Enumerating</h2><p>JS's <code>for of</code> can be used to enumerate over items in an array:</p><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> someArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something with value </span>
<span class="token punctuation">}</span></code></pre><p>Another classic approach you'll see is a <code>for</code> loop. This is only useful if you're concerned with the indexes of the items. Most of the time we aren't, which is why the style above is preferred.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Classic 'for' loop</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>someArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// access by index</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>someArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>Another benefit of the <code>for of</code> loop is that it can enumerate over different kinds of objects, not just arrays. Most usefully: <a href="../../gen/generator/">Generators</a></p><h2 id="accessing-items">Accessing items</h2><p>Array items can be accessed by their index. The first item in an array has an index of 0, and so on. Arrays have a <code>length</code> property which returns how many items it contains.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bananas</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Get the second item, which has an index of 1</span>
<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 

<span class="token comment">// Get the last item (length is three, but indexes start at zero, so we have to -1)</span>
<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">[</span>someArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>It also works to use <code>at</code>, which has the benefit of being able to work backwards:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> someArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bananas</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> second <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get one item back from start, ie the last item:</span>
<span class="token keyword">const</span> last <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> first <span class="token operator">=</span> someArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ixfx has some functions for randomly choosing items or indexes from an array: <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code>randomElement</code></a> returns a random element from an array, <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code>randomIndex</code></a> returns a random index.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>randomElement<span class="token punctuation">,</span> randomIndex<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/arrays.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Return a random string: apples, oranges or pears</span>
<span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Return a random index: 0, 1 or 2</span>
<span class="token function">randomIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Random.weightedInteger.html"><code>weightedInteger</code></a> can be used for skewing the distributing of random elements, eg. to favour picking elements at the end of the array over elements at the beginning.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>weightedInteger<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/random.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">melons</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bananas</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Define a function to produce the random numbers we want</span>
<span class="token keyword">const</span> <span class="token function-variable function">rand</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">weightedInteger</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">max</span><span class="token operator">:</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token literal-property property">easing</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">quadIn</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Use function to access an item in array</span>
a<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="cycle">Cycle</h3><p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code>cycle</code></a> allows traversing an array with function calls. It's useful because the returned function wraps up both the source array and the position. Other parts of your code just need to know to invoke a function and get back a value.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> cycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/arrays.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">cycle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span>current<span class="token punctuation">;</span> <span class="token comment">// 'apples'</span>
c<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`oranges\`</span>
c<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`pears\`</span>
c<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`apples'</span>
c<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'oranges'</span>
c<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'pears'</span></code></pre><h2 id="finding">Finding</h2><p>JS's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"><code>some</code></a> yields <em>true</em> if at least one item in the array matches the provided function.</p><p>For example, if you want to check if there is a green fruit in a list of fruits:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">red</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">grape</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">green</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">granny-smith</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// isFound will be true or false</span>
<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">green</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>JS's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>includes</code></a> returns true if the specified value is found in an array.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> favColours <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">red</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">green</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">yellow</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>favColours<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">red</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Red is in the favourite colours...</span>
<span class="token punctuation">}</span>

<span class="token comment">// Note that favColours.includes(\`RED\`) would return false</span></code></pre><p>When using <code>includes</code> to check for objects, be mindful that it compares them by <em>reference</em> not <em>value</em>.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Returns false, because although object value exists in array,</span>
<span class="token comment">// this *particular* object does not:</span>
<span class="token keyword">const</span> isFound <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">red</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">grape</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>JS's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"><code>find</code></a> function is similar, but it returns the first matching item instead of just true/false.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> firstGreenFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">green</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// firstGreenFruit will be: {colour: \`green\`, name: \`granny-smith\`}</span></code></pre><p>If no matching items were found, <code>undefined</code> is returned.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> firstPurpleFruit <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v <span class="token parameter">v</span><span class="token operator">=></span> v<span class="token punctuation">.</span>colour <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">purple</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// note simplified arrow function syntax</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>firstPurpleFruit <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Not found</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>firstPurpleFruit<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print name of found fruit</span>
<span class="token punctuation">}</span></code></pre><h2 id="ordering">Ordering</h2><pre class="language-js"><code class="language-js"><span class="token comment">// Ordering and enumerating:</span>
someArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Simple sort</span>
someArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Reverse order</span></code></pre><p>ixfx's <a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#shuffle"><code>shuffle</code></a> randomises the ordering of an array.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> shuffle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/arrays.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">melons</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bananas</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Yields a randomly ordered version, eg: [\`melons\`,\`apples\`,\`bananas\`,\`oranges\`];</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Once shuffled, you can then iterate over the array as normal:</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad#1</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Prints items from array in random order</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><h2 id="filtering">Filtering</h2><p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#without"><code>without</code></a> returns a copy of an array without values equal to <code>v</code>. In the case of objects, references are compared.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> without <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: [1,3,1,3]</span>
<span class="token function">without</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>JS's in built <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code>filter</code></a> function all items which pass the provided function:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filtered <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Return true if value is greater than 2</span>
<span class="token comment">// [3, 3]</span></code></pre><p>ixfx has <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code>filterAB</code></a> which captures items on either side of the filter function.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> filterAB <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>matching<span class="token punctuation">,</span>nonMatching<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filterAB</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// matching: [ 3, 3]</span>
<span class="token comment">// nonMatching: [ 1, 2, 1, 2]</span></code></pre><p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.until.html"><code>until</code></a> returns all items in an array until the provided predicate returns false.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> until <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>

<span class="token comment">// Callback gets current value, and needs to return:</span>
<span class="token comment">// [true/false, accumulated value]</span>
<span class="token comment">// In this case, we return [true,0] if v === 3</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Remove a random element from an array with <a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code>randomPluck</code></a>. It doesn't modify the array, but returns the randomly selected item and a new array without it.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>randomPluck<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/arrays.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Remove a random element</span>
<span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">randomPluck</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">apples</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">oranges</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pears</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// A random value</span>
r<span class="token punctuation">.</span>array<span class="token punctuation">;</span> <span class="token comment">// A copy of the array with the random value removed</span></code></pre><h2 id="grouping">Grouping</h2><p><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code>groupBy</code></a> allows you to group an array by some generated key.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> groupBy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>
 <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">London</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
 <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
 <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
 <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">London</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> data<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>This will yield:</p><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token literal-property property">London</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">London</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">London</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">Stockhom</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Stockholm</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">Copenhagen</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Copenhagen</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><h2 id="numeric-arrays">Numeric arrays</h2><p>If you have an array of numbers, ixfx has some functions for common needs.</p><p>Overview:</p><ul>
<li>average, min, max, total or minMaxAvg to calculate all</li>
<li>averageWeighted</li>
<li>dotProduct</li>
<li>weight</li>
</ul><h3 id="ranges">Ranges</h3><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>average<span class="token punctuation">,</span> minMaxAvg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Compute max, min, avg:</span>
<span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>

<span class="token comment">// Or compute them all at once:</span>
<span class="token function">minMaxAvg</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: {min: 1, max: 3, avg:, total: 6}</span></code></pre><h3 id="averages">Averages</h3><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> average <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>

<span class="token comment">// Compute an average of all provided values</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0.85</span>

<span class="token comment">// Compute average of an array</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">average</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 3</span></code></pre><p><a href="https://clinth.github.io/ixfx/modules/Collections.Arrays.html#averageWeighted"><code>averageWeighted</code></a> applies a weighting to each element. In the below example, items in the middle of the array are weighted more highly because of the Gaussian easing function (which resembles a bell curve).</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> averageWeighted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>

<span class="token comment">// Using an ixfx easing function to weight elements.</span>
<span class="token comment">// Gaussian function weights middle elements highest, skewing the average</span>
<span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">averageWeighted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Yields: 3.6, while regular \`average\` yields 5.8</span></code></pre><h3 id="weighting">Weighting</h3><p><code>weight</code> applies a function (probably an <a href="../../modulation/easing/">easing function</a>) to some data.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> weight <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/arrays.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Easings <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>

<span class="token comment">// Weighs an input array of 1s</span>
<span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Easings<span class="token punctuation">.</span><span class="token function">gaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Yields:</span>
<span class="token comment">// [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]</span></code></pre><h2 id="more-functions">More functions</h2><p>Comparing arrays</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValues.html"><code>compareValues</code></a> - for array <em>x</em> and <em>y</em>, identify items common in both, or exclusively in <em>x</em> or <em>y</em></li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.compareValuesEqual.html"><code>compareValuesEqual</code></a> - returns <em>true</em> if both arrays contain the same set of items, regardless of position.</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.additionalValues.html"><code>additionalValues</code></a> - yield all values not contained in a base array</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.intersection.html"><code>intersection</code></a> - return values contained in both <em>x</em> and <em>y</em> arrays</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.unique.html"><code>unique</code></a> - combines values of arrays, only keeping unique values</li>
</ul><p>Randomisation</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomIndex.html"><code>randomIndex</code></a> - random index</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomElement.html"><code>randomElement</code></a> - random value</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.randomPluck.html"><code>randomPluck</code></a> - remove random value</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.shuffle.html"><code>shuffle</code></a> - randomise order</li>
</ul><p>Finding/accessing</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.contains.html"><code>contains</code></a> - returns <em>true</em> if array contains all provided items</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateValues.html"><code>containsDuplicateValues</code></a> - returns <em>true</em> if any duplicate <em>values</em> are found in source array.</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.containsDuplicateInstances.html"><code>containsDuplicateInstances</code></a> - returns <em>true</em> if any duplicate <em>instances</em> are found in source array.</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.cycle.html"><code>cycle</code></a> - cycle through contents</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterBetween.html"><code>filterBetween</code></a> - return elements of array that match predicate <em>and</em> are within a given start and end index</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.sample.html"><code>sample</code></a> - sub-sample an array</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.valuesEqual.html"><code>valuesEqual</code></a> - returns <em>true</em> if all values in array are identical</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.filterAB.html"><code>filterAB</code></a> - filters an array with a predicate, returning everything that passes in one array and everything that does not in another.</li>
</ul><p>Changing the shape of an array</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.ensureLength.html"><code>ensureLength</code></a> - Pad out or truncate an array so it matches a target length</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.chunks.html"><code>chunks</code></a> - break up an array into chunks of a given size</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.groupBy.html"><code>groupBy</code></a> - Groups data by a function</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.interleave.html"><code>interleave</code></a> - combines the values of several arrays by interleaving values</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.remove.html"><code>remove</code></a> - remove an element by index</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.without.html"><code>without</code></a> - return an array without a given value</li>
<li><a href="https://clinth.github.io/ixfx/functions/Collections.Arrays.zip.html"><code>zip</code></a> - combine elements of arrays based on their index</li>
</ul>` })}`;
});

export { $$metadata, $$Arrays as default, frontmatter, metadata };
