import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import { $ as $$module3 } from './chunks/FrameElement.483f5e82.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "numbers", "text": "Numbers" }, { "depth": 2, "slug": "intervals", "text": "Intervals" }, { "depth": 2, "slug": "point", "text": "Point" }, { "depth": 2, "slug": "points", "text": "Points" }, { "depth": 2, "slug": "trackers-in-general", "text": "Trackers in general" }], "source": "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>Related: <a href=\"../frequency/\">FrequencyMutable</a>: tracks 'seen' values</li>\n</div>\n\nThe ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.\n\n## Numbers\n\n[`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) keeps track of the minimum, maximum and average of a stream of numbers, without storing them.\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get computed values\nt.avg\nt.min\nt.total\n```\n\nAn example usage might be to track the range of a sensor over time.\n\nSee also:\n* [`numberTracker` API docs](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) for more\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Intervals\n\n[`intervalTracker`](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html) tracks time intervals.\n\nThis is useful when you're interested in the period or frequency of events rather than event data itself.\n\nOnce initialised, call `mark` on the returned object to capture the elapsed time.\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = intervalTracker();\n\n// Call `mark` to record the interval since last `mark` (or init)\nt.mark();\n...\nt.mark();\n\n// Get average time (in millis) between calls\nt.avg;\n```\n\nFor example, to figure how quickly the pointer is being clicked:\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst clickInterval = intervalTracker();\n\ndocument.addEventListener(`click`, evt => {\n  clickInterval.mark();\n  console.log(`Average interval: ${clickInterval.avg}`);\n});\n```\n\nSee also:\n* [`intervalTracker` API docs](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html)\n* [typer demo](https://clinth.github.io/ixfx-demos/io/keyboard/typer/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer)) uses `intervalTracker` to work with typing speed\n\n## Point\n\nTracking an _x, y_ [Point](../../types/geometry/point/) over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.\n\n<frame-element title=\"Point tracking playground\" src=\"https://clinth.github.io/ixfx-play/data/point-tracker/index.html\" />\n\n[`pointTracker`](https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html) keeps track of a single point, returning an instance of [PointTracker](https://clinth.github.io/ixfx/classes/Data.PointTracker.html).\n\nFirst initialise:\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointTracker();\n\n// Or alternatively, keep track of only the last 10 samples:\nconst t = pointTracker({\n  sampleLimit: 10\n})\n```\n\nAnd then call `seen()` whenever there is a point to track, for example, based on a pointer move event.\n\n```js\nconst info = t.seen({ x: 10, y: 20 });\n```\n\n`seen()` returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.\n\n```js\nconst { fromInitial, fromLast, values } = info;\n```\n\n`values` is a set of all the recorded points. `fromInitial` and `fromLast` yield the relation between the very first seen point and the last point. For both of these, you get:\n\n```typescript\n{\n  speed: number     // units/ms\n  angle: number     // in radians\n  distance: number\n  average: Point    // average of all points\n  centroid: Point\n  distance: number\n}\n```\n\nFor example:\n\n```js\nconst { fromInitial, fromLast } = t.seen(pointerEvent); // Add pointer event\nconsole.log(`Distance from start: ${fromInitial.distance}`);\n```\n\nIn the example below, we start tracking when the pointer is down and add points when there is a pointer move event.\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nlet tracker = null;\n\ndocument.addEventListener(`pointerdown`, evt => {\n  // Init new tracker\n  tracker = pointTracker();\n  tracker.seen({ x: evt.x, y: evt.y });\n});\n\ndocument.addEventListener(`pointermove`, evt => {\n  if (!tracker) return;\n  const info = tracker.seen({x: evt.x, y: evt.y });\n  \n  console.log(`Angle from start: ${info.fromInitial.angle}`);\n});\n```\n\nTo get the last result without adding anything:\n\n```js\nconst nfo = tracker.lastResult;\n```\n\nThere are a few helper functions on the tracker:\n\n```js\n// Distance & angle from initial point\ntracker.distanceFromStart();  // number\ntracker.angleFromStart();     // number (radians)\n\n// Latest point subtracted from initial point\ntracker.difference(); // { x, y }\n```\n\n## Points\n\nIf you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several `pointTracker` instances.\n\n[`pointsTracker`](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) to the rescue! It does all this housekeeping for you.\n\nInitalise like so:\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointsTracker();\n```\n\nAnd then whenever there is new data for a point, call `seen()`, giving the id of the point, and then the point (`{x: .., y: ...}`). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.\n\n```js\nt.seen(`nose`, pose[`nose`]);\n```\n\nIn the example below, we track each named pointer id.\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = pointsTracker();\n\n// Track a point by its id\ndocument.addEventListener(`pointermove`, e => {\n const info = await pt.seen(e.pointerId, { x: e.x, y: e.y });\n});\n```\n\nNote that `seen` is an async function, so `await` needs to be used if you want the result.\n\nTo get data:\n\n```js\nt.last();      // Iterate last seen {x,y} for each named point\nt.ids();       // Iterate over point names\nt.has(`nose`); // true if point has been seen\n```\n\nUnder-the-hood, it automatically creates a `pointTracker` for each named point. This can be retrieved using `t.get(id)`:\n\n```js\n// Get the point tracker for this named point\nconst noseValue = t.get(`nose`);\nnoseValue.last;     // Last seen { x, y }\nnoseValue.initial;  // Initial { x, y }\nnoseValue.elapsed;  // milliseconds since first seen\nnoseValue.reset();  // reset this named point    \n```\n\nSee also:\n* [`pointsTracker` API docs](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) for more on the tracker, including sorting points by when they were recently updated.\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Trackers in general\n\nAll the trackers can take some options. Eg, creating a `numberTracker` with a string id of `someTracker`, have it automatically reset every 10 samples, and to store these values:\n\n```js\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = numberTracker(`someTracker`, {\n  resetAfterSamples: 10,\n  storeIntermediate: true\n});\n```", "html": '<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>\n<li>Related: <a href="../frequency/">FrequencyMutable</a>: tracks \'seen\' values</li>\n</div>\n<p>The ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.</p>\n<h2 id="numbers">Numbers</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code is:raw>numberTracker</code></a> keeps track of the minimum, maximum and average of a stream of numbers, without storing them.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add some random values</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get computed values</span>\nt<span class="token punctuation">.</span>avg\nt<span class="token punctuation">.</span>min\nt<span class="token punctuation">.</span>total</code></pre>\n<p>An example usage might be to track the range of a sensor over time.</p>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code is:raw>numberTracker</code> API docs</a> for more</li>\n<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code is:raw>numberTracker</code> and <code is:raw>pointsTracker</code>.</li>\n</ul>\n<h2 id="intervals">Intervals</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code is:raw>intervalTracker</code></a> tracks time intervals.</p>\n<p>This is useful when you\'re interested in the period or frequency of events rather than event data itself.</p>\n<p>Once initialised, call <code is:raw>mark</code> on the returned object to capture the elapsed time.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call `mark` to record the interval since last `mark` (or init)</span>\nt<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\nt<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get average time (in millis) between calls</span>\nt<span class="token punctuation">.</span>avg<span class="token punctuation">;</span></code></pre>\n<p>For example, to figure how quickly the pointer is being clicked:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> clickInterval <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  clickInterval<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Average interval: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>clickInterval<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code is:raw>intervalTracker</code> API docs</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/io/keyboard/typer/">typer demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer">source</a>) uses <code is:raw>intervalTracker</code> to work with typing speed</li>\n</ul>\n<h2 id="point">Point</h2>\n<p>Tracking an <em>x, y</em> <a href="../../types/geometry/point/">Point</a> over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.</p>\n<frame-element title="Point tracking playground" src="https://clinth.github.io/ixfx-play/data/point-tracker/index.html" />\n<p><a href="https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html"><code is:raw>pointTracker</code></a> keeps track of a single point, returning an instance of <a href="https://clinth.github.io/ixfx/classes/Data.PointTracker.html">PointTracker</a>.</p>\n<p>First initialise:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Or alternatively, keep track of only the last 10 samples:</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">sampleLimit</span><span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>And then call <code is:raw>seen()</code> whenever there is a point to track, for example, based on a pointer move event.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>seen()</code> returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast<span class="token punctuation">,</span> values <span class="token punctuation">}</span> <span class="token operator">=</span> info<span class="token punctuation">;</span></code></pre>\n<p><code is:raw>values</code> is a set of all the recorded points. <code is:raw>fromInitial</code> and <code is:raw>fromLast</code> yield the relation between the very first seen point and the last point. For both of these, you get:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token punctuation">{</span>\n  speed<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// units/ms</span>\n  angle<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// in radians</span>\n  distance<span class="token operator">:</span> <span class="token builtin">number</span>\n  average<span class="token operator">:</span> Point    <span class="token comment">// average of all points</span>\n  centroid<span class="token operator">:</span> Point\n  distance<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre>\n<p>For example:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast <span class="token punctuation">}</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>pointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add pointer event</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fromInitial<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, we start tracking when the pointer is down and add points when there is a pointer move event.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Init new tracker</span>\n  tracker <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tracker<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> info <span class="token operator">=</span> tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Angle from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>fromInitial<span class="token punctuation">.</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To get the last result without adding anything:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> nfo <span class="token operator">=</span> tracker<span class="token punctuation">.</span>lastResult<span class="token punctuation">;</span></code></pre>\n<p>There are a few helper functions on the tracker:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Distance &amp; angle from initial point</span>\ntracker<span class="token punctuation">.</span><span class="token function">distanceFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// number</span>\ntracker<span class="token punctuation">.</span><span class="token function">angleFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// number (radians)</span>\n\n<span class="token comment">// Latest point subtracted from initial point</span>\ntracker<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { x, y }</span></code></pre>\n<h2 id="points">Points</h2>\n<p>If you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several <code is:raw>pointTracker</code> instances.</p>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code is:raw>pointsTracker</code></a> to the rescue! It does all this housekeeping for you.</p>\n<p>Initalise like so:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>And then whenever there is new data for a point, call <code is:raw>seen()</code>, giving the id of the point, and then the point (<code is:raw>{x: .., y: ...}</code>). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.</p>\n<pre class="language-js"><code is:raw class="language-js">t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> pose<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, we track each named pointer id.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Track a point by its id</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> pt<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pointerId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Note that <code is:raw>seen</code> is an async function, so <code is:raw>await</code> needs to be used if you want the result.</p>\n<p>To get data:</p>\n<pre class="language-js"><code is:raw class="language-js">t<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Iterate last seen {x,y} for each named point</span>\nt<span class="token punctuation">.</span><span class="token function">ids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Iterate over point names</span>\nt<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true if point has been seen</span></code></pre>\n<p>Under-the-hood, it automatically creates a <code is:raw>pointTracker</code> for each named point. This can be retrieved using <code is:raw>t.get(id)</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Get the point tracker for this named point</span>\n<span class="token keyword">const</span> noseValue <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnoseValue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>     <span class="token comment">// Last seen { x, y }</span>\nnoseValue<span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  <span class="token comment">// Initial { x, y }</span>\nnoseValue<span class="token punctuation">.</span>elapsed<span class="token punctuation">;</span>  <span class="token comment">// milliseconds since first seen</span>\nnoseValue<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// reset this named point    </span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code is:raw>pointsTracker</code> API docs</a> for more on the tracker, including sorting points by when they were recently updated.</li>\n<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code is:raw>numberTracker</code> and <code is:raw>pointsTracker</code>.</li>\n</ul>\n<h2 id="trackers-in-general">Trackers in general</h2>\n<p>All the trackers can take some options. Eg, creating a <code is:raw>numberTracker</code> with a string id of <code is:raw>someTracker</code>, have it automatically reset every 10 samples, and to store these values:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">someTracker</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">resetAfterSamples</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">storeIntermediate</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' };
const frontmatter = { "title": "Trackers", "astro": { "headers": [{ "depth": 2, "slug": "numbers", "text": "Numbers" }, { "depth": 2, "slug": "intervals", "text": "Intervals" }, { "depth": 2, "slug": "point", "text": "Point" }, { "depth": 2, "slug": "points", "text": "Points" }, { "depth": 2, "slug": "trackers-in-general", "text": "Trackers in general" }], "source": "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>Related: <a href=\"../frequency/\">FrequencyMutable</a>: tracks 'seen' values</li>\n</div>\n\nThe ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.\n\n## Numbers\n\n[`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) keeps track of the minimum, maximum and average of a stream of numbers, without storing them.\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get computed values\nt.avg\nt.min\nt.total\n```\n\nAn example usage might be to track the range of a sensor over time.\n\nSee also:\n* [`numberTracker` API docs](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) for more\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Intervals\n\n[`intervalTracker`](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html) tracks time intervals.\n\nThis is useful when you're interested in the period or frequency of events rather than event data itself.\n\nOnce initialised, call `mark` on the returned object to capture the elapsed time.\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = intervalTracker();\n\n// Call `mark` to record the interval since last `mark` (or init)\nt.mark();\n...\nt.mark();\n\n// Get average time (in millis) between calls\nt.avg;\n```\n\nFor example, to figure how quickly the pointer is being clicked:\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst clickInterval = intervalTracker();\n\ndocument.addEventListener(`click`, evt => {\n  clickInterval.mark();\n  console.log(`Average interval: ${clickInterval.avg}`);\n});\n```\n\nSee also:\n* [`intervalTracker` API docs](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html)\n* [typer demo](https://clinth.github.io/ixfx-demos/io/keyboard/typer/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer)) uses `intervalTracker` to work with typing speed\n\n## Point\n\nTracking an _x, y_ [Point](../../types/geometry/point/) over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.\n\n<frame-element title=\"Point tracking playground\" src=\"https://clinth.github.io/ixfx-play/data/point-tracker/index.html\" />\n\n[`pointTracker`](https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html) keeps track of a single point, returning an instance of [PointTracker](https://clinth.github.io/ixfx/classes/Data.PointTracker.html).\n\nFirst initialise:\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointTracker();\n\n// Or alternatively, keep track of only the last 10 samples:\nconst t = pointTracker({\n  sampleLimit: 10\n})\n```\n\nAnd then call `seen()` whenever there is a point to track, for example, based on a pointer move event.\n\n```js\nconst info = t.seen({ x: 10, y: 20 });\n```\n\n`seen()` returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.\n\n```js\nconst { fromInitial, fromLast, values } = info;\n```\n\n`values` is a set of all the recorded points. `fromInitial` and `fromLast` yield the relation between the very first seen point and the last point. For both of these, you get:\n\n```typescript\n{\n  speed: number     // units/ms\n  angle: number     // in radians\n  distance: number\n  average: Point    // average of all points\n  centroid: Point\n  distance: number\n}\n```\n\nFor example:\n\n```js\nconst { fromInitial, fromLast } = t.seen(pointerEvent); // Add pointer event\nconsole.log(`Distance from start: ${fromInitial.distance}`);\n```\n\nIn the example below, we start tracking when the pointer is down and add points when there is a pointer move event.\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nlet tracker = null;\n\ndocument.addEventListener(`pointerdown`, evt => {\n  // Init new tracker\n  tracker = pointTracker();\n  tracker.seen({ x: evt.x, y: evt.y });\n});\n\ndocument.addEventListener(`pointermove`, evt => {\n  if (!tracker) return;\n  const info = tracker.seen({x: evt.x, y: evt.y });\n  \n  console.log(`Angle from start: ${info.fromInitial.angle}`);\n});\n```\n\nTo get the last result without adding anything:\n\n```js\nconst nfo = tracker.lastResult;\n```\n\nThere are a few helper functions on the tracker:\n\n```js\n// Distance & angle from initial point\ntracker.distanceFromStart();  // number\ntracker.angleFromStart();     // number (radians)\n\n// Latest point subtracted from initial point\ntracker.difference(); // { x, y }\n```\n\n## Points\n\nIf you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several `pointTracker` instances.\n\n[`pointsTracker`](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) to the rescue! It does all this housekeeping for you.\n\nInitalise like so:\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointsTracker();\n```\n\nAnd then whenever there is new data for a point, call `seen()`, giving the id of the point, and then the point (`{x: .., y: ...}`). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.\n\n```js\nt.seen(`nose`, pose[`nose`]);\n```\n\nIn the example below, we track each named pointer id.\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = pointsTracker();\n\n// Track a point by its id\ndocument.addEventListener(`pointermove`, e => {\n const info = await pt.seen(e.pointerId, { x: e.x, y: e.y });\n});\n```\n\nNote that `seen` is an async function, so `await` needs to be used if you want the result.\n\nTo get data:\n\n```js\nt.last();      // Iterate last seen {x,y} for each named point\nt.ids();       // Iterate over point names\nt.has(`nose`); // true if point has been seen\n```\n\nUnder-the-hood, it automatically creates a `pointTracker` for each named point. This can be retrieved using `t.get(id)`:\n\n```js\n// Get the point tracker for this named point\nconst noseValue = t.get(`nose`);\nnoseValue.last;     // Last seen { x, y }\nnoseValue.initial;  // Initial { x, y }\nnoseValue.elapsed;  // milliseconds since first seen\nnoseValue.reset();  // reset this named point    \n```\n\nSee also:\n* [`pointsTracker` API docs](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) for more on the tracker, including sorting points by when they were recently updated.\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Trackers in general\n\nAll the trackers can take some options. Eg, creating a `numberTracker` with a string id of `someTracker`, have it automatically reset every 10 samples, and to store these values:\n\n```js\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = numberTracker(`someTracker`, {\n  resetAfterSamples: 10,\n  storeIntermediate: true\n});\n```", "html": '<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>\n<li>Related: <a href="../frequency/">FrequencyMutable</a>: tracks \'seen\' values</li>\n</div>\n<p>The ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.</p>\n<h2 id="numbers">Numbers</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code is:raw>numberTracker</code></a> keeps track of the minimum, maximum and average of a stream of numbers, without storing them.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add some random values</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get computed values</span>\nt<span class="token punctuation">.</span>avg\nt<span class="token punctuation">.</span>min\nt<span class="token punctuation">.</span>total</code></pre>\n<p>An example usage might be to track the range of a sensor over time.</p>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code is:raw>numberTracker</code> API docs</a> for more</li>\n<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code is:raw>numberTracker</code> and <code is:raw>pointsTracker</code>.</li>\n</ul>\n<h2 id="intervals">Intervals</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code is:raw>intervalTracker</code></a> tracks time intervals.</p>\n<p>This is useful when you\'re interested in the period or frequency of events rather than event data itself.</p>\n<p>Once initialised, call <code is:raw>mark</code> on the returned object to capture the elapsed time.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call `mark` to record the interval since last `mark` (or init)</span>\nt<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\nt<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get average time (in millis) between calls</span>\nt<span class="token punctuation">.</span>avg<span class="token punctuation">;</span></code></pre>\n<p>For example, to figure how quickly the pointer is being clicked:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> clickInterval <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  clickInterval<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Average interval: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>clickInterval<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code is:raw>intervalTracker</code> API docs</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/io/keyboard/typer/">typer demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer">source</a>) uses <code is:raw>intervalTracker</code> to work with typing speed</li>\n</ul>\n<h2 id="point">Point</h2>\n<p>Tracking an <em>x, y</em> <a href="../../types/geometry/point/">Point</a> over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.</p>\n<frame-element title="Point tracking playground" src="https://clinth.github.io/ixfx-play/data/point-tracker/index.html" />\n<p><a href="https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html"><code is:raw>pointTracker</code></a> keeps track of a single point, returning an instance of <a href="https://clinth.github.io/ixfx/classes/Data.PointTracker.html">PointTracker</a>.</p>\n<p>First initialise:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Or alternatively, keep track of only the last 10 samples:</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">sampleLimit</span><span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>And then call <code is:raw>seen()</code> whenever there is a point to track, for example, based on a pointer move event.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>seen()</code> returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast<span class="token punctuation">,</span> values <span class="token punctuation">}</span> <span class="token operator">=</span> info<span class="token punctuation">;</span></code></pre>\n<p><code is:raw>values</code> is a set of all the recorded points. <code is:raw>fromInitial</code> and <code is:raw>fromLast</code> yield the relation between the very first seen point and the last point. For both of these, you get:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token punctuation">{</span>\n  speed<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// units/ms</span>\n  angle<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// in radians</span>\n  distance<span class="token operator">:</span> <span class="token builtin">number</span>\n  average<span class="token operator">:</span> Point    <span class="token comment">// average of all points</span>\n  centroid<span class="token operator">:</span> Point\n  distance<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre>\n<p>For example:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast <span class="token punctuation">}</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>pointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add pointer event</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fromInitial<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, we start tracking when the pointer is down and add points when there is a pointer move event.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Init new tracker</span>\n  tracker <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tracker<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> info <span class="token operator">=</span> tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Angle from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>fromInitial<span class="token punctuation">.</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To get the last result without adding anything:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> nfo <span class="token operator">=</span> tracker<span class="token punctuation">.</span>lastResult<span class="token punctuation">;</span></code></pre>\n<p>There are a few helper functions on the tracker:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Distance &amp; angle from initial point</span>\ntracker<span class="token punctuation">.</span><span class="token function">distanceFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// number</span>\ntracker<span class="token punctuation">.</span><span class="token function">angleFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// number (radians)</span>\n\n<span class="token comment">// Latest point subtracted from initial point</span>\ntracker<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { x, y }</span></code></pre>\n<h2 id="points">Points</h2>\n<p>If you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several <code is:raw>pointTracker</code> instances.</p>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code is:raw>pointsTracker</code></a> to the rescue! It does all this housekeeping for you.</p>\n<p>Initalise like so:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>And then whenever there is new data for a point, call <code is:raw>seen()</code>, giving the id of the point, and then the point (<code is:raw>{x: .., y: ...}</code>). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.</p>\n<pre class="language-js"><code is:raw class="language-js">t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> pose<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, we track each named pointer id.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Track a point by its id</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> pt<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pointerId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Note that <code is:raw>seen</code> is an async function, so <code is:raw>await</code> needs to be used if you want the result.</p>\n<p>To get data:</p>\n<pre class="language-js"><code is:raw class="language-js">t<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Iterate last seen {x,y} for each named point</span>\nt<span class="token punctuation">.</span><span class="token function">ids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Iterate over point names</span>\nt<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true if point has been seen</span></code></pre>\n<p>Under-the-hood, it automatically creates a <code is:raw>pointTracker</code> for each named point. This can be retrieved using <code is:raw>t.get(id)</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Get the point tracker for this named point</span>\n<span class="token keyword">const</span> noseValue <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnoseValue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>     <span class="token comment">// Last seen { x, y }</span>\nnoseValue<span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  <span class="token comment">// Initial { x, y }</span>\nnoseValue<span class="token punctuation">.</span>elapsed<span class="token punctuation">;</span>  <span class="token comment">// milliseconds since first seen</span>\nnoseValue<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// reset this named point    </span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code is:raw>pointsTracker</code> API docs</a> for more on the tracker, including sorting points by when they were recently updated.</li>\n<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code is:raw>numberTracker</code> and <code is:raw>pointsTracker</code>.</li>\n</ul>\n<h2 id="trackers-in-general">Trackers in general</h2>\n<p>All the trackers can take some options. Eg, creating a <code is:raw>numberTracker</code> with a string id of <code is:raw>someTracker</code>, have it automatically reset every 10 samples, and to store these values:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">someTracker</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">resetAfterSamples</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">storeIntermediate</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/data/trackers.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "../../components/FrameElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [{ type: "inline", value: `
  import '/src/components/ReplPad';
` }] });
const $$Astro = createAstro("/src/pages/data/trackers.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Trackers = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Trackers;
  const $$content = { "title": "Trackers", "astro": { "headers": [{ "depth": 2, "slug": "numbers", "text": "Numbers" }, { "depth": 2, "slug": "intervals", "text": "Intervals" }, { "depth": 2, "slug": "point", "text": "Point" }, { "depth": 2, "slug": "points", "text": "Points" }, { "depth": 2, "slug": "trackers-in-general", "text": "Trackers in general" }], "source": "\n<script type=\"module\" hoist>\n  import '/src/components/ReplPad';\n<\/script>\n\n<div class=\"tip\">\n<ul>\n<li>API Reference <a href=\"https://clinth.github.io/ixfx/modules/Data.html\">Data module</a></li>\n<li>Related: <a href=\"../frequency/\">FrequencyMutable</a>: tracks 'seen' values</li>\n</div>\n\nThe ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.\n\n## Numbers\n\n[`numberTracker`](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) keeps track of the minimum, maximum and average of a stream of numbers, without storing them.\n\n```js\n// repl-pad\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = numberTracker();\n\n// Add some random values\nfor (let i=0;i<10;i++) t.seen(Math.floor(Math.random()*100)));\n\n// Get computed values\nt.avg\nt.min\nt.total\n```\n\nAn example usage might be to track the range of a sensor over time.\n\nSee also:\n* [`numberTracker` API docs](https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html) for more\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Intervals\n\n[`intervalTracker`](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html) tracks time intervals.\n\nThis is useful when you're interested in the period or frequency of events rather than event data itself.\n\nOnce initialised, call `mark` on the returned object to capture the elapsed time.\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\n// Initialise\nconst t = intervalTracker();\n\n// Call `mark` to record the interval since last `mark` (or init)\nt.mark();\n...\nt.mark();\n\n// Get average time (in millis) between calls\nt.avg;\n```\n\nFor example, to figure how quickly the pointer is being clicked:\n\n```js\nimport { intervalTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst clickInterval = intervalTracker();\n\ndocument.addEventListener(`click`, evt => {\n  clickInterval.mark();\n  console.log(`Average interval: ${clickInterval.avg}`);\n});\n```\n\nSee also:\n* [`intervalTracker` API docs](https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html)\n* [typer demo](https://clinth.github.io/ixfx-demos/io/keyboard/typer/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer)) uses `intervalTracker` to work with typing speed\n\n## Point\n\nTracking an _x, y_ [Point](../../types/geometry/point/) over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.\n\n<frame-element title=\"Point tracking playground\" src=\"https://clinth.github.io/ixfx-play/data/point-tracker/index.html\" />\n\n[`pointTracker`](https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html) keeps track of a single point, returning an instance of [PointTracker](https://clinth.github.io/ixfx/classes/Data.PointTracker.html).\n\nFirst initialise:\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointTracker();\n\n// Or alternatively, keep track of only the last 10 samples:\nconst t = pointTracker({\n  sampleLimit: 10\n})\n```\n\nAnd then call `seen()` whenever there is a point to track, for example, based on a pointer move event.\n\n```js\nconst info = t.seen({ x: 10, y: 20 });\n```\n\n`seen()` returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.\n\n```js\nconst { fromInitial, fromLast, values } = info;\n```\n\n`values` is a set of all the recorded points. `fromInitial` and `fromLast` yield the relation between the very first seen point and the last point. For both of these, you get:\n\n```typescript\n{\n  speed: number     // units/ms\n  angle: number     // in radians\n  distance: number\n  average: Point    // average of all points\n  centroid: Point\n  distance: number\n}\n```\n\nFor example:\n\n```js\nconst { fromInitial, fromLast } = t.seen(pointerEvent); // Add pointer event\nconsole.log(`Distance from start: ${fromInitial.distance}`);\n```\n\nIn the example below, we start tracking when the pointer is down and add points when there is a pointer move event.\n\n```js\nimport { pointTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nlet tracker = null;\n\ndocument.addEventListener(`pointerdown`, evt => {\n  // Init new tracker\n  tracker = pointTracker();\n  tracker.seen({ x: evt.x, y: evt.y });\n});\n\ndocument.addEventListener(`pointermove`, evt => {\n  if (!tracker) return;\n  const info = tracker.seen({x: evt.x, y: evt.y });\n  \n  console.log(`Angle from start: ${info.fromInitial.angle}`);\n});\n```\n\nTo get the last result without adding anything:\n\n```js\nconst nfo = tracker.lastResult;\n```\n\nThere are a few helper functions on the tracker:\n\n```js\n// Distance & angle from initial point\ntracker.distanceFromStart();  // number\ntracker.angleFromStart();     // number (radians)\n\n// Latest point subtracted from initial point\ntracker.difference(); // { x, y }\n```\n\n## Points\n\nIf you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several `pointTracker` instances.\n\n[`pointsTracker`](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) to the rescue! It does all this housekeeping for you.\n\nInitalise like so:\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\nconst t = pointsTracker();\n```\n\nAnd then whenever there is new data for a point, call `seen()`, giving the id of the point, and then the point (`{x: .., y: ...}`). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.\n\n```js\nt.seen(`nose`, pose[`nose`]);\n```\n\nIn the example below, we track each named pointer id.\n\n```js\nimport { pointsTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = pointsTracker();\n\n// Track a point by its id\ndocument.addEventListener(`pointermove`, e => {\n const info = await pt.seen(e.pointerId, { x: e.x, y: e.y });\n});\n```\n\nNote that `seen` is an async function, so `await` needs to be used if you want the result.\n\nTo get data:\n\n```js\nt.last();      // Iterate last seen {x,y} for each named point\nt.ids();       // Iterate over point names\nt.has(`nose`); // true if point has been seen\n```\n\nUnder-the-hood, it automatically creates a `pointTracker` for each named point. This can be retrieved using `t.get(id)`:\n\n```js\n// Get the point tracker for this named point\nconst noseValue = t.get(`nose`);\nnoseValue.last;     // Last seen { x, y }\nnoseValue.initial;  // Initial { x, y }\nnoseValue.elapsed;  // milliseconds since first seen\nnoseValue.reset();  // reset this named point    \n```\n\nSee also:\n* [`pointsTracker` API docs](https://clinth.github.io/ixfx/functions/Data.pointsTracker.html) for more on the tracker, including sorting points by when they were recently updated.\n* The [pointer scale demo](https://clinth.github.io/ixfx-demos/pointer/scale/) ([source](https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale)) uses `numberTracker` and `pointsTracker`.\n\n## Trackers in general\n\nAll the trackers can take some options. Eg, creating a `numberTracker` with a string id of `someTracker`, have it automatically reset every 10 samples, and to store these values:\n\n```js\nimport { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n\nconst t = numberTracker(`someTracker`, {\n  resetAfterSamples: 10,\n  storeIntermediate: true\n});\n```", "html": '<script type="module" hoist>\n  import \'/src/components/ReplPad\';\n<\/script>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>\n<li>Related: <a href="../frequency/">FrequencyMutable</a>: tracks \'seen\' values</li>\n</div>\n<p>The ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.</p>\n<h2 id="numbers">Numbers</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code is:raw>numberTracker</code></a> keeps track of the minimum, maximum and average of a stream of numbers, without storing them.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// repl-pad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Add some random values</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get computed values</span>\nt<span class="token punctuation">.</span>avg\nt<span class="token punctuation">.</span>min\nt<span class="token punctuation">.</span>total</code></pre>\n<p>An example usage might be to track the range of a sensor over time.</p>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code is:raw>numberTracker</code> API docs</a> for more</li>\n<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code is:raw>numberTracker</code> and <code is:raw>pointsTracker</code>.</li>\n</ul>\n<h2 id="intervals">Intervals</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code is:raw>intervalTracker</code></a> tracks time intervals.</p>\n<p>This is useful when you\'re interested in the period or frequency of events rather than event data itself.</p>\n<p>Once initialised, call <code is:raw>mark</code> on the returned object to capture the elapsed time.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialise</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call `mark` to record the interval since last `mark` (or init)</span>\nt<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">...</span>\nt<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Get average time (in millis) between calls</span>\nt<span class="token punctuation">.</span>avg<span class="token punctuation">;</span></code></pre>\n<p>For example, to figure how quickly the pointer is being clicked:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> clickInterval <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  clickInterval<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Average interval: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>clickInterval<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code is:raw>intervalTracker</code> API docs</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/io/keyboard/typer/">typer demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer">source</a>) uses <code is:raw>intervalTracker</code> to work with typing speed</li>\n</ul>\n<h2 id="point">Point</h2>\n<p>Tracking an <em>x, y</em> <a href="../../types/geometry/point/">Point</a> over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.</p>\n<frame-element title="Point tracking playground" src="https://clinth.github.io/ixfx-play/data/point-tracker/index.html" />\n<p><a href="https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html"><code is:raw>pointTracker</code></a> keeps track of a single point, returning an instance of <a href="https://clinth.github.io/ixfx/classes/Data.PointTracker.html">PointTracker</a>.</p>\n<p>First initialise:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Or alternatively, keep track of only the last 10 samples:</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">sampleLimit</span><span class="token operator">:</span> <span class="token number">10</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<p>And then call <code is:raw>seen()</code> whenever there is a point to track, for example, based on a pointer move event.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><code is:raw>seen()</code> returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast<span class="token punctuation">,</span> values <span class="token punctuation">}</span> <span class="token operator">=</span> info<span class="token punctuation">;</span></code></pre>\n<p><code is:raw>values</code> is a set of all the recorded points. <code is:raw>fromInitial</code> and <code is:raw>fromLast</code> yield the relation between the very first seen point and the last point. For both of these, you get:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token punctuation">{</span>\n  speed<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// units/ms</span>\n  angle<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// in radians</span>\n  distance<span class="token operator">:</span> <span class="token builtin">number</span>\n  average<span class="token operator">:</span> Point    <span class="token comment">// average of all points</span>\n  centroid<span class="token operator">:</span> Point\n  distance<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre>\n<p>For example:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast <span class="token punctuation">}</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>pointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add pointer event</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fromInitial<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, we start tracking when the pointer is down and add points when there is a pointer move event.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Init new tracker</span>\n  tracker <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tracker<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> info <span class="token operator">=</span> tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Angle from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>fromInitial<span class="token punctuation">.</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>To get the last result without adding anything:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> nfo <span class="token operator">=</span> tracker<span class="token punctuation">.</span>lastResult<span class="token punctuation">;</span></code></pre>\n<p>There are a few helper functions on the tracker:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Distance &amp; angle from initial point</span>\ntracker<span class="token punctuation">.</span><span class="token function">distanceFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// number</span>\ntracker<span class="token punctuation">.</span><span class="token function">angleFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// number (radians)</span>\n\n<span class="token comment">// Latest point subtracted from initial point</span>\ntracker<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { x, y }</span></code></pre>\n<h2 id="points">Points</h2>\n<p>If you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several <code is:raw>pointTracker</code> instances.</p>\n<p><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code is:raw>pointsTracker</code></a> to the rescue! It does all this housekeeping for you.</p>\n<p>Initalise like so:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>And then whenever there is new data for a point, call <code is:raw>seen()</code>, giving the id of the point, and then the point (<code is:raw>{x: .., y: ...}</code>). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.</p>\n<pre class="language-js"><code is:raw class="language-js">t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> pose<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>In the example below, we track each named pointer id.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Track a point by its id</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pointermove</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> pt<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pointerId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Note that <code is:raw>seen</code> is an async function, so <code is:raw>await</code> needs to be used if you want the result.</p>\n<p>To get data:</p>\n<pre class="language-js"><code is:raw class="language-js">t<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Iterate last seen {x,y} for each named point</span>\nt<span class="token punctuation">.</span><span class="token function">ids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Iterate over point names</span>\nt<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true if point has been seen</span></code></pre>\n<p>Under-the-hood, it automatically creates a <code is:raw>pointTracker</code> for each named point. This can be retrieved using <code is:raw>t.get(id)</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Get the point tracker for this named point</span>\n<span class="token keyword">const</span> noseValue <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">nose</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnoseValue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>     <span class="token comment">// Last seen { x, y }</span>\nnoseValue<span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  <span class="token comment">// Initial { x, y }</span>\nnoseValue<span class="token punctuation">.</span>elapsed<span class="token punctuation">;</span>  <span class="token comment">// milliseconds since first seen</span>\nnoseValue<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// reset this named point    </span></code></pre>\n<p>See also:</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code is:raw>pointsTracker</code> API docs</a> for more on the tracker, including sorting points by when they were recently updated.</li>\n<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code is:raw>numberTracker</code> and <code is:raw>pointsTracker</code>.</li>\n</ul>\n<h2 id="trackers-in-general">Trackers in general</h2>\n<p>All the trackers can take some options. Eg, creating a <code is:raw>numberTracker</code> with a string id of <code is:raw>someTracker</code>, have it automatically reset every 10 samples, and to store these values:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'https://unpkg.com/ixfx/dist/data.js\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">someTracker</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">resetAfterSamples</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">storeIntermediate</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/ReplPad';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Data.html">Data module</a></li>
<li>Related: <a href="../frequency/">FrequencyMutable</a>: tracks 'seen' values</li>
</ul></div><p>The ixfx suite of trackers are meant for streams of data. In their simplest usage, they can keep track of the range of data. In more advanced usage, they are helpful in comparing some start value to a current value.</p><h2 id="numbers">Numbers</h2><p><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code>numberTracker</code></a> keeps track of the minimum, maximum and average of a stream of numbers, without storing them.</p><pre class="language-js"><code class="language-js"><span class="token comment">// repl-pad</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add some random values</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get computed values</span>
t<span class="token punctuation">.</span>avg
t<span class="token punctuation">.</span>min
t<span class="token punctuation">.</span>total</code></pre><p>An example usage might be to track the range of a sensor over time.</p><p>See also:</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Data.numberTracker-1.html"><code>numberTracker</code> API docs</a> for more</li>
<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code>numberTracker</code> and <code>pointsTracker</code>.</li>
</ul><h2 id="intervals">Intervals</h2><p><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code>intervalTracker</code></a> tracks time intervals.</p><p>This is useful when you're interested in the period or frequency of events rather than event data itself.</p><p>Once initialised, call <code>mark</code> on the returned object to capture the elapsed time.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Call \`mark\` to record the interval since last \`mark\` (or init)</span>
t<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
t<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get average time (in millis) between calls</span>
t<span class="token punctuation">.</span>avg<span class="token punctuation">;</span></code></pre><p>For example, to figure how quickly the pointer is being clicked:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> clickInterval <span class="token operator">=</span> <span class="token function">intervalTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  clickInterval<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Average interval: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>clickInterval<span class="token punctuation">.</span>avg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>See also:</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Data.intervalTracker-1.html"><code>intervalTracker</code> API docs</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/io/keyboard/typer/">typer demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/io/keyboard/typer">source</a>) uses <code>intervalTracker</code> to work with typing speed</li>
</ul><h2 id="point">Point</h2><p>Tracking an <em>x, y</em> <a href="../../types/geometry/point/">Point</a> over time is common for working with gestures - be it touch gestures on a screen, or movements of limbs in space.</p>${renderComponent($$result, "frame-element", "frame-element", { "title": "Point tracking playground", "src": "https://clinth.github.io/ixfx-play/data/point-tracker/index.html" })}<p><a href="https://clinth.github.io/ixfx/functions/Data.pointTracker-1.html"><code>pointTracker</code></a> keeps track of a single point, returning an instance of <a href="https://clinth.github.io/ixfx/classes/Data.PointTracker.html">PointTracker</a>.</p><p>First initialise:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or alternatively, keep track of only the last 10 samples:</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">sampleLimit</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>And then call <code>seen()</code> whenever there is a point to track, for example, based on a pointer move event.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> info <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>seen()</code> returns an object with useful data comparing the value you passed with the previous value and initial value. You also get a snapshot of all the stored values thus far.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast<span class="token punctuation">,</span> values <span class="token punctuation">}</span> <span class="token operator">=</span> info<span class="token punctuation">;</span></code></pre><p><code>values</code> is a set of all the recorded points. <code>fromInitial</code> and <code>fromLast</code> yield the relation between the very first seen point and the last point. For both of these, you get:</p><pre class="language-typescript"><code class="language-typescript"><span class="token punctuation">{</span>
  speed<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// units/ms</span>
  angle<span class="token operator">:</span> <span class="token builtin">number</span>     <span class="token comment">// in radians</span>
  distance<span class="token operator">:</span> <span class="token builtin">number</span>
  average<span class="token operator">:</span> Point    <span class="token comment">// average of all points</span>
  centroid<span class="token operator">:</span> Point
  distance<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span></code></pre><p>For example:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> fromInitial<span class="token punctuation">,</span> fromLast <span class="token punctuation">}</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>pointerEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add pointer event</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Distance from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fromInitial<span class="token punctuation">.</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the example below, we start tracking when the pointer is down and add points when there is a pointer move event.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> tracker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointerdown</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Init new tracker</span>
  tracker <span class="token operator">=</span> <span class="token function">pointTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tracker<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> info <span class="token operator">=</span> tracker<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> evt<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Angle from start: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>info<span class="token punctuation">.</span>fromInitial<span class="token punctuation">.</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>To get the last result without adding anything:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> nfo <span class="token operator">=</span> tracker<span class="token punctuation">.</span>lastResult<span class="token punctuation">;</span></code></pre><p>There are a few helper functions on the tracker:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Distance &amp; angle from initial point</span>
tracker<span class="token punctuation">.</span><span class="token function">distanceFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// number</span>
tracker<span class="token punctuation">.</span><span class="token function">angleFromStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// number (radians)</span>

<span class="token comment">// Latest point subtracted from initial point</span>
tracker<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { x, y }</span></code></pre><h2 id="points">Points</h2><p>If you want to keep track of several different logical points, for example different touches in a multi-touch gesture, or body parts in TensorFlow, it can be a pain to create and manage several <code>pointTracker</code> instances.</p><p><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code>pointsTracker</code></a> to the rescue! It does all this housekeeping for you.</p><p>Initalise like so:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>And then whenever there is new data for a point, call <code>seen()</code>, giving the id of the point, and then the point (<code>{x: .., y: ...}</code>). This could be based on a pointer event, or when new predictions are made by TensorFlow, for example.</p><pre class="language-js"><code class="language-js">t<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">nose</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> pose<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">nose</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the example below, we track each named pointer id.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> pointsTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">pointsTracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Track a point by its id</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pointermove</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
 <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> pt<span class="token punctuation">.</span><span class="token function">seen</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pointerId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Note that <code>seen</code> is an async function, so <code>await</code> needs to be used if you want the result.</p><p>To get data:</p><pre class="language-js"><code class="language-js">t<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Iterate last seen {x,y} for each named point</span>
t<span class="token punctuation">.</span><span class="token function">ids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Iterate over point names</span>
t<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">nose</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true if point has been seen</span></code></pre><p>Under-the-hood, it automatically creates a <code>pointTracker</code> for each named point. This can be retrieved using <code>t.get(id)</code>:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Get the point tracker for this named point</span>
<span class="token keyword">const</span> noseValue <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">nose</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
noseValue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>     <span class="token comment">// Last seen { x, y }</span>
noseValue<span class="token punctuation">.</span>initial<span class="token punctuation">;</span>  <span class="token comment">// Initial { x, y }</span>
noseValue<span class="token punctuation">.</span>elapsed<span class="token punctuation">;</span>  <span class="token comment">// milliseconds since first seen</span>
noseValue<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// reset this named point    </span></code></pre><p>See also:</p><ul>
<li><a href="https://clinth.github.io/ixfx/functions/Data.pointsTracker.html"><code>pointsTracker</code> API docs</a> for more on the tracker, including sorting points by when they were recently updated.</li>
<li>The <a href="https://clinth.github.io/ixfx-demos/pointer/scale/">pointer scale demo</a> (<a href="https://github.com/ClintH/ixfx-demos/tree/main/pointer/scale">source</a>) uses <code>numberTracker</code> and <code>pointsTracker</code>.</li>
</ul><h2 id="trackers-in-general">Trackers in general</h2><p>All the trackers can take some options. Eg, creating a <code>numberTracker</code> with a string id of <code>someTracker</code>, have it automatically reset every 10 samples, and to store these values:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> numberTracker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://unpkg.com/ixfx/dist/data.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">numberTracker</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">someTracker</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">resetAfterSamples</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">storeIntermediate</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>` })}`;
});

export { $$metadata, $$Trackers as default, frontmatter, metadata };
