import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "debounce", "text": "Debounce" }, { "depth": 2, "slug": "throttle", "text": "Throttle" }, { "depth": 2, "slug": "run-once", "text": "Run once" }], "source": '\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n\n\n## Debounce\n\n[`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given `timeoutMs`.\n\n```js\nimport { debounce } from "https://unpkg.com/ixfx/dist/flow.js"\n// Signature:\n// debounce(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nFor example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.\n\n```js\nconst resizeDebounced = debounce((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event args if we want\n   const resizeArgs = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeDebounced);\n```\n\n<demo-element title="Debounce pointermove event" src="/flow/debounce/" />\n\nNote in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider [throttle](#throttle).\n\n## Throttle\n\n[`throttle`](https://clinth.github.io/ixfx/functions/Flow.throttle.html) reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.\n\nThis is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with _throttle_ and an appropriate `intervalMs`, you might avoid this.\n\n```js\nimport { throttle } from "https://unpkg.com/ixfx/dist/flow.js"\n// Signature:\n// throttle(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nIn this scenario, the event handler will run at maximum rate of 500ms.\n\n```js\nconst resizeThrottled = throttle((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event data if we need to\n   const resizeEvent = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeThrottled);\n```\n\n<demo-element title="Throttle pointer move events" src="/flow/throttle/" />\n\n`throttle` handles an initial event (when nothing has happened before), and _continue_ to handle events, albeit at a reduced rate. `debounce`, in comparison, only handles the first event after `timeoutMs` has elapsed. And if a new event comes in the meantime, the timer is reset again. It\'s only when there is a break in the events that `debounce` will run.\n\nIt\'s also possible to use `throttle` and `debounce` without events being involved.\n\n```js\n// Some function that we want slowed execution\nconst reset = () => { /* do something */ }\n\n// Set up the throttle one time\nconst resetThrottled = throttle(reset, 200);\n\n// ...and now call `resetThrottled()` whenever you like, \n// as often as you like. `reset` will only be invoked every 200ms\nresetThrottled();\n```\n\n\n## Run once\n\n[`runOnce`](https://clinth.github.io/ixfx/functions/Flow.runOnce.html) wraps the provided function, allowing it to execute only once.\n\n```js\nconst init = runOnce(() => {\n   // do something we only want to happen once\n});\ninit(); // will run the code once\ninit(); // won\'t do anything\n```', "html": '<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n<h2 id="debounce">Debounce</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code is:raw>debounce</code></a> reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given <code is:raw>timeoutMs</code>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Signature:</span>\n<span class="token comment">// debounce(</span>\n<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>\n<span class="token comment">//  timeoutMs:number</span>\n<span class="token comment">// );</span></code></pre>\n<p>For example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> resizeDebounced <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// Handle event</span>\n\n   <span class="token comment">// Use original event args if we want</span>\n   <span class="token keyword">const</span> resizeArgs <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> resizeDebounced<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Debounce pointermove event" src="/flow/debounce/" />\n<p>Note in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider <a href="#throttle">throttle</a>.</p>\n<h2 id="throttle">Throttle</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.throttle.html"><code is:raw>throttle</code></a> reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.</p>\n<p>This is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with <em>throttle</em> and an appropriate <code is:raw>intervalMs</code>, you might avoid this.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Signature:</span>\n<span class="token comment">// throttle(</span>\n<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>\n<span class="token comment">//  timeoutMs:number</span>\n<span class="token comment">// );</span></code></pre>\n<p>In this scenario, the event handler will run at maximum rate of 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> resizeThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// Handle event</span>\n\n   <span class="token comment">// Use original event data if we need to</span>\n   <span class="token keyword">const</span> resizeEvent <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> resizeThrottled<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Throttle pointer move events" src="/flow/throttle/" />\n<p><code is:raw>throttle</code> handles an initial event (when nothing has happened before), and <em>continue</em> to handle events, albeit at a reduced rate. <code is:raw>debounce</code>, in comparison, only handles the first event after <code is:raw>timeoutMs</code> has elapsed. And if a new event comes in the meantime, the timer is reset again. It\'s only when there is a break in the events that <code is:raw>debounce</code> will run.</p>\n<p>It\'s also possible to use <code is:raw>throttle</code> and <code is:raw>debounce</code> without events being involved.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Some function that we want slowed execution</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">/* do something */</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// Set up the throttle one time</span>\n<span class="token keyword">const</span> resetThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...and now call `resetThrottled()` whenever you like, </span>\n<span class="token comment">// as often as you like. `reset` will only be invoked every 200ms</span>\n<span class="token function">resetThrottled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="run-once">Run once</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.runOnce.html"><code is:raw>runOnce</code></a> wraps the provided function, allowing it to execute only once.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// do something we only want to happen once</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will run the code once</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// won\'t do anything</span></code></pre>' };
const frontmatter = { "title": "Flow control", "astro": { "headers": [{ "depth": 2, "slug": "debounce", "text": "Debounce" }, { "depth": 2, "slug": "throttle", "text": "Throttle" }, { "depth": 2, "slug": "run-once", "text": "Run once" }], "source": '\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n\n\n## Debounce\n\n[`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given `timeoutMs`.\n\n```js\nimport { debounce } from "https://unpkg.com/ixfx/dist/flow.js"\n// Signature:\n// debounce(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nFor example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.\n\n```js\nconst resizeDebounced = debounce((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event args if we want\n   const resizeArgs = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeDebounced);\n```\n\n<demo-element title="Debounce pointermove event" src="/flow/debounce/" />\n\nNote in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider [throttle](#throttle).\n\n## Throttle\n\n[`throttle`](https://clinth.github.io/ixfx/functions/Flow.throttle.html) reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.\n\nThis is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with _throttle_ and an appropriate `intervalMs`, you might avoid this.\n\n```js\nimport { throttle } from "https://unpkg.com/ixfx/dist/flow.js"\n// Signature:\n// throttle(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nIn this scenario, the event handler will run at maximum rate of 500ms.\n\n```js\nconst resizeThrottled = throttle((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event data if we need to\n   const resizeEvent = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeThrottled);\n```\n\n<demo-element title="Throttle pointer move events" src="/flow/throttle/" />\n\n`throttle` handles an initial event (when nothing has happened before), and _continue_ to handle events, albeit at a reduced rate. `debounce`, in comparison, only handles the first event after `timeoutMs` has elapsed. And if a new event comes in the meantime, the timer is reset again. It\'s only when there is a break in the events that `debounce` will run.\n\nIt\'s also possible to use `throttle` and `debounce` without events being involved.\n\n```js\n// Some function that we want slowed execution\nconst reset = () => { /* do something */ }\n\n// Set up the throttle one time\nconst resetThrottled = throttle(reset, 200);\n\n// ...and now call `resetThrottled()` whenever you like, \n// as often as you like. `reset` will only be invoked every 200ms\nresetThrottled();\n```\n\n\n## Run once\n\n[`runOnce`](https://clinth.github.io/ixfx/functions/Flow.runOnce.html) wraps the provided function, allowing it to execute only once.\n\n```js\nconst init = runOnce(() => {\n   // do something we only want to happen once\n});\ninit(); // will run the code once\ninit(); // won\'t do anything\n```', "html": '<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n<h2 id="debounce">Debounce</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code is:raw>debounce</code></a> reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given <code is:raw>timeoutMs</code>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Signature:</span>\n<span class="token comment">// debounce(</span>\n<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>\n<span class="token comment">//  timeoutMs:number</span>\n<span class="token comment">// );</span></code></pre>\n<p>For example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> resizeDebounced <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// Handle event</span>\n\n   <span class="token comment">// Use original event args if we want</span>\n   <span class="token keyword">const</span> resizeArgs <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> resizeDebounced<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Debounce pointermove event" src="/flow/debounce/" />\n<p>Note in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider <a href="#throttle">throttle</a>.</p>\n<h2 id="throttle">Throttle</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.throttle.html"><code is:raw>throttle</code></a> reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.</p>\n<p>This is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with <em>throttle</em> and an appropriate <code is:raw>intervalMs</code>, you might avoid this.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Signature:</span>\n<span class="token comment">// throttle(</span>\n<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>\n<span class="token comment">//  timeoutMs:number</span>\n<span class="token comment">// );</span></code></pre>\n<p>In this scenario, the event handler will run at maximum rate of 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> resizeThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// Handle event</span>\n\n   <span class="token comment">// Use original event data if we need to</span>\n   <span class="token keyword">const</span> resizeEvent <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> resizeThrottled<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Throttle pointer move events" src="/flow/throttle/" />\n<p><code is:raw>throttle</code> handles an initial event (when nothing has happened before), and <em>continue</em> to handle events, albeit at a reduced rate. <code is:raw>debounce</code>, in comparison, only handles the first event after <code is:raw>timeoutMs</code> has elapsed. And if a new event comes in the meantime, the timer is reset again. It\'s only when there is a break in the events that <code is:raw>debounce</code> will run.</p>\n<p>It\'s also possible to use <code is:raw>throttle</code> and <code is:raw>debounce</code> without events being involved.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Some function that we want slowed execution</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">/* do something */</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// Set up the throttle one time</span>\n<span class="token keyword">const</span> resetThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...and now call `resetThrottled()` whenever you like, </span>\n<span class="token comment">// as often as you like. `reset` will only be invoked every 200ms</span>\n<span class="token function">resetThrottled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="run-once">Run once</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.runOnce.html"><code is:raw>runOnce</code></a> wraps the provided function, allowing it to execute only once.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// do something we only want to happen once</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will run the code once</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// won\'t do anything</span></code></pre>' } };
const $$metadata = createMetadata("/src/pages/flow/flow.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/flow/flow.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Flow = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Flow;
  const $$content = { "title": "Flow control", "astro": { "headers": [{ "depth": 2, "slug": "debounce", "text": "Debounce" }, { "depth": 2, "slug": "throttle", "text": "Throttle" }, { "depth": 2, "slug": "run-once", "text": "Run once" }], "source": '\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n\n\n## Debounce\n\n[`debounce`](https://clinth.github.io/ixfx/functions/Flow.debounce.html) reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given `timeoutMs`.\n\n```js\nimport { debounce } from "https://unpkg.com/ixfx/dist/flow.js"\n// Signature:\n// debounce(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nFor example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.\n\n```js\nconst resizeDebounced = debounce((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event args if we want\n   const resizeArgs = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeDebounced);\n```\n\n<demo-element title="Debounce pointermove event" src="/flow/debounce/" />\n\nNote in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider [throttle](#throttle).\n\n## Throttle\n\n[`throttle`](https://clinth.github.io/ixfx/functions/Flow.throttle.html) reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.\n\nThis is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with _throttle_ and an appropriate `intervalMs`, you might avoid this.\n\n```js\nimport { throttle } from "https://unpkg.com/ixfx/dist/flow.js"\n// Signature:\n// throttle(\n//  callback:(elapsedMs?:number, ...args:unknown[])=> void, \n//  timeoutMs:number\n// );\n```\n\nIn this scenario, the event handler will run at maximum rate of 500ms.\n\n```js\nconst resizeThrottled = throttle((elapsedMs, ...evtArgs) => {\n   // Handle event\n\n   // Use original event data if we need to\n   const resizeEvent = evtArgs[0];\n}, 500);\nwindow.addEventListener(`resize`, resizeThrottled);\n```\n\n<demo-element title="Throttle pointer move events" src="/flow/throttle/" />\n\n`throttle` handles an initial event (when nothing has happened before), and _continue_ to handle events, albeit at a reduced rate. `debounce`, in comparison, only handles the first event after `timeoutMs` has elapsed. And if a new event comes in the meantime, the timer is reset again. It\'s only when there is a break in the events that `debounce` will run.\n\nIt\'s also possible to use `throttle` and `debounce` without events being involved.\n\n```js\n// Some function that we want slowed execution\nconst reset = () => { /* do something */ }\n\n// Set up the throttle one time\nconst resetThrottled = throttle(reset, 200);\n\n// ...and now call `resetThrottled()` whenever you like, \n// as often as you like. `reset` will only be invoked every 200ms\nresetThrottled();\n```\n\n\n## Run once\n\n[`runOnce`](https://clinth.github.io/ixfx/functions/Flow.runOnce.html) wraps the provided function, allowing it to execute only once.\n\n```js\nconst init = runOnce(() => {\n   // do something we only want to happen once\n});\ninit(); // will run the code once\ninit(); // won\'t do anything\n```', "html": '<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n<h2 id="debounce">Debounce</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code is:raw>debounce</code></a> reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given <code is:raw>timeoutMs</code>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Signature:</span>\n<span class="token comment">// debounce(</span>\n<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>\n<span class="token comment">//  timeoutMs:number</span>\n<span class="token comment">// );</span></code></pre>\n<p>For example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> resizeDebounced <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// Handle event</span>\n\n   <span class="token comment">// Use original event args if we want</span>\n   <span class="token keyword">const</span> resizeArgs <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> resizeDebounced<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Debounce pointermove event" src="/flow/debounce/" />\n<p>Note in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider <a href="#throttle">throttle</a>.</p>\n<h2 id="throttle">Throttle</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.throttle.html"><code is:raw>throttle</code></a> reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.</p>\n<p>This is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with <em>throttle</em> and an appropriate <code is:raw>intervalMs</code>, you might avoid this.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Signature:</span>\n<span class="token comment">// throttle(</span>\n<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>\n<span class="token comment">//  timeoutMs:number</span>\n<span class="token comment">// );</span></code></pre>\n<p>In this scenario, the event handler will run at maximum rate of 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> resizeThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// Handle event</span>\n\n   <span class="token comment">// Use original event data if we need to</span>\n   <span class="token keyword">const</span> resizeEvent <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">resize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> resizeThrottled<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<demo-element title="Throttle pointer move events" src="/flow/throttle/" />\n<p><code is:raw>throttle</code> handles an initial event (when nothing has happened before), and <em>continue</em> to handle events, albeit at a reduced rate. <code is:raw>debounce</code>, in comparison, only handles the first event after <code is:raw>timeoutMs</code> has elapsed. And if a new event comes in the meantime, the timer is reset again. It\'s only when there is a break in the events that <code is:raw>debounce</code> will run.</p>\n<p>It\'s also possible to use <code is:raw>throttle</code> and <code is:raw>debounce</code> without events being involved.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Some function that we want slowed execution</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">/* do something */</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// Set up the throttle one time</span>\n<span class="token keyword">const</span> resetThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...and now call `resetThrottled()` whenever you like, </span>\n<span class="token comment">// as often as you like. `reset` will only be invoked every 200ms</span>\n<span class="token function">resetThrottled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="run-once">Run once</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.runOnce.html"><code is:raw>runOnce</code></a> wraps the provided function, allowing it to execute only once.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n   <span class="token comment">// do something we only want to happen once</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will run the code once</span>\n<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// won\'t do anything</span></code></pre>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
</ul></div><h2 id="debounce">Debounce</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.debounce.html"><code>debounce</code></a> reduces a series of function calls that happen within a duration to a single call. It allows you to ignore all events until there is a break in the flow of the given <code>timeoutMs</code>.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Signature:</span>
<span class="token comment">// debounce(</span>
<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>
<span class="token comment">//  timeoutMs:number</span>
<span class="token comment">// );</span></code></pre><p>For example, only respond to resize event 500ms after the last resize event. If no event has happened before, it will still wait 500ms.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> resizeDebounced <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
   <span class="token comment">// Handle event</span>

   <span class="token comment">// Use original event args if we want</span>
   <span class="token keyword">const</span> resizeArgs <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">resize</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> resizeDebounced<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Debounce pointermove event", "src": "/flow/debounce/" })}<p>Note in the demo that lots of events (ie. movement) produce no debounced result until the events stop. If you want to have a continual stream of events, albeit at a slower rate, consider <a href="#throttle">throttle</a>.</p><h2 id="throttle">Throttle</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.throttle.html"><code>throttle</code></a> reduces a fast interval of function calls to a maximum rate. It allows you to ignore an event if it happened too soon after the previous event.</p><p>This is useful when processing event or stream data (eg user input, camera or audio feeds). In some scenarios the events come in to your code faster than you can process them. This results in a choked computer (laggy, unresponsive) and a backlogged response. But with <em>throttle</em> and an appropriate <code>intervalMs</code>, you might avoid this.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> throttle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Signature:</span>
<span class="token comment">// throttle(</span>
<span class="token comment">//  callback:(elapsedMs?:number, ...args:unknown[])=> void, </span>
<span class="token comment">//  timeoutMs:number</span>
<span class="token comment">// );</span></code></pre><p>In this scenario, the event handler will run at maximum rate of 500ms.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> resizeThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs<span class="token punctuation">,</span> <span class="token operator">...</span>evtArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
   <span class="token comment">// Handle event</span>

   <span class="token comment">// Use original event data if we need to</span>
   <span class="token keyword">const</span> resizeEvent <span class="token operator">=</span> evtArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">resize</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> resizeThrottled<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Throttle pointer move events", "src": "/flow/throttle/" })}<p><code>throttle</code> handles an initial event (when nothing has happened before), and <em>continue</em> to handle events, albeit at a reduced rate. <code>debounce</code>, in comparison, only handles the first event after <code>timeoutMs</code> has elapsed. And if a new event comes in the meantime, the timer is reset again. It's only when there is a break in the events that <code>debounce</code> will run.</p><p>It's also possible to use <code>throttle</code> and <code>debounce</code> without events being involved.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Some function that we want slowed execution</span>
<span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">/* do something */</span> <span class="token punctuation">}</span>

<span class="token comment">// Set up the throttle one time</span>
<span class="token keyword">const</span> resetThrottled <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...and now call \`resetThrottled()\` whenever you like, </span>
<span class="token comment">// as often as you like. \`reset\` will only be invoked every 200ms</span>
<span class="token function">resetThrottled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="run-once">Run once</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.runOnce.html"><code>runOnce</code></a> wraps the provided function, allowing it to execute only once.</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
   <span class="token comment">// do something we only want to happen once</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will run the code once</span>
<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// won't do anything</span></code></pre>` })}`;
});

export { $$metadata, $$Flow as default, frontmatter, metadata };
