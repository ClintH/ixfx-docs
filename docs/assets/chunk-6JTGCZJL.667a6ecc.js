import{a as c,d as s}from"./chunk-25RM45LF.24c9c7e0.js";var i,w=class{constructor(){c(this,i,new Map)}add(r,...t){const e=s(this,i).get(r);e===void 0?s(this,i).set(r,t):s(this,i).set(r,[...e,...t])}debugString(){let r="";return Array.from(s(this,i).keys()).every(e=>{const n=s(this,i).get(e);n!==void 0&&(r+=e+` (${n.length}) = ${JSON.stringify(n)}\r
`)}),r}get(r){return s(this,i).get(r)}delete(r,t){const e=s(this,i).get(r);if(e===void 0)return!1;const n=e.filter(a=>a!==t);return s(this,i).set(r,n),n.length<e.length}clear(){s(this,i).clear()}};i=new WeakMap;var b=()=>new w,o,g=class{constructor(){c(this,o,b())}fireEvent(r,t){const e=s(this,o).get(r);e!==void 0&&e.forEach(n=>{try{n(t,this)}catch(a){console.debug("Event listener error: ",a)}})}addEventListener(r,t){s(this,o).add(r,t)}removeEventListener(r,t){s(this,o).delete(r,t)}clearEventListeners(){s(this,o).clear()}};o=new WeakMap;var h=(r,t="",e="?")=>{if(Number.isNaN(r))throw new Error(`Parameter '${e}' is NaN`);if(typeof r!="number")throw new Error(`Parameter '${e}' does not have type of number (${r})`);switch(t){case"positive":if(r<0)throw new Error(`Parameter ${e} must be at least zero (${r})`);break;case"negative":if(r>0)throw new Error(`Parameter ${e} must be zero or lower (${r})`);break;case"aboveZero":if(r<=0)throw new Error(`Parameter ${e} must be above zero (${r})`);break;case"belowZero":if(r>=0)throw new Error(`Parameter ${e} must be below zero (${r})`);break;case"percentage":if(r>1||r<0)throw new Error(`Parameter ${e} must be in percentage range (0 to 1). (${r})`);break;case"nonZero":if(r===0)throw new Error(`Parameter ${e} must non-zero. (${r})`);break;case"bipolar":if(r>1||r<-1)throw new Error(`Parameter ${e} must be in bipolar percentage range (-1 to 1). (${r})`);break}return!0},d=(r,t="?")=>h(r,"percentage",t),$=(r,t="",e="?")=>{if(h(r,t,e),!Number.isInteger(r))throw new Error(`Paramter ${e} is not an integer`)},E=r=>Array.isArray(r)?r.find(t=>typeof t!="string")===void 0:!1,p=(r,t="?")=>{if(!Array.isArray(r))throw new Error(`Parameter '${t}' is expected to be an array'`)};export{g as S,p as a,E as b,$ as i,h as n,d as p,b as s};
