var w=Object.defineProperty;var P=(o,e,r)=>e in o?w(o,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[e]=r;var m=(o,e,r)=>(P(o,typeof e!="symbol"?e+"":e,r),r);import{a as M,r as _,$ as R,b as v}from"./vendor.c33530a8.js";import{P as $,t as D,c as x,L as f,C as b,r as I}from"./chunk-GK535KVL.5ac52ed3.js";import"./chunk-OE2F6QKM.bc057148.js";import{e as k}from"./styles.801fcc34.js";var L=Object.defineProperty,O=Object.getOwnPropertyDescriptor,C=(o,e,r,a)=>{for(var i=a>1?void 0:a?O(e,r):e,l=o.length-1,h;l>=0;l--)(h=o[l])&&(i=(a?h(e,r,i):h(i))||i);return a&&i&&L(e,r,i),i};const q="angles-element";class g extends M{constructor(){super();m(this,"palette");m(this,"lastCircle");this.palette=$.create(),this.palette.setElementBase(this),this.width=400,this.height=400,D().subscribe(e=>{this.updated()})}setDegrees(e){this.degree=e,this.radian=void 0}setRadians(e){this.degree=void 0,this.radian=e}getBounds(){const e=x.makeHelper(this.shadowRoot.querySelector("svg"));return{width:e.width,height:e.height}}renderSvg(){const e=x.makeHelper(this.shadowRoot.querySelector("svg"),{fillStyle:"transparent"});e.clear();const r=e.width,a=e.height;let i=e.height*.3,l={x:r/2,y:a/2};const h={strokeStyle:this.palette.get("axis-color","orange"),strokeWidth:3},n={strokeStyle:"transparent",fillStyle:this.palette.get("fgDim","orange"),anchor:"middle",align:"hanging"};let p={radius:i,...l};this.lastCircle=p,e.circle(p,h);const u={...p,radius:i+20},d=(t,s,c=n)=>{s===void 0&&(s=t.toString());const y=b.point(u,t);e.text(s,{x:y.x,y:y.y},c)};d(0,"0",{...n,anchor:"start",align:"middle"}),d(Math.PI,"Math.PI",{...n,align:"middle",anchor:"end"}),d(Math.PI/2,"Math.PI/2",{...n,align:"text-bottom"}),d(3*Math.PI/2,"3*Math.PI/2",{...n,align:"hanging"})}async updated(){this.renderSvg()}_pointerMove(e){const r=x.makeHelper(this.shadowRoot.querySelector("svg")),a={x:e.offsetX,y:e.offsetY},i=this.lastCircle;if(i===void 0)return;const l=f.fromPoints(i,a),h=f.extendFromA(l,200),n=b.intersectionLine(i,h);if(n.length!==1)return;const p=n[0],u=f.extendFromA(f.fromPoints(i,p),10);r.line(u,{strokeWidth:3,strokeStyle:this.palette.get("accent-bold","yellow")},"#pointerRay");const d=f.angleRadian(u)*-1;let t=Math.round(d/Math.PI*100)/100;t<0&&(t=Math.abs(t+1)+1);let s="";t==1?s="\u03C0":t==.17?s="\u03C0/6":t==.25?s="\u03C0/4":t==.33?s="\u03C0/3":t==.5?s="\u03C0/2":t==.58?s="7\u03C0/12":t==.6?s="\u03C0/4":t==.75?s="3\u03C0/4":t==.92?s="11\u03C0/12":t==1.17?s="7\u03C0/6":t==1.25?s="5\u03C0/4":t==1.33?s="4\u03C0/3":t==1.5?s="3\u03C0/2":t==1.58?s="19\u03C0/12":t==1.75?s="7\u03C0/4":t==1.92?s="23\u03C0/12":t==0?s="0 or 2\u03C0":s=`${t.toFixed(2)}\u03C0`;let c=I(d);c<0&&(c=Math.abs(c+180)+180);const y=Math.round(c),S={strokeStyle:"transparent",fillStyle:this.palette.get("fgDim","black"),anchor:"middle"};r.text(`Radians: ${s}`,{x:i.x,y:i.y},S,"#radiansLabel"),r.text(`Degrees: ${y}`,{x:i.x,y:i.y+20},S,"#degreesLabel")}render(){return R`
			<div id="container">
        <svg @pointermove="${this._pointerMove}" style="font-size: 1em" viewBox="0 0 ${this.width} ${this.height}" width=${this.width} height=${this.height}></svg>
			</div>
		`}}m(g,"styles",[k,_`
      :host {
        color: var(--label-color, green);
      }
      #container {
        display: flex;
        align-items: center;
        flex-direction: column;
      }
      #container>svg {
        touch-action: none;
      }
  `]);C([v()],g.prototype,"radian",2);C([v()],g.prototype,"degree",2);C([v()],g.prototype,"width",2);C([v()],g.prototype,"height",2);customElements.define(q,g);export{g as AnglesElement,q as tagName};
