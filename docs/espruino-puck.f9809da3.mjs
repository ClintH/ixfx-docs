import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';

const metadata = { "headers": [{ "depth": 3, "slug": "first-steps", "text": "First steps" }, { "depth": 3, "slug": "playgrounds", "text": "Playgrounds" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 2, "slug": "official-resources", "text": "Official resources" }], "source": '\n[Espruino Puck.js](http://www.espruino.com/Puck.js) is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.\n\nIt has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n[Pico](../espruino-pico/) is in a more friendly format.\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>\n<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a></l>\n</div>\n\n### First steps\n\n- [Preparing](http://www.espruino.com/Quick+Start+BLE) - Powering the Puck and\n  getting the [Espruino IDE](http://www.espruino.com/Web+IDE) connected\n- [Quick start - code](http://www.espruino.com/Quick+Start+Code) - First steps\n  programming the Puck\n\n### Playgrounds\n\n- [repl](https://clinth.github.io/ixfx-play/io/espruino-repl/) -\n  Execute code on the Puck.js. Useful for quick \'one-liners\' to test syntax.\n- [plot](https://clinth.github.io/ixfx-play/io/espruino-plot/) -\n  Plots numerical data. Useful for seeing patterns and ranges of sensors.\n\n## Demos\n\nThe prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.\n\n- [button](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button) -\n  Sends button press/release events to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/button/))\n- [led](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led) -\n  Control the in-built LEDs from the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/led/))\n- [temperature](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature) -\n  Read temperature values in the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/temperature/))\n- [accel-gyro](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro) -\n  Sends back a stream of acceleration & gyro data to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/))\n\n## Usage\n\nTo prompt to connect to any available Puck.js via BLE, use the\n[`puck`](https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html)\nfunction, which returns an instance of\n[EspruinoBleDevice](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html).\n\n```js\nimport { Espruino } from "https://unpkg.com/ixfx/dist/io.js";\nconst e = await Espruino.puck();\n```\n\nOr to filter the list by name:\n\n```js\nimport { Espruino } from "https://unpkg.com/ixfx/dist/io.js";\nconst e = await Espruino.puck({ name: `Puck.js a123` });\nawait e.connect();\n```\n\nAn exception will be thrown if the user cancelled the scan, or something went\nwrong.\n\nOnce connected, you can listen for _data_ and _change_ events. _data_ fires when\nthe Puck sends something, while _change_ fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.\n\n```js\n// Received data\ne.addEventListener(`data`, (d) => console.log(d.data));\n\n// Monitor connection state\ne.addEventListener(\n  `change`,\n  (c) => console.log(`${d.priorState} -> ${d.newState}`),\n);\n```\n\n[`writeScript`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript)\nsends code for execution on the board. Note how the script is enclosed as a\nstring.\n\n```js\ne.writeScript(`\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on(\'disconnect\',()=>reset());\n`);\n```\n\nYou probably want to test what code to send using the\n[ixfx Espruino REPL](https://clinth.github.io/ixfx-play/io/espruino-repl/)\nor the official [IDE](https://www.espruino.com/ide/).\n\n`writeScript` does not support importing modules or other files via `require`.\nRather, upload your code using the official IDE, and then invoke a function\nyou\'ve declared using ixfx\'s `writeScript` or `eval`.\n\nTo execute some code and await the result, use\n[`eval`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval):\n\n```js\nconst result = await e.eval(`2+2\\n`);\n// result will be the number 4\n```\n\n`eval` is useful for querying sensor values.\n\nTo check the state of the connection:\n\n```js\ne.isConnected;\n```\n\nAnd to disconnect:\n\n```js\ne.disconnect();\n```\n\n## Official resources\n\nBelow are some selected resources from Espruino.com.\n\nTutorials\n\n- [Keyboard](http://www.espruino.com/BLE+Keyboard) - Send virtual keyboard\n  events. Useful for leveraging an existing app for rapid prototyping\n- [Music controller](http://www.espruino.com/BLE+Music+Control) - Use the BLE\n  keyboard functionality to control media playback on a phone\n- [MIDI](http://www.espruino.com/BLE+MIDI) - Send MIDI data\n- [FET](http://www.espruino.com/Puck.js+FET) - Controlling a higher voltage\n  device\n- [Door controlled light](http://www.espruino.com/Puck.js+Door+Light) - Using\n  the magnetometer to detect movement of an object (in this case, a door)\n- [Temperature controlled night light](http://www.espruino.com/Puck.js+Night+Light) -\n  Uses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\n  based on the temperature sensor.\n- [Controlling Bluetooth devices](http://www.espruino.com/BLE+Lightbulbs) - An\n  example of a Puck directly interfacing with another Bluetooth device - in this\n  case some smart lighting\n\nGuides\n\n- [Pulse Width Modulation](http://www.espruino.com/PWM) - Controlled LED\n  brightness\n', "html": '<p><a href="http://www.espruino.com/Puck.js">Espruino Puck.js</a> is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.</p>\n<p>It has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n<a href="../espruino-pico/">Pico</a> is in a more friendly format.</p>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>\n<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a></l>\n</div>\n<h3 id="first-steps">First steps</h3>\n<ul>\n<li><a href="http://www.espruino.com/Quick+Start+BLE">Preparing</a> - Powering the Puck and\ngetting the <a href="http://www.espruino.com/Web+IDE">Espruino IDE</a> connected</li>\n<li><a href="http://www.espruino.com/Quick+Start+Code">Quick start - code</a> - First steps\nprogramming the Puck</li>\n</ul>\n<h3 id="playgrounds">Playgrounds</h3>\n<ul>\n<li><a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">repl</a> -\nExecute code on the Puck.js. Useful for quick \'one-liners\' to test syntax.</li>\n<li><a href="https://clinth.github.io/ixfx-play/io/espruino-plot/">plot</a> -\nPlots numerical data. Useful for seeing patterns and ranges of sensors.</li>\n</ul>\n<h2 id="demos">Demos</h2>\n<p>The prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.</p>\n<ul>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button">button</a> -\nSends button press/release events to the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/button/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led">led</a> -\nControl the in-built LEDs from the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/led/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature">temperature</a> -\nRead temperature values in the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/temperature/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro">accel-gyro</a> -\nSends back a stream of acceleration &#x26; gyro data to the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/">try online</a>)</li>\n</ul>\n<h2 id="usage">Usage</h2>\n<p>To prompt to connect to any available Puck.js via BLE, use the\n<a href="https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html"><code is:raw>puck</code></a>\nfunction, which returns an instance of\n<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html">EspruinoBleDevice</a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Or to filter the list by name:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Puck.js a123</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>An exception will be thrown if the user cancelled the scan, or something went\nwrong.</p>\n<p>Once connected, you can listen for <em>data</em> and <em>change</em> events. <em>data</em> fires when\nthe Puck sends something, while <em>change</em> fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Received data</span>\ne<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Monitor connection state</span>\ne<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">change</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript"><code is:raw>writeScript</code></a>\nsends code for execution on the board. Note how the script is enclosed as a\nstring.</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span><span class="token function">writeScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on(\'disconnect\',()=>reset());\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>You probably want to test what code to send using the\n<a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">ixfx Espruino REPL</a>\nor the official <a href="https://www.espruino.com/ide/">IDE</a>.</p>\n<p><code is:raw>writeScript</code> does not support importing modules or other files via <code is:raw>require</code>.\nRather, upload your code using the official IDE, and then invoke a function\nyou\'ve declared using ixfx\'s <code is:raw>writeScript</code> or <code is:raw>eval</code>.</p>\n<p>To execute some code and await the result, use\n<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval"><code is:raw>eval</code></a>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2+2\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// result will be the number 4</span></code></pre>\n<p><code is:raw>eval</code> is useful for querying sensor values.</p>\n<p>To check the state of the connection:</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span>isConnected<span class="token punctuation">;</span></code></pre>\n<p>And to disconnect:</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="official-resources">Official resources</h2>\n<p>Below are some selected resources from Espruino.com.</p>\n<p>Tutorials</p>\n<ul>\n<li><a href="http://www.espruino.com/BLE+Keyboard">Keyboard</a> - Send virtual keyboard\nevents. Useful for leveraging an existing app for rapid prototyping</li>\n<li><a href="http://www.espruino.com/BLE+Music+Control">Music controller</a> - Use the BLE\nkeyboard functionality to control media playback on a phone</li>\n<li><a href="http://www.espruino.com/BLE+MIDI">MIDI</a> - Send MIDI data</li>\n<li><a href="http://www.espruino.com/Puck.js+FET">FET</a> - Controlling a higher voltage\ndevice</li>\n<li><a href="http://www.espruino.com/Puck.js+Door+Light">Door controlled light</a> - Using\nthe magnetometer to detect movement of an object (in this case, a door)</li>\n<li><a href="http://www.espruino.com/Puck.js+Night+Light">Temperature controlled night light</a> -\nUses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\nbased on the temperature sensor.</li>\n<li><a href="http://www.espruino.com/BLE+Lightbulbs">Controlling Bluetooth devices</a> - An\nexample of a Puck directly interfacing with another Bluetooth device - in this\ncase some smart lighting</li>\n</ul>\n<p>Guides</p>\n<ul>\n<li><a href="http://www.espruino.com/PWM">Pulse Width Modulation</a> - Controlled LED\nbrightness</li>\n</ul>' };
const frontmatter = { "title": "Espruino Puck.js", "astro": { "headers": [{ "depth": 3, "slug": "first-steps", "text": "First steps" }, { "depth": 3, "slug": "playgrounds", "text": "Playgrounds" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 2, "slug": "official-resources", "text": "Official resources" }], "source": '\n[Espruino Puck.js](http://www.espruino.com/Puck.js) is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.\n\nIt has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n[Pico](../espruino-pico/) is in a more friendly format.\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>\n<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a></l>\n</div>\n\n### First steps\n\n- [Preparing](http://www.espruino.com/Quick+Start+BLE) - Powering the Puck and\n  getting the [Espruino IDE](http://www.espruino.com/Web+IDE) connected\n- [Quick start - code](http://www.espruino.com/Quick+Start+Code) - First steps\n  programming the Puck\n\n### Playgrounds\n\n- [repl](https://clinth.github.io/ixfx-play/io/espruino-repl/) -\n  Execute code on the Puck.js. Useful for quick \'one-liners\' to test syntax.\n- [plot](https://clinth.github.io/ixfx-play/io/espruino-plot/) -\n  Plots numerical data. Useful for seeing patterns and ranges of sensors.\n\n## Demos\n\nThe prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.\n\n- [button](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button) -\n  Sends button press/release events to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/button/))\n- [led](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led) -\n  Control the in-built LEDs from the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/led/))\n- [temperature](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature) -\n  Read temperature values in the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/temperature/))\n- [accel-gyro](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro) -\n  Sends back a stream of acceleration & gyro data to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/))\n\n## Usage\n\nTo prompt to connect to any available Puck.js via BLE, use the\n[`puck`](https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html)\nfunction, which returns an instance of\n[EspruinoBleDevice](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html).\n\n```js\nimport { Espruino } from "https://unpkg.com/ixfx/dist/io.js";\nconst e = await Espruino.puck();\n```\n\nOr to filter the list by name:\n\n```js\nimport { Espruino } from "https://unpkg.com/ixfx/dist/io.js";\nconst e = await Espruino.puck({ name: `Puck.js a123` });\nawait e.connect();\n```\n\nAn exception will be thrown if the user cancelled the scan, or something went\nwrong.\n\nOnce connected, you can listen for _data_ and _change_ events. _data_ fires when\nthe Puck sends something, while _change_ fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.\n\n```js\n// Received data\ne.addEventListener(`data`, (d) => console.log(d.data));\n\n// Monitor connection state\ne.addEventListener(\n  `change`,\n  (c) => console.log(`${d.priorState} -> ${d.newState}`),\n);\n```\n\n[`writeScript`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript)\nsends code for execution on the board. Note how the script is enclosed as a\nstring.\n\n```js\ne.writeScript(`\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on(\'disconnect\',()=>reset());\n`);\n```\n\nYou probably want to test what code to send using the\n[ixfx Espruino REPL](https://clinth.github.io/ixfx-play/io/espruino-repl/)\nor the official [IDE](https://www.espruino.com/ide/).\n\n`writeScript` does not support importing modules or other files via `require`.\nRather, upload your code using the official IDE, and then invoke a function\nyou\'ve declared using ixfx\'s `writeScript` or `eval`.\n\nTo execute some code and await the result, use\n[`eval`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval):\n\n```js\nconst result = await e.eval(`2+2\\n`);\n// result will be the number 4\n```\n\n`eval` is useful for querying sensor values.\n\nTo check the state of the connection:\n\n```js\ne.isConnected;\n```\n\nAnd to disconnect:\n\n```js\ne.disconnect();\n```\n\n## Official resources\n\nBelow are some selected resources from Espruino.com.\n\nTutorials\n\n- [Keyboard](http://www.espruino.com/BLE+Keyboard) - Send virtual keyboard\n  events. Useful for leveraging an existing app for rapid prototyping\n- [Music controller](http://www.espruino.com/BLE+Music+Control) - Use the BLE\n  keyboard functionality to control media playback on a phone\n- [MIDI](http://www.espruino.com/BLE+MIDI) - Send MIDI data\n- [FET](http://www.espruino.com/Puck.js+FET) - Controlling a higher voltage\n  device\n- [Door controlled light](http://www.espruino.com/Puck.js+Door+Light) - Using\n  the magnetometer to detect movement of an object (in this case, a door)\n- [Temperature controlled night light](http://www.espruino.com/Puck.js+Night+Light) -\n  Uses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\n  based on the temperature sensor.\n- [Controlling Bluetooth devices](http://www.espruino.com/BLE+Lightbulbs) - An\n  example of a Puck directly interfacing with another Bluetooth device - in this\n  case some smart lighting\n\nGuides\n\n- [Pulse Width Modulation](http://www.espruino.com/PWM) - Controlled LED\n  brightness\n', "html": '<p><a href="http://www.espruino.com/Puck.js">Espruino Puck.js</a> is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.</p>\n<p>It has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n<a href="../espruino-pico/">Pico</a> is in a more friendly format.</p>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>\n<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a></l>\n</div>\n<h3 id="first-steps">First steps</h3>\n<ul>\n<li><a href="http://www.espruino.com/Quick+Start+BLE">Preparing</a> - Powering the Puck and\ngetting the <a href="http://www.espruino.com/Web+IDE">Espruino IDE</a> connected</li>\n<li><a href="http://www.espruino.com/Quick+Start+Code">Quick start - code</a> - First steps\nprogramming the Puck</li>\n</ul>\n<h3 id="playgrounds">Playgrounds</h3>\n<ul>\n<li><a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">repl</a> -\nExecute code on the Puck.js. Useful for quick \'one-liners\' to test syntax.</li>\n<li><a href="https://clinth.github.io/ixfx-play/io/espruino-plot/">plot</a> -\nPlots numerical data. Useful for seeing patterns and ranges of sensors.</li>\n</ul>\n<h2 id="demos">Demos</h2>\n<p>The prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.</p>\n<ul>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button">button</a> -\nSends button press/release events to the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/button/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led">led</a> -\nControl the in-built LEDs from the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/led/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature">temperature</a> -\nRead temperature values in the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/temperature/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro">accel-gyro</a> -\nSends back a stream of acceleration &#x26; gyro data to the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/">try online</a>)</li>\n</ul>\n<h2 id="usage">Usage</h2>\n<p>To prompt to connect to any available Puck.js via BLE, use the\n<a href="https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html"><code is:raw>puck</code></a>\nfunction, which returns an instance of\n<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html">EspruinoBleDevice</a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Or to filter the list by name:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Puck.js a123</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>An exception will be thrown if the user cancelled the scan, or something went\nwrong.</p>\n<p>Once connected, you can listen for <em>data</em> and <em>change</em> events. <em>data</em> fires when\nthe Puck sends something, while <em>change</em> fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Received data</span>\ne<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Monitor connection state</span>\ne<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">change</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript"><code is:raw>writeScript</code></a>\nsends code for execution on the board. Note how the script is enclosed as a\nstring.</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span><span class="token function">writeScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on(\'disconnect\',()=>reset());\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>You probably want to test what code to send using the\n<a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">ixfx Espruino REPL</a>\nor the official <a href="https://www.espruino.com/ide/">IDE</a>.</p>\n<p><code is:raw>writeScript</code> does not support importing modules or other files via <code is:raw>require</code>.\nRather, upload your code using the official IDE, and then invoke a function\nyou\'ve declared using ixfx\'s <code is:raw>writeScript</code> or <code is:raw>eval</code>.</p>\n<p>To execute some code and await the result, use\n<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval"><code is:raw>eval</code></a>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2+2\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// result will be the number 4</span></code></pre>\n<p><code is:raw>eval</code> is useful for querying sensor values.</p>\n<p>To check the state of the connection:</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span>isConnected<span class="token punctuation">;</span></code></pre>\n<p>And to disconnect:</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="official-resources">Official resources</h2>\n<p>Below are some selected resources from Espruino.com.</p>\n<p>Tutorials</p>\n<ul>\n<li><a href="http://www.espruino.com/BLE+Keyboard">Keyboard</a> - Send virtual keyboard\nevents. Useful for leveraging an existing app for rapid prototyping</li>\n<li><a href="http://www.espruino.com/BLE+Music+Control">Music controller</a> - Use the BLE\nkeyboard functionality to control media playback on a phone</li>\n<li><a href="http://www.espruino.com/BLE+MIDI">MIDI</a> - Send MIDI data</li>\n<li><a href="http://www.espruino.com/Puck.js+FET">FET</a> - Controlling a higher voltage\ndevice</li>\n<li><a href="http://www.espruino.com/Puck.js+Door+Light">Door controlled light</a> - Using\nthe magnetometer to detect movement of an object (in this case, a door)</li>\n<li><a href="http://www.espruino.com/Puck.js+Night+Light">Temperature controlled night light</a> -\nUses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\nbased on the temperature sensor.</li>\n<li><a href="http://www.espruino.com/BLE+Lightbulbs">Controlling Bluetooth devices</a> - An\nexample of a Puck directly interfacing with another Bluetooth device - in this\ncase some smart lighting</li>\n</ul>\n<p>Guides</p>\n<ul>\n<li><a href="http://www.espruino.com/PWM">Pulse Width Modulation</a> - Controlled LED\nbrightness</li>\n</ul>' } };
const $$metadata = createMetadata("/src/pages/io/espruino-puck.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/io/espruino-puck.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$EspruinoPuck = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$EspruinoPuck;
  const $$content = { "title": "Espruino Puck.js", "astro": { "headers": [{ "depth": 3, "slug": "first-steps", "text": "First steps" }, { "depth": 3, "slug": "playgrounds", "text": "Playgrounds" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 2, "slug": "official-resources", "text": "Official resources" }], "source": '\n[Espruino Puck.js](http://www.espruino.com/Puck.js) is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.\n\nIt has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n[Pico](../espruino-pico/) is in a more friendly format.\n\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>\n<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a></l>\n</div>\n\n### First steps\n\n- [Preparing](http://www.espruino.com/Quick+Start+BLE) - Powering the Puck and\n  getting the [Espruino IDE](http://www.espruino.com/Web+IDE) connected\n- [Quick start - code](http://www.espruino.com/Quick+Start+Code) - First steps\n  programming the Puck\n\n### Playgrounds\n\n- [repl](https://clinth.github.io/ixfx-play/io/espruino-repl/) -\n  Execute code on the Puck.js. Useful for quick \'one-liners\' to test syntax.\n- [plot](https://clinth.github.io/ixfx-play/io/espruino-plot/) -\n  Plots numerical data. Useful for seeing patterns and ranges of sensors.\n\n## Demos\n\nThe prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.\n\n- [button](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button) -\n  Sends button press/release events to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/button/))\n- [led](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led) -\n  Control the in-built LEDs from the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/led/))\n- [temperature](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature) -\n  Read temperature values in the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/temperature/))\n- [accel-gyro](https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro) -\n  Sends back a stream of acceleration & gyro data to the browser\n  ([try online](https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/))\n\n## Usage\n\nTo prompt to connect to any available Puck.js via BLE, use the\n[`puck`](https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html)\nfunction, which returns an instance of\n[EspruinoBleDevice](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html).\n\n```js\nimport { Espruino } from "https://unpkg.com/ixfx/dist/io.js";\nconst e = await Espruino.puck();\n```\n\nOr to filter the list by name:\n\n```js\nimport { Espruino } from "https://unpkg.com/ixfx/dist/io.js";\nconst e = await Espruino.puck({ name: `Puck.js a123` });\nawait e.connect();\n```\n\nAn exception will be thrown if the user cancelled the scan, or something went\nwrong.\n\nOnce connected, you can listen for _data_ and _change_ events. _data_ fires when\nthe Puck sends something, while _change_ fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.\n\n```js\n// Received data\ne.addEventListener(`data`, (d) => console.log(d.data));\n\n// Monitor connection state\ne.addEventListener(\n  `change`,\n  (c) => console.log(`${d.priorState} -> ${d.newState}`),\n);\n```\n\n[`writeScript`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript)\nsends code for execution on the board. Note how the script is enclosed as a\nstring.\n\n```js\ne.writeScript(`\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on(\'disconnect\',()=>reset());\n`);\n```\n\nYou probably want to test what code to send using the\n[ixfx Espruino REPL](https://clinth.github.io/ixfx-play/io/espruino-repl/)\nor the official [IDE](https://www.espruino.com/ide/).\n\n`writeScript` does not support importing modules or other files via `require`.\nRather, upload your code using the official IDE, and then invoke a function\nyou\'ve declared using ixfx\'s `writeScript` or `eval`.\n\nTo execute some code and await the result, use\n[`eval`](https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval):\n\n```js\nconst result = await e.eval(`2+2\\n`);\n// result will be the number 4\n```\n\n`eval` is useful for querying sensor values.\n\nTo check the state of the connection:\n\n```js\ne.isConnected;\n```\n\nAnd to disconnect:\n\n```js\ne.disconnect();\n```\n\n## Official resources\n\nBelow are some selected resources from Espruino.com.\n\nTutorials\n\n- [Keyboard](http://www.espruino.com/BLE+Keyboard) - Send virtual keyboard\n  events. Useful for leveraging an existing app for rapid prototyping\n- [Music controller](http://www.espruino.com/BLE+Music+Control) - Use the BLE\n  keyboard functionality to control media playback on a phone\n- [MIDI](http://www.espruino.com/BLE+MIDI) - Send MIDI data\n- [FET](http://www.espruino.com/Puck.js+FET) - Controlling a higher voltage\n  device\n- [Door controlled light](http://www.espruino.com/Puck.js+Door+Light) - Using\n  the magnetometer to detect movement of an object (in this case, a door)\n- [Temperature controlled night light](http://www.espruino.com/Puck.js+Night+Light) -\n  Uses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\n  based on the temperature sensor.\n- [Controlling Bluetooth devices](http://www.espruino.com/BLE+Lightbulbs) - An\n  example of a Puck directly interfacing with another Bluetooth device - in this\n  case some smart lighting\n\nGuides\n\n- [Pulse Width Modulation](http://www.espruino.com/PWM) - Controlled LED\n  brightness\n', "html": '<p><a href="http://www.espruino.com/Puck.js">Espruino Puck.js</a> is an open-source platform\nby Gordon Williams. Ixfx has a few functions to help communicating with Espruino\nboards, but for the most part you write Javascript that runs on the board\nitself.</p>\n<p>It has on-board sensors, wireless connectivity and is battery powered. While it\ndoes have the possibility for connecting additional components, the\n<a href="../espruino-pico/">Pico</a> is in a more friendly format.</p>\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>\n<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>\n<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a></l>\n</div>\n<h3 id="first-steps">First steps</h3>\n<ul>\n<li><a href="http://www.espruino.com/Quick+Start+BLE">Preparing</a> - Powering the Puck and\ngetting the <a href="http://www.espruino.com/Web+IDE">Espruino IDE</a> connected</li>\n<li><a href="http://www.espruino.com/Quick+Start+Code">Quick start - code</a> - First steps\nprogramming the Puck</li>\n</ul>\n<h3 id="playgrounds">Playgrounds</h3>\n<ul>\n<li><a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">repl</a> -\nExecute code on the Puck.js. Useful for quick \'one-liners\' to test syntax.</li>\n<li><a href="https://clinth.github.io/ixfx-play/io/espruino-plot/">plot</a> -\nPlots numerical data. Useful for seeing patterns and ranges of sensors.</li>\n</ul>\n<h2 id="demos">Demos</h2>\n<p>The prepared demos focus on using the Puck.js as an input or output to extend\nthe capabilities of the browser.</p>\n<ul>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button">button</a> -\nSends button press/release events to the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/button/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led">led</a> -\nControl the in-built LEDs from the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/led/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature">temperature</a> -\nRead temperature values in the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/temperature/">try online</a>)</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro">accel-gyro</a> -\nSends back a stream of acceleration &#x26; gyro data to the browser\n(<a href="https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/">try online</a>)</li>\n</ul>\n<h2 id="usage">Usage</h2>\n<p>To prompt to connect to any available Puck.js via BLE, use the\n<a href="https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html"><code is:raw>puck</code></a>\nfunction, which returns an instance of\n<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html">EspruinoBleDevice</a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Or to filter the list by name:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Puck.js a123</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>An exception will be thrown if the user cancelled the scan, or something went\nwrong.</p>\n<p>Once connected, you can listen for <em>data</em> and <em>change</em> events. <em>data</em> fires when\nthe Puck sends something, while <em>change</em> fires when there is a change in the\nconnection status. This is useful for enabling/disabling parts of the UI, or\nuploading some code on first connection.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Received data</span>\ne<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Monitor connection state</span>\ne<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">change</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p><a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript"><code is:raw>writeScript</code></a>\nsends code for execution on the board. Note how the script is enclosed as a\nstring.</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span><span class="token function">writeScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n setInterval(() => Bluetooth.println(E.getTemperature()), 1000);\n NRF.on(\'disconnect\',()=>reset());\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>You probably want to test what code to send using the\n<a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">ixfx Espruino REPL</a>\nor the official <a href="https://www.espruino.com/ide/">IDE</a>.</p>\n<p><code is:raw>writeScript</code> does not support importing modules or other files via <code is:raw>require</code>.\nRather, upload your code using the official IDE, and then invoke a function\nyou\'ve declared using ixfx\'s <code is:raw>writeScript</code> or <code is:raw>eval</code>.</p>\n<p>To execute some code and await the result, use\n<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval"><code is:raw>eval</code></a>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2+2\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// result will be the number 4</span></code></pre>\n<p><code is:raw>eval</code> is useful for querying sensor values.</p>\n<p>To check the state of the connection:</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span>isConnected<span class="token punctuation">;</span></code></pre>\n<p>And to disconnect:</p>\n<pre class="language-js"><code is:raw class="language-js">e<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="official-resources">Official resources</h2>\n<p>Below are some selected resources from Espruino.com.</p>\n<p>Tutorials</p>\n<ul>\n<li><a href="http://www.espruino.com/BLE+Keyboard">Keyboard</a> - Send virtual keyboard\nevents. Useful for leveraging an existing app for rapid prototyping</li>\n<li><a href="http://www.espruino.com/BLE+Music+Control">Music controller</a> - Use the BLE\nkeyboard functionality to control media playback on a phone</li>\n<li><a href="http://www.espruino.com/BLE+MIDI">MIDI</a> - Send MIDI data</li>\n<li><a href="http://www.espruino.com/Puck.js+FET">FET</a> - Controlling a higher voltage\ndevice</li>\n<li><a href="http://www.espruino.com/Puck.js+Door+Light">Door controlled light</a> - Using\nthe magnetometer to detect movement of an object (in this case, a door)</li>\n<li><a href="http://www.espruino.com/Puck.js+Night+Light">Temperature controlled night light</a> -\nUses the IR-emitter of the Puck to control some off-the-shelf RGB lighting\nbased on the temperature sensor.</li>\n<li><a href="http://www.espruino.com/BLE+Lightbulbs">Controlling Bluetooth devices</a> - An\nexample of a Puck directly interfacing with another Bluetooth device - in this\ncase some smart lighting</li>\n</ul>\n<p>Guides</p>\n<ul>\n<li><a href="http://www.espruino.com/PWM">Pulse Width Modulation</a> - Controlled LED\nbrightness</li>\n</ul>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<p><a href="http://www.espruino.com/Puck.js">Espruino Puck.js</a> is an open-source platform
by Gordon Williams. Ixfx has a few functions to help communicating with Espruino
boards, but for the most part you write Javascript that runs on the board
itself.</p><p>It has on-board sensors, wireless connectivity and is battery powered. While it
does have the possibility for connecting additional components, the
<a href="../espruino-pico/">Pico</a> is in a more friendly format.</p><div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Io.Espruino.html">Io.Espruino module</a></li>
<li>Parent <a href="https://clinth.github.io/ixfx/modules/Io.html">Io module</a></li>
<li>Official Espruino <a href="http://www.espruino.com/Reference#software">API Reference</a>, <a href="http://www.espruino.com/Tutorials">Tutorials</a>
</li></ul></div><h3 id="first-steps">First steps</h3><ul>
<li><a href="http://www.espruino.com/Quick+Start+BLE">Preparing</a> - Powering the Puck and
getting the <a href="http://www.espruino.com/Web+IDE">Espruino IDE</a> connected</li>
<li><a href="http://www.espruino.com/Quick+Start+Code">Quick start - code</a> - First steps
programming the Puck</li>
</ul><h3 id="playgrounds">Playgrounds</h3><ul>
<li><a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">repl</a> -
Execute code on the Puck.js. Useful for quick 'one-liners' to test syntax.</li>
<li><a href="https://clinth.github.io/ixfx-play/io/espruino-plot/">plot</a> -
Plots numerical data. Useful for seeing patterns and ranges of sensors.</li>
</ul><h2 id="demos">Demos</h2><p>The prepared demos focus on using the Puck.js as an input or output to extend
the capabilities of the browser.</p><ul>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/button">button</a> -
Sends button press/release events to the browser
(<a href="https://clinth.github.io/ixfx-demos/io/espruino/button/">try online</a>)</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/led">led</a> -
Control the in-built LEDs from the browser
(<a href="https://clinth.github.io/ixfx-demos/io/espruino/led/">try online</a>)</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/temperature">temperature</a> -
Read temperature values in the browser
(<a href="https://clinth.github.io/ixfx-demos/io/espruino/temperature/">try online</a>)</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/io/espruino/accel-gyro">accel-gyro</a> -
Sends back a stream of acceleration &#x26; gyro data to the browser
(<a href="https://clinth.github.io/ixfx-demos/io/espruino/accel-gyro/">try online</a>)</li>
</ul><h2 id="usage">Usage</h2><p>To prompt to connect to any available Puck.js via BLE, use the
<a href="https://clinth.github.io/ixfx/functions/Io.Espruino.puck.html"><code>puck</code></a>
function, which returns an instance of
<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html">EspruinoBleDevice</a>.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or to filter the list by name:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Espruino <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/io.js"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">await</span> Espruino<span class="token punctuation">.</span><span class="token function">puck</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Puck.js a123</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>An exception will be thrown if the user cancelled the scan, or something went
wrong.</p><p>Once connected, you can listen for <em>data</em> and <em>change</em> events. <em>data</em> fires when
the Puck sends something, while <em>change</em> fires when there is a change in the
connection status. This is useful for enabling/disabling parts of the UI, or
uploading some code on first connection.</p><pre class="language-js"><code class="language-js"><span class="token comment">// Received data</span>
e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">data</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Monitor connection state</span>
e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">change</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>d<span class="token punctuation">.</span>priorState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>d<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#writeScript"><code>writeScript</code></a>
sends code for execution on the board. Note how the script is enclosed as a
string.</p><pre class="language-js"><code class="language-js">e<span class="token punctuation">.</span><span class="token function">writeScript</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
 setInterval(() => Bluetooth.println(E.getTemperature()), 1000);
 NRF.on('disconnect',()=>reset());
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>You probably want to test what code to send using the
<a href="https://clinth.github.io/ixfx-play/io/espruino-repl/">ixfx Espruino REPL</a>
or the official <a href="https://www.espruino.com/ide/">IDE</a>.</p><p><code>writeScript</code> does not support importing modules or other files via <code>require</code>.
Rather, upload your code using the official IDE, and then invoke a function
you've declared using ixfx's <code>writeScript</code> or <code>eval</code>.</p><p>To execute some code and await the result, use
<a href="https://clinth.github.io/ixfx/classes/Io.Espruino.EspruinoBleDevice.html#eval"><code>eval</code></a>:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">2+2\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// result will be the number 4</span></code></pre><p><code>eval</code> is useful for querying sensor values.</p><p>To check the state of the connection:</p><pre class="language-js"><code class="language-js">e<span class="token punctuation">.</span>isConnected<span class="token punctuation">;</span></code></pre><p>And to disconnect:</p><pre class="language-js"><code class="language-js">e<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="official-resources">Official resources</h2><p>Below are some selected resources from Espruino.com.</p><p>Tutorials</p><ul>
<li><a href="http://www.espruino.com/BLE+Keyboard">Keyboard</a> - Send virtual keyboard
events. Useful for leveraging an existing app for rapid prototyping</li>
<li><a href="http://www.espruino.com/BLE+Music+Control">Music controller</a> - Use the BLE
keyboard functionality to control media playback on a phone</li>
<li><a href="http://www.espruino.com/BLE+MIDI">MIDI</a> - Send MIDI data</li>
<li><a href="http://www.espruino.com/Puck.js+FET">FET</a> - Controlling a higher voltage
device</li>
<li><a href="http://www.espruino.com/Puck.js+Door+Light">Door controlled light</a> - Using
the magnetometer to detect movement of an object (in this case, a door)</li>
<li><a href="http://www.espruino.com/Puck.js+Night+Light">Temperature controlled night light</a> -
Uses the IR-emitter of the Puck to control some off-the-shelf RGB lighting
based on the temperature sensor.</li>
<li><a href="http://www.espruino.com/BLE+Lightbulbs">Controlling Bluetooth devices</a> - An
example of a Puck directly interfacing with another Bluetooth device - in this
case some smart lighting</li>
</ul><p>Guides</p><ul>
<li><a href="http://www.espruino.com/PWM">Pulse Width Modulation</a> - Controlled LED
brightness</li>
</ul>` })}`;
});

export { $$metadata, $$EspruinoPuck as default, frontmatter, metadata };
