import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "timeout", "text": "Timeout" }, { "depth": 2, "slug": "sleep", "text": "Sleep" }, { "depth": 2, "slug": "delay", "text": "Delay" }, { "depth": 2, "slug": "interval-type", "text": "Interval type" }, { "depth": 2, "slug": "related-patterns", "text": "Related patterns" }], "source": '\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [timeout](#timeout): re-triggerable timeout, able to check up on completion. Not able to get a return result.\n* [delay](#delay): call a function with delay and get its result \n* [sleep](#sleep): pause execution for some period\n\n\n## Timeout\n\n`setTimeout` is the usual way to call a function after some elapsed time:\n\n```js\nimport { intervalToMs } from "https://unpkg.com/ixfx/dist/flow.js"\n// Call `doSomething` once after one minute\nconst t = window.setTimeout(doSomething, 60*1000);\n// or:\nconst t = window.setTimeout(doSomething, intervalToMs({ mins: 1 }))\n```\n\nIf you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.\n\nixfx\'s [`timeout`](https://clinth.github.io/ixfx/functions/Flow.timeout-1.html) makes this a bit simpler. Once setup, calling `start()` schedules the timer, or resets if already scheduled. To cancel a started timeout, use `cancel()`.\n\n```js\nimport { timeout } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Set up once\nconst fadeOut = timeout(() => {\n  // do something after 30secs\n}, { secs: 30 });\n\n// Trigger if there\'s a button press.\n// Multiple calls to .start() simply reset timeout \ndocument.getElementById(`btnStart`).addEventListener(`click`, () => fadeOut.start());\n```\n\nThe callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.\n```js\nfadeOut.cancel(); // cancels a timeout\n\n// Starts (or restarts) a timeout\nfadeOut.start();\nfadeOut.start(1000); // (re)start and change the delay period at the same time\n```\n\nYour callback function can use the elapsed time, if needed:\n\n```js\ntimeout(elapsedMs => console.log(`Timeout after ${elapsedMs}`), { secs: 30 }).start();\n```\n\nData can be passed to the callback function when running `.start()`:\n\n```js\n// Setup timeout\nconst fadeOut = timeout((elapsedTime, data) => {\n  // Function gets passed the elapsed time and data\n  console.log(data.msg);\n});\n\n// Trigger timeout with data. The first parameter is to adjust the timeout.\n// in this case we don\'t want to, so _undefined_ is passed.\nfadeOut.start(undefined, { msg: `hello` });\n```\n\n## Sleep\n\nUsing JS\'s _await_ feature, you can essentially pause execution of your code using ixfx\'s [`sleep`](https://clinth.github.io/ixfx/functions/Flow.sleep.html).\n\n```js\nimport { sleep } from "https://unpkg.com/ixfx/dist/flow.js"\nconsole.log(`Hello`);\nawait sleep(1000);\nconsole.log(`There`); // Prints one second after\n```\n\nThere are a few tricks to using the _await_ keyword. You may need to declare your function as being asynchronous:\n\n```js\nconst something = async () => {\n  console.log(`Hello`);\n  await sleep(1000);\n  console.log(`There`); // Print one second after\n};\n\n// Call the asynchronous function\nsomething();\n// Execution will continue immediately, but execution within `something` will pause as expected.\n```\n\nCompared to [delay](#delay), `sleep` doesn\'t run a function and provide a value. It just sleeps.\n\n## Delay\n\n[`delay`](https://clinth.github.io/ixfx/functions/Flow.delay.html) is very similar to [`sleep`](#sleep), but lets you schedule running a function after the sleep.\n\nSo instead of writing:\n```js\nimport { sleep } from "https://unpkg.com/ixfx/dist/flow.js"\nawait sleep(100); // Pause for 100ms\nawait someFn();   // Call and wait for someFn to run\n```\n\nYou can write:\n```js\nimport { delay } from "https://unpkg.com/ixfx/dist/flow.js"\nawait delay(someFn, 100);\n```\n\nIf the call is not `await`ed, execution continues:\n```js\n// Schedule \'someFn\' after 100ms\ndelay(someFn, 100);\n// ...but execution continues here immediately\n```\n\nBy default the delay period is before running the supplied function, but it can also be after:\n```js\n// Runs \'someFn\' immediately\nawait delay(someFn, { delay: "after", secs: 10 });\n// ...but execution does not continue here until 10 seconds later\n```\n\nOr both:\n\n```js\n// Waits 10seconds, and then runs `someFn`\nawait delay(someFn, { delay: "both", secs: 10 });\n// ...and waits a further 10secs before continuing here\n```\n\n## Interval type\n\nMost of the ixfx functions that take millisecond arguments also allow you to provided an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html). This can make for more readable code.\n\nThe `Interval` type looks like:\n```ts\nInterval: number | { \n    hours?: number; \n    millis?: number; \n    mins?: number; \n    secs?: number; \n}\n```\n\nExample usage with [`delay`](#delay):\n\n```js\n// instead of these options:\ndelay( () => ..., 300000); // How long is that!?\ndelay( () => ..., 5*60*1000); // A bit better\n// Use:\ndelay( () => ..., { mins: 5 });\n```\n\nIf you just want to give a millisecond value, a bare number can be used.\n```js\n// These two lines are the same\ndelay( () => ..., 1000);\ndelay( () => ..., { millis: 1000 });\n```\n\nAny of the time units can be combined to define an interval, with a cumulative effect. [`intervalToMs`](https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html) allows you to convert to milliseconds, useful for combining with vanilla JS functions.\n\n```js\nimport { intervalToMs } from "https://unpkg.com/ixfx/dist/flow.js"\nconst period = { secs: 2, millis: 1 };\n\n// Yields 2001 (2 seconds + 1 millisecond);\nconst ms = intervalToMs(period);\nsetTimeout(someFn, ms);\n// Or:\nsetTimeout(someFn, intervalToMs({ secs: 2, millis: 1 }));\n```\n\n## Related patterns\n\n* [Process a set of items with a delay between each](../../data/process-set/)\n* [Fetch new data if it becomes outdated](../update-when-required/)\n\n', "html": '<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n<p>Overview:</p>\n<ul>\n<li><a href="#timeout">timeout</a>: re-triggerable timeout, able to check up on completion. Not able to get a return result.</li>\n<li><a href="#delay">delay</a>: call a function with delay and get its result</li>\n<li><a href="#sleep">sleep</a>: pause execution for some period</li>\n</ul>\n<h2 id="timeout">Timeout</h2>\n<p><code is:raw>setTimeout</code> is the usual way to call a function after some elapsed time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Call `doSomething` once after one minute</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// or:</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n<p>If you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.</p>\n<p>ixfx\'s <a href="https://clinth.github.io/ixfx/functions/Flow.timeout-1.html"><code is:raw>timeout</code></a> makes this a bit simpler. Once setup, calling <code is:raw>start()</code> schedules the timer, or resets if already scheduled. To cancel a started timeout, use <code is:raw>cancel()</code>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> timeout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token comment">// Set up once</span>\n<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something after 30secs</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Trigger if there\'s a button press.</span>\n<span class="token comment">// Multiple calls to .start() simply reset timeout </span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">btnStart</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.</p>\n<pre class="language-js"><code is:raw class="language-js">fadeOut<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cancels a timeout</span>\n\n<span class="token comment">// Starts (or restarts) a timeout</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (re)start and change the delay period at the same time</span></code></pre>\n<p>Your callback function can use the elapsed time, if needed:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Timeout after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>elapsedMs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Data can be passed to the callback function when running <code is:raw>.start()</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Setup timeout</span>\n<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedTime<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Function gets passed the elapsed time and data</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Trigger timeout with data. The first parameter is to adjust the timeout.</span>\n<span class="token comment">// in this case we don\'t want to, so _undefined_ is passed.</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="sleep">Sleep</h2>\n<p>Using JS\'s <em>await</em> feature, you can essentially pause execution of your code using ixfx\'s <a href="https://clinth.github.io/ixfx/functions/Flow.sleep.html"><code is:raw>sleep</code></a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">There</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints one second after</span></code></pre>\n<p>There are a few tricks to using the <em>await</em> keyword. You may need to declare your function as being asynchronous:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">something</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">There</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print one second after</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call the asynchronous function</span>\n<span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Execution will continue immediately, but execution within `something` will pause as expected.</span></code></pre>\n<p>Compared to <a href="#delay">delay</a>, <code is:raw>sleep</code> doesn\'t run a function and provide a value. It just sleeps.</p>\n<h2 id="delay">Delay</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.delay.html"><code is:raw>delay</code></a> is very similar to <a href="#sleep"><code is:raw>sleep</code></a>, but lets you schedule running a function after the sleep.</p>\n<p>So instead of writing:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pause for 100ms</span>\n<span class="token keyword">await</span> <span class="token function">someFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Call and wait for someFn to run</span></code></pre>\n<p>You can write:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>If the call is not <code is:raw>await</code>ed, execution continues:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Schedule \'someFn\' after 100ms</span>\n<span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...but execution continues here immediately</span></code></pre>\n<p>By default the delay period is before running the supplied function, but it can also be after:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Runs \'someFn\' immediately</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"after"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...but execution does not continue here until 10 seconds later</span></code></pre>\n<p>Or both:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Waits 10seconds, and then runs `someFn`</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"both"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...and waits a further 10secs before continuing here</span></code></pre>\n<h2 id="interval-type">Interval type</h2>\n<p>Most of the ixfx functions that take millisecond arguments also allow you to provided an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code is:raw>Interval</code></a>. This can make for more readable code.</p>\n<p>The <code is:raw>Interval</code> type looks like:</p>\n<pre class="language-ts"><code is:raw class="language-ts">Interval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">{</span> \n    hours<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    millis<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    mins<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    secs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span></code></pre>\n<p>Example usage with <a href="#delay"><code is:raw>delay</code></a>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// instead of these options:</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// How long is that!?</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A bit better</span>\n<span class="token comment">// Use:</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>If you just want to give a millisecond value, a bare number can be used.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// These two lines are the same</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Any of the time units can be combined to define an interval, with a cumulative effect. <a href="https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html"><code is:raw>intervalToMs</code></a> allows you to convert to milliseconds, useful for combining with vanilla JS functions.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">const</span> period <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields 2001 (2 seconds + 1 millisecond);</span>\n<span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Or:</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="related-patterns">Related patterns</h2>\n<ul>\n<li><a href="../../data/process-set/">Process a set of items with a delay between each</a></li>\n<li><a href="../update-when-required/">Fetch new data if it becomes outdated</a></li>\n</ul>' };
const frontmatter = { "title": "Delay", "astro": { "headers": [{ "depth": 2, "slug": "timeout", "text": "Timeout" }, { "depth": 2, "slug": "sleep", "text": "Sleep" }, { "depth": 2, "slug": "delay", "text": "Delay" }, { "depth": 2, "slug": "interval-type", "text": "Interval type" }, { "depth": 2, "slug": "related-patterns", "text": "Related patterns" }], "source": '\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [timeout](#timeout): re-triggerable timeout, able to check up on completion. Not able to get a return result.\n* [delay](#delay): call a function with delay and get its result \n* [sleep](#sleep): pause execution for some period\n\n\n## Timeout\n\n`setTimeout` is the usual way to call a function after some elapsed time:\n\n```js\nimport { intervalToMs } from "https://unpkg.com/ixfx/dist/flow.js"\n// Call `doSomething` once after one minute\nconst t = window.setTimeout(doSomething, 60*1000);\n// or:\nconst t = window.setTimeout(doSomething, intervalToMs({ mins: 1 }))\n```\n\nIf you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.\n\nixfx\'s [`timeout`](https://clinth.github.io/ixfx/functions/Flow.timeout-1.html) makes this a bit simpler. Once setup, calling `start()` schedules the timer, or resets if already scheduled. To cancel a started timeout, use `cancel()`.\n\n```js\nimport { timeout } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Set up once\nconst fadeOut = timeout(() => {\n  // do something after 30secs\n}, { secs: 30 });\n\n// Trigger if there\'s a button press.\n// Multiple calls to .start() simply reset timeout \ndocument.getElementById(`btnStart`).addEventListener(`click`, () => fadeOut.start());\n```\n\nThe callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.\n```js\nfadeOut.cancel(); // cancels a timeout\n\n// Starts (or restarts) a timeout\nfadeOut.start();\nfadeOut.start(1000); // (re)start and change the delay period at the same time\n```\n\nYour callback function can use the elapsed time, if needed:\n\n```js\ntimeout(elapsedMs => console.log(`Timeout after ${elapsedMs}`), { secs: 30 }).start();\n```\n\nData can be passed to the callback function when running `.start()`:\n\n```js\n// Setup timeout\nconst fadeOut = timeout((elapsedTime, data) => {\n  // Function gets passed the elapsed time and data\n  console.log(data.msg);\n});\n\n// Trigger timeout with data. The first parameter is to adjust the timeout.\n// in this case we don\'t want to, so _undefined_ is passed.\nfadeOut.start(undefined, { msg: `hello` });\n```\n\n## Sleep\n\nUsing JS\'s _await_ feature, you can essentially pause execution of your code using ixfx\'s [`sleep`](https://clinth.github.io/ixfx/functions/Flow.sleep.html).\n\n```js\nimport { sleep } from "https://unpkg.com/ixfx/dist/flow.js"\nconsole.log(`Hello`);\nawait sleep(1000);\nconsole.log(`There`); // Prints one second after\n```\n\nThere are a few tricks to using the _await_ keyword. You may need to declare your function as being asynchronous:\n\n```js\nconst something = async () => {\n  console.log(`Hello`);\n  await sleep(1000);\n  console.log(`There`); // Print one second after\n};\n\n// Call the asynchronous function\nsomething();\n// Execution will continue immediately, but execution within `something` will pause as expected.\n```\n\nCompared to [delay](#delay), `sleep` doesn\'t run a function and provide a value. It just sleeps.\n\n## Delay\n\n[`delay`](https://clinth.github.io/ixfx/functions/Flow.delay.html) is very similar to [`sleep`](#sleep), but lets you schedule running a function after the sleep.\n\nSo instead of writing:\n```js\nimport { sleep } from "https://unpkg.com/ixfx/dist/flow.js"\nawait sleep(100); // Pause for 100ms\nawait someFn();   // Call and wait for someFn to run\n```\n\nYou can write:\n```js\nimport { delay } from "https://unpkg.com/ixfx/dist/flow.js"\nawait delay(someFn, 100);\n```\n\nIf the call is not `await`ed, execution continues:\n```js\n// Schedule \'someFn\' after 100ms\ndelay(someFn, 100);\n// ...but execution continues here immediately\n```\n\nBy default the delay period is before running the supplied function, but it can also be after:\n```js\n// Runs \'someFn\' immediately\nawait delay(someFn, { delay: "after", secs: 10 });\n// ...but execution does not continue here until 10 seconds later\n```\n\nOr both:\n\n```js\n// Waits 10seconds, and then runs `someFn`\nawait delay(someFn, { delay: "both", secs: 10 });\n// ...and waits a further 10secs before continuing here\n```\n\n## Interval type\n\nMost of the ixfx functions that take millisecond arguments also allow you to provided an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html). This can make for more readable code.\n\nThe `Interval` type looks like:\n```ts\nInterval: number | { \n    hours?: number; \n    millis?: number; \n    mins?: number; \n    secs?: number; \n}\n```\n\nExample usage with [`delay`](#delay):\n\n```js\n// instead of these options:\ndelay( () => ..., 300000); // How long is that!?\ndelay( () => ..., 5*60*1000); // A bit better\n// Use:\ndelay( () => ..., { mins: 5 });\n```\n\nIf you just want to give a millisecond value, a bare number can be used.\n```js\n// These two lines are the same\ndelay( () => ..., 1000);\ndelay( () => ..., { millis: 1000 });\n```\n\nAny of the time units can be combined to define an interval, with a cumulative effect. [`intervalToMs`](https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html) allows you to convert to milliseconds, useful for combining with vanilla JS functions.\n\n```js\nimport { intervalToMs } from "https://unpkg.com/ixfx/dist/flow.js"\nconst period = { secs: 2, millis: 1 };\n\n// Yields 2001 (2 seconds + 1 millisecond);\nconst ms = intervalToMs(period);\nsetTimeout(someFn, ms);\n// Or:\nsetTimeout(someFn, intervalToMs({ secs: 2, millis: 1 }));\n```\n\n## Related patterns\n\n* [Process a set of items with a delay between each](../../data/process-set/)\n* [Fetch new data if it becomes outdated](../update-when-required/)\n\n', "html": '<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n<p>Overview:</p>\n<ul>\n<li><a href="#timeout">timeout</a>: re-triggerable timeout, able to check up on completion. Not able to get a return result.</li>\n<li><a href="#delay">delay</a>: call a function with delay and get its result</li>\n<li><a href="#sleep">sleep</a>: pause execution for some period</li>\n</ul>\n<h2 id="timeout">Timeout</h2>\n<p><code is:raw>setTimeout</code> is the usual way to call a function after some elapsed time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Call `doSomething` once after one minute</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// or:</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n<p>If you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.</p>\n<p>ixfx\'s <a href="https://clinth.github.io/ixfx/functions/Flow.timeout-1.html"><code is:raw>timeout</code></a> makes this a bit simpler. Once setup, calling <code is:raw>start()</code> schedules the timer, or resets if already scheduled. To cancel a started timeout, use <code is:raw>cancel()</code>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> timeout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token comment">// Set up once</span>\n<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something after 30secs</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Trigger if there\'s a button press.</span>\n<span class="token comment">// Multiple calls to .start() simply reset timeout </span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">btnStart</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.</p>\n<pre class="language-js"><code is:raw class="language-js">fadeOut<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cancels a timeout</span>\n\n<span class="token comment">// Starts (or restarts) a timeout</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (re)start and change the delay period at the same time</span></code></pre>\n<p>Your callback function can use the elapsed time, if needed:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Timeout after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>elapsedMs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Data can be passed to the callback function when running <code is:raw>.start()</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Setup timeout</span>\n<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedTime<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Function gets passed the elapsed time and data</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Trigger timeout with data. The first parameter is to adjust the timeout.</span>\n<span class="token comment">// in this case we don\'t want to, so _undefined_ is passed.</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="sleep">Sleep</h2>\n<p>Using JS\'s <em>await</em> feature, you can essentially pause execution of your code using ixfx\'s <a href="https://clinth.github.io/ixfx/functions/Flow.sleep.html"><code is:raw>sleep</code></a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">There</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints one second after</span></code></pre>\n<p>There are a few tricks to using the <em>await</em> keyword. You may need to declare your function as being asynchronous:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">something</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">There</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print one second after</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call the asynchronous function</span>\n<span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Execution will continue immediately, but execution within `something` will pause as expected.</span></code></pre>\n<p>Compared to <a href="#delay">delay</a>, <code is:raw>sleep</code> doesn\'t run a function and provide a value. It just sleeps.</p>\n<h2 id="delay">Delay</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.delay.html"><code is:raw>delay</code></a> is very similar to <a href="#sleep"><code is:raw>sleep</code></a>, but lets you schedule running a function after the sleep.</p>\n<p>So instead of writing:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pause for 100ms</span>\n<span class="token keyword">await</span> <span class="token function">someFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Call and wait for someFn to run</span></code></pre>\n<p>You can write:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>If the call is not <code is:raw>await</code>ed, execution continues:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Schedule \'someFn\' after 100ms</span>\n<span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...but execution continues here immediately</span></code></pre>\n<p>By default the delay period is before running the supplied function, but it can also be after:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Runs \'someFn\' immediately</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"after"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...but execution does not continue here until 10 seconds later</span></code></pre>\n<p>Or both:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Waits 10seconds, and then runs `someFn`</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"both"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...and waits a further 10secs before continuing here</span></code></pre>\n<h2 id="interval-type">Interval type</h2>\n<p>Most of the ixfx functions that take millisecond arguments also allow you to provided an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code is:raw>Interval</code></a>. This can make for more readable code.</p>\n<p>The <code is:raw>Interval</code> type looks like:</p>\n<pre class="language-ts"><code is:raw class="language-ts">Interval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">{</span> \n    hours<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    millis<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    mins<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    secs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span></code></pre>\n<p>Example usage with <a href="#delay"><code is:raw>delay</code></a>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// instead of these options:</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// How long is that!?</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A bit better</span>\n<span class="token comment">// Use:</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>If you just want to give a millisecond value, a bare number can be used.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// These two lines are the same</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Any of the time units can be combined to define an interval, with a cumulative effect. <a href="https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html"><code is:raw>intervalToMs</code></a> allows you to convert to milliseconds, useful for combining with vanilla JS functions.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">const</span> period <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields 2001 (2 seconds + 1 millisecond);</span>\n<span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Or:</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="related-patterns">Related patterns</h2>\n<ul>\n<li><a href="../../data/process-set/">Process a set of items with a delay between each</a></li>\n<li><a href="../update-when-required/">Fetch new data if it becomes outdated</a></li>\n</ul>' } };
const $$metadata = createMetadata("/src/pages/flow/delay.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "../../components/DemoElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/flow/delay.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Delay = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Delay;
  const $$content = { "title": "Delay", "astro": { "headers": [{ "depth": 2, "slug": "timeout", "text": "Timeout" }, { "depth": 2, "slug": "sleep", "text": "Sleep" }, { "depth": 2, "slug": "delay", "text": "Delay" }, { "depth": 2, "slug": "interval-type", "text": "Interval type" }, { "depth": 2, "slug": "related-patterns", "text": "Related patterns" }], "source": '\n<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n\nOverview:\n* [timeout](#timeout): re-triggerable timeout, able to check up on completion. Not able to get a return result.\n* [delay](#delay): call a function with delay and get its result \n* [sleep](#sleep): pause execution for some period\n\n\n## Timeout\n\n`setTimeout` is the usual way to call a function after some elapsed time:\n\n```js\nimport { intervalToMs } from "https://unpkg.com/ixfx/dist/flow.js"\n// Call `doSomething` once after one minute\nconst t = window.setTimeout(doSomething, 60*1000);\n// or:\nconst t = window.setTimeout(doSomething, intervalToMs({ mins: 1 }))\n```\n\nIf you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.\n\nixfx\'s [`timeout`](https://clinth.github.io/ixfx/functions/Flow.timeout-1.html) makes this a bit simpler. Once setup, calling `start()` schedules the timer, or resets if already scheduled. To cancel a started timeout, use `cancel()`.\n\n```js\nimport { timeout } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Set up once\nconst fadeOut = timeout(() => {\n  // do something after 30secs\n}, { secs: 30 });\n\n// Trigger if there\'s a button press.\n// Multiple calls to .start() simply reset timeout \ndocument.getElementById(`btnStart`).addEventListener(`click`, () => fadeOut.start());\n```\n\nThe callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.\n```js\nfadeOut.cancel(); // cancels a timeout\n\n// Starts (or restarts) a timeout\nfadeOut.start();\nfadeOut.start(1000); // (re)start and change the delay period at the same time\n```\n\nYour callback function can use the elapsed time, if needed:\n\n```js\ntimeout(elapsedMs => console.log(`Timeout after ${elapsedMs}`), { secs: 30 }).start();\n```\n\nData can be passed to the callback function when running `.start()`:\n\n```js\n// Setup timeout\nconst fadeOut = timeout((elapsedTime, data) => {\n  // Function gets passed the elapsed time and data\n  console.log(data.msg);\n});\n\n// Trigger timeout with data. The first parameter is to adjust the timeout.\n// in this case we don\'t want to, so _undefined_ is passed.\nfadeOut.start(undefined, { msg: `hello` });\n```\n\n## Sleep\n\nUsing JS\'s _await_ feature, you can essentially pause execution of your code using ixfx\'s [`sleep`](https://clinth.github.io/ixfx/functions/Flow.sleep.html).\n\n```js\nimport { sleep } from "https://unpkg.com/ixfx/dist/flow.js"\nconsole.log(`Hello`);\nawait sleep(1000);\nconsole.log(`There`); // Prints one second after\n```\n\nThere are a few tricks to using the _await_ keyword. You may need to declare your function as being asynchronous:\n\n```js\nconst something = async () => {\n  console.log(`Hello`);\n  await sleep(1000);\n  console.log(`There`); // Print one second after\n};\n\n// Call the asynchronous function\nsomething();\n// Execution will continue immediately, but execution within `something` will pause as expected.\n```\n\nCompared to [delay](#delay), `sleep` doesn\'t run a function and provide a value. It just sleeps.\n\n## Delay\n\n[`delay`](https://clinth.github.io/ixfx/functions/Flow.delay.html) is very similar to [`sleep`](#sleep), but lets you schedule running a function after the sleep.\n\nSo instead of writing:\n```js\nimport { sleep } from "https://unpkg.com/ixfx/dist/flow.js"\nawait sleep(100); // Pause for 100ms\nawait someFn();   // Call and wait for someFn to run\n```\n\nYou can write:\n```js\nimport { delay } from "https://unpkg.com/ixfx/dist/flow.js"\nawait delay(someFn, 100);\n```\n\nIf the call is not `await`ed, execution continues:\n```js\n// Schedule \'someFn\' after 100ms\ndelay(someFn, 100);\n// ...but execution continues here immediately\n```\n\nBy default the delay period is before running the supplied function, but it can also be after:\n```js\n// Runs \'someFn\' immediately\nawait delay(someFn, { delay: "after", secs: 10 });\n// ...but execution does not continue here until 10 seconds later\n```\n\nOr both:\n\n```js\n// Waits 10seconds, and then runs `someFn`\nawait delay(someFn, { delay: "both", secs: 10 });\n// ...and waits a further 10secs before continuing here\n```\n\n## Interval type\n\nMost of the ixfx functions that take millisecond arguments also allow you to provided an [`Interval`](https://clinth.github.io/ixfx/types/Flow.Interval.html). This can make for more readable code.\n\nThe `Interval` type looks like:\n```ts\nInterval: number | { \n    hours?: number; \n    millis?: number; \n    mins?: number; \n    secs?: number; \n}\n```\n\nExample usage with [`delay`](#delay):\n\n```js\n// instead of these options:\ndelay( () => ..., 300000); // How long is that!?\ndelay( () => ..., 5*60*1000); // A bit better\n// Use:\ndelay( () => ..., { mins: 5 });\n```\n\nIf you just want to give a millisecond value, a bare number can be used.\n```js\n// These two lines are the same\ndelay( () => ..., 1000);\ndelay( () => ..., { millis: 1000 });\n```\n\nAny of the time units can be combined to define an interval, with a cumulative effect. [`intervalToMs`](https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html) allows you to convert to milliseconds, useful for combining with vanilla JS functions.\n\n```js\nimport { intervalToMs } from "https://unpkg.com/ixfx/dist/flow.js"\nconst period = { secs: 2, millis: 1 };\n\n// Yields 2001 (2 seconds + 1 millisecond);\nconst ms = intervalToMs(period);\nsetTimeout(someFn, ms);\n// Or:\nsetTimeout(someFn, intervalToMs({ secs: 2, millis: 1 }));\n```\n\n## Related patterns\n\n* [Process a set of items with a delay between each](../../data/process-set/)\n* [Fetch new data if it becomes outdated](../update-when-required/)\n\n', "html": '<div class="tip"><ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>\n</ul></div>\n<p>Overview:</p>\n<ul>\n<li><a href="#timeout">timeout</a>: re-triggerable timeout, able to check up on completion. Not able to get a return result.</li>\n<li><a href="#delay">delay</a>: call a function with delay and get its result</li>\n<li><a href="#sleep">sleep</a>: pause execution for some period</li>\n</ul>\n<h2 id="timeout">Timeout</h2>\n<p><code is:raw>setTimeout</code> is the usual way to call a function after some elapsed time:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token comment">// Call `doSomething` once after one minute</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// or:</span>\n<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n<p>If you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.</p>\n<p>ixfx\'s <a href="https://clinth.github.io/ixfx/functions/Flow.timeout-1.html"><code is:raw>timeout</code></a> makes this a bit simpler. Once setup, calling <code is:raw>start()</code> schedules the timer, or resets if already scheduled. To cancel a started timeout, use <code is:raw>cancel()</code>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> timeout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n\n<span class="token comment">// Set up once</span>\n<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something after 30secs</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Trigger if there\'s a button press.</span>\n<span class="token comment">// Multiple calls to .start() simply reset timeout </span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">btnStart</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">click</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.</p>\n<pre class="language-js"><code is:raw class="language-js">fadeOut<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cancels a timeout</span>\n\n<span class="token comment">// Starts (or restarts) a timeout</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (re)start and change the delay period at the same time</span></code></pre>\n<p>Your callback function can use the elapsed time, if needed:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Timeout after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>elapsedMs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Data can be passed to the callback function when running <code is:raw>.start()</code>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Setup timeout</span>\n<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedTime<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Function gets passed the elapsed time and data</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Trigger timeout with data. The first parameter is to adjust the timeout.</span>\n<span class="token comment">// in this case we don\'t want to, so _undefined_ is passed.</span>\nfadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="sleep">Sleep</h2>\n<p>Using JS\'s <em>await</em> feature, you can essentially pause execution of your code using ixfx\'s <a href="https://clinth.github.io/ixfx/functions/Flow.sleep.html"><code is:raw>sleep</code></a>.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">There</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints one second after</span></code></pre>\n<p>There are a few tricks to using the <em>await</em> keyword. You may need to declare your function as being asynchronous:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">something</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">There</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print one second after</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Call the asynchronous function</span>\n<span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Execution will continue immediately, but execution within `something` will pause as expected.</span></code></pre>\n<p>Compared to <a href="#delay">delay</a>, <code is:raw>sleep</code> doesn\'t run a function and provide a value. It just sleeps.</p>\n<h2 id="delay">Delay</h2>\n<p><a href="https://clinth.github.io/ixfx/functions/Flow.delay.html"><code is:raw>delay</code></a> is very similar to <a href="#sleep"><code is:raw>sleep</code></a>, but lets you schedule running a function after the sleep.</p>\n<p>So instead of writing:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pause for 100ms</span>\n<span class="token keyword">await</span> <span class="token function">someFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Call and wait for someFn to run</span></code></pre>\n<p>You can write:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>If the call is not <code is:raw>await</code>ed, execution continues:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Schedule \'someFn\' after 100ms</span>\n<span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...but execution continues here immediately</span></code></pre>\n<p>By default the delay period is before running the supplied function, but it can also be after:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Runs \'someFn\' immediately</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"after"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...but execution does not continue here until 10 seconds later</span></code></pre>\n<p>Or both:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Waits 10seconds, and then runs `someFn`</span>\n<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"both"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...and waits a further 10secs before continuing here</span></code></pre>\n<h2 id="interval-type">Interval type</h2>\n<p>Most of the ixfx functions that take millisecond arguments also allow you to provided an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code is:raw>Interval</code></a>. This can make for more readable code.</p>\n<p>The <code is:raw>Interval</code> type looks like:</p>\n<pre class="language-ts"><code is:raw class="language-ts">Interval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">{</span> \n    hours<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    millis<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    mins<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n    secs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span></code></pre>\n<p>Example usage with <a href="#delay"><code is:raw>delay</code></a>:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// instead of these options:</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// How long is that!?</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A bit better</span>\n<span class="token comment">// Use:</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>If you just want to give a millisecond value, a bare number can be used.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// These two lines are the same</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Any of the time units can be combined to define an interval, with a cumulative effect. <a href="https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html"><code is:raw>intervalToMs</code></a> allows you to convert to milliseconds, useful for combining with vanilla JS functions.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>\n<span class="token keyword">const</span> period <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Yields 2001 (2 seconds + 1 millisecond);</span>\n<span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Or:</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="related-patterns">Related patterns</h2>\n<ul>\n<li><a href="../../data/process-set/">Process a set of items with a delay between each</a></li>\n<li><a href="../update-when-required/">Fetch new data if it becomes outdated</a></li>\n</ul>' } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip"><ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/modules/Flow.html">Flow module</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/flow/">Online demos</a></li>
</ul></div><p>Overview:</p><ul>
<li><a href="#timeout">timeout</a>: re-triggerable timeout, able to check up on completion. Not able to get a return result.</li>
<li><a href="#delay">delay</a>: call a function with delay and get its result</li>
<li><a href="#sleep">sleep</a>: pause execution for some period</li>
</ul><h2 id="timeout">Timeout</h2><p><code>setTimeout</code> is the usual way to call a function after some elapsed time:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token comment">// Call \`doSomething\` once after one minute</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or:</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>If you want to trigger the same timeout at different points in your code, it soon gets messy detecting and cancelling the existing timeout and scheduling a new one.</p><p>ixfx's <a href="https://clinth.github.io/ixfx/functions/Flow.timeout-1.html"><code>timeout</code></a> makes this a bit simpler. Once setup, calling <code>start()</code> schedules the timer, or resets if already scheduled. To cancel a started timeout, use <code>cancel()</code>.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> timeout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Set up once</span>
<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// do something after 30secs</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger if there's a button press.</span>
<span class="token comment">// Multiple calls to .start() simply reset timeout </span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">btnStart</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The callback can be cancelled and restarted. Restarting cancels the currently scheduled timeout, scheduling it anew.</p><pre class="language-js"><code class="language-js">fadeOut<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cancels a timeout</span>

<span class="token comment">// Starts (or restarts) a timeout</span>
fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (re)start and change the delay period at the same time</span></code></pre><p>Your callback function can use the elapsed time, if needed:</p><pre class="language-js"><code class="language-js"><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token parameter">elapsedMs</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Timeout after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>elapsedMs<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Data can be passed to the callback function when running <code>.start()</code>:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Setup timeout</span>
<span class="token keyword">const</span> fadeOut <span class="token operator">=</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">elapsedTime<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// Function gets passed the elapsed time and data</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger timeout with data. The first parameter is to adjust the timeout.</span>
<span class="token comment">// in this case we don't want to, so _undefined_ is passed.</span>
fadeOut<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="sleep">Sleep</h2><p>Using JS's <em>await</em> feature, you can essentially pause execution of your code using ixfx's <a href="https://clinth.github.io/ixfx/functions/Flow.sleep.html"><code>sleep</code></a>.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">There</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints one second after</span></code></pre><p>There are a few tricks to using the <em>await</em> keyword. You may need to declare your function as being asynchronous:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">something</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">There</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print one second after</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Call the asynchronous function</span>
<span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Execution will continue immediately, but execution within \`something\` will pause as expected.</span></code></pre><p>Compared to <a href="#delay">delay</a>, <code>sleep</code> doesn't run a function and provide a value. It just sleeps.</p><h2 id="delay">Delay</h2><p><a href="https://clinth.github.io/ixfx/functions/Flow.delay.html"><code>delay</code></a> is very similar to <a href="#sleep"><code>sleep</code></a>, but lets you schedule running a function after the sleep.</p><p>So instead of writing:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pause for 100ms</span>
<span class="token keyword">await</span> <span class="token function">someFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Call and wait for someFn to run</span></code></pre><p>You can write:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If the call is not <code>await</code>ed, execution continues:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Schedule 'someFn' after 100ms</span>
<span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...but execution continues here immediately</span></code></pre><p>By default the delay period is before running the supplied function, but it can also be after:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Runs 'someFn' immediately</span>
<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"after"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...but execution does not continue here until 10 seconds later</span></code></pre><p>Or both:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Waits 10seconds, and then runs \`someFn\`</span>
<span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token string">"both"</span><span class="token punctuation">,</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...and waits a further 10secs before continuing here</span></code></pre><h2 id="interval-type">Interval type</h2><p>Most of the ixfx functions that take millisecond arguments also allow you to provided an <a href="https://clinth.github.io/ixfx/types/Flow.Interval.html"><code>Interval</code></a>. This can make for more readable code.</p><p>The <code>Interval</code> type looks like:</p><pre class="language-ts"><code class="language-ts">Interval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">{</span> 
    hours<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
    millis<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
    mins<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
    secs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span></code></pre><p>Example usage with <a href="#delay"><code>delay</code></a>:</p><pre class="language-js"><code class="language-js"><span class="token comment">// instead of these options:</span>
<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// How long is that!?</span>
<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A bit better</span>
<span class="token comment">// Use:</span>
<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mins</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>If you just want to give a millisecond value, a bare number can be used.</p><pre class="language-js"><code class="language-js"><span class="token comment">// These two lines are the same</span>
<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">delay</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Any of the time units can be combined to define an interval, with a cumulative effect. <a href="https://clinth.github.io/ixfx/functions/Flow.intervalToMs.html"><code>intervalToMs</code></a> allows you to convert to milliseconds, useful for combining with vanilla JS functions.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> intervalToMs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>
<span class="token keyword">const</span> period <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Yields 2001 (2 seconds + 1 millisecond);</span>
<span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Or:</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>someFn<span class="token punctuation">,</span> <span class="token function">intervalToMs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">secs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">millis</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="related-patterns">Related patterns</h2><ul>
<li><a href="../../data/process-set/">Process a set of items with a delay between each</a></li>
<li><a href="../update-when-required/">Fetch new data if it becomes outdated</a></li>
</ul>` })}`;
});

export { $$metadata, $$Delay as default, frontmatter, metadata };
