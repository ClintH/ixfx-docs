import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import { $ as $$module2 } from './chunks/DemoElement.a29296a2.mjs';
import { LitElement, css, html } from 'lit';
import { e as elStyles } from './chunks/styles.9b8f8965.mjs';
import { s as set_exports, G as Grid_exports, D as Drawing_exports, C as Colour_exports } from './chunks/chunk-IYXXLC7L.d562e3d6.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit/decorators.js';

const tagName$1 = "grid-visitor-element";
class GridVisitorElement extends LitElement {
  static styles = [
    elStyles,
    css`
    #grid {
      --grid-color:var(--divider);
      --hover-color: var(--bg-contrast);
      --selected-color: var(--yellow);
    }
    `
  ];
  visitorKind;
  lastClicked = { x: 0, y: 0 };
  stopping = false;
  constructor() {
    super();
    this.visitorKind = `Random Contiguous`;
  }
  updated(_changedProperties) {
    const el = this.shadowRoot.getElementById(`grid`);
    el.addEventListener(`cellPointerUp`, (ev) => {
      console.log(ev.detail);
      this.lastClicked = ev.detail;
      this.stop();
      setTimeout(() => this.start(), 100);
    });
  }
  onVisitorChange(evt) {
    this.visitorKind = evt.target.value;
  }
  updateButtons(running) {
    this.shadowRoot.getElementById(`btnStart`).disabled = running;
    this.shadowRoot.getElementById(`btnStop`).disabled = !running;
  }
  start() {
    const el = this.shadowRoot.getElementById(`grid`);
    const delayMs = 100;
    const grid = el.getGrid();
    const visited = set_exports.mutable((c) => Grid_exports.cellKeyString(c));
    const visitOpts = { visited };
    const lastClicked = this.lastClicked;
    let visitor;
    console.log(`lastClicked`, lastClicked);
    switch (this.visitorKind) {
      case `Depth`:
        visitor = Grid_exports.visitorDepth(grid, lastClicked, visitOpts);
        break;
      case `Breadth`:
        visitor = Grid_exports.visitorBreadth(grid, lastClicked, visitOpts);
        break;
      case `Row`:
        visitor = Grid_exports.visitorRow(grid, lastClicked, visitOpts);
        break;
      case `Column`:
        visitor = Grid_exports.visitorColumn(grid, lastClicked, visitOpts);
        break;
      case `Random Contiguous`:
        visitor = Grid_exports.visitorRandomContiguous(grid, lastClicked, visitOpts);
        break;
      default:
        visitor = Grid_exports.visitorRandom(grid, lastClicked, visitOpts);
    }
    this.stopping = false;
    el.cellRenderer = (cell, r, ctx) => {
      if (visited.has(cell)) {
        ctx.fillStyle = `pink`;
        ctx.fillRect(r.x, r.y, r.width, r.height);
        return true;
      }
      return false;
    };
    this.updateButtons(true);
    const run = () => {
      if (this.stopping)
        return;
      try {
        const v = visitor.next();
        const cell = v.value;
        const done = v.done;
        if (done) {
          this.updateButtons(false);
          el.selectedCell = lastClicked;
          return;
        }
        el.selectedCell = cell;
        setTimeout(run, delayMs);
      } catch (ex) {
        console.error(ex);
      }
    };
    setTimeout(run, delayMs);
  }
  stop() {
    const el = this.shadowRoot.getElementById(`grid`);
    if (!this.stopping) {
      this.updateButtons(false);
    }
    this.stopping = true;
    el.selectedCell = this.lastClicked;
  }
  render() {
    return html`
    <div class="toolbar centered">
      <section>
        <button @click="${this.start}" id="btnStart">Start</button>
        <button disabled @click="${this.stop}" id="btnStop">Stop</button>
      </section>
      <section>
        <label>Function:</label>
        <select @input="${this.onVisitorChange}" id="selVisTechnique">
          <option>Random Contiguous</option>
          <option>Random</option>
          <option>Depth</option>
          <option>Breadth</option>
          <option>Row</option>
          <option>Column</option>
        </select>
      </section>
    </div>
    <div>
      <grid-editor rows="15" cols="15" pixelSize="15" id="grid" />
    </div>
    `;
  }
}
customElements.define(tagName$1, GridVisitorElement);

var $$module3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  tagName: tagName$1,
  GridVisitorElement: GridVisitorElement
}, Symbol.toStringTag, { value: 'Module' }));

const tagName = "grid-offset-element";
class GridOffsetElement extends LitElement {
  static styles = [
    elStyles,
    css`
    #offsetsGrid {
      --grid-color:var(--divider);
      --hover-color: var(--bg-contrast);
      --selected-color: var(--yellow);
    }
    `
  ];
  selectedCell;
  grid;
  wrapStyle;
  distance;
  constructor() {
    super();
    this.selectedCell = { x: 0, y: 0 };
    this.wrapStyle = `stop`;
    this.distance = 2;
  }
  offsets() {
    const el = this.shadowRoot.getElementById(`offsetsGrid`);
    const selected = el.selectedCell;
    const offsets = Grid_exports.offsetCardinals(this.grid, selected, this.distance, this.wrapStyle);
    el.cellRenderer = (cell, rect, ctx) => {
      const kv = Object.entries(offsets).find((t) => Grid_exports.cellEquals(t[1], cell));
      if (kv === void 0)
        return false;
      Drawing_exports.textBlockAligned(ctx, kv[0], {
        vert: `center`,
        horiz: `center`,
        bounds: rect,
        fillStyle: Colour_exports.getCssVariable(`fg`, `yellow`)
      });
      return true;
    };
  }
  onCellPointerMove(ev) {
    const cell = ev.detail;
    if (cell === void 0)
      return;
    const el = ev.target;
    el.selectedCell = cell;
    this.offsets();
  }
  updated(_changedProperties) {
    const el = this.shadowRoot.getElementById(`offsetsGrid`);
    el.addEventListener(`cellPointerMove`, (ev) => this.onCellPointerMove(ev));
    this.grid = el.getGrid();
  }
  onWrapChange(evt) {
    this.wrapStyle = evt.target.value;
  }
  onDistanceChange(evt) {
    this.distance = parseInt(evt.target.value);
  }
  render() {
    return html`
    <div class="toolbar centered">
      <section>
        <label>Bounds:</label>
        <select id="selOffsetsWrap" @input="${this.onWrapChange}" title="How should coordinate wrapping behave?">
          <option>stop</option>
          <option>wrap</option>
          <option>undefined</option>
        </select>
      </section>
      <section>
        <label>Distance:</label>
        <input title="Coordinate distance" @input="${this.onDistanceChange}" type="range" id="rangeOffsetsDistance" value="${this.distance}" min="1" max="4">
      </section>
    </div>
    <div>
      <grid-editor rows="5" cols="5" pixelSize="30" id="offsetsGrid" />
    </div>
    `;
  }
}
customElements.define(tagName, GridOffsetElement);

var $$module4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  tagName: tagName,
  GridOffsetElement: GridOffsetElement
}, Symbol.toStringTag, { value: 'Module' }));

const metadata = { "headers": [{ "depth": 2, "slug": "types", "text": "Types" }, { "depth": 2, "slug": "visiting", "text": "Visiting" }, { "depth": 2, "slug": "iterating-cells", "text": "Iterating cells" }, { "depth": 2, "slug": "offsets", "text": "Offsets" }, { "depth": 2, "slug": "mapping-to-data", "text": "Mapping to data" }, { "depth": 2, "slug": "mapping-to-pixels", "text": "Mapping to pixels" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "functions-overview", "text": "Functions overview" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/geometry/GridEditor\';\n<\/script>\n\n[API Docs: Geometry.Grids module](https://clinth.github.io/ixfx/modules/Geometry.Grids.html)\n\nA _grid_ is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an _x,y_ location with _0,0_ being the top-left corner.\n\nExample: This grid has four rows and three columns.\n<div>\n  <table style="width:auto; border: 1px solid whitesmoke">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n\nA grid can be useful if your data has grid-like spatial qualities. It\'s useful for being able to gather data that is \'nearby\' based on cell location, traversing space following different rules and so on.\n\nAlthough there is a natural affinity between the grid and pixel coordinates, the grid isn\'t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.\n\n## Types\n\nThere are two main types for working with the grid functions:\n\n```typescript\ntype Grid {\n  rows: number,\n  cols: number\n}\ntype Cell {\n  x: number,\n  y: number\n}\n```\n\nIn action, this looks like:\n```js\nconst shape = {rows: 10, cols: 10};\nconst cell = {x: 0, y: 0};\n```\n\nIf a grid is going to be mapped to pixels (more on that below) it also need a _size_ field.\n\n\n## Visiting\n\nFor a given starting cell, it\'s possible to _visit_ all cells once and only once with movement following a spatial logic.\n\n<grid-visitor-element client:visible />\n\nProvided [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor) functions are: `visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,` and `visitorColumn`.\n\nThe visitor can be used in a `for .. of` loop\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Start visitor at 5,5\nconst visitor = Grids.visitorDepth(shape, {x: 5, y: 5});\nfor (let cell of visitor) {\n  // Visited cell..\n}\n```\n\nOr for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Set up visitor once\nconst visitor = Grids.visitorBreadth(shape, {x: 5, y: 5});\nconst visitorDelayMs = 500;\n\n// Function to call via timeout\nconst visit = () => {\n  const [cell,done] = visitor.next();\n  if (done) { \n    return; // All cells visited\n  } else {\n    // TODO: Do something with `cell`...\n  }\n\n  // Run again after the delay\n  setTimeout(visit, visitorDelayMs);\n}\nsetTimeout(visit, visitorDelayMs);\n```\n\nThe visitor can have an instance of [SetMutable](https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html) passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor\'s journey.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\nimport { setMutable } from "https://unpkg.com/ixfx/dist/collections.js"\n\nconst visited = setMutable();\nconst visitor = Grids.visitorRandom(shape, {x: 5, y: 5}, visited);\n\n...\nif (visited.has(cell)) {\n  // Do something if cell has been visited...\n}\n```\n\nIn the interactive demo above, this technique is used to colour cells differently depending on whether they\'ve been visited.\n\nTo get a cell _x_ steps away from a position, use [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor)\n\n## Iterating cells\n\nThe `cells` iterator is a simple alternative to the _visitor_ technique if you don\'t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.\n\n```js\nfor (let cell of Grids.cells(shape)) {\n  // do something with cell (defined as {x,y})\n}\n```\n\n## Offsets\n\n<grid-offset-element client:visible />\n\nYou can calculate the coordinates of each compass cardinal direction using `offsetCardinals`. It has the following signature:\n\n```js\noffsetCardinals(shape:Grid, origin:Cell, distance:number, boundsLogic:`unbounded` | `undefined`| `stop` | `wrap`): Neighbours\n```\n\n`distance` is how many cells away from origin you want to calculate.\n\n`boundsLogic` determines how coordinates should wrap in the grid. Allowed values are: \n*  `wrap`: coordinates wrap around the edges of grid to opposite edge\n*  `stop`: coordinates clamp to edge\n*  `undefined`: out-of-grid coordinates are returned as `undefined`\n*  `unbounded`: coordinates are returned without bounds checking\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst shape = { rows: 10, cols: 10 };\nconst origin = { x: 4, y: 4 };\nconst distance = 2;\nconst offsets = Grids.offsetCardinals(shape, origin, distance, `wrap`);\n\n// Returns: {\n//  n: {x,y}, ne: {x, y}, nw: {x,y}\n//  s: {x,y}, se: {x,y}, sw: {x,y}\n//  e: {x,y}, w: {x,y}\n//}\n\nconst cellAbove = offsets.n // eg. get cell `distance` to the north of `origin`\n```\n\n## Mapping to data\n\nGrid and cells don\'t store data. You can\'t stuff things into it as you would a spreadsheet cell. It is a _virtualised_ data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.\n\nTo link a cell to your own data, use its coordinates as a key into a collection like a Map\n\nLets say you want to associate colour with each cell:\n\n```js\n\n// 1. We want a function to create a key for a given cell\n// Function takes a cell and returns its coordinates as a string\n// eg: {x:10, y:5} => "10-5"\nconst key = (cell) => `${cell.x}-${cell.y}`;\n\n// 2. Create a map to store data\nconst store = new Map();\n\n// 3. Some test data...\nconst someData = { colour: `red` }\nconst someMoreData = { color: `pink`};\n\n// 4. Data can be associated using the map:\ndata.set(key({ x: 0, y: 0 }), someData);\n\n// 4. And then retrieved from the basis of a cell\n//    coordinate. Let\'s say we want the data for cell 0,0:\nconst cellData = data.get(key({ x: 0, y: 0 }));\n// cellData.colour, etc\n```\n\nAs a complete example, we can associate a random colour and number to every cell.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\nimport { Arrays } from "https://unpkg.com/ixfx/dist/collections.js"\n\nconst key = (cell) => `${cell.x}-${cell.y}`;\nconst store = new Map();\nconst shape = { rows: 10, cols: 10 };\nconst colours = [`bisque`, `cadetblue`,`cornflowerblue`, `coral`]\n\nfor (let cell of Grids.cells(shape)) {\n  store.set(key(cell), {\n    colour: Arrays.randomElement(colours), \n    karma: Math.random()});\n}\n\n// Fetch data associated with a given cell:\nconst val = store.get(key({x:5, y:5}));\n// {colour: \'...\', karma: 0.235}\n```\n\n<demo-element title="Associating data with cells" src="/geometry/grid-data/" />\n\n## Mapping to pixels\n\nAlthough the grid is not meant to be a literal visual grid, it can be used as such.\n\nTo map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n```\n\nDraw the grid by iterating over its cells:\n\n```js\nconst ctx = document.getElementById(`myCanvas`).getContext(`2d`);\nconst shape = { rows: 100, cols: 100, size: 5 };\n\nfor (const cell of Grids.cells(shape)) {\n  let rect = Grids.rectangleForCell(shape, cell);\n  ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n}\n```\n\nTo get the visual bounds for a given:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n\n// rectangleForCell(grid:Grid, cell:Cell): Rect\n// Returns { x, y, width, height } for cell at position 5,5\nconst rect = Grids.rectangleForCell(shape, { x: 5, y: 5 }); \n```\n\nOr to go from coordinate (eg. mouse pointer) to cell:\n\n```js\n// Convert pointer position to cell coordinate\n// cellAtPoint(grid:Grid, point:Point): Cell\nconst cell = Grids.cellAtPoint(shape, {evt.offsetX, evt.offsetY}); // Returns {x,y}\n```\n\n## Demos\n\n* [Grid DOM](https://clinth.github.io/ixfx-demos/geometry/grid-dom/): Generate DIVs based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom))\n* [Grid Canvas](https://clinth.github.io/ixfx-demos/geometry/grid-canvas/): Draw elements based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas))\n\n\n## Functions overview\n\n\n* [inside](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside): Returns _true_ if given cell is within grid dimensions\n* [getLine](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine): Returns all cells on a straight line between two cell coordinates\n\nEnumerating cells\n* [cells](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells): Iterate all cells\n* [rows](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows): Iterate all rows\n* [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor): Return cell _x_ steps away from a position using the provided visitor function\n* [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor): Step through cells in some way\n* [offset](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset): Returns cell some x,y offset away from start\n* [neighbours](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours): Return neighbours for a cell\n  \nVisual grids\n* [cellMiddle](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle): Return pixel coordinate for the middle of a cell\n* [rectangleForCell](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell): Get visual rectangle for cell', "html": '<script type="module" hoist>\nimport \'/src/components/geometry/GridEditor\';\n<\/script>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html">API Docs: Geometry.Grids module</a></p>\n<p>A <em>grid</em> is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an <em>x,y</em> location with <em>0,0</em> being the top-left corner.</p>\n<p>Example: This grid has four rows and three columns.</p>\n<div>\n  <table style="width:auto; border: 1px solid whitesmoke">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n<p>A grid can be useful if your data has grid-like spatial qualities. It\'s useful for being able to gather data that is \'nearby\' based on cell location, traversing space following different rules and so on.</p>\n<p>Although there is a natural affinity between the grid and pixel coordinates, the grid isn\'t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.</p>\n<h2 id="types">Types</h2>\n<p>There are two main types for working with the grid functions:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>\n  rows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  cols<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre>\n<p>In action, this looks like:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If a grid is going to be mapped to pixels (more on that below) it also need a <em>size</em> field.</p>\n<h2 id="visiting">Visiting</h2>\n<p>For a given starting cell, it\'s possible to <em>visit</em> all cells once and only once with movement following a spatial logic.</p>\n<grid-visitor-element client:visible />\n<p>Provided <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a> functions are: <code is:raw>visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,</code> and <code is:raw>visitorColumn</code>.</p>\n<p>The visitor can be used in a <code is:raw>for .. of</code> loop</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Start visitor at 5,5</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorDepth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Visited cell..</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Or for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Set up visitor once</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorBreadth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> visitorDelayMs <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Function to call via timeout</span>\n<span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>cell<span class="token punctuation">,</span>done<span class="token punctuation">]</span> <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// All cells visited</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// TODO: Do something with `cell`...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Run again after the delay</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The visitor can have an instance of <a href="https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html">SetMutable</a> passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor\'s journey.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> setMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token function">setMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorRandom</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something if cell has been visited...</span>\n<span class="token punctuation">}</span></code></pre>\n<p>In the interactive demo above, this technique is used to colour cells differently depending on whether they\'ve been visited.</p>\n<p>To get a cell <em>x</em> steps away from a position, use <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a></p>\n<h2 id="iterating-cells">Iterating cells</h2>\n<p>The <code is:raw>cells</code> iterator is a simple alternative to the <em>visitor</em> technique if you don\'t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with cell (defined as {x,y})</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="offsets">Offsets</h2>\n<grid-offset-element client:visible />\n<p>You can calculate the coordinates of each compass cardinal direction using <code is:raw>offsetCardinals</code>. It has the following signature:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token operator">:</span>Grid<span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span>Cell<span class="token punctuation">,</span> <span class="token literal-property property">distance</span><span class="token operator">:</span>number<span class="token punctuation">,</span> <span class="token literal-property property">boundsLogic</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">unbounded</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">undefined</span><span class="token template-punctuation string">`</span></span><span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stop</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Neighbours</code></pre>\n<p><code is:raw>distance</code> is how many cells away from origin you want to calculate.</p>\n<p><code is:raw>boundsLogic</code> determines how coordinates should wrap in the grid. Allowed values are:</p>\n<ul>\n<li><code is:raw>wrap</code>: coordinates wrap around the edges of grid to opposite edge</li>\n<li><code is:raw>stop</code>: coordinates clamp to edge</li>\n<li><code is:raw>undefined</code>: out-of-grid coordinates are returned as <code is:raw>undefined</code></li>\n<li><code is:raw>unbounded</code>: coordinates are returned without bounds checking</li>\n</ul>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> offsets <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns: {</span>\n<span class="token comment">//  n: {x,y}, ne: {x, y}, nw: {x,y}</span>\n<span class="token comment">//  s: {x,y}, se: {x,y}, sw: {x,y}</span>\n<span class="token comment">//  e: {x,y}, w: {x,y}</span>\n<span class="token comment">//}</span>\n\n<span class="token keyword">const</span> cellAbove <span class="token operator">=</span> offsets<span class="token punctuation">.</span>n <span class="token comment">// eg. get cell `distance` to the north of `origin`</span></code></pre>\n<h2 id="mapping-to-data">Mapping to data</h2>\n<p>Grid and cells don\'t store data. You can\'t stuff things into it as you would a spreadsheet cell. It is a <em>virtualised</em> data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.</p>\n<p>To link a cell to your own data, use its coordinates as a key into a collection like a Map</p>\n<p>Lets say you want to associate colour with each cell:</p>\n<pre class="language-js"><code is:raw class="language-js">\n<span class="token comment">// 1. We want a function to create a key for a given cell</span>\n<span class="token comment">// Function takes a cell and returns its coordinates as a string</span>\n<span class="token comment">// eg: {x:10, y:5} => "10-5"</span>\n<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. Create a map to store data</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3. Some test data...</span>\n<span class="token keyword">const</span> someData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> someMoreData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. Data can be associated using the map:</span>\ndata<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> someData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. And then retrieved from the basis of a cell</span>\n<span class="token comment">//    coordinate. Let\'s say we want the data for cell 0,0:</span>\n<span class="token keyword">const</span> cellData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// cellData.colour, etc</span></code></pre>\n<p>As a complete example, we can associate a random colour and number to every cell.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> colours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bisque</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cadetblue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cornflowerblue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coral</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">colour</span><span class="token operator">:</span> Arrays<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span>colours<span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token literal-property property">karma</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Fetch data associated with a given cell:</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {colour: \'...\', karma: 0.235}</span></code></pre>\n<demo-element title="Associating data with cells" src="/geometry/grid-data/" />\n<h2 id="mapping-to-pixels">Mapping to pixels</h2>\n<p>Although the grid is not meant to be a literal visual grid, it can be used as such.</p>\n<p>To map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Draw the grid by iterating over its cells:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">myCanvas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2d</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> cell<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>x<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>y<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To get the visual bounds for a given:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// rectangleForCell(grid:Grid, cell:Cell): Rect</span>\n<span class="token comment">// Returns { x, y, width, height } for cell at position 5,5</span>\n<span class="token keyword">const</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>Or to go from coordinate (eg. mouse pointer) to cell:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Convert pointer position to cell coordinate</span>\n<span class="token comment">// cellAtPoint(grid:Grid, point:Point): Cell</span>\n<span class="token keyword">const</span> cell <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">cellAtPoint</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span>evt<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> evt<span class="token punctuation">.</span>offsetY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre>\n<h2 id="demos">Demos</h2>\n<ul>\n<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-dom/">Grid DOM</a>: Generate DIVs based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom">source</a>)</li>\n<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-canvas/">Grid Canvas</a>: Draw elements based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas">source</a>)</li>\n</ul>\n<h2 id="functions-overview">Functions overview</h2>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside">inside</a>: Returns <em>true</em> if given cell is within grid dimensions</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine">getLine</a>: Returns all cells on a straight line between two cell coordinates</li>\n</ul>\n<p>Enumerating cells</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells">cells</a>: Iterate all cells</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows">rows</a>: Iterate all rows</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a>: Return cell <em>x</em> steps away from a position using the provided visitor function</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a>: Step through cells in some way</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset">offset</a>: Returns cell some x,y offset away from start</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours">neighbours</a>: Return neighbours for a cell</li>\n</ul>\n<p>Visual grids</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle">cellMiddle</a>: Return pixel coordinate for the middle of a cell</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell">rectangleForCell</a>: Get visual rectangle for cell</li>\n</ul>' };
const frontmatter = { "title": "Grid", "astro": { "headers": [{ "depth": 2, "slug": "types", "text": "Types" }, { "depth": 2, "slug": "visiting", "text": "Visiting" }, { "depth": 2, "slug": "iterating-cells", "text": "Iterating cells" }, { "depth": 2, "slug": "offsets", "text": "Offsets" }, { "depth": 2, "slug": "mapping-to-data", "text": "Mapping to data" }, { "depth": 2, "slug": "mapping-to-pixels", "text": "Mapping to pixels" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "functions-overview", "text": "Functions overview" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/geometry/GridEditor\';\n<\/script>\n\n[API Docs: Geometry.Grids module](https://clinth.github.io/ixfx/modules/Geometry.Grids.html)\n\nA _grid_ is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an _x,y_ location with _0,0_ being the top-left corner.\n\nExample: This grid has four rows and three columns.\n<div>\n  <table style="width:auto; border: 1px solid whitesmoke">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n\nA grid can be useful if your data has grid-like spatial qualities. It\'s useful for being able to gather data that is \'nearby\' based on cell location, traversing space following different rules and so on.\n\nAlthough there is a natural affinity between the grid and pixel coordinates, the grid isn\'t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.\n\n## Types\n\nThere are two main types for working with the grid functions:\n\n```typescript\ntype Grid {\n  rows: number,\n  cols: number\n}\ntype Cell {\n  x: number,\n  y: number\n}\n```\n\nIn action, this looks like:\n```js\nconst shape = {rows: 10, cols: 10};\nconst cell = {x: 0, y: 0};\n```\n\nIf a grid is going to be mapped to pixels (more on that below) it also need a _size_ field.\n\n\n## Visiting\n\nFor a given starting cell, it\'s possible to _visit_ all cells once and only once with movement following a spatial logic.\n\n<grid-visitor-element client:visible />\n\nProvided [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor) functions are: `visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,` and `visitorColumn`.\n\nThe visitor can be used in a `for .. of` loop\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Start visitor at 5,5\nconst visitor = Grids.visitorDepth(shape, {x: 5, y: 5});\nfor (let cell of visitor) {\n  // Visited cell..\n}\n```\n\nOr for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Set up visitor once\nconst visitor = Grids.visitorBreadth(shape, {x: 5, y: 5});\nconst visitorDelayMs = 500;\n\n// Function to call via timeout\nconst visit = () => {\n  const [cell,done] = visitor.next();\n  if (done) { \n    return; // All cells visited\n  } else {\n    // TODO: Do something with `cell`...\n  }\n\n  // Run again after the delay\n  setTimeout(visit, visitorDelayMs);\n}\nsetTimeout(visit, visitorDelayMs);\n```\n\nThe visitor can have an instance of [SetMutable](https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html) passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor\'s journey.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\nimport { setMutable } from "https://unpkg.com/ixfx/dist/collections.js"\n\nconst visited = setMutable();\nconst visitor = Grids.visitorRandom(shape, {x: 5, y: 5}, visited);\n\n...\nif (visited.has(cell)) {\n  // Do something if cell has been visited...\n}\n```\n\nIn the interactive demo above, this technique is used to colour cells differently depending on whether they\'ve been visited.\n\nTo get a cell _x_ steps away from a position, use [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor)\n\n## Iterating cells\n\nThe `cells` iterator is a simple alternative to the _visitor_ technique if you don\'t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.\n\n```js\nfor (let cell of Grids.cells(shape)) {\n  // do something with cell (defined as {x,y})\n}\n```\n\n## Offsets\n\n<grid-offset-element client:visible />\n\nYou can calculate the coordinates of each compass cardinal direction using `offsetCardinals`. It has the following signature:\n\n```js\noffsetCardinals(shape:Grid, origin:Cell, distance:number, boundsLogic:`unbounded` | `undefined`| `stop` | `wrap`): Neighbours\n```\n\n`distance` is how many cells away from origin you want to calculate.\n\n`boundsLogic` determines how coordinates should wrap in the grid. Allowed values are: \n*  `wrap`: coordinates wrap around the edges of grid to opposite edge\n*  `stop`: coordinates clamp to edge\n*  `undefined`: out-of-grid coordinates are returned as `undefined`\n*  `unbounded`: coordinates are returned without bounds checking\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst shape = { rows: 10, cols: 10 };\nconst origin = { x: 4, y: 4 };\nconst distance = 2;\nconst offsets = Grids.offsetCardinals(shape, origin, distance, `wrap`);\n\n// Returns: {\n//  n: {x,y}, ne: {x, y}, nw: {x,y}\n//  s: {x,y}, se: {x,y}, sw: {x,y}\n//  e: {x,y}, w: {x,y}\n//}\n\nconst cellAbove = offsets.n // eg. get cell `distance` to the north of `origin`\n```\n\n## Mapping to data\n\nGrid and cells don\'t store data. You can\'t stuff things into it as you would a spreadsheet cell. It is a _virtualised_ data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.\n\nTo link a cell to your own data, use its coordinates as a key into a collection like a Map\n\nLets say you want to associate colour with each cell:\n\n```js\n\n// 1. We want a function to create a key for a given cell\n// Function takes a cell and returns its coordinates as a string\n// eg: {x:10, y:5} => "10-5"\nconst key = (cell) => `${cell.x}-${cell.y}`;\n\n// 2. Create a map to store data\nconst store = new Map();\n\n// 3. Some test data...\nconst someData = { colour: `red` }\nconst someMoreData = { color: `pink`};\n\n// 4. Data can be associated using the map:\ndata.set(key({ x: 0, y: 0 }), someData);\n\n// 4. And then retrieved from the basis of a cell\n//    coordinate. Let\'s say we want the data for cell 0,0:\nconst cellData = data.get(key({ x: 0, y: 0 }));\n// cellData.colour, etc\n```\n\nAs a complete example, we can associate a random colour and number to every cell.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\nimport { Arrays } from "https://unpkg.com/ixfx/dist/collections.js"\n\nconst key = (cell) => `${cell.x}-${cell.y}`;\nconst store = new Map();\nconst shape = { rows: 10, cols: 10 };\nconst colours = [`bisque`, `cadetblue`,`cornflowerblue`, `coral`]\n\nfor (let cell of Grids.cells(shape)) {\n  store.set(key(cell), {\n    colour: Arrays.randomElement(colours), \n    karma: Math.random()});\n}\n\n// Fetch data associated with a given cell:\nconst val = store.get(key({x:5, y:5}));\n// {colour: \'...\', karma: 0.235}\n```\n\n<demo-element title="Associating data with cells" src="/geometry/grid-data/" />\n\n## Mapping to pixels\n\nAlthough the grid is not meant to be a literal visual grid, it can be used as such.\n\nTo map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n```\n\nDraw the grid by iterating over its cells:\n\n```js\nconst ctx = document.getElementById(`myCanvas`).getContext(`2d`);\nconst shape = { rows: 100, cols: 100, size: 5 };\n\nfor (const cell of Grids.cells(shape)) {\n  let rect = Grids.rectangleForCell(shape, cell);\n  ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n}\n```\n\nTo get the visual bounds for a given:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n\n// rectangleForCell(grid:Grid, cell:Cell): Rect\n// Returns { x, y, width, height } for cell at position 5,5\nconst rect = Grids.rectangleForCell(shape, { x: 5, y: 5 }); \n```\n\nOr to go from coordinate (eg. mouse pointer) to cell:\n\n```js\n// Convert pointer position to cell coordinate\n// cellAtPoint(grid:Grid, point:Point): Cell\nconst cell = Grids.cellAtPoint(shape, {evt.offsetX, evt.offsetY}); // Returns {x,y}\n```\n\n## Demos\n\n* [Grid DOM](https://clinth.github.io/ixfx-demos/geometry/grid-dom/): Generate DIVs based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom))\n* [Grid Canvas](https://clinth.github.io/ixfx-demos/geometry/grid-canvas/): Draw elements based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas))\n\n\n## Functions overview\n\n\n* [inside](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside): Returns _true_ if given cell is within grid dimensions\n* [getLine](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine): Returns all cells on a straight line between two cell coordinates\n\nEnumerating cells\n* [cells](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells): Iterate all cells\n* [rows](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows): Iterate all rows\n* [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor): Return cell _x_ steps away from a position using the provided visitor function\n* [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor): Step through cells in some way\n* [offset](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset): Returns cell some x,y offset away from start\n* [neighbours](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours): Return neighbours for a cell\n  \nVisual grids\n* [cellMiddle](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle): Return pixel coordinate for the middle of a cell\n* [rectangleForCell](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell): Get visual rectangle for cell', "html": '<script type="module" hoist>\nimport \'/src/components/geometry/GridEditor\';\n<\/script>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html">API Docs: Geometry.Grids module</a></p>\n<p>A <em>grid</em> is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an <em>x,y</em> location with <em>0,0</em> being the top-left corner.</p>\n<p>Example: This grid has four rows and three columns.</p>\n<div>\n  <table style="width:auto; border: 1px solid whitesmoke">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n<p>A grid can be useful if your data has grid-like spatial qualities. It\'s useful for being able to gather data that is \'nearby\' based on cell location, traversing space following different rules and so on.</p>\n<p>Although there is a natural affinity between the grid and pixel coordinates, the grid isn\'t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.</p>\n<h2 id="types">Types</h2>\n<p>There are two main types for working with the grid functions:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>\n  rows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  cols<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre>\n<p>In action, this looks like:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If a grid is going to be mapped to pixels (more on that below) it also need a <em>size</em> field.</p>\n<h2 id="visiting">Visiting</h2>\n<p>For a given starting cell, it\'s possible to <em>visit</em> all cells once and only once with movement following a spatial logic.</p>\n<grid-visitor-element client:visible />\n<p>Provided <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a> functions are: <code is:raw>visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,</code> and <code is:raw>visitorColumn</code>.</p>\n<p>The visitor can be used in a <code is:raw>for .. of</code> loop</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Start visitor at 5,5</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorDepth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Visited cell..</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Or for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Set up visitor once</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorBreadth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> visitorDelayMs <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Function to call via timeout</span>\n<span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>cell<span class="token punctuation">,</span>done<span class="token punctuation">]</span> <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// All cells visited</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// TODO: Do something with `cell`...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Run again after the delay</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The visitor can have an instance of <a href="https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html">SetMutable</a> passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor\'s journey.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> setMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token function">setMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorRandom</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something if cell has been visited...</span>\n<span class="token punctuation">}</span></code></pre>\n<p>In the interactive demo above, this technique is used to colour cells differently depending on whether they\'ve been visited.</p>\n<p>To get a cell <em>x</em> steps away from a position, use <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a></p>\n<h2 id="iterating-cells">Iterating cells</h2>\n<p>The <code is:raw>cells</code> iterator is a simple alternative to the <em>visitor</em> technique if you don\'t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with cell (defined as {x,y})</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="offsets">Offsets</h2>\n<grid-offset-element client:visible />\n<p>You can calculate the coordinates of each compass cardinal direction using <code is:raw>offsetCardinals</code>. It has the following signature:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token operator">:</span>Grid<span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span>Cell<span class="token punctuation">,</span> <span class="token literal-property property">distance</span><span class="token operator">:</span>number<span class="token punctuation">,</span> <span class="token literal-property property">boundsLogic</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">unbounded</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">undefined</span><span class="token template-punctuation string">`</span></span><span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stop</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Neighbours</code></pre>\n<p><code is:raw>distance</code> is how many cells away from origin you want to calculate.</p>\n<p><code is:raw>boundsLogic</code> determines how coordinates should wrap in the grid. Allowed values are:</p>\n<ul>\n<li><code is:raw>wrap</code>: coordinates wrap around the edges of grid to opposite edge</li>\n<li><code is:raw>stop</code>: coordinates clamp to edge</li>\n<li><code is:raw>undefined</code>: out-of-grid coordinates are returned as <code is:raw>undefined</code></li>\n<li><code is:raw>unbounded</code>: coordinates are returned without bounds checking</li>\n</ul>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> offsets <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns: {</span>\n<span class="token comment">//  n: {x,y}, ne: {x, y}, nw: {x,y}</span>\n<span class="token comment">//  s: {x,y}, se: {x,y}, sw: {x,y}</span>\n<span class="token comment">//  e: {x,y}, w: {x,y}</span>\n<span class="token comment">//}</span>\n\n<span class="token keyword">const</span> cellAbove <span class="token operator">=</span> offsets<span class="token punctuation">.</span>n <span class="token comment">// eg. get cell `distance` to the north of `origin`</span></code></pre>\n<h2 id="mapping-to-data">Mapping to data</h2>\n<p>Grid and cells don\'t store data. You can\'t stuff things into it as you would a spreadsheet cell. It is a <em>virtualised</em> data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.</p>\n<p>To link a cell to your own data, use its coordinates as a key into a collection like a Map</p>\n<p>Lets say you want to associate colour with each cell:</p>\n<pre class="language-js"><code is:raw class="language-js">\n<span class="token comment">// 1. We want a function to create a key for a given cell</span>\n<span class="token comment">// Function takes a cell and returns its coordinates as a string</span>\n<span class="token comment">// eg: {x:10, y:5} => "10-5"</span>\n<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. Create a map to store data</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3. Some test data...</span>\n<span class="token keyword">const</span> someData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> someMoreData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. Data can be associated using the map:</span>\ndata<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> someData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. And then retrieved from the basis of a cell</span>\n<span class="token comment">//    coordinate. Let\'s say we want the data for cell 0,0:</span>\n<span class="token keyword">const</span> cellData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// cellData.colour, etc</span></code></pre>\n<p>As a complete example, we can associate a random colour and number to every cell.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> colours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bisque</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cadetblue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cornflowerblue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coral</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">colour</span><span class="token operator">:</span> Arrays<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span>colours<span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token literal-property property">karma</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Fetch data associated with a given cell:</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {colour: \'...\', karma: 0.235}</span></code></pre>\n<demo-element title="Associating data with cells" src="/geometry/grid-data/" />\n<h2 id="mapping-to-pixels">Mapping to pixels</h2>\n<p>Although the grid is not meant to be a literal visual grid, it can be used as such.</p>\n<p>To map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Draw the grid by iterating over its cells:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">myCanvas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2d</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> cell<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>x<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>y<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To get the visual bounds for a given:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// rectangleForCell(grid:Grid, cell:Cell): Rect</span>\n<span class="token comment">// Returns { x, y, width, height } for cell at position 5,5</span>\n<span class="token keyword">const</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>Or to go from coordinate (eg. mouse pointer) to cell:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Convert pointer position to cell coordinate</span>\n<span class="token comment">// cellAtPoint(grid:Grid, point:Point): Cell</span>\n<span class="token keyword">const</span> cell <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">cellAtPoint</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span>evt<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> evt<span class="token punctuation">.</span>offsetY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre>\n<h2 id="demos">Demos</h2>\n<ul>\n<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-dom/">Grid DOM</a>: Generate DIVs based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom">source</a>)</li>\n<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-canvas/">Grid Canvas</a>: Draw elements based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas">source</a>)</li>\n</ul>\n<h2 id="functions-overview">Functions overview</h2>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside">inside</a>: Returns <em>true</em> if given cell is within grid dimensions</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine">getLine</a>: Returns all cells on a straight line between two cell coordinates</li>\n</ul>\n<p>Enumerating cells</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells">cells</a>: Iterate all cells</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows">rows</a>: Iterate all rows</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a>: Return cell <em>x</em> steps away from a position using the provided visitor function</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a>: Step through cells in some way</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset">offset</a>: Returns cell some x,y offset away from start</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours">neighbours</a>: Return neighbours for a cell</li>\n</ul>\n<p>Visual grids</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle">cellMiddle</a>: Return pixel coordinate for the middle of a cell</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell">rectangleForCell</a>: Get visual rectangle for cell</li>\n</ul>' } };
const $$metadata = createMetadata("/src/pages/types/geometry/grid.md", { modules: [{ module: $$module1, specifier: "../../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "/src/components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "/src/components/geometry/GridVisitorElement", assert: {} }, { module: $$module4, specifier: "/src/components/geometry/GridOffsetElement", assert: {} }], hydratedComponents: ["grid-offset-element", "grid-visitor-element"], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set(["visible"]), hoisted: [{ type: "inline", value: `
import '/src/components/geometry/GridEditor';
` }] });
const $$Astro = createAstro("/src/pages/types/geometry/grid.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Grid = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Grid;
  const $$content = { "title": "Grid", "astro": { "headers": [{ "depth": 2, "slug": "types", "text": "Types" }, { "depth": 2, "slug": "visiting", "text": "Visiting" }, { "depth": 2, "slug": "iterating-cells", "text": "Iterating cells" }, { "depth": 2, "slug": "offsets", "text": "Offsets" }, { "depth": 2, "slug": "mapping-to-data", "text": "Mapping to data" }, { "depth": 2, "slug": "mapping-to-pixels", "text": "Mapping to pixels" }, { "depth": 2, "slug": "demos", "text": "Demos" }, { "depth": 2, "slug": "functions-overview", "text": "Functions overview" }], "source": '\n<script type="module" hoist>\nimport \'/src/components/geometry/GridEditor\';\n<\/script>\n\n[API Docs: Geometry.Grids module](https://clinth.github.io/ixfx/modules/Geometry.Grids.html)\n\nA _grid_ is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an _x,y_ location with _0,0_ being the top-left corner.\n\nExample: This grid has four rows and three columns.\n<div>\n  <table style="width:auto; border: 1px solid whitesmoke">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n\nA grid can be useful if your data has grid-like spatial qualities. It\'s useful for being able to gather data that is \'nearby\' based on cell location, traversing space following different rules and so on.\n\nAlthough there is a natural affinity between the grid and pixel coordinates, the grid isn\'t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.\n\n## Types\n\nThere are two main types for working with the grid functions:\n\n```typescript\ntype Grid {\n  rows: number,\n  cols: number\n}\ntype Cell {\n  x: number,\n  y: number\n}\n```\n\nIn action, this looks like:\n```js\nconst shape = {rows: 10, cols: 10};\nconst cell = {x: 0, y: 0};\n```\n\nIf a grid is going to be mapped to pixels (more on that below) it also need a _size_ field.\n\n\n## Visiting\n\nFor a given starting cell, it\'s possible to _visit_ all cells once and only once with movement following a spatial logic.\n\n<grid-visitor-element client:visible />\n\nProvided [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor) functions are: `visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,` and `visitorColumn`.\n\nThe visitor can be used in a `for .. of` loop\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Start visitor at 5,5\nconst visitor = Grids.visitorDepth(shape, {x: 5, y: 5});\nfor (let cell of visitor) {\n  // Visited cell..\n}\n```\n\nOr for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\n// Set up visitor once\nconst visitor = Grids.visitorBreadth(shape, {x: 5, y: 5});\nconst visitorDelayMs = 500;\n\n// Function to call via timeout\nconst visit = () => {\n  const [cell,done] = visitor.next();\n  if (done) { \n    return; // All cells visited\n  } else {\n    // TODO: Do something with `cell`...\n  }\n\n  // Run again after the delay\n  setTimeout(visit, visitorDelayMs);\n}\nsetTimeout(visit, visitorDelayMs);\n```\n\nThe visitor can have an instance of [SetMutable](https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html) passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor\'s journey.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\nimport { setMutable } from "https://unpkg.com/ixfx/dist/collections.js"\n\nconst visited = setMutable();\nconst visitor = Grids.visitorRandom(shape, {x: 5, y: 5}, visited);\n\n...\nif (visited.has(cell)) {\n  // Do something if cell has been visited...\n}\n```\n\nIn the interactive demo above, this technique is used to colour cells differently depending on whether they\'ve been visited.\n\nTo get a cell _x_ steps away from a position, use [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor)\n\n## Iterating cells\n\nThe `cells` iterator is a simple alternative to the _visitor_ technique if you don\'t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.\n\n```js\nfor (let cell of Grids.cells(shape)) {\n  // do something with cell (defined as {x,y})\n}\n```\n\n## Offsets\n\n<grid-offset-element client:visible />\n\nYou can calculate the coordinates of each compass cardinal direction using `offsetCardinals`. It has the following signature:\n\n```js\noffsetCardinals(shape:Grid, origin:Cell, distance:number, boundsLogic:`unbounded` | `undefined`| `stop` | `wrap`): Neighbours\n```\n\n`distance` is how many cells away from origin you want to calculate.\n\n`boundsLogic` determines how coordinates should wrap in the grid. Allowed values are: \n*  `wrap`: coordinates wrap around the edges of grid to opposite edge\n*  `stop`: coordinates clamp to edge\n*  `undefined`: out-of-grid coordinates are returned as `undefined`\n*  `unbounded`: coordinates are returned without bounds checking\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\n\nconst shape = { rows: 10, cols: 10 };\nconst origin = { x: 4, y: 4 };\nconst distance = 2;\nconst offsets = Grids.offsetCardinals(shape, origin, distance, `wrap`);\n\n// Returns: {\n//  n: {x,y}, ne: {x, y}, nw: {x,y}\n//  s: {x,y}, se: {x,y}, sw: {x,y}\n//  e: {x,y}, w: {x,y}\n//}\n\nconst cellAbove = offsets.n // eg. get cell `distance` to the north of `origin`\n```\n\n## Mapping to data\n\nGrid and cells don\'t store data. You can\'t stuff things into it as you would a spreadsheet cell. It is a _virtualised_ data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.\n\nTo link a cell to your own data, use its coordinates as a key into a collection like a Map\n\nLets say you want to associate colour with each cell:\n\n```js\n\n// 1. We want a function to create a key for a given cell\n// Function takes a cell and returns its coordinates as a string\n// eg: {x:10, y:5} => "10-5"\nconst key = (cell) => `${cell.x}-${cell.y}`;\n\n// 2. Create a map to store data\nconst store = new Map();\n\n// 3. Some test data...\nconst someData = { colour: `red` }\nconst someMoreData = { color: `pink`};\n\n// 4. Data can be associated using the map:\ndata.set(key({ x: 0, y: 0 }), someData);\n\n// 4. And then retrieved from the basis of a cell\n//    coordinate. Let\'s say we want the data for cell 0,0:\nconst cellData = data.get(key({ x: 0, y: 0 }));\n// cellData.colour, etc\n```\n\nAs a complete example, we can associate a random colour and number to every cell.\n\n```js\nimport { Grids } from "https://unpkg.com/ixfx/dist/geometry.js"\nimport { Arrays } from "https://unpkg.com/ixfx/dist/collections.js"\n\nconst key = (cell) => `${cell.x}-${cell.y}`;\nconst store = new Map();\nconst shape = { rows: 10, cols: 10 };\nconst colours = [`bisque`, `cadetblue`,`cornflowerblue`, `coral`]\n\nfor (let cell of Grids.cells(shape)) {\n  store.set(key(cell), {\n    colour: Arrays.randomElement(colours), \n    karma: Math.random()});\n}\n\n// Fetch data associated with a given cell:\nconst val = store.get(key({x:5, y:5}));\n// {colour: \'...\', karma: 0.235}\n```\n\n<demo-element title="Associating data with cells" src="/geometry/grid-data/" />\n\n## Mapping to pixels\n\nAlthough the grid is not meant to be a literal visual grid, it can be used as such.\n\nTo map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n```\n\nDraw the grid by iterating over its cells:\n\n```js\nconst ctx = document.getElementById(`myCanvas`).getContext(`2d`);\nconst shape = { rows: 100, cols: 100, size: 5 };\n\nfor (const cell of Grids.cells(shape)) {\n  let rect = Grids.rectangleForCell(shape, cell);\n  ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n}\n```\n\nTo get the visual bounds for a given:\n\n```js\nconst shape = { rows: 100, cols: 100, size: 5 };\n\n// rectangleForCell(grid:Grid, cell:Cell): Rect\n// Returns { x, y, width, height } for cell at position 5,5\nconst rect = Grids.rectangleForCell(shape, { x: 5, y: 5 }); \n```\n\nOr to go from coordinate (eg. mouse pointer) to cell:\n\n```js\n// Convert pointer position to cell coordinate\n// cellAtPoint(grid:Grid, point:Point): Cell\nconst cell = Grids.cellAtPoint(shape, {evt.offsetX, evt.offsetY}); // Returns {x,y}\n```\n\n## Demos\n\n* [Grid DOM](https://clinth.github.io/ixfx-demos/geometry/grid-dom/): Generate DIVs based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom))\n* [Grid Canvas](https://clinth.github.io/ixfx-demos/geometry/grid-canvas/): Draw elements based on grid cells ([source](https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas))\n\n\n## Functions overview\n\n\n* [inside](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside): Returns _true_ if given cell is within grid dimensions\n* [getLine](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine): Returns all cells on a straight line between two cell coordinates\n\nEnumerating cells\n* [cells](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells): Iterate all cells\n* [rows](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows): Iterate all rows\n* [visitFor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor): Return cell _x_ steps away from a position using the provided visitor function\n* [visitor](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor): Step through cells in some way\n* [offset](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset): Returns cell some x,y offset away from start\n* [neighbours](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours): Return neighbours for a cell\n  \nVisual grids\n* [cellMiddle](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle): Return pixel coordinate for the middle of a cell\n* [rectangleForCell](https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell): Get visual rectangle for cell', "html": '<script type="module" hoist>\nimport \'/src/components/geometry/GridEditor\';\n<\/script>\n<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html">API Docs: Geometry.Grids module</a></p>\n<p>A <em>grid</em> is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an <em>x,y</em> location with <em>0,0</em> being the top-left corner.</p>\n<p>Example: This grid has four rows and three columns.</p>\n<div>\n  <table style="width:auto; border: 1px solid whitesmoke">\n  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>\n  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>\n  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>\n  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>\n  </table>\n</div>\n<p>A grid can be useful if your data has grid-like spatial qualities. It\'s useful for being able to gather data that is \'nearby\' based on cell location, traversing space following different rules and so on.</p>\n<p>Although there is a natural affinity between the grid and pixel coordinates, the grid isn\'t specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.</p>\n<h2 id="types">Types</h2>\n<p>There are two main types for working with the grid functions:</p>\n<pre class="language-typescript"><code is:raw class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>\n  rows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  cols<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>\n  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  y<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre>\n<p>In action, this looks like:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>If a grid is going to be mapped to pixels (more on that below) it also need a <em>size</em> field.</p>\n<h2 id="visiting">Visiting</h2>\n<p>For a given starting cell, it\'s possible to <em>visit</em> all cells once and only once with movement following a spatial logic.</p>\n<grid-visitor-element client:visible />\n<p>Provided <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a> functions are: <code is:raw>visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,</code> and <code is:raw>visitorColumn</code>.</p>\n<p>The visitor can be used in a <code is:raw>for .. of</code> loop</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Start visitor at 5,5</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorDepth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Visited cell..</span>\n<span class="token punctuation">}</span></code></pre>\n<p>Or for more flexibility, you can manually progress the visitor using `.next. In the below example, each step through the grid takes 500ms.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token comment">// Set up visitor once</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorBreadth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> visitorDelayMs <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Function to call via timeout</span>\n<span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>cell<span class="token punctuation">,</span>done<span class="token punctuation">]</span> <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// All cells visited</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// TODO: Do something with `cell`...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Run again after the delay</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>The visitor can have an instance of <a href="https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html">SetMutable</a> passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor\'s journey.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> setMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token function">setMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorRandom</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something if cell has been visited...</span>\n<span class="token punctuation">}</span></code></pre>\n<p>In the interactive demo above, this technique is used to colour cells differently depending on whether they\'ve been visited.</p>\n<p>To get a cell <em>x</em> steps away from a position, use <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a></p>\n<h2 id="iterating-cells">Iterating cells</h2>\n<p>The <code is:raw>cells</code> iterator is a simple alternative to the <em>visitor</em> technique if you don\'t care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with cell (defined as {x,y})</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="offsets">Offsets</h2>\n<grid-offset-element client:visible />\n<p>You can calculate the coordinates of each compass cardinal direction using <code is:raw>offsetCardinals</code>. It has the following signature:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token operator">:</span>Grid<span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span>Cell<span class="token punctuation">,</span> <span class="token literal-property property">distance</span><span class="token operator">:</span>number<span class="token punctuation">,</span> <span class="token literal-property property">boundsLogic</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">unbounded</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">undefined</span><span class="token template-punctuation string">`</span></span><span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stop</span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Neighbours</code></pre>\n<p><code is:raw>distance</code> is how many cells away from origin you want to calculate.</p>\n<p><code is:raw>boundsLogic</code> determines how coordinates should wrap in the grid. Allowed values are:</p>\n<ul>\n<li><code is:raw>wrap</code>: coordinates wrap around the edges of grid to opposite edge</li>\n<li><code is:raw>stop</code>: coordinates clamp to edge</li>\n<li><code is:raw>undefined</code>: out-of-grid coordinates are returned as <code is:raw>undefined</code></li>\n<li><code is:raw>unbounded</code>: coordinates are returned without bounds checking</li>\n</ul>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> offsets <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wrap</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Returns: {</span>\n<span class="token comment">//  n: {x,y}, ne: {x, y}, nw: {x,y}</span>\n<span class="token comment">//  s: {x,y}, se: {x,y}, sw: {x,y}</span>\n<span class="token comment">//  e: {x,y}, w: {x,y}</span>\n<span class="token comment">//}</span>\n\n<span class="token keyword">const</span> cellAbove <span class="token operator">=</span> offsets<span class="token punctuation">.</span>n <span class="token comment">// eg. get cell `distance` to the north of `origin`</span></code></pre>\n<h2 id="mapping-to-data">Mapping to data</h2>\n<p>Grid and cells don\'t store data. You can\'t stuff things into it as you would a spreadsheet cell. It is a <em>virtualised</em> data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.</p>\n<p>To link a cell to your own data, use its coordinates as a key into a collection like a Map</p>\n<p>Lets say you want to associate colour with each cell:</p>\n<pre class="language-js"><code is:raw class="language-js">\n<span class="token comment">// 1. We want a function to create a key for a given cell</span>\n<span class="token comment">// Function takes a cell and returns its coordinates as a string</span>\n<span class="token comment">// eg: {x:10, y:5} => "10-5"</span>\n<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. Create a map to store data</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3. Some test data...</span>\n<span class="token keyword">const</span> someData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">red</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> someMoreData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">pink</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. Data can be associated using the map:</span>\ndata<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> someData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4. And then retrieved from the basis of a cell</span>\n<span class="token comment">//    coordinate. Let\'s say we want the data for cell 0,0:</span>\n<span class="token keyword">const</span> cellData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// cellData.colour, etc</span></code></pre>\n<p>As a complete example, we can associate a random colour and number to every cell.</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> colours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bisque</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cadetblue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cornflowerblue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">coral</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">colour</span><span class="token operator">:</span> Arrays<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span>colours<span class="token punctuation">)</span><span class="token punctuation">,</span> \n    <span class="token literal-property property">karma</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Fetch data associated with a given cell:</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// {colour: \'...\', karma: 0.235}</span></code></pre>\n<demo-element title="Associating data with cells" src="/geometry/grid-data/" />\n<h2 id="mapping-to-pixels">Mapping to pixels</h2>\n<p>Although the grid is not meant to be a literal visual grid, it can be used as such.</p>\n<p>To map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Draw the grid by iterating over its cells:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">myCanvas</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">2d</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> cell<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>x<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>y<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To get the visual bounds for a given:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// rectangleForCell(grid:Grid, cell:Cell): Rect</span>\n<span class="token comment">// Returns { x, y, width, height } for cell at position 5,5</span>\n<span class="token keyword">const</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>\n<p>Or to go from coordinate (eg. mouse pointer) to cell:</p>\n<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Convert pointer position to cell coordinate</span>\n<span class="token comment">// cellAtPoint(grid:Grid, point:Point): Cell</span>\n<span class="token keyword">const</span> cell <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">cellAtPoint</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span>evt<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> evt<span class="token punctuation">.</span>offsetY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre>\n<h2 id="demos">Demos</h2>\n<ul>\n<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-dom/">Grid DOM</a>: Generate DIVs based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom">source</a>)</li>\n<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-canvas/">Grid Canvas</a>: Draw elements based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas">source</a>)</li>\n</ul>\n<h2 id="functions-overview">Functions overview</h2>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside">inside</a>: Returns <em>true</em> if given cell is within grid dimensions</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine">getLine</a>: Returns all cells on a straight line between two cell coordinates</li>\n</ul>\n<p>Enumerating cells</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells">cells</a>: Iterate all cells</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows">rows</a>: Iterate all rows</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a>: Return cell <em>x</em> steps away from a position using the provided visitor function</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a>: Step through cells in some way</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset">offset</a>: Returns cell some x,y offset away from start</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours">neighbours</a>: Return neighbours for a cell</li>\n</ul>\n<p>Visual grids</p>\n<ul>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle">cellMiddle</a>: Return pixel coordinate for the middle of a cell</li>\n<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell">rectangleForCell</a>: Get visual rectangle for cell</li>\n</ul>' } };
  const SCRIPTS = [
    { props: { "type": "module", "hoist": true }, children: `import '/src/components/geometry/GridEditor';` }
  ];
  for (const SCRIPT of SCRIPTS)
    $$result.scripts.add(SCRIPT);
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<p><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html">API Docs: Geometry.Grids module</a></p><p>A <em>grid</em> is a rectangular area divided by rows and columns into cells of equal size. A bit like a table or spreadsheet. Each cell has an <em>x,y</em> location with <em>0,0</em> being the top-left corner.</p><p>Example: This grid has four rows and three columns.</p><div>
  <table style="width:auto; border: 1px solid whitesmoke">
  <tr><td>0,0</td><td>0,1</td><td>2,0</td></tr>
  <tr><td>0,1</td><td>1,1</td><td>2,1</td></tr>
  <tr><td>0,2</td><td>1,2</td><td>2,2</td></tr>
  <tr><td>0,3</td><td>1,3</td><td>2,3</td></tr>
  </table>
</div><p>A grid can be useful if your data has grid-like spatial qualities. It's useful for being able to gather data that is 'nearby' based on cell location, traversing space following different rules and so on.</p><p>Although there is a natural affinity between the grid and pixel coordinates, the grid isn't specifically tied to pixels. It could be used, for example, to keep track of a game world, where the map is logically divided into cells.</p><h2 id="types">Types</h2><p>There are two main types for working with the grid functions:</p><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>
  rows<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  cols<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span></code></pre><p>In action, this looks like:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cell <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>If a grid is going to be mapped to pixels (more on that below) it also need a <em>size</em> field.</p><h2 id="visiting">Visiting</h2><p>For a given starting cell, it's possible to <em>visit</em> all cells once and only once with movement following a spatial logic.</p>${renderComponent($$result, "grid-visitor-element", "grid-visitor-element", { "client:visible": true, "client:component-hydration": "visible", "client:component-path": $$metadata.getPath("grid-visitor-element"), "client:component-export": $$metadata.getExport("grid-visitor-element") })}<p>Provided <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a> functions are: <code>visitorDepth, visitorBreadth, visitorRandom, visitorContiguous, visitorRow,</code> and <code>visitorColumn</code>.</p><p>The visitor can be used in a <code>for .. of</code> loop</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token comment">// Start visitor at 5,5</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorDepth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Visited cell..</span>
<span class="token punctuation">}</span></code></pre><p>Or for more flexibility, you can manually progress the visitor using \`.next. In the below example, each step through the grid takes 500ms.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token comment">// Set up visitor once</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorBreadth</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> visitorDelayMs <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>

<span class="token comment">// Function to call via timeout</span>
<span class="token keyword">const</span> <span class="token function-variable function">visit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>cell<span class="token punctuation">,</span>done<span class="token punctuation">]</span> <span class="token operator">=</span> visitor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// All cells visited</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// TODO: Do something with \`cell\`...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Run again after the delay</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visitorDelayMs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>The visitor can have an instance of <a href="https://clinth.github.io/ixfx/interfaces/Collections.SetMutable.html">SetMutable</a> passed in to track what cells have been visited. This is useful if you want to check the status of cells during the visitor's journey.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setMutable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>

<span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token function">setMutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> visitor <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">visitorRandom</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something if cell has been visited...</span>
<span class="token punctuation">}</span></code></pre><p>In the interactive demo above, this technique is used to colour cells differently depending on whether they've been visited.</p><p>To get a cell <em>x</em> steps away from a position, use <a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a></p><h2 id="iterating-cells">Iterating cells</h2><p>The <code>cells</code> iterator is a simple alternative to the <em>visitor</em> technique if you don't care about how the grid is traversed. It has a lower overhead than the visitor because it does not need to keep track of every cell it has visited.</p><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with cell (defined as {x,y})</span>
<span class="token punctuation">}</span></code></pre><h2 id="offsets">Offsets</h2>${renderComponent($$result, "grid-offset-element", "grid-offset-element", { "client:visible": true, "client:component-hydration": "visible", "client:component-path": $$metadata.getPath("grid-offset-element"), "client:component-export": $$metadata.getExport("grid-offset-element") })}<p>You can calculate the coordinates of each compass cardinal direction using <code>offsetCardinals</code>. It has the following signature:</p><pre class="language-js"><code class="language-js"><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token operator">:</span>Grid<span class="token punctuation">,</span> <span class="token literal-property property">origin</span><span class="token operator">:</span>Cell<span class="token punctuation">,</span> <span class="token literal-property property">distance</span><span class="token operator">:</span>number<span class="token punctuation">,</span> <span class="token literal-property property">boundsLogic</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">unbounded</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">undefined</span><span class="token template-punctuation string">\`</span></span><span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">stop</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wrap</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Neighbours</code></pre><p><code>distance</code> is how many cells away from origin you want to calculate.</p><p><code>boundsLogic</code> determines how coordinates should wrap in the grid. Allowed values are:</p><ul>
<li><code>wrap</code>: coordinates wrap around the edges of grid to opposite edge</li>
<li><code>stop</code>: coordinates clamp to edge</li>
<li><code>undefined</code>: out-of-grid coordinates are returned as <code>undefined</code></li>
<li><code>unbounded</code>: coordinates are returned without bounds checking</li>
</ul><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>

<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> offsets <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">offsetCardinals</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> distance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wrap</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Returns: {</span>
<span class="token comment">//  n: {x,y}, ne: {x, y}, nw: {x,y}</span>
<span class="token comment">//  s: {x,y}, se: {x,y}, sw: {x,y}</span>
<span class="token comment">//  e: {x,y}, w: {x,y}</span>
<span class="token comment">//}</span>

<span class="token keyword">const</span> cellAbove <span class="token operator">=</span> offsets<span class="token punctuation">.</span>n <span class="token comment">// eg. get cell \`distance\` to the north of \`origin\`</span></code></pre><h2 id="mapping-to-data">Mapping to data</h2><p>Grid and cells don't store data. You can't stuff things into it as you would a spreadsheet cell. It is a <em>virtualised</em> data structure in that it gives the appearance of traversing a structure, but it is only created on-demand.</p><p>To link a cell to your own data, use its coordinates as a key into a collection like a Map</p><p>Lets say you want to associate colour with each cell:</p><pre class="language-js"><code class="language-js">
<span class="token comment">// 1. We want a function to create a key for a given cell</span>
<span class="token comment">// Function takes a cell and returns its coordinates as a string</span>
<span class="token comment">// eg: {x:10, y:5} => "10-5"</span>
<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// 2. Create a map to store data</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. Some test data...</span>
<span class="token keyword">const</span> someData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">colour</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">red</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> someMoreData <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">pink</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 4. Data can be associated using the map:</span>
data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> someData<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. And then retrieved from the basis of a cell</span>
<span class="token comment">//    coordinate. Let's say we want the data for cell 0,0:</span>
<span class="token keyword">const</span> cellData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// cellData.colour, etc</span></code></pre><p>As a complete example, we can associate a random colour and number to every cell.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Grids <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/geometry.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Arrays <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/collections.js"</span>

<span class="token keyword">const</span> <span class="token function-variable function">key</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cell</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cell<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cell<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> colours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bisque</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">cadetblue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">cornflowerblue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">coral</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">colour</span><span class="token operator">:</span> Arrays<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span>colours<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">karma</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Fetch data associated with a given cell:</span>
<span class="token keyword">const</span> val <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {colour: '...', karma: 0.235}</span></code></pre>${renderComponent($$result, "demo-element", "demo-element", { "title": "Associating data with cells", "src": "/geometry/grid-data/" })}<h2 id="mapping-to-pixels">Mapping to pixels</h2><p>Although the grid is not meant to be a literal visual grid, it can be used as such.</p><p>To map a grid to pixel coordinates, the cell size (assumed pixels) needs to be provided:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>Draw the grid by iterating over its cells:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">myCanvas</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">2d</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cell <span class="token keyword">of</span> Grids<span class="token punctuation">.</span><span class="token function">cells</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>x<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>y<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>To get the visual bounds for a given:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">rows</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// rectangleForCell(grid:Grid, cell:Cell): Rect</span>
<span class="token comment">// Returns { x, y, width, height } for cell at position 5,5</span>
<span class="token keyword">const</span> rect <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">rectangleForCell</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>Or to go from coordinate (eg. mouse pointer) to cell:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Convert pointer position to cell coordinate</span>
<span class="token comment">// cellAtPoint(grid:Grid, point:Point): Cell</span>
<span class="token keyword">const</span> cell <span class="token operator">=</span> Grids<span class="token punctuation">.</span><span class="token function">cellAtPoint</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token punctuation">{</span>evt<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span> evt<span class="token punctuation">.</span>offsetY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Returns {x,y}</span></code></pre><h2 id="demos">Demos</h2><ul>
<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-dom/">Grid DOM</a>: Generate DIVs based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-dom">source</a>)</li>
<li><a href="https://clinth.github.io/ixfx-demos/geometry/grid-canvas/">Grid Canvas</a>: Draw elements based on grid cells (<a href="https://github.com/ClintH/ixfx-demos/tree/main/geometry/grid-canvas">source</a>)</li>
</ul><h2 id="functions-overview">Functions overview</h2><ul>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#inside">inside</a>: Returns <em>true</em> if given cell is within grid dimensions</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#getLine">getLine</a>: Returns all cells on a straight line between two cell coordinates</li>
</ul><p>Enumerating cells</p><ul>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cells">cells</a>: Iterate all cells</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rows">rows</a>: Iterate all rows</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitFor">visitFor</a>: Return cell <em>x</em> steps away from a position using the provided visitor function</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#visitor">visitor</a>: Step through cells in some way</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#offset">offset</a>: Returns cell some x,y offset away from start</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#neighbours">neighbours</a>: Return neighbours for a cell</li>
</ul><p>Visual grids</p><ul>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#cellMiddle">cellMiddle</a>: Return pixel coordinate for the middle of a cell</li>
<li><a href="https://clinth.github.io/ixfx/modules/Geometry.Grids.html#rectangleForCell">rectangleForCell</a>: Get visual rectangle for cell</li>
</ul>` })}`;
});

export { $$metadata, $$Grid as default, frontmatter, metadata };
