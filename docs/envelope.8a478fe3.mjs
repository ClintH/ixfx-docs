import { c as createMetadata, a as createAstro, b as createComponent, r as render, d as renderComponent } from './chunks/index.7bfc2e7e.mjs';
import { $ as $$module1, a as $$MainLayout } from './chunks/MainLayout.fae6d6b7.mjs';
import $$EnvelopePlay, { $ as $$module2 } from './EnvelopePlay.eca3cda0.mjs';
import { $ as $$module2$1 } from './chunks/DemoElement.a29296a2.mjs';
import { $ as $$module3 } from './chunks/FrameElement.483f5e82.mjs';
import 'shorthash';
import 'serialize-javascript';
import 'preact/hooks';
import 'preact/jsx-runtime';
import 'lit';
import 'lit/decorators.js';
import './chunks/styles.9b8f8965.mjs';

const metadata = { "headers": [{ "depth": 2, "slug": "anatomy-of-an-envelope", "text": "Anatomy of an envelope" }, { "depth": 2, "slug": "playground", "text": "Playground" }, { "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "envelope-options", "text": "Envelope options" }, { "depth": 2, "slug": "envelopes-in-action", "text": "Envelopes in action" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)\n</ul>\n</div>\n\nThe notion of an _envelope_ is borrowed from [sound synthesis](https://en.wikipedia.org/wiki/Envelope_(music)). They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.\n\nEnvelopes have some similarity with [easing functions](../easing/), as they describe a shape over time.\n\n## Anatomy of an envelope\n\nThe envelope consists of a series of stages, typically _attack, decay, sustain_ and _release_. \n* All stages have an associated _level_ or _amplitude_. Attack\'s level is also known as the _initial level_, and decay\'s level is also known as the _peak level_.\n* All stages except _sustain_ have a _duration_, how long they run for in milliseconds.\n\nWhen a trigger happens (eg. a synth key is pressed), the _attack_ stage runs for its specified duration, after which the _decay_ stage runs. The _sustain_ stage runs for as long as the trigger is held. At any point when the key is released, the _release_ stage runs.\n\nAs a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define. \n\nEnvelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.\n\nIn ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the _bend_ parameter.\n\n<envelope-editor id="envEditor" />\n\n## Playground\n\nThe playground uses the settings from the envelope editor above. You can _trigger_ the envelope, which will then run through its stages. Use _Trigger & Hold_ if you want to have the envelope hold at the sustain stage. _Release_ allows a held envelope to continue on to the release stage. \n\n<EnvelopePlay />\n\n## Usage\n\nDocs: [Adsr Type](https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html)\n\nInitialise an envelope with a few timing settings:\n\n```js\nimport { Envelopes } from "https://unpkg.com/ixfx/dist/modulation.js"\n\n// It\'s a good idea to use the defaultAdsrOpts(),\n// and then override what you want.\nconst opts = {\n  ...Envelopes.defaultAdsrOpts(),\n  attackDuration: 1000,\n  decayDuration: 200,\n  sustainDuration: 100\n};\nconst env = Envelopes.adsr(opts);\n```\n\nIn basic usage, you first _trigger_ the envelope, and then read its value over time, probably from some kind of loop.\n\n```js\nenv.trigger();\nsetInterval(() => {\n  console.log(env.value); // 0..1\n});\n```\n\nYou can \'trigger-and-hold\', making the envelope stay at the sustain stage until \'release\' is called:\n\n```js\n// Trigger and hold at \'sustain\' stage\nenv.trigger(true);\n// ...at some point later, allow it to continue to \'release\' stage.\nenv.release();\n```\n\nFetching the `value` property gives you the value of the envelope at that point in time. You can get additional data with `compute`:\n\n```js\n// Gets:\n// name of current stage (as a string), \n// scaled value (same as calling .value)\n// and raw value (0 -> 1 progress *within* a stage)\nconst [stage, scaled, raw] = env.compute();\n```\n\nYou can [see an envelope in action on fn-vis](https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=).\n\nOther functions:\n```js\n// Reset envelope\nenv.reset();\n\n// True if envelope is finished\nenv.isDone;\n```\n\nEnvelopes have events:\n\n```js\n// Envelope has changed stage\nenv.addEventListener(`change`, ev => {\n  console.log(`Old: ${evt.oldState} new: ${ev.newState}`);\n})\n\n// Envelope has finished\nenv.addEventListener(`complete`, () => {\n  console.log(`Done.`);\n})\n```\n\n### Envelope options\n\nEnvelope options are documented [here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html) and the [timing options here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html).\n\nThere are three \'bend\' options for setting a stage curve, `attackBend, decayBend` and `releaseBend`. Bend values run from -1 to 1. A value of `0` means there is no bend (ie. straight line), `-1` pulls curve down, and `1` pushes it outward. \n\neg: \n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  attackBend: -1,\n  decayBend: 0.5,\n  releaseBend: 0\n}\n```\n\nLevels can be set via `initialLevel`, `peakLevel`, `releaseLevel` and `sustainLevel`. These are presumed to be 0 to 1, inclusive. Typically the initial level is `0`, the peak `1` and release `0` (these are the defaults).\n\neg:\n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  initialLevel: 0,\n  peakLevel: 1,\n  releaseLevel: 0\n}\n```\n\n`retrigger` means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is _false_, envelope always start `0` (or whatever `initialLevel` is set to).\n\n```js\nconst opts = {\n  ...defaultAdrsOpts(),\n  retrigger: true\n}\n```\n\n## Envelopes in action\n\nHere is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.\n\n```js\nimport { Envelopes } from "https://unpkg.com/ixfx/dist/modulation.js"\nimport { continuously } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Initialise\nconst settings = Object.freeze({\n  env: Envelopes.adsr({\n    ...Envelopes.defaultAdsrOpts()\n  },\n  sampleRateMs: 100\n});\n\nlet state = {\n  envSampler\n};\n\n// Run a loop, reading from envelope until done\nstate.envSampler = continuously(() => {\n  const { env } = settings;\n  // If envelope is done, stop looping\n  if (env.isDone) return false; \n\n  // Read value from envelope, do something with it...\n  const v = env.value;\n}, settings.sampleRateMs);\n\n// Trigger envelope and start reading\nsettings.env.trigger();\nstate.envSampler.start();\n```\n\nOr perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a `retrigger()` function that cancels the sampler, triggers the envelope and starts the sampler again\n\n```js\nconst retrigger = () => {\n  const { env } = settings;\n  const { envSampler } = state;\n\n  envSampler.cancel();\n  env.trigger();\n  envSampler.start();\n};\n\ndocument.getElementById(`someButton`).addEventListener(`click`, retrigger);\n```\n\n\nIn the demo below, `pointerdown` or `keydown` events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.\n\nReleasing the pointer or key calls the envelope\'s `release` function.\n\nThis envelope has `retrigger` disabled, so pressing again while it\'s decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).\n\n<frame-element title="Retrigger disabled" src="https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" />', "html": `<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>
<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)
</ul>
</div>
<p>The notion of an <em>envelope</em> is borrowed from <a href="https://en.wikipedia.org/wiki/Envelope_(music)">sound synthesis</a>. They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.</p>
<p>Envelopes have some similarity with <a href="../easing/">easing functions</a>, as they describe a shape over time.</p>
<h2 id="anatomy-of-an-envelope">Anatomy of an envelope</h2>
<p>The envelope consists of a series of stages, typically <em>attack, decay, sustain</em> and <em>release</em>.</p>
<ul>
<li>All stages have an associated <em>level</em> or <em>amplitude</em>. Attack's level is also known as the <em>initial level</em>, and decay's level is also known as the <em>peak level</em>.</li>
<li>All stages except <em>sustain</em> have a <em>duration</em>, how long they run for in milliseconds.</li>
</ul>
<p>When a trigger happens (eg. a synth key is pressed), the <em>attack</em> stage runs for its specified duration, after which the <em>decay</em> stage runs. The <em>sustain</em> stage runs for as long as the trigger is held. At any point when the key is released, the <em>release</em> stage runs.</p>
<p>As a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define.</p>
<p>Envelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.</p>
<p>In ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the <em>bend</em> parameter.</p>
<envelope-editor id="envEditor" />
<h2 id="playground">Playground</h2>
<p>The playground uses the settings from the envelope editor above. You can <em>trigger</em> the envelope, which will then run through its stages. Use <em>Trigger &#x26; Hold</em> if you want to have the envelope hold at the sustain stage. <em>Release</em> allows a held envelope to continue on to the release stage.</p>
<EnvelopePlay />
<h2 id="usage">Usage</h2>
<p>Docs: <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr Type</a></p>
<p>Initialise an envelope with a few timing settings:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>

<span class="token comment">// It's a good idea to use the defaultAdsrOpts(),</span>
<span class="token comment">// and then override what you want.</span>
<span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackDuration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayDuration</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sustainDuration</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In basic usage, you first <em>trigger</em> the envelope, and then read its value over time, probably from some kind of loop.</p>
<pre class="language-js"><code is:raw class="language-js">env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0..1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>You can 'trigger-and-hold', making the envelope stay at the sustain stage until 'release' is called:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Trigger and hold at 'sustain' stage</span>
env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...at some point later, allow it to continue to 'release' stage.</span>
env<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Fetching the <code is:raw>value</code> property gives you the value of the envelope at that point in time. You can get additional data with <code is:raw>compute</code>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Gets:</span>
<span class="token comment">// name of current stage (as a string), </span>
<span class="token comment">// scaled value (same as calling .value)</span>
<span class="token comment">// and raw value (0 -> 1 progress *within* a stage)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>stage<span class="token punctuation">,</span> scaled<span class="token punctuation">,</span> raw<span class="token punctuation">]</span> <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>You can <a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">see an envelope in action on fn-vis</a>.</p>
<p>Other functions:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Reset envelope</span>
env<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// True if envelope is finished</span>
env<span class="token punctuation">.</span>isDone<span class="token punctuation">;</span></code></pre>
<p>Envelopes have events:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Envelope has changed stage</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">change</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Old: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>oldState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> new: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ev<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Envelope has finished</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">complete</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="envelope-options">Envelope options</h3>
<p>Envelope options are documented <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html">here</a> and the <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html">timing options here</a>.</p>
<p>There are three 'bend' options for setting a stage curve, <code is:raw>attackBend, decayBend</code> and <code is:raw>releaseBend</code>. Bend values run from -1 to 1. A value of <code is:raw>0</code> means there is no bend (ie. straight line), <code is:raw>-1</code> pulls curve down, and <code is:raw>1</code> pushes it outward.</p>
<p>eg:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackBend</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayBend</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseBend</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<p>Levels can be set via <code is:raw>initialLevel</code>, <code is:raw>peakLevel</code>, <code is:raw>releaseLevel</code> and <code is:raw>sustainLevel</code>. These are presumed to be 0 to 1, inclusive. Typically the initial level is <code is:raw>0</code>, the peak <code is:raw>1</code> and release <code is:raw>0</code> (these are the defaults).</p>
<p>eg:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">peakLevel</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseLevel</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<p><code is:raw>retrigger</code> means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is <em>false</em>, envelope always start <code is:raw>0</code> (or whatever <code is:raw>initialLevel</code> is set to).</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdrsOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">retrigger</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="envelopes-in-action">Envelopes in action</h2>
<p>Here is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> settings <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sampleRateMs</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  envSampler
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Run a loop, reading from envelope until done</span>
state<span class="token punctuation">.</span>envSampler <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token comment">// If envelope is done, stop looping</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 

  <span class="token comment">// Read value from envelope, do something with it...</span>
  <span class="token keyword">const</span> v <span class="token operator">=</span> env<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>sampleRateMs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger envelope and start reading</span>
settings<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
state<span class="token punctuation">.</span>envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Or perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a <code is:raw>retrigger()</code> function that cancels the sampler, triggers the envelope and starts the sampler again</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">retrigger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> envSampler <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>

  envSampler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">someButton</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> retrigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In the demo below, <code is:raw>pointerdown</code> or <code is:raw>keydown</code> events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.</p>
<p>Releasing the pointer or key calls the envelope's <code is:raw>release</code> function.</p>
<p>This envelope has <code is:raw>retrigger</code> disabled, so pressing again while it's decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).</p>
<frame-element title="Retrigger disabled" src="https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" />` };
const frontmatter = { "title": "Envelope", "astro": { "headers": [{ "depth": 2, "slug": "anatomy-of-an-envelope", "text": "Anatomy of an envelope" }, { "depth": 2, "slug": "playground", "text": "Playground" }, { "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "envelope-options", "text": "Envelope options" }, { "depth": 2, "slug": "envelopes-in-action", "text": "Envelopes in action" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)\n</ul>\n</div>\n\nThe notion of an _envelope_ is borrowed from [sound synthesis](https://en.wikipedia.org/wiki/Envelope_(music)). They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.\n\nEnvelopes have some similarity with [easing functions](../easing/), as they describe a shape over time.\n\n## Anatomy of an envelope\n\nThe envelope consists of a series of stages, typically _attack, decay, sustain_ and _release_. \n* All stages have an associated _level_ or _amplitude_. Attack\'s level is also known as the _initial level_, and decay\'s level is also known as the _peak level_.\n* All stages except _sustain_ have a _duration_, how long they run for in milliseconds.\n\nWhen a trigger happens (eg. a synth key is pressed), the _attack_ stage runs for its specified duration, after which the _decay_ stage runs. The _sustain_ stage runs for as long as the trigger is held. At any point when the key is released, the _release_ stage runs.\n\nAs a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define. \n\nEnvelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.\n\nIn ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the _bend_ parameter.\n\n<envelope-editor id="envEditor" />\n\n## Playground\n\nThe playground uses the settings from the envelope editor above. You can _trigger_ the envelope, which will then run through its stages. Use _Trigger & Hold_ if you want to have the envelope hold at the sustain stage. _Release_ allows a held envelope to continue on to the release stage. \n\n<EnvelopePlay />\n\n## Usage\n\nDocs: [Adsr Type](https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html)\n\nInitialise an envelope with a few timing settings:\n\n```js\nimport { Envelopes } from "https://unpkg.com/ixfx/dist/modulation.js"\n\n// It\'s a good idea to use the defaultAdsrOpts(),\n// and then override what you want.\nconst opts = {\n  ...Envelopes.defaultAdsrOpts(),\n  attackDuration: 1000,\n  decayDuration: 200,\n  sustainDuration: 100\n};\nconst env = Envelopes.adsr(opts);\n```\n\nIn basic usage, you first _trigger_ the envelope, and then read its value over time, probably from some kind of loop.\n\n```js\nenv.trigger();\nsetInterval(() => {\n  console.log(env.value); // 0..1\n});\n```\n\nYou can \'trigger-and-hold\', making the envelope stay at the sustain stage until \'release\' is called:\n\n```js\n// Trigger and hold at \'sustain\' stage\nenv.trigger(true);\n// ...at some point later, allow it to continue to \'release\' stage.\nenv.release();\n```\n\nFetching the `value` property gives you the value of the envelope at that point in time. You can get additional data with `compute`:\n\n```js\n// Gets:\n// name of current stage (as a string), \n// scaled value (same as calling .value)\n// and raw value (0 -> 1 progress *within* a stage)\nconst [stage, scaled, raw] = env.compute();\n```\n\nYou can [see an envelope in action on fn-vis](https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=).\n\nOther functions:\n```js\n// Reset envelope\nenv.reset();\n\n// True if envelope is finished\nenv.isDone;\n```\n\nEnvelopes have events:\n\n```js\n// Envelope has changed stage\nenv.addEventListener(`change`, ev => {\n  console.log(`Old: ${evt.oldState} new: ${ev.newState}`);\n})\n\n// Envelope has finished\nenv.addEventListener(`complete`, () => {\n  console.log(`Done.`);\n})\n```\n\n### Envelope options\n\nEnvelope options are documented [here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html) and the [timing options here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html).\n\nThere are three \'bend\' options for setting a stage curve, `attackBend, decayBend` and `releaseBend`. Bend values run from -1 to 1. A value of `0` means there is no bend (ie. straight line), `-1` pulls curve down, and `1` pushes it outward. \n\neg: \n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  attackBend: -1,\n  decayBend: 0.5,\n  releaseBend: 0\n}\n```\n\nLevels can be set via `initialLevel`, `peakLevel`, `releaseLevel` and `sustainLevel`. These are presumed to be 0 to 1, inclusive. Typically the initial level is `0`, the peak `1` and release `0` (these are the defaults).\n\neg:\n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  initialLevel: 0,\n  peakLevel: 1,\n  releaseLevel: 0\n}\n```\n\n`retrigger` means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is _false_, envelope always start `0` (or whatever `initialLevel` is set to).\n\n```js\nconst opts = {\n  ...defaultAdrsOpts(),\n  retrigger: true\n}\n```\n\n## Envelopes in action\n\nHere is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.\n\n```js\nimport { Envelopes } from "https://unpkg.com/ixfx/dist/modulation.js"\nimport { continuously } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Initialise\nconst settings = Object.freeze({\n  env: Envelopes.adsr({\n    ...Envelopes.defaultAdsrOpts()\n  },\n  sampleRateMs: 100\n});\n\nlet state = {\n  envSampler\n};\n\n// Run a loop, reading from envelope until done\nstate.envSampler = continuously(() => {\n  const { env } = settings;\n  // If envelope is done, stop looping\n  if (env.isDone) return false; \n\n  // Read value from envelope, do something with it...\n  const v = env.value;\n}, settings.sampleRateMs);\n\n// Trigger envelope and start reading\nsettings.env.trigger();\nstate.envSampler.start();\n```\n\nOr perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a `retrigger()` function that cancels the sampler, triggers the envelope and starts the sampler again\n\n```js\nconst retrigger = () => {\n  const { env } = settings;\n  const { envSampler } = state;\n\n  envSampler.cancel();\n  env.trigger();\n  envSampler.start();\n};\n\ndocument.getElementById(`someButton`).addEventListener(`click`, retrigger);\n```\n\n\nIn the demo below, `pointerdown` or `keydown` events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.\n\nReleasing the pointer or key calls the envelope\'s `release` function.\n\nThis envelope has `retrigger` disabled, so pressing again while it\'s decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).\n\n<frame-element title="Retrigger disabled" src="https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" />', "html": `<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>
<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)
</ul>
</div>
<p>The notion of an <em>envelope</em> is borrowed from <a href="https://en.wikipedia.org/wiki/Envelope_(music)">sound synthesis</a>. They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.</p>
<p>Envelopes have some similarity with <a href="../easing/">easing functions</a>, as they describe a shape over time.</p>
<h2 id="anatomy-of-an-envelope">Anatomy of an envelope</h2>
<p>The envelope consists of a series of stages, typically <em>attack, decay, sustain</em> and <em>release</em>.</p>
<ul>
<li>All stages have an associated <em>level</em> or <em>amplitude</em>. Attack's level is also known as the <em>initial level</em>, and decay's level is also known as the <em>peak level</em>.</li>
<li>All stages except <em>sustain</em> have a <em>duration</em>, how long they run for in milliseconds.</li>
</ul>
<p>When a trigger happens (eg. a synth key is pressed), the <em>attack</em> stage runs for its specified duration, after which the <em>decay</em> stage runs. The <em>sustain</em> stage runs for as long as the trigger is held. At any point when the key is released, the <em>release</em> stage runs.</p>
<p>As a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define.</p>
<p>Envelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.</p>
<p>In ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the <em>bend</em> parameter.</p>
<envelope-editor id="envEditor" />
<h2 id="playground">Playground</h2>
<p>The playground uses the settings from the envelope editor above. You can <em>trigger</em> the envelope, which will then run through its stages. Use <em>Trigger &#x26; Hold</em> if you want to have the envelope hold at the sustain stage. <em>Release</em> allows a held envelope to continue on to the release stage.</p>
<EnvelopePlay />
<h2 id="usage">Usage</h2>
<p>Docs: <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr Type</a></p>
<p>Initialise an envelope with a few timing settings:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>

<span class="token comment">// It's a good idea to use the defaultAdsrOpts(),</span>
<span class="token comment">// and then override what you want.</span>
<span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackDuration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayDuration</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sustainDuration</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In basic usage, you first <em>trigger</em> the envelope, and then read its value over time, probably from some kind of loop.</p>
<pre class="language-js"><code is:raw class="language-js">env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0..1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>You can 'trigger-and-hold', making the envelope stay at the sustain stage until 'release' is called:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Trigger and hold at 'sustain' stage</span>
env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...at some point later, allow it to continue to 'release' stage.</span>
env<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Fetching the <code is:raw>value</code> property gives you the value of the envelope at that point in time. You can get additional data with <code is:raw>compute</code>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Gets:</span>
<span class="token comment">// name of current stage (as a string), </span>
<span class="token comment">// scaled value (same as calling .value)</span>
<span class="token comment">// and raw value (0 -> 1 progress *within* a stage)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>stage<span class="token punctuation">,</span> scaled<span class="token punctuation">,</span> raw<span class="token punctuation">]</span> <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>You can <a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">see an envelope in action on fn-vis</a>.</p>
<p>Other functions:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Reset envelope</span>
env<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// True if envelope is finished</span>
env<span class="token punctuation">.</span>isDone<span class="token punctuation">;</span></code></pre>
<p>Envelopes have events:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Envelope has changed stage</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">change</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Old: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>oldState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> new: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ev<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Envelope has finished</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">complete</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="envelope-options">Envelope options</h3>
<p>Envelope options are documented <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html">here</a> and the <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html">timing options here</a>.</p>
<p>There are three 'bend' options for setting a stage curve, <code is:raw>attackBend, decayBend</code> and <code is:raw>releaseBend</code>. Bend values run from -1 to 1. A value of <code is:raw>0</code> means there is no bend (ie. straight line), <code is:raw>-1</code> pulls curve down, and <code is:raw>1</code> pushes it outward.</p>
<p>eg:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackBend</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayBend</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseBend</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<p>Levels can be set via <code is:raw>initialLevel</code>, <code is:raw>peakLevel</code>, <code is:raw>releaseLevel</code> and <code is:raw>sustainLevel</code>. These are presumed to be 0 to 1, inclusive. Typically the initial level is <code is:raw>0</code>, the peak <code is:raw>1</code> and release <code is:raw>0</code> (these are the defaults).</p>
<p>eg:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">peakLevel</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseLevel</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<p><code is:raw>retrigger</code> means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is <em>false</em>, envelope always start <code is:raw>0</code> (or whatever <code is:raw>initialLevel</code> is set to).</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdrsOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">retrigger</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="envelopes-in-action">Envelopes in action</h2>
<p>Here is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> settings <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sampleRateMs</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  envSampler
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Run a loop, reading from envelope until done</span>
state<span class="token punctuation">.</span>envSampler <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token comment">// If envelope is done, stop looping</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 

  <span class="token comment">// Read value from envelope, do something with it...</span>
  <span class="token keyword">const</span> v <span class="token operator">=</span> env<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>sampleRateMs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger envelope and start reading</span>
settings<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
state<span class="token punctuation">.</span>envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Or perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a <code is:raw>retrigger()</code> function that cancels the sampler, triggers the envelope and starts the sampler again</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">retrigger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> envSampler <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>

  envSampler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">someButton</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> retrigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In the demo below, <code is:raw>pointerdown</code> or <code is:raw>keydown</code> events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.</p>
<p>Releasing the pointer or key calls the envelope's <code is:raw>release</code> function.</p>
<p>This envelope has <code is:raw>retrigger</code> disabled, so pressing again while it's decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).</p>
<frame-element title="Retrigger disabled" src="https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" />` } };
const $$metadata = createMetadata("/src/pages/modulation/envelope.md", { modules: [{ module: $$module1, specifier: "../../layouts/MainLayout.astro", assert: {} }, { module: $$module2, specifier: "./EnvelopePlay.astro", assert: {} }, { module: $$module2$1, specifier: "../../components/DemoElement.ts", assert: {} }, { module: $$module3, specifier: "../../components/FrameElement.ts", assert: {} }], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: /* @__PURE__ */ new Set([]), hoisted: [] });
const $$Astro = createAstro("/src/pages/modulation/envelope.md", "https://clinth.github.io/ixfx-docs/", "file:///Users/af4766/repos/ixfx-docs/");
const $$Envelope = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Envelope;
  const $$content = { "title": "Envelope", "astro": { "headers": [{ "depth": 2, "slug": "anatomy-of-an-envelope", "text": "Anatomy of an envelope" }, { "depth": 2, "slug": "playground", "text": "Playground" }, { "depth": 2, "slug": "usage", "text": "Usage" }, { "depth": 3, "slug": "envelope-options", "text": "Envelope options" }, { "depth": 2, "slug": "envelopes-in-action", "text": "Envelopes in action" }], "source": '\n<div class="tip">\n<ul>\n<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>\n<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>\n<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>\n<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)\n</ul>\n</div>\n\nThe notion of an _envelope_ is borrowed from [sound synthesis](https://en.wikipedia.org/wiki/Envelope_(music)). They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.\n\nEnvelopes have some similarity with [easing functions](../easing/), as they describe a shape over time.\n\n## Anatomy of an envelope\n\nThe envelope consists of a series of stages, typically _attack, decay, sustain_ and _release_. \n* All stages have an associated _level_ or _amplitude_. Attack\'s level is also known as the _initial level_, and decay\'s level is also known as the _peak level_.\n* All stages except _sustain_ have a _duration_, how long they run for in milliseconds.\n\nWhen a trigger happens (eg. a synth key is pressed), the _attack_ stage runs for its specified duration, after which the _decay_ stage runs. The _sustain_ stage runs for as long as the trigger is held. At any point when the key is released, the _release_ stage runs.\n\nAs a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define. \n\nEnvelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.\n\nIn ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the _bend_ parameter.\n\n<envelope-editor id="envEditor" />\n\n## Playground\n\nThe playground uses the settings from the envelope editor above. You can _trigger_ the envelope, which will then run through its stages. Use _Trigger & Hold_ if you want to have the envelope hold at the sustain stage. _Release_ allows a held envelope to continue on to the release stage. \n\n<EnvelopePlay />\n\n## Usage\n\nDocs: [Adsr Type](https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html)\n\nInitialise an envelope with a few timing settings:\n\n```js\nimport { Envelopes } from "https://unpkg.com/ixfx/dist/modulation.js"\n\n// It\'s a good idea to use the defaultAdsrOpts(),\n// and then override what you want.\nconst opts = {\n  ...Envelopes.defaultAdsrOpts(),\n  attackDuration: 1000,\n  decayDuration: 200,\n  sustainDuration: 100\n};\nconst env = Envelopes.adsr(opts);\n```\n\nIn basic usage, you first _trigger_ the envelope, and then read its value over time, probably from some kind of loop.\n\n```js\nenv.trigger();\nsetInterval(() => {\n  console.log(env.value); // 0..1\n});\n```\n\nYou can \'trigger-and-hold\', making the envelope stay at the sustain stage until \'release\' is called:\n\n```js\n// Trigger and hold at \'sustain\' stage\nenv.trigger(true);\n// ...at some point later, allow it to continue to \'release\' stage.\nenv.release();\n```\n\nFetching the `value` property gives you the value of the envelope at that point in time. You can get additional data with `compute`:\n\n```js\n// Gets:\n// name of current stage (as a string), \n// scaled value (same as calling .value)\n// and raw value (0 -> 1 progress *within* a stage)\nconst [stage, scaled, raw] = env.compute();\n```\n\nYou can [see an envelope in action on fn-vis](https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=).\n\nOther functions:\n```js\n// Reset envelope\nenv.reset();\n\n// True if envelope is finished\nenv.isDone;\n```\n\nEnvelopes have events:\n\n```js\n// Envelope has changed stage\nenv.addEventListener(`change`, ev => {\n  console.log(`Old: ${evt.oldState} new: ${ev.newState}`);\n})\n\n// Envelope has finished\nenv.addEventListener(`complete`, () => {\n  console.log(`Done.`);\n})\n```\n\n### Envelope options\n\nEnvelope options are documented [here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html) and the [timing options here](https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html).\n\nThere are three \'bend\' options for setting a stage curve, `attackBend, decayBend` and `releaseBend`. Bend values run from -1 to 1. A value of `0` means there is no bend (ie. straight line), `-1` pulls curve down, and `1` pushes it outward. \n\neg: \n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  attackBend: -1,\n  decayBend: 0.5,\n  releaseBend: 0\n}\n```\n\nLevels can be set via `initialLevel`, `peakLevel`, `releaseLevel` and `sustainLevel`. These are presumed to be 0 to 1, inclusive. Typically the initial level is `0`, the peak `1` and release `0` (these are the defaults).\n\neg:\n```js\nconst opts = {\n  ...defaultAdsrOpts(),\n  initialLevel: 0,\n  peakLevel: 1,\n  releaseLevel: 0\n}\n```\n\n`retrigger` means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is _false_, envelope always start `0` (or whatever `initialLevel` is set to).\n\n```js\nconst opts = {\n  ...defaultAdrsOpts(),\n  retrigger: true\n}\n```\n\n## Envelopes in action\n\nHere is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.\n\n```js\nimport { Envelopes } from "https://unpkg.com/ixfx/dist/modulation.js"\nimport { continuously } from "https://unpkg.com/ixfx/dist/flow.js"\n\n// Initialise\nconst settings = Object.freeze({\n  env: Envelopes.adsr({\n    ...Envelopes.defaultAdsrOpts()\n  },\n  sampleRateMs: 100\n});\n\nlet state = {\n  envSampler\n};\n\n// Run a loop, reading from envelope until done\nstate.envSampler = continuously(() => {\n  const { env } = settings;\n  // If envelope is done, stop looping\n  if (env.isDone) return false; \n\n  // Read value from envelope, do something with it...\n  const v = env.value;\n}, settings.sampleRateMs);\n\n// Trigger envelope and start reading\nsettings.env.trigger();\nstate.envSampler.start();\n```\n\nOr perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a `retrigger()` function that cancels the sampler, triggers the envelope and starts the sampler again\n\n```js\nconst retrigger = () => {\n  const { env } = settings;\n  const { envSampler } = state;\n\n  envSampler.cancel();\n  env.trigger();\n  envSampler.start();\n};\n\ndocument.getElementById(`someButton`).addEventListener(`click`, retrigger);\n```\n\n\nIn the demo below, `pointerdown` or `keydown` events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.\n\nReleasing the pointer or key calls the envelope\'s `release` function.\n\nThis envelope has `retrigger` disabled, so pressing again while it\'s decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).\n\n<frame-element title="Retrigger disabled" src="https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" />', "html": `<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>
<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)
</ul>
</div>
<p>The notion of an <em>envelope</em> is borrowed from <a href="https://en.wikipedia.org/wiki/Envelope_(music)">sound synthesis</a>. They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.</p>
<p>Envelopes have some similarity with <a href="../easing/">easing functions</a>, as they describe a shape over time.</p>
<h2 id="anatomy-of-an-envelope">Anatomy of an envelope</h2>
<p>The envelope consists of a series of stages, typically <em>attack, decay, sustain</em> and <em>release</em>.</p>
<ul>
<li>All stages have an associated <em>level</em> or <em>amplitude</em>. Attack's level is also known as the <em>initial level</em>, and decay's level is also known as the <em>peak level</em>.</li>
<li>All stages except <em>sustain</em> have a <em>duration</em>, how long they run for in milliseconds.</li>
</ul>
<p>When a trigger happens (eg. a synth key is pressed), the <em>attack</em> stage runs for its specified duration, after which the <em>decay</em> stage runs. The <em>sustain</em> stage runs for as long as the trigger is held. At any point when the key is released, the <em>release</em> stage runs.</p>
<p>As a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define.</p>
<p>Envelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.</p>
<p>In ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the <em>bend</em> parameter.</p>
<envelope-editor id="envEditor" />
<h2 id="playground">Playground</h2>
<p>The playground uses the settings from the envelope editor above. You can <em>trigger</em> the envelope, which will then run through its stages. Use <em>Trigger &#x26; Hold</em> if you want to have the envelope hold at the sustain stage. <em>Release</em> allows a held envelope to continue on to the release stage.</p>
<EnvelopePlay />
<h2 id="usage">Usage</h2>
<p>Docs: <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr Type</a></p>
<p>Initialise an envelope with a few timing settings:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>

<span class="token comment">// It's a good idea to use the defaultAdsrOpts(),</span>
<span class="token comment">// and then override what you want.</span>
<span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackDuration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayDuration</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sustainDuration</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In basic usage, you first <em>trigger</em> the envelope, and then read its value over time, probably from some kind of loop.</p>
<pre class="language-js"><code is:raw class="language-js">env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0..1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>You can 'trigger-and-hold', making the envelope stay at the sustain stage until 'release' is called:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Trigger and hold at 'sustain' stage</span>
env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...at some point later, allow it to continue to 'release' stage.</span>
env<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Fetching the <code is:raw>value</code> property gives you the value of the envelope at that point in time. You can get additional data with <code is:raw>compute</code>:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Gets:</span>
<span class="token comment">// name of current stage (as a string), </span>
<span class="token comment">// scaled value (same as calling .value)</span>
<span class="token comment">// and raw value (0 -> 1 progress *within* a stage)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>stage<span class="token punctuation">,</span> scaled<span class="token punctuation">,</span> raw<span class="token punctuation">]</span> <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>You can <a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">see an envelope in action on fn-vis</a>.</p>
<p>Other functions:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Reset envelope</span>
env<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// True if envelope is finished</span>
env<span class="token punctuation">.</span>isDone<span class="token punctuation">;</span></code></pre>
<p>Envelopes have events:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token comment">// Envelope has changed stage</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">change</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Old: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>oldState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> new: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ev<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Envelope has finished</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">complete</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="envelope-options">Envelope options</h3>
<p>Envelope options are documented <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html">here</a> and the <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html">timing options here</a>.</p>
<p>There are three 'bend' options for setting a stage curve, <code is:raw>attackBend, decayBend</code> and <code is:raw>releaseBend</code>. Bend values run from -1 to 1. A value of <code is:raw>0</code> means there is no bend (ie. straight line), <code is:raw>-1</code> pulls curve down, and <code is:raw>1</code> pushes it outward.</p>
<p>eg:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackBend</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayBend</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseBend</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<p>Levels can be set via <code is:raw>initialLevel</code>, <code is:raw>peakLevel</code>, <code is:raw>releaseLevel</code> and <code is:raw>sustainLevel</code>. These are presumed to be 0 to 1, inclusive. Typically the initial level is <code is:raw>0</code>, the peak <code is:raw>1</code> and release <code is:raw>0</code> (these are the defaults).</p>
<p>eg:</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">peakLevel</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseLevel</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre>
<p><code is:raw>retrigger</code> means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is <em>false</em>, envelope always start <code is:raw>0</code> (or whatever <code is:raw>initialLevel</code> is set to).</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdrsOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">retrigger</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="envelopes-in-action">Envelopes in action</h2>
<p>Here is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> settings <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sampleRateMs</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  envSampler
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Run a loop, reading from envelope until done</span>
state<span class="token punctuation">.</span>envSampler <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token comment">// If envelope is done, stop looping</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 

  <span class="token comment">// Read value from envelope, do something with it...</span>
  <span class="token keyword">const</span> v <span class="token operator">=</span> env<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>sampleRateMs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger envelope and start reading</span>
settings<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
state<span class="token punctuation">.</span>envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Or perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a <code is:raw>retrigger()</code> function that cancels the sampler, triggers the envelope and starts the sampler again</p>
<pre class="language-js"><code is:raw class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">retrigger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> envSampler <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>

  envSampler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">someButton</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> retrigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>In the demo below, <code is:raw>pointerdown</code> or <code is:raw>keydown</code> events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.</p>
<p>Releasing the pointer or key calls the envelope's <code is:raw>release</code> function.</p>
<p>This envelope has <code is:raw>retrigger</code> disabled, so pressing again while it's decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).</p>
<frame-element title="Retrigger disabled" src="https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" />` } };
  return render`${renderComponent($$result, "Layout", $$MainLayout, { "content": $$content }, { "default": () => render`<div class="tip">
<ul>
<li>API Reference <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr type</a></li>
<li><a href="https://clinth.github.io/ixfx-demos/modulation/">Demos</a></li>
<li><a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">fn-vis</a>: envelope example</li>
<li><a href="https://github.com/ClintH/ixfx-demos/tree/main/modulation/env-starter">Starter skeleton</a> (<a href="https://clinth.github.io/ixfx-demos/modulation/env-starter/">view online</a>)
</li></ul>
</div><p>The notion of an <em>envelope</em> is borrowed from <a href="https://en.wikipedia.org/wiki/Envelope_(music)">sound synthesis</a>. They are useful for modulating a value after an initial trigger, with simple means for describing the shape of the modulation.</p><p>Envelopes have some similarity with <a href="../easing/">easing functions</a>, as they describe a shape over time.</p><h2 id="anatomy-of-an-envelope">Anatomy of an envelope</h2><p>The envelope consists of a series of stages, typically <em>attack, decay, sustain</em> and <em>release</em>.</p><ul>
<li>All stages have an associated <em>level</em> or <em>amplitude</em>. Attack's level is also known as the <em>initial level</em>, and decay's level is also known as the <em>peak level</em>.</li>
<li>All stages except <em>sustain</em> have a <em>duration</em>, how long they run for in milliseconds.</li>
</ul><p>When a trigger happens (eg. a synth key is pressed), the <em>attack</em> stage runs for its specified duration, after which the <em>decay</em> stage runs. The <em>sustain</em> stage runs for as long as the trigger is held. At any point when the key is released, the <em>release</em> stage runs.</p><p>As a stage progresses, it is essentially interpolating from its start to end point. Internally, each stage is modelled as running from 0 to 1, but this is scaled according to the levels you define.</p><p>Envelopes can also loop through the attack, decay and release stages whilst being triggered. In this case, the sustain stage is skipped.</p><p>In ixfx, interpolation for each stage happens using a curve, allowing for more expressive progressions with the <em>bend</em> parameter.</p>${renderComponent($$result, "envelope-editor", "envelope-editor", { "id": "envEditor" })}<h2 id="playground">Playground</h2><p>The playground uses the settings from the envelope editor above. You can <em>trigger</em> the envelope, which will then run through its stages. Use <em>Trigger &#x26; Hold</em> if you want to have the envelope hold at the sustain stage. <em>Release</em> allows a held envelope to continue on to the release stage.</p>${renderComponent($$result, "EnvelopePlay", $$EnvelopePlay, {})}<h2 id="usage">Usage</h2><p>Docs: <a href="https://clinth.github.io/ixfx/interfaces/Modulation.Envelopes.Adsr.html">Adsr Type</a></p><p>Initialise an envelope with a few timing settings:</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>

<span class="token comment">// It's a good idea to use the defaultAdsrOpts(),</span>
<span class="token comment">// and then override what you want.</span>
<span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackDuration</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayDuration</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sustainDuration</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> env <span class="token operator">=</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In basic usage, you first <em>trigger</em> the envelope, and then read its value over time, probably from some kind of loop.</p><pre class="language-js"><code class="language-js">env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0..1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>You can 'trigger-and-hold', making the envelope stay at the sustain stage until 'release' is called:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Trigger and hold at 'sustain' stage</span>
env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...at some point later, allow it to continue to 'release' stage.</span>
env<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Fetching the <code>value</code> property gives you the value of the envelope at that point in time. You can get additional data with <code>compute</code>:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Gets:</span>
<span class="token comment">// name of current stage (as a string), </span>
<span class="token comment">// scaled value (same as calling .value)</span>
<span class="token comment">// and raw value (0 -> 1 progress *within* a stage)</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>stage<span class="token punctuation">,</span> scaled<span class="token punctuation">,</span> raw<span class="token punctuation">]</span> <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>You can <a href="https://fn-vis.pages.dev/1/#H4sIAEYo9mQAA12SzU6FMBCFX2XSFSQIV5cYTYy6MMb4AHIXzWXAapk2ncFoCO9uC/fHKwuSmTnnzNemb5MaXIuqVt46UXMxKdLDsS6UISNGW1VPc5GkrOroaZElai7UvC2WIrW3UWEG74LABI/0hdZ5ZJihC26ARr2LeK6raiT/2Zc7N1Tmu/uuWsNSxeTRajGOyg9uVEMN7RyxAO5zXn0aMtzA1BBAWZbHDWWLnR6t3LUcooyzvEgSLaJ3nw9jWGJruNxsNsugxZ3+OfWv9m0eWbShM0ND83ViqSq4D6gFEw9oakGC6XsMYOQPaaQ7UemIk/3Dz2NabJV7d5bqJf0Z0QPrwVtD/XphByuMJMZC6wgbYpQnEgxf2mZZDje363WsBGl/So/DEWMygOkgIZSGH6I9X8WwiE4IEPcfsMHwsqmAgHvFaonlGAg6bXmNntPPO5YXZNY9LnuWzelQc77a0qfiozp7ZNtfP20aDnYCAAA=">see an envelope in action on fn-vis</a>.</p><p>Other functions:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Reset envelope</span>
env<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// True if envelope is finished</span>
env<span class="token punctuation">.</span>isDone<span class="token punctuation">;</span></code></pre><p>Envelopes have events:</p><pre class="language-js"><code class="language-js"><span class="token comment">// Envelope has changed stage</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">change</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Old: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>oldState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> new: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ev<span class="token punctuation">.</span>newState<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Envelope has finished</span>
env<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">complete</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="envelope-options">Envelope options</h3><p>Envelope options are documented <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrOpts.html">here</a> and the <a href="https://clinth.github.io/ixfx/types/Modulation.Envelopes.AdsrTimingOpts.html">timing options here</a>.</p><p>There are three 'bend' options for setting a stage curve, <code>attackBend, decayBend</code> and <code>releaseBend</code>. Bend values run from -1 to 1. A value of <code>0</code> means there is no bend (ie. straight line), <code>-1</code> pulls curve down, and <code>1</code> pushes it outward.</p><p>eg:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">attackBend</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">decayBend</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseBend</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre><p>Levels can be set via <code>initialLevel</code>, <code>peakLevel</code>, <code>releaseLevel</code> and <code>sustainLevel</code>. These are presumed to be 0 to 1, inclusive. Typically the initial level is <code>0</code>, the peak <code>1</code> and release <code>0</code> (these are the defaults).</p><p>eg:</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">initialLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">peakLevel</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">releaseLevel</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span></code></pre><p><code>retrigger</code> means a retriggered envelope continues its value from what it is at the point of retrigger. By default, as retrigger is <em>false</em>, envelope always start <code>0</code> (or whatever <code>initialLevel</code> is set to).</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">defaultAdrsOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">retrigger</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre><h2 id="envelopes-in-action">Envelopes in action</h2><p>Here is a pattern to request the envelope value over time. After setting up the envelope, we use a loop to read the value at a given period.</p><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Envelopes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/modulation.js"</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> continuously <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/ixfx/dist/flow.js"</span>

<span class="token comment">// Initialise</span>
<span class="token keyword">const</span> settings <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> Envelopes<span class="token punctuation">.</span><span class="token function">adsr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>Envelopes<span class="token punctuation">.</span><span class="token function">defaultAdsrOpts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sampleRateMs</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  envSampler
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Run a loop, reading from envelope until done</span>
state<span class="token punctuation">.</span>envSampler <span class="token operator">=</span> <span class="token function">continuously</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token comment">// If envelope is done, stop looping</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 

  <span class="token comment">// Read value from envelope, do something with it...</span>
  <span class="token keyword">const</span> v <span class="token operator">=</span> env<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> settings<span class="token punctuation">.</span>sampleRateMs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Trigger envelope and start reading</span>
settings<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
state<span class="token punctuation">.</span>envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or perhaps you want to start an envelope when an event happens, such as a button clicked. We can introduce a <code>retrigger()</code> function that cancels the sampler, triggers the envelope and starts the sampler again</p><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">retrigger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> env <span class="token punctuation">}</span> <span class="token operator">=</span> settings<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> envSampler <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>

  envSampler<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  env<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  envSampler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">someButton</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">click</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> retrigger<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>In the demo below, <code>pointerdown</code> or <code>keydown</code> events triggers and holds the envelope. On the left side you see a typical binary on/off response, on the right you see a gradual effect of the envelope.</p><p>Releasing the pointer or key calls the envelope's <code>release</code> function.</p><p>This envelope has <code>retrigger</code> disabled, so pressing again while it's decaying will continue the envelope at that level, rather than resetting to zero (default behaviour).</p>${renderComponent($$result, "frame-element", "frame-element", { "title": "Retrigger disabled", "src": "https://clinth.github.io/ixfx-play/modulation/envelopes/decay/" })}` })}`;
});

export { $$metadata, $$Envelope as default, frontmatter, metadata };
